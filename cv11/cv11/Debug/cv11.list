
cv11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ccc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08007e78  08007e78  00017e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082a8  080082a8  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  080082a8  080082a8  000182a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082b0  080082b0  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082b0  080082b0  000182b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082b4  080082b4  000182b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  080082b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020120  2**0
                  CONTENTS
 10 .bss          00000a6c  20000120  20000120  00020120  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b8c  20000b8c  00020120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010447  00000000  00000000  00020193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b9a  00000000  00000000  000305da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d08  00000000  00000000  00033178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009de  00000000  00000000  00033e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000252cb  00000000  00000000  0003485e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011560  00000000  00000000  00059b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5a50  00000000  00000000  0006b089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000036c4  00000000  00000000  00140adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  001441a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000120 	.word	0x20000120
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007e60 	.word	0x08007e60

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000124 	.word	0x20000124
 80001e8:	08007e60 	.word	0x08007e60

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <step>:
/* USER CODE BEGIN 0 */

float x,y;
float pi = 3.14159;

static void step(int8_t x, int8_t y, uint8_t btn) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
 80004f2:	460b      	mov	r3, r1
 80004f4:	71bb      	strb	r3, [r7, #6]
 80004f6:	4613      	mov	r3, r2
 80004f8:	717b      	strb	r3, [r7, #5]
	uint8_t buff[4];
	if(btn){
 80004fa:	797b      	ldrb	r3, [r7, #5]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d002      	beq.n	8000506 <step+0x1e>
		buff[0] = 0x01; // stiskni leve tlacitko
 8000500:	2301      	movs	r3, #1
 8000502:	733b      	strb	r3, [r7, #12]
 8000504:	e001      	b.n	800050a <step+0x22>
	}
	else
		buff[0] = 0x00;
 8000506:	2300      	movs	r3, #0
 8000508:	733b      	strb	r3, [r7, #12]
	buff[1] = (int8_t) (x); // posun X +10
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	737b      	strb	r3, [r7, #13]
	buff[2] = (int8_t) (y); // posun Y -3
 800050e:	79bb      	ldrb	r3, [r7, #6]
 8000510:	73bb      	strb	r3, [r7, #14]
	buff[3] = 0; // bez scrollu
 8000512:	2300      	movs	r3, #0
 8000514:	73fb      	strb	r3, [r7, #15]
	USBD_HID_SendReport(&hUsbDeviceFS, buff, sizeof(buff));
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	2204      	movs	r2, #4
 800051c:	4619      	mov	r1, r3
 800051e:	4807      	ldr	r0, [pc, #28]	; (800053c <step+0x54>)
 8000520:	f004 ff20 	bl	8005364 <USBD_HID_SendReport>
	HAL_Delay(USBD_HID_GetPollingInterval(&hUsbDeviceFS));
 8000524:	4805      	ldr	r0, [pc, #20]	; (800053c <step+0x54>)
 8000526:	f004 ff4d 	bl	80053c4 <USBD_HID_GetPollingInterval>
 800052a:	4603      	mov	r3, r0
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fc43 	bl	8000db8 <HAL_Delay>
}
 8000532:	bf00      	nop
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000190 	.word	0x20000190

08000540 <circle>:

void circle(int16_t radius){
 8000540:	b580      	push	{r7, lr}
 8000542:	ed2d 8b02 	vpush	{d8}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	80fb      	strh	r3, [r7, #6]
	int16_t angle = 360+1;
 800054e:	f240 1369 	movw	r3, #361	; 0x169
 8000552:	81bb      	strh	r3, [r7, #12]

	for(int16_t i=0; i<angle; i+=5){
 8000554:	2300      	movs	r3, #0
 8000556:	81fb      	strh	r3, [r7, #14]
 8000558:	e05b      	b.n	8000612 <circle+0xd2>
		x = radius*cosf(i*2*pi/360);
 800055a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800055e:	ee07 3a90 	vmov	s15, r3
 8000562:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000566:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	ee07 3a90 	vmov	s15, r3
 8000570:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000574:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <circle+0xf4>)
 8000576:	edd3 7a00 	vldr	s15, [r3]
 800057a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800057e:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8000638 <circle+0xf8>
 8000582:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000586:	eeb0 0a47 	vmov.f32	s0, s14
 800058a:	f006 feeb 	bl	8007364 <cosf>
 800058e:	eef0 7a40 	vmov.f32	s15, s0
 8000592:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000596:	4b29      	ldr	r3, [pc, #164]	; (800063c <circle+0xfc>)
 8000598:	edc3 7a00 	vstr	s15, [r3]
		y = radius*sinf(i*2*pi/360);
 800059c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005a0:	ee07 3a90 	vmov	s15, r3
 80005a4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80005a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	ee07 3a90 	vmov	s15, r3
 80005b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005b6:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <circle+0xf4>)
 80005b8:	edd3 7a00 	vldr	s15, [r3]
 80005bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005c0:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8000638 <circle+0xf8>
 80005c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80005c8:	eeb0 0a47 	vmov.f32	s0, s14
 80005cc:	f006 ff0e 	bl	80073ec <sinf>
 80005d0:	eef0 7a40 	vmov.f32	s15, s0
 80005d4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <circle+0x100>)
 80005da:	edc3 7a00 	vstr	s15, [r3]
		step(x,y,1);
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <circle+0xfc>)
 80005e0:	edd3 7a00 	vldr	s15, [r3]
 80005e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005e8:	edc7 7a00 	vstr	s15, [r7]
 80005ec:	783b      	ldrb	r3, [r7, #0]
 80005ee:	b25b      	sxtb	r3, r3
 80005f0:	4a13      	ldr	r2, [pc, #76]	; (8000640 <circle+0x100>)
 80005f2:	edd2 7a00 	vldr	s15, [r2]
 80005f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005fa:	edc7 7a00 	vstr	s15, [r7]
 80005fe:	783a      	ldrb	r2, [r7, #0]
 8000600:	b251      	sxtb	r1, r2
 8000602:	2201      	movs	r2, #1
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ff6f 	bl	80004e8 <step>
	for(int16_t i=0; i<angle; i+=5){
 800060a:	89fb      	ldrh	r3, [r7, #14]
 800060c:	3305      	adds	r3, #5
 800060e:	b29b      	uxth	r3, r3
 8000610:	81fb      	strh	r3, [r7, #14]
 8000612:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000616:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800061a:	429a      	cmp	r2, r3
 800061c:	db9d      	blt.n	800055a <circle+0x1a>
	}
	step(0,0,0);
 800061e:	2200      	movs	r2, #0
 8000620:	2100      	movs	r1, #0
 8000622:	2000      	movs	r0, #0
 8000624:	f7ff ff60 	bl	80004e8 <step>
}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	ecbd 8b02 	vpop	{d8}
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000000 	.word	0x20000000
 8000638:	43b40000 	.word	0x43b40000
 800063c:	20000180 	.word	0x20000180
 8000640:	20000184 	.word	0x20000184

08000644 <noncircle>:

void noncircle(int16_t radius) {
 8000644:	b580      	push	{r7, lr}
 8000646:	ed2d 8b02 	vpush	{d8}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	80fb      	strh	r3, [r7, #6]
	int16_t angle = 240;
 8000652:	23f0      	movs	r3, #240	; 0xf0
 8000654:	81bb      	strh	r3, [r7, #12]

	for (int16_t i = 120; i < angle; i += 5) {
 8000656:	2378      	movs	r3, #120	; 0x78
 8000658:	81fb      	strh	r3, [r7, #14]
 800065a:	e05b      	b.n	8000714 <noncircle+0xd0>
		x = radius * cosf(i * 2 * pi / 360);
 800065c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000660:	ee07 3a90 	vmov	s15, r3
 8000664:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000668:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	ee07 3a90 	vmov	s15, r3
 8000672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000676:	4b30      	ldr	r3, [pc, #192]	; (8000738 <noncircle+0xf4>)
 8000678:	edd3 7a00 	vldr	s15, [r3]
 800067c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000680:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800073c <noncircle+0xf8>
 8000684:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000688:	eeb0 0a47 	vmov.f32	s0, s14
 800068c:	f006 fe6a 	bl	8007364 <cosf>
 8000690:	eef0 7a40 	vmov.f32	s15, s0
 8000694:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000698:	4b29      	ldr	r3, [pc, #164]	; (8000740 <noncircle+0xfc>)
 800069a:	edc3 7a00 	vstr	s15, [r3]
		y = radius * sinf(i * 2 * pi / 360);
 800069e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006a2:	ee07 3a90 	vmov	s15, r3
 80006a6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80006aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	ee07 3a90 	vmov	s15, r3
 80006b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <noncircle+0xf4>)
 80006ba:	edd3 7a00 	vldr	s15, [r3]
 80006be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800073c <noncircle+0xf8>
 80006c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80006ca:	eeb0 0a47 	vmov.f32	s0, s14
 80006ce:	f006 fe8d 	bl	80073ec <sinf>
 80006d2:	eef0 7a40 	vmov.f32	s15, s0
 80006d6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <noncircle+0x100>)
 80006dc:	edc3 7a00 	vstr	s15, [r3]
		step(x,y,1);
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <noncircle+0xfc>)
 80006e2:	edd3 7a00 	vldr	s15, [r3]
 80006e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006ea:	edc7 7a00 	vstr	s15, [r7]
 80006ee:	783b      	ldrb	r3, [r7, #0]
 80006f0:	b25b      	sxtb	r3, r3
 80006f2:	4a14      	ldr	r2, [pc, #80]	; (8000744 <noncircle+0x100>)
 80006f4:	edd2 7a00 	vldr	s15, [r2]
 80006f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006fc:	edc7 7a00 	vstr	s15, [r7]
 8000700:	783a      	ldrb	r2, [r7, #0]
 8000702:	b251      	sxtb	r1, r2
 8000704:	2201      	movs	r2, #1
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff feee 	bl	80004e8 <step>
	for (int16_t i = 120; i < angle; i += 5) {
 800070c:	89fb      	ldrh	r3, [r7, #14]
 800070e:	3305      	adds	r3, #5
 8000710:	b29b      	uxth	r3, r3
 8000712:	81fb      	strh	r3, [r7, #14]
 8000714:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000718:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800071c:	429a      	cmp	r2, r3
 800071e:	db9d      	blt.n	800065c <noncircle+0x18>
	}
	step(0,0,0);
 8000720:	2200      	movs	r2, #0
 8000722:	2100      	movs	r1, #0
 8000724:	2000      	movs	r0, #0
 8000726:	f7ff fedf 	bl	80004e8 <step>
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	ecbd 8b02 	vpop	{d8}
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000000 	.word	0x20000000
 800073c:	43b40000 	.word	0x43b40000
 8000740:	20000180 	.word	0x20000180
 8000744:	20000184 	.word	0x20000184

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074c:	f000 fac2 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000750:	f000 f854 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000754:	f000 f8e6 	bl	8000924 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000758:	f000 f8ba 	bl	80008d0 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 800075c:	f006 f990 	bl	8006a80 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)){
 8000760:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000764:	4824      	ldr	r0, [pc, #144]	; (80007f8 <main+0xb0>)
 8000766:	f000 fe09 	bl	800137c <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d0f7      	beq.n	8000760 <main+0x18>
			circle(10);
 8000770:	200a      	movs	r0, #10
 8000772:	f7ff fee5 	bl	8000540 <circle>
			step(30,30,0);
 8000776:	2200      	movs	r2, #0
 8000778:	211e      	movs	r1, #30
 800077a:	201e      	movs	r0, #30
 800077c:	f7ff feb4 	bl	80004e8 <step>
			circle(5);
 8000780:	2005      	movs	r0, #5
 8000782:	f7ff fedd 	bl	8000540 <circle>
			step(-10,15,0);
 8000786:	2200      	movs	r2, #0
 8000788:	210f      	movs	r1, #15
 800078a:	f06f 0009 	mvn.w	r0, #9
 800078e:	f7ff feab 	bl	80004e8 <step>
			circle(2);
 8000792:	2002      	movs	r0, #2
 8000794:	f7ff fed4 	bl	8000540 <circle>
			step(-65,-15,0);
 8000798:	2200      	movs	r2, #0
 800079a:	f06f 010e 	mvn.w	r1, #14
 800079e:	f06f 0040 	mvn.w	r0, #64	; 0x40
 80007a2:	f7ff fea1 	bl	80004e8 <step>
			circle(5);
 80007a6:	2005      	movs	r0, #5
 80007a8:	f7ff feca 	bl	8000540 <circle>
			step(-10,15,0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	210f      	movs	r1, #15
 80007b0:	f06f 0009 	mvn.w	r0, #9
 80007b4:	f7ff fe98 	bl	80004e8 <step>
			circle(2);
 80007b8:	2002      	movs	r0, #2
 80007ba:	f7ff fec1 	bl	8000540 <circle>
			step(45,0,1);
 80007be:	2201      	movs	r2, #1
 80007c0:	2100      	movs	r1, #0
 80007c2:	202d      	movs	r0, #45	; 0x2d
 80007c4:	f7ff fe90 	bl	80004e8 <step>
			step(0,30,0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	211e      	movs	r1, #30
 80007cc:	2000      	movs	r0, #0
 80007ce:	f7ff fe8b 	bl	80004e8 <step>
			step(30,20,0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2114      	movs	r1, #20
 80007d6:	201e      	movs	r0, #30
 80007d8:	f7ff fe86 	bl	80004e8 <step>
			noncircle(7);
 80007dc:	2007      	movs	r0, #7
 80007de:	f7ff ff31 	bl	8000644 <noncircle>
			step(0,0,1);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2100      	movs	r1, #0
 80007e6:	2000      	movs	r0, #0
 80007e8:	f7ff fe7e 	bl	80004e8 <step>
			step(65,0,0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	2041      	movs	r0, #65	; 0x41
 80007f2:	f7ff fe79 	bl	80004e8 <step>
		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin)){
 80007f6:	e7b3      	b.n	8000760 <main+0x18>
 80007f8:	40020800 	.word	0x40020800

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	; 0x50
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	2230      	movs	r2, #48	; 0x30
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f006 fd7e 	bl	800730c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <SystemClock_Config+0xcc>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	4a27      	ldr	r2, [pc, #156]	; (80008c8 <SystemClock_Config+0xcc>)
 800082a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082e:	6413      	str	r3, [r2, #64]	; 0x40
 8000830:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <SystemClock_Config+0xcc>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b22      	ldr	r3, [pc, #136]	; (80008cc <SystemClock_Config+0xd0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a21      	ldr	r2, [pc, #132]	; (80008cc <SystemClock_Config+0xd0>)
 8000846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <SystemClock_Config+0xd0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800085c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800086c:	2304      	movs	r3, #4
 800086e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000870:	23a8      	movs	r3, #168	; 0xa8
 8000872:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000874:	2302      	movs	r3, #2
 8000876:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000878:	2307      	movs	r3, #7
 800087a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	f107 0320 	add.w	r3, r7, #32
 8000880:	4618      	mov	r0, r3
 8000882:	f002 f811 	bl	80028a8 <HAL_RCC_OscConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800088c:	f000 f93c 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	230f      	movs	r3, #15
 8000892:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000894:	2302      	movs	r3, #2
 8000896:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800089c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2105      	movs	r1, #5
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 fa72 	bl	8002d98 <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008ba:	f000 f925 	bl	8000b08 <Error_Handler>
  }
}
 80008be:	bf00      	nop
 80008c0:	3750      	adds	r7, #80	; 0x50
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_USART3_UART_Init+0x4c>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	; (8000920 <MX_USART3_UART_Init+0x50>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_USART3_UART_Init+0x4c>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_USART3_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_USART3_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_USART3_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_USART3_UART_Init+0x4c>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_USART3_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_USART3_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_USART3_UART_Init+0x4c>)
 8000908:	f002 fc66 	bl	80031d8 <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000912:	f000 f8f9 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2000013c 	.word	0x2000013c
 8000920:	40004800 	.word	0x40004800

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08c      	sub	sp, #48	; 0x30
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
 800093e:	4b6d      	ldr	r3, [pc, #436]	; (8000af4 <MX_GPIO_Init+0x1d0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a6c      	ldr	r2, [pc, #432]	; (8000af4 <MX_GPIO_Init+0x1d0>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b6a      	ldr	r3, [pc, #424]	; (8000af4 <MX_GPIO_Init+0x1d0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	61bb      	str	r3, [r7, #24]
 8000954:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	4b66      	ldr	r3, [pc, #408]	; (8000af4 <MX_GPIO_Init+0x1d0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a65      	ldr	r2, [pc, #404]	; (8000af4 <MX_GPIO_Init+0x1d0>)
 8000960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b63      	ldr	r3, [pc, #396]	; (8000af4 <MX_GPIO_Init+0x1d0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b5f      	ldr	r3, [pc, #380]	; (8000af4 <MX_GPIO_Init+0x1d0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a5e      	ldr	r2, [pc, #376]	; (8000af4 <MX_GPIO_Init+0x1d0>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b5c      	ldr	r3, [pc, #368]	; (8000af4 <MX_GPIO_Init+0x1d0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b58      	ldr	r3, [pc, #352]	; (8000af4 <MX_GPIO_Init+0x1d0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a57      	ldr	r2, [pc, #348]	; (8000af4 <MX_GPIO_Init+0x1d0>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b55      	ldr	r3, [pc, #340]	; (8000af4 <MX_GPIO_Init+0x1d0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	4b51      	ldr	r3, [pc, #324]	; (8000af4 <MX_GPIO_Init+0x1d0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a50      	ldr	r2, [pc, #320]	; (8000af4 <MX_GPIO_Init+0x1d0>)
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b4e      	ldr	r3, [pc, #312]	; (8000af4 <MX_GPIO_Init+0x1d0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0308 	and.w	r3, r3, #8
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b4a      	ldr	r3, [pc, #296]	; (8000af4 <MX_GPIO_Init+0x1d0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a49      	ldr	r2, [pc, #292]	; (8000af4 <MX_GPIO_Init+0x1d0>)
 80009d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b47      	ldr	r3, [pc, #284]	; (8000af4 <MX_GPIO_Init+0x1d0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009e8:	4843      	ldr	r0, [pc, #268]	; (8000af8 <MX_GPIO_Init+0x1d4>)
 80009ea:	f000 fcdf 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2140      	movs	r1, #64	; 0x40
 80009f2:	4842      	ldr	r0, [pc, #264]	; (8000afc <MX_GPIO_Init+0x1d8>)
 80009f4:	f000 fcda 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	483c      	ldr	r0, [pc, #240]	; (8000b00 <MX_GPIO_Init+0x1dc>)
 8000a10:	f000 fb08 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a14:	2332      	movs	r3, #50	; 0x32
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a24:	230b      	movs	r3, #11
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4834      	ldr	r0, [pc, #208]	; (8000b00 <MX_GPIO_Init+0x1dc>)
 8000a30:	f000 faf8 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a34:	2386      	movs	r3, #134	; 0x86
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a44:	230b      	movs	r3, #11
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	482d      	ldr	r0, [pc, #180]	; (8000b04 <MX_GPIO_Init+0x1e0>)
 8000a50:	f000 fae8 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a54:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4822      	ldr	r0, [pc, #136]	; (8000af8 <MX_GPIO_Init+0x1d4>)
 8000a6e:	f000 fad9 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a84:	230b      	movs	r3, #11
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	481a      	ldr	r0, [pc, #104]	; (8000af8 <MX_GPIO_Init+0x1d4>)
 8000a90:	f000 fac8 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a94:	2340      	movs	r3, #64	; 0x40
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4814      	ldr	r0, [pc, #80]	; (8000afc <MX_GPIO_Init+0x1d8>)
 8000aac:	f000 faba 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480e      	ldr	r0, [pc, #56]	; (8000afc <MX_GPIO_Init+0x1d8>)
 8000ac4:	f000 faae 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ac8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ada:	230b      	movs	r3, #11
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_GPIO_Init+0x1d8>)
 8000ae6:	f000 fa9d 	bl	8001024 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aea:	bf00      	nop
 8000aec:	3730      	adds	r7, #48	; 0x30
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020400 	.word	0x40020400
 8000afc:	40021800 	.word	0x40021800
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020000 	.word	0x40020000

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <Error_Handler+0x8>
	...

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	4a0f      	ldr	r2, [pc, #60]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b28:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a08      	ldr	r2, [pc, #32]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800

08000b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a19      	ldr	r2, [pc, #100]	; (8000be8 <HAL_UART_MspInit+0x84>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d12c      	bne.n	8000be0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a17      	ldr	r2, [pc, #92]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a10      	ldr	r2, [pc, #64]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000bac:	f043 0308 	orr.w	r3, r3, #8
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0308 	and.w	r3, r3, #8
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bd0:	2307      	movs	r3, #7
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <HAL_UART_MspInit+0x8c>)
 8000bdc:	f000 fa22 	bl	8001024 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000be0:	bf00      	nop
 8000be2:	3728      	adds	r7, #40	; 0x28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40004800 	.word	0x40004800
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020c00 	.word	0x40020c00

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c40:	f000 f89a 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <OTG_FS_IRQHandler+0x10>)
 8000c4e:	f000 fd16 	bl	800167e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000066c 	.word	0x2000066c

08000c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c84:	480d      	ldr	r0, [pc, #52]	; (8000cbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c86:	490e      	ldr	r1, [pc, #56]	; (8000cc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ccc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000caa:	f7ff ffd7 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f006 fb35 	bl	800731c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fd49 	bl	8000748 <main>
  bx  lr    
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cb8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8000cc4:	080082b8 	.word	0x080082b8
  ldr r2, =_sbss
 8000cc8:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8000ccc:	20000b8c 	.word	0x20000b8c

08000cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f94f 	bl	8000fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f808 	bl	8000d18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff ff04 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x54>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_InitTick+0x58>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f967 	bl	800100a <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f000 f92f 	bl	8000fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_InitTick+0x5c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000004 	.word	0x20000004
 8000d70:	2000000c 	.word	0x2000000c
 8000d74:	20000008 	.word	0x20000008

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	2000000c 	.word	0x2000000c
 8000d9c:	20000188 	.word	0x20000188

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000188 	.word	0x20000188

08000db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc0:	f7ff ffee 	bl	8000da0 <HAL_GetTick>
 8000dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d005      	beq.n	8000dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_Delay+0x44>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dde:	bf00      	nop
 8000de0:	f7ff ffde 	bl	8000da0 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d8f7      	bhi.n	8000de0 <HAL_Delay+0x28>
  {
  }
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000000c 	.word	0x2000000c

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	db0b      	blt.n	8000e8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	f003 021f 	and.w	r2, r3, #31
 8000e7c:	4907      	ldr	r1, [pc, #28]	; (8000e9c <__NVIC_EnableIRQ+0x38>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	095b      	lsrs	r3, r3, #5
 8000e84:	2001      	movs	r0, #1
 8000e86:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	db0a      	blt.n	8000eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	490c      	ldr	r1, [pc, #48]	; (8000eec <__NVIC_SetPriority+0x4c>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	0112      	lsls	r2, r2, #4
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec8:	e00a      	b.n	8000ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <__NVIC_SetPriority+0x50>)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	3b04      	subs	r3, #4
 8000ed8:	0112      	lsls	r2, r2, #4
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	440b      	add	r3, r1
 8000ede:	761a      	strb	r2, [r3, #24]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000e100 	.word	0xe000e100
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f1c3 0307 	rsb	r3, r3, #7
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	bf28      	it	cs
 8000f12:	2304      	movcs	r3, #4
 8000f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	2b06      	cmp	r3, #6
 8000f1c:	d902      	bls.n	8000f24 <NVIC_EncodePriority+0x30>
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3b03      	subs	r3, #3
 8000f22:	e000      	b.n	8000f26 <NVIC_EncodePriority+0x32>
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43da      	mvns	r2, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	401a      	ands	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	43d9      	mvns	r1, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	4313      	orrs	r3, r2
         );
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3724      	adds	r7, #36	; 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f6c:	d301      	bcc.n	8000f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00f      	b.n	8000f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <SysTick_Config+0x40>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7a:	210f      	movs	r1, #15
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f7ff ff8e 	bl	8000ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <SysTick_Config+0x40>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8a:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <SysTick_Config+0x40>)
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	e000e010 	.word	0xe000e010

08000fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ff29 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc8:	f7ff ff3e 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	6978      	ldr	r0, [r7, #20]
 8000fd4:	f7ff ff8e 	bl	8000ef4 <NVIC_EncodePriority>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff5d 	bl	8000ea0 <__NVIC_SetPriority>
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff31 	bl	8000e64 <__NVIC_EnableIRQ>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffa2 	bl	8000f5c <SysTick_Config>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
 800103e:	e177      	b.n	8001330 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001040:	2201      	movs	r2, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	429a      	cmp	r2, r3
 800105a:	f040 8166 	bne.w	800132a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b01      	cmp	r3, #1
 8001068:	d005      	beq.n	8001076 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001072:	2b02      	cmp	r3, #2
 8001074:	d130      	bne.n	80010d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ac:	2201      	movs	r2, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	091b      	lsrs	r3, r3, #4
 80010c2:	f003 0201 	and.w	r2, r3, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d017      	beq.n	8001114 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d123      	bne.n	8001168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	08da      	lsrs	r2, r3, #3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3208      	adds	r2, #8
 8001128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	220f      	movs	r2, #15
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	08da      	lsrs	r2, r3, #3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3208      	adds	r2, #8
 8001162:	69b9      	ldr	r1, [r7, #24]
 8001164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0203 	and.w	r2, r3, #3
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 80c0 	beq.w	800132a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b66      	ldr	r3, [pc, #408]	; (8001348 <HAL_GPIO_Init+0x324>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a65      	ldr	r2, [pc, #404]	; (8001348 <HAL_GPIO_Init+0x324>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b63      	ldr	r3, [pc, #396]	; (8001348 <HAL_GPIO_Init+0x324>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c6:	4a61      	ldr	r2, [pc, #388]	; (800134c <HAL_GPIO_Init+0x328>)
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	3302      	adds	r3, #2
 80011ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	220f      	movs	r2, #15
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a58      	ldr	r2, [pc, #352]	; (8001350 <HAL_GPIO_Init+0x32c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d037      	beq.n	8001262 <HAL_GPIO_Init+0x23e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a57      	ldr	r2, [pc, #348]	; (8001354 <HAL_GPIO_Init+0x330>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d031      	beq.n	800125e <HAL_GPIO_Init+0x23a>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a56      	ldr	r2, [pc, #344]	; (8001358 <HAL_GPIO_Init+0x334>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d02b      	beq.n	800125a <HAL_GPIO_Init+0x236>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a55      	ldr	r2, [pc, #340]	; (800135c <HAL_GPIO_Init+0x338>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d025      	beq.n	8001256 <HAL_GPIO_Init+0x232>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a54      	ldr	r2, [pc, #336]	; (8001360 <HAL_GPIO_Init+0x33c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d01f      	beq.n	8001252 <HAL_GPIO_Init+0x22e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a53      	ldr	r2, [pc, #332]	; (8001364 <HAL_GPIO_Init+0x340>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d019      	beq.n	800124e <HAL_GPIO_Init+0x22a>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a52      	ldr	r2, [pc, #328]	; (8001368 <HAL_GPIO_Init+0x344>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d013      	beq.n	800124a <HAL_GPIO_Init+0x226>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a51      	ldr	r2, [pc, #324]	; (800136c <HAL_GPIO_Init+0x348>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d00d      	beq.n	8001246 <HAL_GPIO_Init+0x222>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a50      	ldr	r2, [pc, #320]	; (8001370 <HAL_GPIO_Init+0x34c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d007      	beq.n	8001242 <HAL_GPIO_Init+0x21e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4f      	ldr	r2, [pc, #316]	; (8001374 <HAL_GPIO_Init+0x350>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d101      	bne.n	800123e <HAL_GPIO_Init+0x21a>
 800123a:	2309      	movs	r3, #9
 800123c:	e012      	b.n	8001264 <HAL_GPIO_Init+0x240>
 800123e:	230a      	movs	r3, #10
 8001240:	e010      	b.n	8001264 <HAL_GPIO_Init+0x240>
 8001242:	2308      	movs	r3, #8
 8001244:	e00e      	b.n	8001264 <HAL_GPIO_Init+0x240>
 8001246:	2307      	movs	r3, #7
 8001248:	e00c      	b.n	8001264 <HAL_GPIO_Init+0x240>
 800124a:	2306      	movs	r3, #6
 800124c:	e00a      	b.n	8001264 <HAL_GPIO_Init+0x240>
 800124e:	2305      	movs	r3, #5
 8001250:	e008      	b.n	8001264 <HAL_GPIO_Init+0x240>
 8001252:	2304      	movs	r3, #4
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x240>
 8001256:	2303      	movs	r3, #3
 8001258:	e004      	b.n	8001264 <HAL_GPIO_Init+0x240>
 800125a:	2302      	movs	r3, #2
 800125c:	e002      	b.n	8001264 <HAL_GPIO_Init+0x240>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_GPIO_Init+0x240>
 8001262:	2300      	movs	r3, #0
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	f002 0203 	and.w	r2, r2, #3
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	4093      	lsls	r3, r2
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001274:	4935      	ldr	r1, [pc, #212]	; (800134c <HAL_GPIO_Init+0x328>)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	3302      	adds	r3, #2
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001282:	4b3d      	ldr	r3, [pc, #244]	; (8001378 <HAL_GPIO_Init+0x354>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012a6:	4a34      	ldr	r2, [pc, #208]	; (8001378 <HAL_GPIO_Init+0x354>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012ac:	4b32      	ldr	r3, [pc, #200]	; (8001378 <HAL_GPIO_Init+0x354>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d0:	4a29      	ldr	r2, [pc, #164]	; (8001378 <HAL_GPIO_Init+0x354>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012d6:	4b28      	ldr	r3, [pc, #160]	; (8001378 <HAL_GPIO_Init+0x354>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012fa:	4a1f      	ldr	r2, [pc, #124]	; (8001378 <HAL_GPIO_Init+0x354>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <HAL_GPIO_Init+0x354>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001324:	4a14      	ldr	r2, [pc, #80]	; (8001378 <HAL_GPIO_Init+0x354>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3301      	adds	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b0f      	cmp	r3, #15
 8001334:	f67f ae84 	bls.w	8001040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40013800 	.word	0x40013800
 8001350:	40020000 	.word	0x40020000
 8001354:	40020400 	.word	0x40020400
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40021000 	.word	0x40021000
 8001364:	40021400 	.word	0x40021400
 8001368:	40021800 	.word	0x40021800
 800136c:	40021c00 	.word	0x40021c00
 8001370:	40022000 	.word	0x40022000
 8001374:	40022400 	.word	0x40022400
 8001378:	40013c00 	.word	0x40013c00

0800137c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	4013      	ands	r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001394:	2301      	movs	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	e001      	b.n	800139e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c8:	e003      	b.n	80013d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	041a      	lsls	r2, r3, #16
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	619a      	str	r2, [r3, #24]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e0:	b08f      	sub	sp, #60	; 0x3c
 80013e2:	af0a      	add	r7, sp, #40	; 0x28
 80013e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e10f      	b.n	8001610 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d106      	bne.n	8001410 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f005 fc6e 	bl	8006cec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2203      	movs	r2, #3
 8001414:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f002 faa9 	bl	8003986 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	687e      	ldr	r6, [r7, #4]
 800143c:	466d      	mov	r5, sp
 800143e:	f106 0410 	add.w	r4, r6, #16
 8001442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001448:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800144a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800144e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001452:	1d33      	adds	r3, r6, #4
 8001454:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001456:	6838      	ldr	r0, [r7, #0]
 8001458:	f002 f980 	bl	800375c <USB_CoreInit>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d005      	beq.n	800146e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2202      	movs	r2, #2
 8001466:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e0d0      	b.n	8001610 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f002 fa97 	bl	80039a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800147a:	2300      	movs	r3, #0
 800147c:	73fb      	strb	r3, [r7, #15]
 800147e:	e04a      	b.n	8001516 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	333d      	adds	r3, #61	; 0x3d
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	333c      	adds	r3, #60	; 0x3c
 80014a4:	7bfa      	ldrb	r2, [r7, #15]
 80014a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	b298      	uxth	r0, r3
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	3344      	adds	r3, #68	; 0x44
 80014bc:	4602      	mov	r2, r0
 80014be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4413      	add	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	3340      	adds	r3, #64	; 0x40
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014d4:	7bfa      	ldrb	r2, [r7, #15]
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4413      	add	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	3348      	adds	r3, #72	; 0x48
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	334c      	adds	r3, #76	; 0x4c
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014fc:	7bfa      	ldrb	r2, [r7, #15]
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	4613      	mov	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	3354      	adds	r3, #84	; 0x54
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	3301      	adds	r3, #1
 8001514:	73fb      	strb	r3, [r7, #15]
 8001516:	7bfa      	ldrb	r2, [r7, #15]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	429a      	cmp	r2, r3
 800151e:	d3af      	bcc.n	8001480 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001520:	2300      	movs	r3, #0
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e044      	b.n	80015b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001526:	7bfa      	ldrb	r2, [r7, #15]
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	4413      	add	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	440b      	add	r3, r1
 8001534:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	4413      	add	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800154e:	7bfa      	ldrb	r2, [r7, #15]
 8001550:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	4413      	add	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	4413      	add	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800157e:	7bfa      	ldrb	r2, [r7, #15]
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	4413      	add	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	440b      	add	r3, r1
 800158c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001594:	7bfa      	ldrb	r2, [r7, #15]
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	3301      	adds	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d3b5      	bcc.n	8001526 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	687e      	ldr	r6, [r7, #4]
 80015c2:	466d      	mov	r5, sp
 80015c4:	f106 0410 	add.w	r4, r6, #16
 80015c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80015d8:	1d33      	adds	r3, r6, #4
 80015da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015dc:	6838      	ldr	r0, [r7, #0]
 80015de:	f002 fa2f 	bl	8003a40 <USB_DevInit>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2202      	movs	r2, #2
 80015ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e00d      	b.n	8001610 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f003 fb7e 	bl	8004d0a <USB_DevDisconnect>

  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001618 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <HAL_PCD_Start+0x1c>
 8001630:	2302      	movs	r3, #2
 8001632:	e020      	b.n	8001676 <HAL_PCD_Start+0x5e>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001640:	2b01      	cmp	r3, #1
 8001642:	d109      	bne.n	8001658 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001648:	2b01      	cmp	r3, #1
 800164a:	d005      	beq.n	8001658 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001650:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f002 f981 	bl	8003964 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f003 fb2e 	bl	8004cc8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800167e:	b590      	push	{r4, r7, lr}
 8001680:	b08d      	sub	sp, #52	; 0x34
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f003 fbec 	bl	8004e72 <USB_GetMode>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	f040 848a 	bne.w	8001fb6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 fb50 	bl	8004d4c <USB_ReadInterrupts>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 8480 	beq.w	8001fb4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 fb3d 	bl	8004d4c <USB_ReadInterrupts>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d107      	bne.n	80016ec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f002 0202 	and.w	r2, r2, #2
 80016ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f003 fb2b 	bl	8004d4c <USB_ReadInterrupts>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	2b10      	cmp	r3, #16
 80016fe:	d161      	bne.n	80017c4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	699a      	ldr	r2, [r3, #24]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0210 	bic.w	r2, r2, #16
 800170e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	f003 020f 	and.w	r2, r3, #15
 800171c:	4613      	mov	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	4413      	add	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	4413      	add	r3, r2
 800172c:	3304      	adds	r3, #4
 800172e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	0c5b      	lsrs	r3, r3, #17
 8001734:	f003 030f 	and.w	r3, r3, #15
 8001738:	2b02      	cmp	r3, #2
 800173a:	d124      	bne.n	8001786 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d035      	beq.n	80017b4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	091b      	lsrs	r3, r3, #4
 8001750:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001756:	b29b      	uxth	r3, r3
 8001758:	461a      	mov	r2, r3
 800175a:	6a38      	ldr	r0, [r7, #32]
 800175c:	f003 f962 	bl	8004a24 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	691a      	ldr	r2, [r3, #16]
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	091b      	lsrs	r3, r3, #4
 8001768:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800176c:	441a      	add	r2, r3
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	6a1a      	ldr	r2, [r3, #32]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800177e:	441a      	add	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	621a      	str	r2, [r3, #32]
 8001784:	e016      	b.n	80017b4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	0c5b      	lsrs	r3, r3, #17
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	2b06      	cmp	r3, #6
 8001790:	d110      	bne.n	80017b4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001798:	2208      	movs	r2, #8
 800179a:	4619      	mov	r1, r3
 800179c:	6a38      	ldr	r0, [r7, #32]
 800179e:	f003 f941 	bl	8004a24 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	6a1a      	ldr	r2, [r3, #32]
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017ae:	441a      	add	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699a      	ldr	r2, [r3, #24]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0210 	orr.w	r2, r2, #16
 80017c2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 fabf 	bl	8004d4c <USB_ReadInterrupts>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017d8:	f040 80a7 	bne.w	800192a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f003 fac4 	bl	8004d72 <USB_ReadDevAllOutEpInterrupt>
 80017ea:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80017ec:	e099      	b.n	8001922 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80017ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 808e 	beq.w	8001916 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f003 fae8 	bl	8004dda <USB_ReadDevOutEPInterrupt>
 800180a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00c      	beq.n	8001830 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	015a      	lsls	r2, r3, #5
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	4413      	add	r3, r2
 800181e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001822:	461a      	mov	r2, r3
 8001824:	2301      	movs	r3, #1
 8001826:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001828:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 feaa 	bl	8002584 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00c      	beq.n	8001854 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	015a      	lsls	r2, r3, #5
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	4413      	add	r3, r2
 8001842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001846:	461a      	mov	r2, r3
 8001848:	2308      	movs	r3, #8
 800184a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800184c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 ff80 	bl	8002754 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	f003 0310 	and.w	r3, r3, #16
 800185a:	2b00      	cmp	r3, #0
 800185c:	d008      	beq.n	8001870 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	015a      	lsls	r2, r3, #5
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	4413      	add	r3, r2
 8001866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800186a:	461a      	mov	r2, r3
 800186c:	2310      	movs	r3, #16
 800186e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d030      	beq.n	80018dc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001882:	2b80      	cmp	r3, #128	; 0x80
 8001884:	d109      	bne.n	800189a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001894:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001898:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800189a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189c:	4613      	mov	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	3304      	adds	r3, #4
 80018ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	78db      	ldrb	r3, [r3, #3]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d108      	bne.n	80018ca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2200      	movs	r2, #0
 80018bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4619      	mov	r1, r3
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f005 fb25 	bl	8006f14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	015a      	lsls	r2, r3, #5
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018d6:	461a      	mov	r2, r3
 80018d8:	2302      	movs	r3, #2
 80018da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	f003 0320 	and.w	r3, r3, #32
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d008      	beq.n	80018f8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	015a      	lsls	r2, r3, #5
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018f2:	461a      	mov	r2, r3
 80018f4:	2320      	movs	r3, #32
 80018f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d009      	beq.n	8001916 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	015a      	lsls	r2, r3, #5
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	4413      	add	r3, r2
 800190a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800190e:	461a      	mov	r2, r3
 8001910:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001914:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	3301      	adds	r3, #1
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800191c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191e:	085b      	lsrs	r3, r3, #1
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001924:	2b00      	cmp	r3, #0
 8001926:	f47f af62 	bne.w	80017ee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f003 fa0c 	bl	8004d4c <USB_ReadInterrupts>
 8001934:	4603      	mov	r3, r0
 8001936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800193a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800193e:	f040 80db 	bne.w	8001af8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f003 fa2d 	bl	8004da6 <USB_ReadDevAllInEpInterrupt>
 800194c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001952:	e0cd      	b.n	8001af0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 80c2 	beq.w	8001ae4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f003 fa53 	bl	8004e16 <USB_ReadDevInEPInterrupt>
 8001970:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d057      	beq.n	8001a2c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	2201      	movs	r2, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43db      	mvns	r3, r3
 8001996:	69f9      	ldr	r1, [r7, #28]
 8001998:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800199c:	4013      	ands	r3, r2
 800199e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	015a      	lsls	r2, r3, #5
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019ac:	461a      	mov	r2, r3
 80019ae:	2301      	movs	r3, #1
 80019b0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d132      	bne.n	8001a20 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019be:	4613      	mov	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4413      	add	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	334c      	adds	r3, #76	; 0x4c
 80019ca:	6819      	ldr	r1, [r3, #0]
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d0:	4613      	mov	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4403      	add	r3, r0
 80019da:	3348      	adds	r3, #72	; 0x48
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4419      	add	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e4:	4613      	mov	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4413      	add	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4403      	add	r3, r0
 80019ee:	334c      	adds	r3, #76	; 0x4c
 80019f0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d113      	bne.n	8001a20 <HAL_PCD_IRQHandler+0x3a2>
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fc:	4613      	mov	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4413      	add	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	3354      	adds	r3, #84	; 0x54
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d108      	bne.n	8001a20 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	f003 fa5a 	bl	8004ed4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	4619      	mov	r1, r3
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f005 f9ef 	bl	8006e0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d008      	beq.n	8001a48 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	015a      	lsls	r2, r3, #5
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a42:	461a      	mov	r2, r3
 8001a44:	2308      	movs	r3, #8
 8001a46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f003 0310 	and.w	r3, r3, #16
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d008      	beq.n	8001a64 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2310      	movs	r3, #16
 8001a62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d008      	beq.n	8001a80 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	015a      	lsls	r2, r3, #5
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	4413      	add	r3, r2
 8001a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	2340      	movs	r3, #64	; 0x40
 8001a7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d023      	beq.n	8001ad2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001a8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a8c:	6a38      	ldr	r0, [r7, #32]
 8001a8e:	f002 f93b 	bl	8003d08 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a94:	4613      	mov	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	3338      	adds	r3, #56	; 0x38
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	78db      	ldrb	r3, [r3, #3]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d108      	bne.n	8001ac0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	4619      	mov	r1, r3
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f005 fa3c 	bl	8006f38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	015a      	lsls	r2, r3, #5
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001acc:	461a      	mov	r2, r3
 8001ace:	2302      	movs	r3, #2
 8001ad0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001adc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 fcc3 	bl	800246a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aec:	085b      	lsrs	r3, r3, #1
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f47f af2e 	bne.w	8001954 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f003 f925 	bl	8004d4c <USB_ReadInterrupts>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b0c:	d122      	bne.n	8001b54 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d108      	bne.n	8001b3e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b34:	2100      	movs	r1, #0
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 feaa 	bl	8002890 <HAL_PCDEx_LPM_Callback>
 8001b3c:	e002      	b.n	8001b44 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f005 f9da 	bl	8006ef8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f003 f8f7 	bl	8004d4c <USB_ReadInterrupts>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b68:	d112      	bne.n	8001b90 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d102      	bne.n	8001b80 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f005 f996 	bl	8006eac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695a      	ldr	r2, [r3, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b8e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f003 f8d9 	bl	8004d4c <USB_ReadInterrupts>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba4:	f040 80b7 	bne.w	8001d16 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2110      	movs	r1, #16
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f002 f8a0 	bl	8003d08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bcc:	e046      	b.n	8001c5c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd0:	015a      	lsls	r2, r3, #5
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bda:	461a      	mov	r2, r3
 8001bdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001be0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be4:	015a      	lsls	r2, r3, #5
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf2:	0151      	lsls	r1, r2, #5
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	440a      	add	r2, r1
 8001bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001bfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c04:	015a      	lsls	r2, r3, #5
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c14:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c18:	015a      	lsls	r2, r3, #5
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c26:	0151      	lsls	r1, r2, #5
 8001c28:	69fa      	ldr	r2, [r7, #28]
 8001c2a:	440a      	add	r2, r1
 8001c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c38:	015a      	lsls	r2, r3, #5
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c46:	0151      	lsls	r1, r2, #5
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	440a      	add	r2, r1
 8001c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c54:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c58:	3301      	adds	r3, #1
 8001c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d3b3      	bcc.n	8001bce <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c74:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c78:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d016      	beq.n	8001cb0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c92:	f043 030b 	orr.w	r3, r3, #11
 8001c96:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	69fa      	ldr	r2, [r7, #28]
 8001ca4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ca8:	f043 030b 	orr.w	r3, r3, #11
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	e015      	b.n	8001cdc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cc2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001cc6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cd6:	f043 030b 	orr.w	r3, r3, #11
 8001cda:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001cee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d00:	461a      	mov	r2, r3
 8001d02:	f003 f8e7 	bl	8004ed4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	695a      	ldr	r2, [r3, #20]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f003 f816 	bl	8004d4c <USB_ReadInterrupts>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d2a:	d124      	bne.n	8001d76 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 f8ac 	bl	8004e8e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f002 f861 	bl	8003e02 <USB_GetDevSpeed>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681c      	ldr	r4, [r3, #0]
 8001d4c:	f001 fa10 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 8001d50:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f001 fd60 	bl	8003820 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f005 f87a 	bl	8006e5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	695a      	ldr	r2, [r3, #20]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d74:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f002 ffe6 	bl	8004d4c <USB_ReadInterrupts>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d10a      	bne.n	8001da0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f005 f857 	bl	8006e3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f002 0208 	and.w	r2, r2, #8
 8001d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f002 ffd1 	bl	8004d4c <USB_ReadInterrupts>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db0:	2b80      	cmp	r3, #128	; 0x80
 8001db2:	d122      	bne.n	8001dfa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc4:	e014      	b.n	8001df0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dca:	4613      	mov	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d105      	bne.n	8001dea <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	4619      	mov	r1, r3
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 fb0f 	bl	8002408 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	3301      	adds	r3, #1
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d3e5      	bcc.n	8001dc6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 ffa4 	bl	8004d4c <USB_ReadInterrupts>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e0e:	d13b      	bne.n	8001e88 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e10:	2301      	movs	r3, #1
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
 8001e14:	e02b      	b.n	8001e6e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	440b      	add	r3, r1
 8001e34:	3340      	adds	r3, #64	; 0x40
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d115      	bne.n	8001e68 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001e3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	da12      	bge.n	8001e68 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	333f      	adds	r3, #63	; 0x3f
 8001e52:	2201      	movs	r2, #1
 8001e54:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	4619      	mov	r1, r3
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fad0 	bl	8002408 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d3ce      	bcc.n	8001e16 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f002 ff5d 	bl	8004d4c <USB_ReadInterrupts>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e9c:	d155      	bne.n	8001f4a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea2:	e045      	b.n	8001f30 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d12e      	bne.n	8001f2a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ecc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	da2b      	bge.n	8001f2a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ede:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d121      	bne.n	8001f2a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10a      	bne.n	8001f2a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f26:	6053      	str	r3, [r2, #4]
            break;
 8001f28:	e007      	b.n	8001f3a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d3b4      	bcc.n	8001ea4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001f48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 fefc 	bl	8004d4c <USB_ReadInterrupts>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5e:	d10a      	bne.n	8001f76 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f004 fffb 	bl	8006f5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695a      	ldr	r2, [r3, #20]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001f74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f002 fee6 	bl	8004d4c <USB_ReadInterrupts>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d115      	bne.n	8001fb6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f004 ffeb 	bl	8006f78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6859      	ldr	r1, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	e000      	b.n	8001fb6 <HAL_PCD_IRQHandler+0x938>
      return;
 8001fb4:	bf00      	nop
    }
  }
}
 8001fb6:	3734      	adds	r7, #52	; 0x34
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd90      	pop	{r4, r7, pc}

08001fbc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d101      	bne.n	8001fd6 <HAL_PCD_SetAddress+0x1a>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e013      	b.n	8001ffe <HAL_PCD_SetAddress+0x42>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	78fa      	ldrb	r2, [r7, #3]
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f002 fe44 	bl	8004c7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	4608      	mov	r0, r1
 8002010:	4611      	mov	r1, r2
 8002012:	461a      	mov	r2, r3
 8002014:	4603      	mov	r3, r0
 8002016:	70fb      	strb	r3, [r7, #3]
 8002018:	460b      	mov	r3, r1
 800201a:	803b      	strh	r3, [r7, #0]
 800201c:	4613      	mov	r3, r2
 800201e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002028:	2b00      	cmp	r3, #0
 800202a:	da0f      	bge.n	800204c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	f003 020f 	and.w	r2, r3, #15
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	3338      	adds	r3, #56	; 0x38
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	4413      	add	r3, r2
 8002040:	3304      	adds	r3, #4
 8002042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2201      	movs	r2, #1
 8002048:	705a      	strb	r2, [r3, #1]
 800204a:	e00f      	b.n	800206c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	f003 020f 	and.w	r2, r3, #15
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	3304      	adds	r3, #4
 8002064:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	b2da      	uxtb	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002078:	883a      	ldrh	r2, [r7, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	78ba      	ldrb	r2, [r7, #2]
 8002082:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	785b      	ldrb	r3, [r3, #1]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002096:	78bb      	ldrb	r3, [r7, #2]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d102      	bne.n	80020a2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_PCD_EP_Open+0xaa>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e00e      	b.n	80020ce <HAL_PCD_EP_Open+0xc8>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68f9      	ldr	r1, [r7, #12]
 80020be:	4618      	mov	r0, r3
 80020c0:	f001 fec4 	bl	8003e4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80020cc:	7afb      	ldrb	r3, [r7, #11]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b084      	sub	sp, #16
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	da0f      	bge.n	800210a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	f003 020f 	and.w	r2, r3, #15
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	3338      	adds	r3, #56	; 0x38
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	3304      	adds	r3, #4
 8002100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	705a      	strb	r2, [r3, #1]
 8002108:	e00f      	b.n	800212a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	f003 020f 	and.w	r2, r3, #15
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	4413      	add	r3, r2
 8002120:	3304      	adds	r3, #4
 8002122:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	f003 030f 	and.w	r3, r3, #15
 8002130:	b2da      	uxtb	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_PCD_EP_Close+0x6e>
 8002140:	2302      	movs	r3, #2
 8002142:	e00e      	b.n	8002162 <HAL_PCD_EP_Close+0x8c>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68f9      	ldr	r1, [r7, #12]
 8002152:	4618      	mov	r0, r3
 8002154:	f001 ff02 	bl	8003f5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b086      	sub	sp, #24
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	460b      	mov	r3, r1
 8002178:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800217a:	7afb      	ldrb	r3, [r7, #11]
 800217c:	f003 020f 	and.w	r2, r3, #15
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	3304      	adds	r3, #4
 8002192:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2200      	movs	r2, #0
 80021a4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2200      	movs	r2, #0
 80021aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ac:	7afb      	ldrb	r3, [r7, #11]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d102      	bne.n	80021c6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021c6:	7afb      	ldrb	r3, [r7, #11]
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d109      	bne.n	80021e4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	6979      	ldr	r1, [r7, #20]
 80021de:	f002 f9e1 	bl	80045a4 <USB_EP0StartXfer>
 80021e2:	e008      	b.n	80021f6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	6979      	ldr	r1, [r7, #20]
 80021f2:	f001 ff8f 	bl	8004114 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	460b      	mov	r3, r1
 800220e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002210:	7afb      	ldrb	r3, [r7, #11]
 8002212:	f003 020f 	and.w	r2, r3, #15
 8002216:	4613      	mov	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	3338      	adds	r3, #56	; 0x38
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4413      	add	r3, r2
 8002224:	3304      	adds	r3, #4
 8002226:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2200      	movs	r2, #0
 8002238:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2201      	movs	r2, #1
 800223e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002240:	7afb      	ldrb	r3, [r7, #11]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	b2da      	uxtb	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d102      	bne.n	800225a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800225a:	7afb      	ldrb	r3, [r7, #11]
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	2b00      	cmp	r3, #0
 8002262:	d109      	bne.n	8002278 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	6979      	ldr	r1, [r7, #20]
 8002272:	f002 f997 	bl	80045a4 <USB_EP0StartXfer>
 8002276:	e008      	b.n	800228a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	6979      	ldr	r1, [r7, #20]
 8002286:	f001 ff45 	bl	8004114 <USB_EPStartXfer>
  }

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	f003 020f 	and.w	r2, r3, #15
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d901      	bls.n	80022b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e050      	b.n	8002354 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	da0f      	bge.n	80022da <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ba:	78fb      	ldrb	r3, [r7, #3]
 80022bc:	f003 020f 	and.w	r2, r3, #15
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	3338      	adds	r3, #56	; 0x38
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	3304      	adds	r3, #4
 80022d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2201      	movs	r2, #1
 80022d6:	705a      	strb	r2, [r3, #1]
 80022d8:	e00d      	b.n	80022f6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	4413      	add	r3, r2
 80022ec:	3304      	adds	r3, #4
 80022ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	b2da      	uxtb	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_PCD_EP_SetStall+0x82>
 8002312:	2302      	movs	r3, #2
 8002314:	e01e      	b.n	8002354 <HAL_PCD_EP_SetStall+0xc0>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68f9      	ldr	r1, [r7, #12]
 8002324:	4618      	mov	r0, r3
 8002326:	f002 fbd5 	bl	8004ad4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10a      	bne.n	800234a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	b2d9      	uxtb	r1, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002344:	461a      	mov	r2, r3
 8002346:	f002 fdc5 	bl	8004ed4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	f003 020f 	and.w	r2, r3, #15
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	d901      	bls.n	800237a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e042      	b.n	8002400 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800237a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800237e:	2b00      	cmp	r3, #0
 8002380:	da0f      	bge.n	80023a2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	f003 020f 	and.w	r2, r3, #15
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	3338      	adds	r3, #56	; 0x38
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	3304      	adds	r3, #4
 8002398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	705a      	strb	r2, [r3, #1]
 80023a0:	e00f      	b.n	80023c2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023a2:	78fb      	ldrb	r3, [r7, #3]
 80023a4:	f003 020f 	and.w	r2, r3, #15
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	3304      	adds	r3, #4
 80023ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_PCD_EP_ClrStall+0x86>
 80023de:	2302      	movs	r3, #2
 80023e0:	e00e      	b.n	8002400 <HAL_PCD_EP_ClrStall+0xa4>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68f9      	ldr	r1, [r7, #12]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f002 fbdd 	bl	8004bb0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002414:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002418:	2b00      	cmp	r3, #0
 800241a:	da0c      	bge.n	8002436 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	f003 020f 	and.w	r2, r3, #15
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	3338      	adds	r3, #56	; 0x38
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	3304      	adds	r3, #4
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	e00c      	b.n	8002450 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	f003 020f 	and.w	r2, r3, #15
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	4413      	add	r3, r2
 800244c:	3304      	adds	r3, #4
 800244e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68f9      	ldr	r1, [r7, #12]
 8002456:	4618      	mov	r0, r3
 8002458:	f002 f9fc 	bl	8004854 <USB_EPStopXfer>
 800245c:	4603      	mov	r3, r0
 800245e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002460:	7afb      	ldrb	r3, [r7, #11]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b08a      	sub	sp, #40	; 0x28
 800246e:	af02      	add	r7, sp, #8
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	3338      	adds	r3, #56	; 0x38
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	3304      	adds	r3, #4
 8002490:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a1a      	ldr	r2, [r3, #32]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	429a      	cmp	r2, r3
 800249c:	d901      	bls.n	80024a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e06c      	b.n	800257c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d902      	bls.n	80024be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3303      	adds	r3, #3
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024c6:	e02b      	b.n	8002520 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	699a      	ldr	r2, [r3, #24]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	69fa      	ldr	r2, [r7, #28]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d902      	bls.n	80024e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	3303      	adds	r3, #3
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6919      	ldr	r1, [r3, #16]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	4603      	mov	r3, r0
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f002 fa50 	bl	80049a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	441a      	add	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a1a      	ldr	r2, [r3, #32]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	441a      	add	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	015a      	lsls	r2, r3, #5
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4413      	add	r3, r2
 8002528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	429a      	cmp	r2, r3
 8002534:	d809      	bhi.n	800254a <PCD_WriteEmptyTxFifo+0xe0>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a1a      	ldr	r2, [r3, #32]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800253e:	429a      	cmp	r2, r3
 8002540:	d203      	bcs.n	800254a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1be      	bne.n	80024c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	699a      	ldr	r2, [r3, #24]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	429a      	cmp	r2, r3
 8002554:	d811      	bhi.n	800257a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	2201      	movs	r2, #1
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800256a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	43db      	mvns	r3, r3
 8002570:	6939      	ldr	r1, [r7, #16]
 8002572:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002576:	4013      	ands	r3, r2
 8002578:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3720      	adds	r7, #32
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	333c      	adds	r3, #60	; 0x3c
 800259c:	3304      	adds	r3, #4
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d17b      	bne.n	80026b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d015      	beq.n	80025f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	4a61      	ldr	r2, [pc, #388]	; (800274c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	f240 80b9 	bls.w	8002740 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80b3 	beq.w	8002740 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	015a      	lsls	r2, r3, #5
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e6:	461a      	mov	r2, r3
 80025e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ec:	6093      	str	r3, [r2, #8]
 80025ee:	e0a7      	b.n	8002740 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f003 0320 	and.w	r3, r3, #32
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d009      	beq.n	800260e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	4413      	add	r3, r2
 8002602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002606:	461a      	mov	r2, r3
 8002608:	2320      	movs	r3, #32
 800260a:	6093      	str	r3, [r2, #8]
 800260c:	e098      	b.n	8002740 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002614:	2b00      	cmp	r3, #0
 8002616:	f040 8093 	bne.w	8002740 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	4a4b      	ldr	r2, [pc, #300]	; (800274c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d90f      	bls.n	8002642 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00a      	beq.n	8002642 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	4413      	add	r3, r2
 8002634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002638:	461a      	mov	r2, r3
 800263a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800263e:	6093      	str	r3, [r2, #8]
 8002640:	e07e      	b.n	8002740 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	4613      	mov	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	3304      	adds	r3, #4
 8002656:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	69da      	ldr	r2, [r3, #28]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	0159      	lsls	r1, r3, #5
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	440b      	add	r3, r1
 8002664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266e:	1ad2      	subs	r2, r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d114      	bne.n	80026a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800268c:	461a      	mov	r2, r3
 800268e:	2101      	movs	r1, #1
 8002690:	f002 fc20 	bl	8004ed4 <USB_EP0_OutStart>
 8002694:	e006      	b.n	80026a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	691a      	ldr	r2, [r3, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	441a      	add	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	4619      	mov	r1, r3
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f004 fb92 	bl	8006dd4 <HAL_PCD_DataOutStageCallback>
 80026b0:	e046      	b.n	8002740 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	4a26      	ldr	r2, [pc, #152]	; (8002750 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d124      	bne.n	8002704 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00a      	beq.n	80026da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d0:	461a      	mov	r2, r3
 80026d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026d6:	6093      	str	r3, [r2, #8]
 80026d8:	e032      	b.n	8002740 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f003 0320 	and.w	r3, r3, #32
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f0:	461a      	mov	r2, r3
 80026f2:	2320      	movs	r3, #32
 80026f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	4619      	mov	r1, r3
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f004 fb69 	bl	8006dd4 <HAL_PCD_DataOutStageCallback>
 8002702:	e01d      	b.n	8002740 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d114      	bne.n	8002734 <PCD_EP_OutXfrComplete_int+0x1b0>
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d108      	bne.n	8002734 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800272c:	461a      	mov	r2, r3
 800272e:	2100      	movs	r1, #0
 8002730:	f002 fbd0 	bl	8004ed4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	b2db      	uxtb	r3, r3
 8002738:	4619      	mov	r1, r3
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f004 fb4a 	bl	8006dd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	4f54300a 	.word	0x4f54300a
 8002750:	4f54310a 	.word	0x4f54310a

08002754 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	333c      	adds	r3, #60	; 0x3c
 800276c:	3304      	adds	r3, #4
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4413      	add	r3, r2
 800277a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4a15      	ldr	r2, [pc, #84]	; (80027dc <PCD_EP_OutSetupPacket_int+0x88>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d90e      	bls.n	80027a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002790:	2b00      	cmp	r3, #0
 8002792:	d009      	beq.n	80027a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4413      	add	r3, r2
 800279c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a0:	461a      	mov	r2, r3
 80027a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f004 fb01 	bl	8006db0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <PCD_EP_OutSetupPacket_int+0x88>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d90c      	bls.n	80027d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d108      	bne.n	80027d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027c8:	461a      	mov	r2, r3
 80027ca:	2101      	movs	r1, #1
 80027cc:	f002 fb82 	bl	8004ed4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	4f54300a 	.word	0x4f54300a

080027e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	70fb      	strb	r3, [r7, #3]
 80027ec:	4613      	mov	r3, r2
 80027ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d107      	bne.n	800280e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80027fe:	883b      	ldrh	r3, [r7, #0]
 8002800:	0419      	lsls	r1, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	430a      	orrs	r2, r1
 800280a:	629a      	str	r2, [r3, #40]	; 0x28
 800280c:	e028      	b.n	8002860 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	0c1b      	lsrs	r3, r3, #16
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	4413      	add	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800281c:	2300      	movs	r3, #0
 800281e:	73fb      	strb	r3, [r7, #15]
 8002820:	e00d      	b.n	800283e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	3340      	adds	r3, #64	; 0x40
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	0c1b      	lsrs	r3, r3, #16
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	4413      	add	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	3301      	adds	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
 800283e:	7bfa      	ldrb	r2, [r7, #15]
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	3b01      	subs	r3, #1
 8002844:	429a      	cmp	r2, r3
 8002846:	d3ec      	bcc.n	8002822 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002848:	883b      	ldrh	r3, [r7, #0]
 800284a:	0418      	lsls	r0, r3, #16
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6819      	ldr	r1, [r3, #0]
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	3b01      	subs	r3, #1
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	4302      	orrs	r2, r0
 8002858:	3340      	adds	r3, #64	; 0x40
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	460b      	mov	r3, r1
 8002878:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	887a      	ldrh	r2, [r7, #2]
 8002880:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e267      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d075      	beq.n	80029b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028c6:	4b88      	ldr	r3, [pc, #544]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d00c      	beq.n	80028ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028d2:	4b85      	ldr	r3, [pc, #532]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d112      	bne.n	8002904 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028de:	4b82      	ldr	r3, [pc, #520]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ea:	d10b      	bne.n	8002904 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	4b7e      	ldr	r3, [pc, #504]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d05b      	beq.n	80029b0 <HAL_RCC_OscConfig+0x108>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d157      	bne.n	80029b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e242      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290c:	d106      	bne.n	800291c <HAL_RCC_OscConfig+0x74>
 800290e:	4b76      	ldr	r3, [pc, #472]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a75      	ldr	r2, [pc, #468]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e01d      	b.n	8002958 <HAL_RCC_OscConfig+0xb0>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0x98>
 8002926:	4b70      	ldr	r3, [pc, #448]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a6f      	ldr	r2, [pc, #444]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 800292c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b6d      	ldr	r3, [pc, #436]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a6c      	ldr	r2, [pc, #432]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e00b      	b.n	8002958 <HAL_RCC_OscConfig+0xb0>
 8002940:	4b69      	ldr	r3, [pc, #420]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a68      	ldr	r2, [pc, #416]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	4b66      	ldr	r3, [pc, #408]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a65      	ldr	r2, [pc, #404]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7fe fa1e 	bl	8000da0 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002968:	f7fe fa1a 	bl	8000da0 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e207      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b5b      	ldr	r3, [pc, #364]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0xc0>
 8002986:	e014      	b.n	80029b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe fa0a 	bl	8000da0 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002990:	f7fe fa06 	bl	8000da0 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	; 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e1f3      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	4b51      	ldr	r3, [pc, #324]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0xe8>
 80029ae:	e000      	b.n	80029b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d063      	beq.n	8002a86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029be:	4b4a      	ldr	r3, [pc, #296]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00b      	beq.n	80029e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ca:	4b47      	ldr	r3, [pc, #284]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d11c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029d6:	4b44      	ldr	r3, [pc, #272]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d116      	bne.n	8002a10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	4b41      	ldr	r3, [pc, #260]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_RCC_OscConfig+0x152>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d001      	beq.n	80029fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e1c7      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fa:	4b3b      	ldr	r3, [pc, #236]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4937      	ldr	r1, [pc, #220]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	e03a      	b.n	8002a86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a18:	4b34      	ldr	r3, [pc, #208]	; (8002aec <HAL_RCC_OscConfig+0x244>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7fe f9bf 	bl	8000da0 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a26:	f7fe f9bb 	bl	8000da0 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e1a8      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a38:	4b2b      	ldr	r3, [pc, #172]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a44:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4925      	ldr	r1, [pc, #148]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]
 8002a58:	e015      	b.n	8002a86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5a:	4b24      	ldr	r3, [pc, #144]	; (8002aec <HAL_RCC_OscConfig+0x244>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fe f99e 	bl	8000da0 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a68:	f7fe f99a 	bl	8000da0 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e187      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d036      	beq.n	8002b00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d016      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <HAL_RCC_OscConfig+0x248>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe f97e 	bl	8000da0 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa8:	f7fe f97a 	bl	8000da0 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e167      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aba:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_RCC_OscConfig+0x240>)
 8002abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x200>
 8002ac6:	e01b      	b.n	8002b00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_RCC_OscConfig+0x248>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ace:	f7fe f967 	bl	8000da0 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad4:	e00e      	b.n	8002af4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ad6:	f7fe f963 	bl	8000da0 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d907      	bls.n	8002af4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e150      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	42470000 	.word	0x42470000
 8002af0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af4:	4b88      	ldr	r3, [pc, #544]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ea      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8097 	beq.w	8002c3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b12:	4b81      	ldr	r3, [pc, #516]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10f      	bne.n	8002b3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	4b7d      	ldr	r3, [pc, #500]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	4a7c      	ldr	r2, [pc, #496]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2e:	4b7a      	ldr	r3, [pc, #488]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3e:	4b77      	ldr	r3, [pc, #476]	; (8002d1c <HAL_RCC_OscConfig+0x474>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d118      	bne.n	8002b7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b4a:	4b74      	ldr	r3, [pc, #464]	; (8002d1c <HAL_RCC_OscConfig+0x474>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a73      	ldr	r2, [pc, #460]	; (8002d1c <HAL_RCC_OscConfig+0x474>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b56:	f7fe f923 	bl	8000da0 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5e:	f7fe f91f 	bl	8000da0 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e10c      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	4b6a      	ldr	r3, [pc, #424]	; (8002d1c <HAL_RCC_OscConfig+0x474>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d106      	bne.n	8002b92 <HAL_RCC_OscConfig+0x2ea>
 8002b84:	4b64      	ldr	r3, [pc, #400]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a63      	ldr	r2, [pc, #396]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b90:	e01c      	b.n	8002bcc <HAL_RCC_OscConfig+0x324>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b05      	cmp	r3, #5
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x30c>
 8002b9a:	4b5f      	ldr	r3, [pc, #380]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	4a5e      	ldr	r2, [pc, #376]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	f043 0304 	orr.w	r3, r3, #4
 8002ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba6:	4b5c      	ldr	r3, [pc, #368]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	4a5b      	ldr	r2, [pc, #364]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb2:	e00b      	b.n	8002bcc <HAL_RCC_OscConfig+0x324>
 8002bb4:	4b58      	ldr	r3, [pc, #352]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb8:	4a57      	ldr	r2, [pc, #348]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc0:	4b55      	ldr	r3, [pc, #340]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc4:	4a54      	ldr	r2, [pc, #336]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bc6:	f023 0304 	bic.w	r3, r3, #4
 8002bca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d015      	beq.n	8002c00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd4:	f7fe f8e4 	bl	8000da0 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bdc:	f7fe f8e0 	bl	8000da0 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e0cb      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf2:	4b49      	ldr	r3, [pc, #292]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0ee      	beq.n	8002bdc <HAL_RCC_OscConfig+0x334>
 8002bfe:	e014      	b.n	8002c2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c00:	f7fe f8ce 	bl	8000da0 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c08:	f7fe f8ca 	bl	8000da0 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e0b5      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c1e:	4b3e      	ldr	r3, [pc, #248]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1ee      	bne.n	8002c08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c30:	4b39      	ldr	r3, [pc, #228]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	4a38      	ldr	r2, [pc, #224]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80a1 	beq.w	8002d88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c46:	4b34      	ldr	r3, [pc, #208]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d05c      	beq.n	8002d0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d141      	bne.n	8002cde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5a:	4b31      	ldr	r3, [pc, #196]	; (8002d20 <HAL_RCC_OscConfig+0x478>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7fe f89e 	bl	8000da0 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c68:	f7fe f89a 	bl	8000da0 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e087      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7a:	4b27      	ldr	r3, [pc, #156]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69da      	ldr	r2, [r3, #28]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	019b      	lsls	r3, r3, #6
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9c:	085b      	lsrs	r3, r3, #1
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	041b      	lsls	r3, r3, #16
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	061b      	lsls	r3, r3, #24
 8002caa:	491b      	ldr	r1, [pc, #108]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_RCC_OscConfig+0x478>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb6:	f7fe f873 	bl	8000da0 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cbe:	f7fe f86f 	bl	8000da0 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e05c      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd0:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x416>
 8002cdc:	e054      	b.n	8002d88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <HAL_RCC_OscConfig+0x478>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7fe f85c 	bl	8000da0 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cec:	f7fe f858 	bl	8000da0 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e045      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfe:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <HAL_RCC_OscConfig+0x470>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x444>
 8002d0a:	e03d      	b.n	8002d88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d107      	bne.n	8002d24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e038      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40007000 	.word	0x40007000
 8002d20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d24:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <HAL_RCC_OscConfig+0x4ec>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d028      	beq.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d121      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d11a      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d54:	4013      	ands	r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d111      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	085b      	lsrs	r3, r3, #1
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800

08002d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0cc      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dac:	4b68      	ldr	r3, [pc, #416]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d90c      	bls.n	8002dd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	4b65      	ldr	r3, [pc, #404]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc2:	4b63      	ldr	r3, [pc, #396]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0b8      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dec:	4b59      	ldr	r3, [pc, #356]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	4a58      	ldr	r2, [pc, #352]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002df6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e04:	4b53      	ldr	r3, [pc, #332]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4a52      	ldr	r2, [pc, #328]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e10:	4b50      	ldr	r3, [pc, #320]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	494d      	ldr	r1, [pc, #308]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d044      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d107      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	4b47      	ldr	r3, [pc, #284]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d119      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e07f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d003      	beq.n	8002e56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e56:	4b3f      	ldr	r3, [pc, #252]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e06f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e66:	4b3b      	ldr	r3, [pc, #236]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e067      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e76:	4b37      	ldr	r3, [pc, #220]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f023 0203 	bic.w	r2, r3, #3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4934      	ldr	r1, [pc, #208]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e88:	f7fd ff8a 	bl	8000da0 <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e90:	f7fd ff86 	bl	8000da0 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e04f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea6:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 020c 	and.w	r2, r3, #12
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d1eb      	bne.n	8002e90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb8:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d20c      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec6:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e032      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4916      	ldr	r1, [pc, #88]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d009      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f0a:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	490e      	ldr	r1, [pc, #56]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f1e:	f000 f821 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8002f22:	4602      	mov	r2, r0
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	490a      	ldr	r1, [pc, #40]	; (8002f58 <HAL_RCC_ClockConfig+0x1c0>)
 8002f30:	5ccb      	ldrb	r3, [r1, r3]
 8002f32:	fa22 f303 	lsr.w	r3, r2, r3
 8002f36:	4a09      	ldr	r2, [pc, #36]	; (8002f5c <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fd feea 	bl	8000d18 <HAL_InitTick>

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023c00 	.word	0x40023c00
 8002f54:	40023800 	.word	0x40023800
 8002f58:	08007ec0 	.word	0x08007ec0
 8002f5c:	20000004 	.word	0x20000004
 8002f60:	20000008 	.word	0x20000008

08002f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f68:	b094      	sub	sp, #80	; 0x50
 8002f6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f70:	2300      	movs	r3, #0
 8002f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f74:	2300      	movs	r3, #0
 8002f76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f7c:	4b79      	ldr	r3, [pc, #484]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d00d      	beq.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	f200 80e1 	bhi.w	8003150 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x34>
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d003      	beq.n	8002f9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f96:	e0db      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f98:	4b73      	ldr	r3, [pc, #460]	; (8003168 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f9c:	e0db      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f9e:	4b73      	ldr	r3, [pc, #460]	; (800316c <HAL_RCC_GetSysClockFreq+0x208>)
 8002fa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fa2:	e0d8      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fa4:	4b6f      	ldr	r3, [pc, #444]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fae:	4b6d      	ldr	r3, [pc, #436]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d063      	beq.n	8003082 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fba:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	099b      	lsrs	r3, r3, #6
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8002fce:	2300      	movs	r3, #0
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fd6:	4622      	mov	r2, r4
 8002fd8:	462b      	mov	r3, r5
 8002fda:	f04f 0000 	mov.w	r0, #0
 8002fde:	f04f 0100 	mov.w	r1, #0
 8002fe2:	0159      	lsls	r1, r3, #5
 8002fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe8:	0150      	lsls	r0, r2, #5
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4621      	mov	r1, r4
 8002ff0:	1a51      	subs	r1, r2, r1
 8002ff2:	6139      	str	r1, [r7, #16]
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003008:	4659      	mov	r1, fp
 800300a:	018b      	lsls	r3, r1, #6
 800300c:	4651      	mov	r1, sl
 800300e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003012:	4651      	mov	r1, sl
 8003014:	018a      	lsls	r2, r1, #6
 8003016:	4651      	mov	r1, sl
 8003018:	ebb2 0801 	subs.w	r8, r2, r1
 800301c:	4659      	mov	r1, fp
 800301e:	eb63 0901 	sbc.w	r9, r3, r1
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800302e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003036:	4690      	mov	r8, r2
 8003038:	4699      	mov	r9, r3
 800303a:	4623      	mov	r3, r4
 800303c:	eb18 0303 	adds.w	r3, r8, r3
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	462b      	mov	r3, r5
 8003044:	eb49 0303 	adc.w	r3, r9, r3
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003056:	4629      	mov	r1, r5
 8003058:	024b      	lsls	r3, r1, #9
 800305a:	4621      	mov	r1, r4
 800305c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003060:	4621      	mov	r1, r4
 8003062:	024a      	lsls	r2, r1, #9
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800306a:	2200      	movs	r2, #0
 800306c:	62bb      	str	r3, [r7, #40]	; 0x28
 800306e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003070:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003074:	f7fd f8ba 	bl	80001ec <__aeabi_uldivmod>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4613      	mov	r3, r2
 800307e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003080:	e058      	b.n	8003134 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003082:	4b38      	ldr	r3, [pc, #224]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	099b      	lsrs	r3, r3, #6
 8003088:	2200      	movs	r2, #0
 800308a:	4618      	mov	r0, r3
 800308c:	4611      	mov	r1, r2
 800308e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003092:	623b      	str	r3, [r7, #32]
 8003094:	2300      	movs	r3, #0
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
 8003098:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800309c:	4642      	mov	r2, r8
 800309e:	464b      	mov	r3, r9
 80030a0:	f04f 0000 	mov.w	r0, #0
 80030a4:	f04f 0100 	mov.w	r1, #0
 80030a8:	0159      	lsls	r1, r3, #5
 80030aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ae:	0150      	lsls	r0, r2, #5
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4641      	mov	r1, r8
 80030b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80030ba:	4649      	mov	r1, r9
 80030bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030d4:	ebb2 040a 	subs.w	r4, r2, sl
 80030d8:	eb63 050b 	sbc.w	r5, r3, fp
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	00eb      	lsls	r3, r5, #3
 80030e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ea:	00e2      	lsls	r2, r4, #3
 80030ec:	4614      	mov	r4, r2
 80030ee:	461d      	mov	r5, r3
 80030f0:	4643      	mov	r3, r8
 80030f2:	18e3      	adds	r3, r4, r3
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	464b      	mov	r3, r9
 80030f8:	eb45 0303 	adc.w	r3, r5, r3
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	e9d7 4500 	ldrd	r4, r5, [r7]
 800310a:	4629      	mov	r1, r5
 800310c:	028b      	lsls	r3, r1, #10
 800310e:	4621      	mov	r1, r4
 8003110:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003114:	4621      	mov	r1, r4
 8003116:	028a      	lsls	r2, r1, #10
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800311e:	2200      	movs	r2, #0
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	61fa      	str	r2, [r7, #28]
 8003124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003128:	f7fd f860 	bl	80001ec <__aeabi_uldivmod>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4613      	mov	r3, r2
 8003132:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_RCC_GetSysClockFreq+0x200>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	f003 0303 	and.w	r3, r3, #3
 800313e:	3301      	adds	r3, #1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003144:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800314e:	e002      	b.n	8003156 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_RCC_GetSysClockFreq+0x204>)
 8003152:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003158:	4618      	mov	r0, r3
 800315a:	3750      	adds	r7, #80	; 0x50
 800315c:	46bd      	mov	sp, r7
 800315e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003162:	bf00      	nop
 8003164:	40023800 	.word	0x40023800
 8003168:	00f42400 	.word	0x00f42400
 800316c:	007a1200 	.word	0x007a1200

08003170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003174:	4b03      	ldr	r3, [pc, #12]	; (8003184 <HAL_RCC_GetHCLKFreq+0x14>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20000004 	.word	0x20000004

08003188 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800318c:	f7ff fff0 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 8003190:	4602      	mov	r2, r0
 8003192:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	0a9b      	lsrs	r3, r3, #10
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	4903      	ldr	r1, [pc, #12]	; (80031ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800319e:	5ccb      	ldrb	r3, [r1, r3]
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40023800 	.word	0x40023800
 80031ac:	08007ed0 	.word	0x08007ed0

080031b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031b4:	f7ff ffdc 	bl	8003170 <HAL_RCC_GetHCLKFreq>
 80031b8:	4602      	mov	r2, r0
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	0b5b      	lsrs	r3, r3, #13
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	4903      	ldr	r1, [pc, #12]	; (80031d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c6:	5ccb      	ldrb	r3, [r1, r3]
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40023800 	.word	0x40023800
 80031d4:	08007ed0 	.word	0x08007ed0

080031d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e03f      	b.n	800326a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fd fcb0 	bl	8000b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2224      	movs	r2, #36	; 0x24
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800321a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f829 	bl	8003274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003278:	b0c0      	sub	sp, #256	; 0x100
 800327a:	af00      	add	r7, sp, #0
 800327c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003290:	68d9      	ldr	r1, [r3, #12]
 8003292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	ea40 0301 	orr.w	r3, r0, r1
 800329c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800329e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032cc:	f021 010c 	bic.w	r1, r1, #12
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032da:	430b      	orrs	r3, r1
 80032dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ee:	6999      	ldr	r1, [r3, #24]
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	ea40 0301 	orr.w	r3, r0, r1
 80032fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	4b8f      	ldr	r3, [pc, #572]	; (8003540 <UART_SetConfig+0x2cc>)
 8003304:	429a      	cmp	r2, r3
 8003306:	d005      	beq.n	8003314 <UART_SetConfig+0xa0>
 8003308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4b8d      	ldr	r3, [pc, #564]	; (8003544 <UART_SetConfig+0x2d0>)
 8003310:	429a      	cmp	r2, r3
 8003312:	d104      	bne.n	800331e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003314:	f7ff ff4c 	bl	80031b0 <HAL_RCC_GetPCLK2Freq>
 8003318:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800331c:	e003      	b.n	8003326 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800331e:	f7ff ff33 	bl	8003188 <HAL_RCC_GetPCLK1Freq>
 8003322:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003330:	f040 810c 	bne.w	800354c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003338:	2200      	movs	r2, #0
 800333a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800333e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003342:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003346:	4622      	mov	r2, r4
 8003348:	462b      	mov	r3, r5
 800334a:	1891      	adds	r1, r2, r2
 800334c:	65b9      	str	r1, [r7, #88]	; 0x58
 800334e:	415b      	adcs	r3, r3
 8003350:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003352:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003356:	4621      	mov	r1, r4
 8003358:	eb12 0801 	adds.w	r8, r2, r1
 800335c:	4629      	mov	r1, r5
 800335e:	eb43 0901 	adc.w	r9, r3, r1
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800336e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003376:	4690      	mov	r8, r2
 8003378:	4699      	mov	r9, r3
 800337a:	4623      	mov	r3, r4
 800337c:	eb18 0303 	adds.w	r3, r8, r3
 8003380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003384:	462b      	mov	r3, r5
 8003386:	eb49 0303 	adc.w	r3, r9, r3
 800338a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800338e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800339a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800339e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033a2:	460b      	mov	r3, r1
 80033a4:	18db      	adds	r3, r3, r3
 80033a6:	653b      	str	r3, [r7, #80]	; 0x50
 80033a8:	4613      	mov	r3, r2
 80033aa:	eb42 0303 	adc.w	r3, r2, r3
 80033ae:	657b      	str	r3, [r7, #84]	; 0x54
 80033b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033b8:	f7fc ff18 	bl	80001ec <__aeabi_uldivmod>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4b61      	ldr	r3, [pc, #388]	; (8003548 <UART_SetConfig+0x2d4>)
 80033c2:	fba3 2302 	umull	r2, r3, r3, r2
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	011c      	lsls	r4, r3, #4
 80033ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ce:	2200      	movs	r2, #0
 80033d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80033d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80033dc:	4642      	mov	r2, r8
 80033de:	464b      	mov	r3, r9
 80033e0:	1891      	adds	r1, r2, r2
 80033e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80033e4:	415b      	adcs	r3, r3
 80033e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033ec:	4641      	mov	r1, r8
 80033ee:	eb12 0a01 	adds.w	sl, r2, r1
 80033f2:	4649      	mov	r1, r9
 80033f4:	eb43 0b01 	adc.w	fp, r3, r1
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003404:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800340c:	4692      	mov	sl, r2
 800340e:	469b      	mov	fp, r3
 8003410:	4643      	mov	r3, r8
 8003412:	eb1a 0303 	adds.w	r3, sl, r3
 8003416:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800341a:	464b      	mov	r3, r9
 800341c:	eb4b 0303 	adc.w	r3, fp, r3
 8003420:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003430:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003434:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003438:	460b      	mov	r3, r1
 800343a:	18db      	adds	r3, r3, r3
 800343c:	643b      	str	r3, [r7, #64]	; 0x40
 800343e:	4613      	mov	r3, r2
 8003440:	eb42 0303 	adc.w	r3, r2, r3
 8003444:	647b      	str	r3, [r7, #68]	; 0x44
 8003446:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800344a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800344e:	f7fc fecd 	bl	80001ec <__aeabi_uldivmod>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4611      	mov	r1, r2
 8003458:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <UART_SetConfig+0x2d4>)
 800345a:	fba3 2301 	umull	r2, r3, r3, r1
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2264      	movs	r2, #100	; 0x64
 8003462:	fb02 f303 	mul.w	r3, r2, r3
 8003466:	1acb      	subs	r3, r1, r3
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800346e:	4b36      	ldr	r3, [pc, #216]	; (8003548 <UART_SetConfig+0x2d4>)
 8003470:	fba3 2302 	umull	r2, r3, r3, r2
 8003474:	095b      	lsrs	r3, r3, #5
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800347c:	441c      	add	r4, r3
 800347e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003482:	2200      	movs	r2, #0
 8003484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003488:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800348c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003490:	4642      	mov	r2, r8
 8003492:	464b      	mov	r3, r9
 8003494:	1891      	adds	r1, r2, r2
 8003496:	63b9      	str	r1, [r7, #56]	; 0x38
 8003498:	415b      	adcs	r3, r3
 800349a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800349c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034a0:	4641      	mov	r1, r8
 80034a2:	1851      	adds	r1, r2, r1
 80034a4:	6339      	str	r1, [r7, #48]	; 0x30
 80034a6:	4649      	mov	r1, r9
 80034a8:	414b      	adcs	r3, r1
 80034aa:	637b      	str	r3, [r7, #52]	; 0x34
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034b8:	4659      	mov	r1, fp
 80034ba:	00cb      	lsls	r3, r1, #3
 80034bc:	4651      	mov	r1, sl
 80034be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034c2:	4651      	mov	r1, sl
 80034c4:	00ca      	lsls	r2, r1, #3
 80034c6:	4610      	mov	r0, r2
 80034c8:	4619      	mov	r1, r3
 80034ca:	4603      	mov	r3, r0
 80034cc:	4642      	mov	r2, r8
 80034ce:	189b      	adds	r3, r3, r2
 80034d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034d4:	464b      	mov	r3, r9
 80034d6:	460a      	mov	r2, r1
 80034d8:	eb42 0303 	adc.w	r3, r2, r3
 80034dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80034f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034f4:	460b      	mov	r3, r1
 80034f6:	18db      	adds	r3, r3, r3
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034fa:	4613      	mov	r3, r2
 80034fc:	eb42 0303 	adc.w	r3, r2, r3
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003502:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003506:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800350a:	f7fc fe6f 	bl	80001ec <__aeabi_uldivmod>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <UART_SetConfig+0x2d4>)
 8003514:	fba3 1302 	umull	r1, r3, r3, r2
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	2164      	movs	r1, #100	; 0x64
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	3332      	adds	r3, #50	; 0x32
 8003526:	4a08      	ldr	r2, [pc, #32]	; (8003548 <UART_SetConfig+0x2d4>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	f003 0207 	and.w	r2, r3, #7
 8003532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4422      	add	r2, r4
 800353a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800353c:	e106      	b.n	800374c <UART_SetConfig+0x4d8>
 800353e:	bf00      	nop
 8003540:	40011000 	.word	0x40011000
 8003544:	40011400 	.word	0x40011400
 8003548:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800354c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003550:	2200      	movs	r2, #0
 8003552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003556:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800355a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800355e:	4642      	mov	r2, r8
 8003560:	464b      	mov	r3, r9
 8003562:	1891      	adds	r1, r2, r2
 8003564:	6239      	str	r1, [r7, #32]
 8003566:	415b      	adcs	r3, r3
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
 800356a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800356e:	4641      	mov	r1, r8
 8003570:	1854      	adds	r4, r2, r1
 8003572:	4649      	mov	r1, r9
 8003574:	eb43 0501 	adc.w	r5, r3, r1
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	00eb      	lsls	r3, r5, #3
 8003582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003586:	00e2      	lsls	r2, r4, #3
 8003588:	4614      	mov	r4, r2
 800358a:	461d      	mov	r5, r3
 800358c:	4643      	mov	r3, r8
 800358e:	18e3      	adds	r3, r4, r3
 8003590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003594:	464b      	mov	r3, r9
 8003596:	eb45 0303 	adc.w	r3, r5, r3
 800359a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800359e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035ba:	4629      	mov	r1, r5
 80035bc:	008b      	lsls	r3, r1, #2
 80035be:	4621      	mov	r1, r4
 80035c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035c4:	4621      	mov	r1, r4
 80035c6:	008a      	lsls	r2, r1, #2
 80035c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035cc:	f7fc fe0e 	bl	80001ec <__aeabi_uldivmod>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4b60      	ldr	r3, [pc, #384]	; (8003758 <UART_SetConfig+0x4e4>)
 80035d6:	fba3 2302 	umull	r2, r3, r3, r2
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	011c      	lsls	r4, r3, #4
 80035de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80035f0:	4642      	mov	r2, r8
 80035f2:	464b      	mov	r3, r9
 80035f4:	1891      	adds	r1, r2, r2
 80035f6:	61b9      	str	r1, [r7, #24]
 80035f8:	415b      	adcs	r3, r3
 80035fa:	61fb      	str	r3, [r7, #28]
 80035fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003600:	4641      	mov	r1, r8
 8003602:	1851      	adds	r1, r2, r1
 8003604:	6139      	str	r1, [r7, #16]
 8003606:	4649      	mov	r1, r9
 8003608:	414b      	adcs	r3, r1
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003618:	4659      	mov	r1, fp
 800361a:	00cb      	lsls	r3, r1, #3
 800361c:	4651      	mov	r1, sl
 800361e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003622:	4651      	mov	r1, sl
 8003624:	00ca      	lsls	r2, r1, #3
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	4603      	mov	r3, r0
 800362c:	4642      	mov	r2, r8
 800362e:	189b      	adds	r3, r3, r2
 8003630:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003634:	464b      	mov	r3, r9
 8003636:	460a      	mov	r2, r1
 8003638:	eb42 0303 	adc.w	r3, r2, r3
 800363c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	67bb      	str	r3, [r7, #120]	; 0x78
 800364a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003658:	4649      	mov	r1, r9
 800365a:	008b      	lsls	r3, r1, #2
 800365c:	4641      	mov	r1, r8
 800365e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003662:	4641      	mov	r1, r8
 8003664:	008a      	lsls	r2, r1, #2
 8003666:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800366a:	f7fc fdbf 	bl	80001ec <__aeabi_uldivmod>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4611      	mov	r1, r2
 8003674:	4b38      	ldr	r3, [pc, #224]	; (8003758 <UART_SetConfig+0x4e4>)
 8003676:	fba3 2301 	umull	r2, r3, r3, r1
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	2264      	movs	r2, #100	; 0x64
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	1acb      	subs	r3, r1, r3
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	3332      	adds	r3, #50	; 0x32
 8003688:	4a33      	ldr	r2, [pc, #204]	; (8003758 <UART_SetConfig+0x4e4>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003694:	441c      	add	r4, r3
 8003696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800369a:	2200      	movs	r2, #0
 800369c:	673b      	str	r3, [r7, #112]	; 0x70
 800369e:	677a      	str	r2, [r7, #116]	; 0x74
 80036a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036a4:	4642      	mov	r2, r8
 80036a6:	464b      	mov	r3, r9
 80036a8:	1891      	adds	r1, r2, r2
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	415b      	adcs	r3, r3
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036b4:	4641      	mov	r1, r8
 80036b6:	1851      	adds	r1, r2, r1
 80036b8:	6039      	str	r1, [r7, #0]
 80036ba:	4649      	mov	r1, r9
 80036bc:	414b      	adcs	r3, r1
 80036be:	607b      	str	r3, [r7, #4]
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036cc:	4659      	mov	r1, fp
 80036ce:	00cb      	lsls	r3, r1, #3
 80036d0:	4651      	mov	r1, sl
 80036d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036d6:	4651      	mov	r1, sl
 80036d8:	00ca      	lsls	r2, r1, #3
 80036da:	4610      	mov	r0, r2
 80036dc:	4619      	mov	r1, r3
 80036de:	4603      	mov	r3, r0
 80036e0:	4642      	mov	r2, r8
 80036e2:	189b      	adds	r3, r3, r2
 80036e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80036e6:	464b      	mov	r3, r9
 80036e8:	460a      	mov	r2, r1
 80036ea:	eb42 0303 	adc.w	r3, r2, r3
 80036ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	663b      	str	r3, [r7, #96]	; 0x60
 80036fa:	667a      	str	r2, [r7, #100]	; 0x64
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003708:	4649      	mov	r1, r9
 800370a:	008b      	lsls	r3, r1, #2
 800370c:	4641      	mov	r1, r8
 800370e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003712:	4641      	mov	r1, r8
 8003714:	008a      	lsls	r2, r1, #2
 8003716:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800371a:	f7fc fd67 	bl	80001ec <__aeabi_uldivmod>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <UART_SetConfig+0x4e4>)
 8003724:	fba3 1302 	umull	r1, r3, r3, r2
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	2164      	movs	r1, #100	; 0x64
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	3332      	adds	r3, #50	; 0x32
 8003736:	4a08      	ldr	r2, [pc, #32]	; (8003758 <UART_SetConfig+0x4e4>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	095b      	lsrs	r3, r3, #5
 800373e:	f003 020f 	and.w	r2, r3, #15
 8003742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4422      	add	r2, r4
 800374a:	609a      	str	r2, [r3, #8]
}
 800374c:	bf00      	nop
 800374e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003752:	46bd      	mov	sp, r7
 8003754:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003758:	51eb851f 	.word	0x51eb851f

0800375c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800375c:	b084      	sub	sp, #16
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	f107 001c 	add.w	r0, r7, #28
 800376a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	2b01      	cmp	r3, #1
 8003772:	d122      	bne.n	80037ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003778:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800379c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d105      	bne.n	80037ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f001 fbee 	bl	8004f90 <USB_CoreReset>
 80037b4:	4603      	mov	r3, r0
 80037b6:	73fb      	strb	r3, [r7, #15]
 80037b8:	e01a      	b.n	80037f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f001 fbe2 	bl	8004f90 <USB_CoreReset>
 80037cc:	4603      	mov	r3, r0
 80037ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d106      	bne.n	80037e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38
 80037e2:	e005      	b.n	80037f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d10b      	bne.n	800380e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f043 0206 	orr.w	r2, r3, #6
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f043 0220 	orr.w	r2, r3, #32
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800380e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800381a:	b004      	add	sp, #16
 800381c:	4770      	bx	lr
	...

08003820 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	4613      	mov	r3, r2
 800382c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d165      	bne.n	8003900 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4a41      	ldr	r2, [pc, #260]	; (800393c <USB_SetTurnaroundTime+0x11c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d906      	bls.n	800384a <USB_SetTurnaroundTime+0x2a>
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4a40      	ldr	r2, [pc, #256]	; (8003940 <USB_SetTurnaroundTime+0x120>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d202      	bcs.n	800384a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003844:	230f      	movs	r3, #15
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	e062      	b.n	8003910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	4a3c      	ldr	r2, [pc, #240]	; (8003940 <USB_SetTurnaroundTime+0x120>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d306      	bcc.n	8003860 <USB_SetTurnaroundTime+0x40>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	4a3b      	ldr	r2, [pc, #236]	; (8003944 <USB_SetTurnaroundTime+0x124>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d202      	bcs.n	8003860 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800385a:	230e      	movs	r3, #14
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	e057      	b.n	8003910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4a38      	ldr	r2, [pc, #224]	; (8003944 <USB_SetTurnaroundTime+0x124>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d306      	bcc.n	8003876 <USB_SetTurnaroundTime+0x56>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4a37      	ldr	r2, [pc, #220]	; (8003948 <USB_SetTurnaroundTime+0x128>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d202      	bcs.n	8003876 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003870:	230d      	movs	r3, #13
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	e04c      	b.n	8003910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	4a33      	ldr	r2, [pc, #204]	; (8003948 <USB_SetTurnaroundTime+0x128>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d306      	bcc.n	800388c <USB_SetTurnaroundTime+0x6c>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4a32      	ldr	r2, [pc, #200]	; (800394c <USB_SetTurnaroundTime+0x12c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d802      	bhi.n	800388c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003886:	230c      	movs	r3, #12
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	e041      	b.n	8003910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4a2f      	ldr	r2, [pc, #188]	; (800394c <USB_SetTurnaroundTime+0x12c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d906      	bls.n	80038a2 <USB_SetTurnaroundTime+0x82>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4a2e      	ldr	r2, [pc, #184]	; (8003950 <USB_SetTurnaroundTime+0x130>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d802      	bhi.n	80038a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800389c:	230b      	movs	r3, #11
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	e036      	b.n	8003910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	4a2a      	ldr	r2, [pc, #168]	; (8003950 <USB_SetTurnaroundTime+0x130>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d906      	bls.n	80038b8 <USB_SetTurnaroundTime+0x98>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4a29      	ldr	r2, [pc, #164]	; (8003954 <USB_SetTurnaroundTime+0x134>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d802      	bhi.n	80038b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80038b2:	230a      	movs	r3, #10
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	e02b      	b.n	8003910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	4a26      	ldr	r2, [pc, #152]	; (8003954 <USB_SetTurnaroundTime+0x134>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d906      	bls.n	80038ce <USB_SetTurnaroundTime+0xae>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4a25      	ldr	r2, [pc, #148]	; (8003958 <USB_SetTurnaroundTime+0x138>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d202      	bcs.n	80038ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80038c8:	2309      	movs	r3, #9
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	e020      	b.n	8003910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4a21      	ldr	r2, [pc, #132]	; (8003958 <USB_SetTurnaroundTime+0x138>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d306      	bcc.n	80038e4 <USB_SetTurnaroundTime+0xc4>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4a20      	ldr	r2, [pc, #128]	; (800395c <USB_SetTurnaroundTime+0x13c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d802      	bhi.n	80038e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80038de:	2308      	movs	r3, #8
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e015      	b.n	8003910 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4a1d      	ldr	r2, [pc, #116]	; (800395c <USB_SetTurnaroundTime+0x13c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d906      	bls.n	80038fa <USB_SetTurnaroundTime+0xda>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4a1c      	ldr	r2, [pc, #112]	; (8003960 <USB_SetTurnaroundTime+0x140>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d202      	bcs.n	80038fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80038f4:	2307      	movs	r3, #7
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	e00a      	b.n	8003910 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80038fa:	2306      	movs	r3, #6
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	e007      	b.n	8003910 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d102      	bne.n	800390c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003906:	2309      	movs	r3, #9
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	e001      	b.n	8003910 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800390c:	2309      	movs	r3, #9
 800390e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	029b      	lsls	r3, r3, #10
 8003924:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003928:	431a      	orrs	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	371c      	adds	r7, #28
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	00d8acbf 	.word	0x00d8acbf
 8003940:	00e4e1c0 	.word	0x00e4e1c0
 8003944:	00f42400 	.word	0x00f42400
 8003948:	01067380 	.word	0x01067380
 800394c:	011a499f 	.word	0x011a499f
 8003950:	01312cff 	.word	0x01312cff
 8003954:	014ca43f 	.word	0x014ca43f
 8003958:	016e3600 	.word	0x016e3600
 800395c:	01a6ab1f 	.word	0x01a6ab1f
 8003960:	01e84800 	.word	0x01e84800

08003964 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f043 0201 	orr.w	r2, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f023 0201 	bic.w	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d115      	bne.n	80039f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039d6:	2001      	movs	r0, #1
 80039d8:	f7fd f9ee 	bl	8000db8 <HAL_Delay>
      ms++;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3301      	adds	r3, #1
 80039e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f001 fa45 	bl	8004e72 <USB_GetMode>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d01e      	beq.n	8003a2c <USB_SetCurrentMode+0x84>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b31      	cmp	r3, #49	; 0x31
 80039f2:	d9f0      	bls.n	80039d6 <USB_SetCurrentMode+0x2e>
 80039f4:	e01a      	b.n	8003a2c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d115      	bne.n	8003a28 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a08:	2001      	movs	r0, #1
 8003a0a:	f7fd f9d5 	bl	8000db8 <HAL_Delay>
      ms++;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3301      	adds	r3, #1
 8003a12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f001 fa2c 	bl	8004e72 <USB_GetMode>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <USB_SetCurrentMode+0x84>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b31      	cmp	r3, #49	; 0x31
 8003a24:	d9f0      	bls.n	8003a08 <USB_SetCurrentMode+0x60>
 8003a26:	e001      	b.n	8003a2c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e005      	b.n	8003a38 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b32      	cmp	r3, #50	; 0x32
 8003a30:	d101      	bne.n	8003a36 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a40:	b084      	sub	sp, #16
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b086      	sub	sp, #24
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	e009      	b.n	8003a74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	3340      	adds	r3, #64	; 0x40
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	3301      	adds	r3, #1
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	2b0e      	cmp	r3, #14
 8003a78:	d9f2      	bls.n	8003a60 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d11c      	bne.n	8003aba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a8e:	f043 0302 	orr.w	r3, r3, #2
 8003a92:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a98:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	639a      	str	r2, [r3, #56]	; 0x38
 8003ab8:	e00b      	b.n	8003ad2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2300      	movs	r3, #0
 8003adc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aec:	461a      	mov	r2, r3
 8003aee:	680b      	ldr	r3, [r1, #0]
 8003af0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d10c      	bne.n	8003b12 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003afe:	2100      	movs	r1, #0
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f965 	bl	8003dd0 <USB_SetDevSpeed>
 8003b06:	e008      	b.n	8003b1a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b08:	2101      	movs	r1, #1
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f960 	bl	8003dd0 <USB_SetDevSpeed>
 8003b10:	e003      	b.n	8003b1a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b12:	2103      	movs	r1, #3
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f95b 	bl	8003dd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b1a:	2110      	movs	r1, #16
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f8f3 	bl	8003d08 <USB_FlushTxFifo>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f91f 	bl	8003d70 <USB_FlushRxFifo>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b42:	461a      	mov	r2, r3
 8003b44:	2300      	movs	r3, #0
 8003b46:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b4e:	461a      	mov	r2, r3
 8003b50:	2300      	movs	r3, #0
 8003b52:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b60:	2300      	movs	r3, #0
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	e043      	b.n	8003bee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b7c:	d118      	bne.n	8003bb0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10a      	bne.n	8003b9a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b90:	461a      	mov	r2, r3
 8003b92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b96:	6013      	str	r3, [r2, #0]
 8003b98:	e013      	b.n	8003bc2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	e008      	b.n	8003bc2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bce:	461a      	mov	r2, r3
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be0:	461a      	mov	r2, r3
 8003be2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003be6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	3301      	adds	r3, #1
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d3b7      	bcc.n	8003b66 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	e043      	b.n	8003c84 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c12:	d118      	bne.n	8003c46 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c26:	461a      	mov	r2, r3
 8003c28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e013      	b.n	8003c58 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	e008      	b.n	8003c58 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c52:	461a      	mov	r2, r3
 8003c54:	2300      	movs	r3, #0
 8003c56:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c64:	461a      	mov	r2, r3
 8003c66:	2300      	movs	r3, #0
 8003c68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c76:	461a      	mov	r2, r3
 8003c78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	3301      	adds	r3, #1
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d3b7      	bcc.n	8003bfc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c9e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003cac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d105      	bne.n	8003cc0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f043 0210 	orr.w	r2, r3, #16
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699a      	ldr	r2, [r3, #24]
 8003cc4:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <USB_DevInit+0x2c4>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	f043 0208 	orr.w	r2, r3, #8
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d107      	bne.n	8003cf4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cec:	f043 0304 	orr.w	r3, r3, #4
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d00:	b004      	add	sp, #16
 8003d02:	4770      	bx	lr
 8003d04:	803c3800 	.word	0x803c3800

08003d08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4a13      	ldr	r2, [pc, #76]	; (8003d6c <USB_FlushTxFifo+0x64>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d901      	bls.n	8003d28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e01b      	b.n	8003d60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	daf2      	bge.n	8003d16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	019b      	lsls	r3, r3, #6
 8003d38:	f043 0220 	orr.w	r2, r3, #32
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3301      	adds	r3, #1
 8003d44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4a08      	ldr	r2, [pc, #32]	; (8003d6c <USB_FlushTxFifo+0x64>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e006      	b.n	8003d60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	d0f0      	beq.n	8003d40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	00030d40 	.word	0x00030d40

08003d70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4a11      	ldr	r2, [pc, #68]	; (8003dcc <USB_FlushRxFifo+0x5c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e018      	b.n	8003dc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	daf2      	bge.n	8003d7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2210      	movs	r2, #16
 8003d9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3301      	adds	r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4a08      	ldr	r2, [pc, #32]	; (8003dcc <USB_FlushRxFifo+0x5c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e006      	b.n	8003dc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0310 	and.w	r3, r3, #16
 8003dba:	2b10      	cmp	r3, #16
 8003dbc:	d0f0      	beq.n	8003da0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	00030d40 	.word	0x00030d40

08003dd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	68f9      	ldr	r1, [r7, #12]
 8003dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003df0:	4313      	orrs	r3, r2
 8003df2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b087      	sub	sp, #28
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 0306 	and.w	r3, r3, #6
 8003e1a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d102      	bne.n	8003e28 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003e22:	2300      	movs	r3, #0
 8003e24:	75fb      	strb	r3, [r7, #23]
 8003e26:	e00a      	b.n	8003e3e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d002      	beq.n	8003e34 <USB_GetDevSpeed+0x32>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b06      	cmp	r3, #6
 8003e32:	d102      	bne.n	8003e3a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003e34:	2302      	movs	r3, #2
 8003e36:	75fb      	strb	r3, [r7, #23]
 8003e38:	e001      	b.n	8003e3e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003e3a:	230f      	movs	r3, #15
 8003e3c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	371c      	adds	r7, #28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	785b      	ldrb	r3, [r3, #1]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d13a      	bne.n	8003ede <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	2101      	movs	r1, #1
 8003e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	68f9      	ldr	r1, [r7, #12]
 8003e82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e86:	4313      	orrs	r3, r2
 8003e88:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d155      	bne.n	8003f4c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	791b      	ldrb	r3, [r3, #4]
 8003eba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ebc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	059b      	lsls	r3, r3, #22
 8003ec2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	0151      	lsls	r1, r2, #5
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	440a      	add	r2, r1
 8003ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	e036      	b.n	8003f4c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee4:	69da      	ldr	r2, [r3, #28]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	2101      	movs	r1, #1
 8003ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef4:	041b      	lsls	r3, r3, #16
 8003ef6:	68f9      	ldr	r1, [r7, #12]
 8003ef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003efc:	4313      	orrs	r3, r2
 8003efe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d11a      	bne.n	8003f4c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	791b      	ldrb	r3, [r3, #4]
 8003f30:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f32:	430b      	orrs	r3, r1
 8003f34:	4313      	orrs	r3, r2
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	0151      	lsls	r1, r2, #5
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	440a      	add	r2, r1
 8003f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f4a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
	...

08003f5c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	785b      	ldrb	r3, [r3, #1]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d161      	bne.n	800403c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f8e:	d11f      	bne.n	8003fd0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	0151      	lsls	r1, r2, #5
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	440a      	add	r2, r1
 8003fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003faa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	0151      	lsls	r1, r2, #5
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	440a      	add	r2, r1
 8003fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	68f9      	ldr	r1, [r7, #12]
 8003fec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffa:	69da      	ldr	r2, [r3, #28]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	2101      	movs	r1, #1
 8004006:	fa01 f303 	lsl.w	r3, r1, r3
 800400a:	b29b      	uxth	r3, r3
 800400c:	43db      	mvns	r3, r3
 800400e:	68f9      	ldr	r1, [r7, #12]
 8004010:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004014:	4013      	ands	r3, r2
 8004016:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	0159      	lsls	r1, r3, #5
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	440b      	add	r3, r1
 800402e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004032:	4619      	mov	r1, r3
 8004034:	4b35      	ldr	r3, [pc, #212]	; (800410c <USB_DeactivateEndpoint+0x1b0>)
 8004036:	4013      	ands	r3, r2
 8004038:	600b      	str	r3, [r1, #0]
 800403a:	e060      	b.n	80040fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800404e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004052:	d11f      	bne.n	8004094 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	0151      	lsls	r1, r2, #5
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	440a      	add	r2, r1
 800406a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800406e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004072:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4413      	add	r3, r2
 800407c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	0151      	lsls	r1, r2, #5
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	440a      	add	r2, r1
 800408a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800408e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004092:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	2101      	movs	r1, #1
 80040a6:	fa01 f303 	lsl.w	r3, r1, r3
 80040aa:	041b      	lsls	r3, r3, #16
 80040ac:	43db      	mvns	r3, r3
 80040ae:	68f9      	ldr	r1, [r7, #12]
 80040b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040b4:	4013      	ands	r3, r2
 80040b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040be:	69da      	ldr	r2, [r3, #28]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	2101      	movs	r1, #1
 80040ca:	fa01 f303 	lsl.w	r3, r1, r3
 80040ce:	041b      	lsls	r3, r3, #16
 80040d0:	43db      	mvns	r3, r3
 80040d2:	68f9      	ldr	r1, [r7, #12]
 80040d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040d8:	4013      	ands	r3, r2
 80040da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	0159      	lsls	r1, r3, #5
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	440b      	add	r3, r1
 80040f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f6:	4619      	mov	r1, r3
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <USB_DeactivateEndpoint+0x1b4>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	ec337800 	.word	0xec337800
 8004110:	eff37800 	.word	0xeff37800

08004114 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08a      	sub	sp, #40	; 0x28
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	4613      	mov	r3, r2
 8004120:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	785b      	ldrb	r3, [r3, #1]
 8004130:	2b01      	cmp	r3, #1
 8004132:	f040 815c 	bne.w	80043ee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d132      	bne.n	80041a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	0151      	lsls	r1, r2, #5
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	440a      	add	r2, r1
 8004154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004158:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800415c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004160:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	0151      	lsls	r1, r2, #5
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	440a      	add	r2, r1
 8004178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800417c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004180:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	0151      	lsls	r1, r2, #5
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	440a      	add	r2, r1
 8004198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800419c:	0cdb      	lsrs	r3, r3, #19
 800419e:	04db      	lsls	r3, r3, #19
 80041a0:	6113      	str	r3, [r2, #16]
 80041a2:	e074      	b.n	800428e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	0151      	lsls	r1, r2, #5
 80041b6:	69fa      	ldr	r2, [r7, #28]
 80041b8:	440a      	add	r2, r1
 80041ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041be:	0cdb      	lsrs	r3, r3, #19
 80041c0:	04db      	lsls	r3, r3, #19
 80041c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	0151      	lsls	r1, r2, #5
 80041d6:	69fa      	ldr	r2, [r7, #28]
 80041d8:	440a      	add	r2, r1
 80041da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	6999      	ldr	r1, [r3, #24]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	440b      	add	r3, r1
 8004200:	1e59      	subs	r1, r3, #1
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	fbb1 f3f3 	udiv	r3, r1, r3
 800420a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800420c:	4b9d      	ldr	r3, [pc, #628]	; (8004484 <USB_EPStartXfer+0x370>)
 800420e:	400b      	ands	r3, r1
 8004210:	69b9      	ldr	r1, [r7, #24]
 8004212:	0148      	lsls	r0, r1, #5
 8004214:	69f9      	ldr	r1, [r7, #28]
 8004216:	4401      	add	r1, r0
 8004218:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800421c:	4313      	orrs	r3, r2
 800421e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004236:	69b9      	ldr	r1, [r7, #24]
 8004238:	0148      	lsls	r0, r1, #5
 800423a:	69f9      	ldr	r1, [r7, #28]
 800423c:	4401      	add	r1, r0
 800423e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004242:	4313      	orrs	r3, r2
 8004244:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	791b      	ldrb	r3, [r3, #4]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d11f      	bne.n	800428e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	0151      	lsls	r1, r2, #5
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	440a      	add	r2, r1
 8004264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004268:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800426c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	4413      	add	r3, r2
 8004276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	0151      	lsls	r1, r2, #5
 8004280:	69fa      	ldr	r2, [r7, #28]
 8004282:	440a      	add	r2, r1
 8004284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004288:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800428c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d14b      	bne.n	800432c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d009      	beq.n	80042b0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a8:	461a      	mov	r2, r3
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	791b      	ldrb	r3, [r3, #4]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d128      	bne.n	800430a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d110      	bne.n	80042ea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	0151      	lsls	r1, r2, #5
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	440a      	add	r2, r1
 80042de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	e00f      	b.n	800430a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	0151      	lsls	r1, r2, #5
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	440a      	add	r2, r1
 8004300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004308:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	0151      	lsls	r1, r2, #5
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	440a      	add	r2, r1
 8004320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004324:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	e133      	b.n	8004594 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	4413      	add	r3, r2
 8004334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	0151      	lsls	r1, r2, #5
 800433e:	69fa      	ldr	r2, [r7, #28]
 8004340:	440a      	add	r2, r1
 8004342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004346:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800434a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	791b      	ldrb	r3, [r3, #4]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d015      	beq.n	8004380 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 811b 	beq.w	8004594 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	2101      	movs	r1, #1
 8004370:	fa01 f303 	lsl.w	r3, r1, r3
 8004374:	69f9      	ldr	r1, [r7, #28]
 8004376:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800437a:	4313      	orrs	r3, r2
 800437c:	634b      	str	r3, [r1, #52]	; 0x34
 800437e:	e109      	b.n	8004594 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438c:	2b00      	cmp	r3, #0
 800438e:	d110      	bne.n	80043b2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	0151      	lsls	r1, r2, #5
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	440a      	add	r2, r1
 80043a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	e00f      	b.n	80043d2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	0151      	lsls	r1, r2, #5
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	440a      	add	r2, r1
 80043c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	6919      	ldr	r1, [r3, #16]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	781a      	ldrb	r2, [r3, #0]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	b298      	uxth	r0, r3
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	4603      	mov	r3, r0
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 fade 	bl	80049a8 <USB_WritePacket>
 80043ec:	e0d2      	b.n	8004594 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	0151      	lsls	r1, r2, #5
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	440a      	add	r2, r1
 8004404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004408:	0cdb      	lsrs	r3, r3, #19
 800440a:	04db      	lsls	r3, r3, #19
 800440c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	4413      	add	r3, r2
 8004416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	0151      	lsls	r1, r2, #5
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	440a      	add	r2, r1
 8004424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004428:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800442c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004430:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d126      	bne.n	8004488 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004450:	69b9      	ldr	r1, [r7, #24]
 8004452:	0148      	lsls	r0, r1, #5
 8004454:	69f9      	ldr	r1, [r7, #28]
 8004456:	4401      	add	r1, r0
 8004458:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800445c:	4313      	orrs	r3, r2
 800445e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	0151      	lsls	r1, r2, #5
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	440a      	add	r2, r1
 8004476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800447a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800447e:	6113      	str	r3, [r2, #16]
 8004480:	e03a      	b.n	80044f8 <USB_EPStartXfer+0x3e4>
 8004482:	bf00      	nop
 8004484:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	699a      	ldr	r2, [r3, #24]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	4413      	add	r3, r2
 8004492:	1e5a      	subs	r2, r3, #1
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	fbb2 f3f3 	udiv	r3, r2, r3
 800449c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	8afa      	ldrh	r2, [r7, #22]
 80044a4:	fb03 f202 	mul.w	r2, r3, r2
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	8afb      	ldrh	r3, [r7, #22]
 80044bc:	04d9      	lsls	r1, r3, #19
 80044be:	4b38      	ldr	r3, [pc, #224]	; (80045a0 <USB_EPStartXfer+0x48c>)
 80044c0:	400b      	ands	r3, r1
 80044c2:	69b9      	ldr	r1, [r7, #24]
 80044c4:	0148      	lsls	r0, r1, #5
 80044c6:	69f9      	ldr	r1, [r7, #28]
 80044c8:	4401      	add	r1, r0
 80044ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044ce:	4313      	orrs	r3, r2
 80044d0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e8:	69b9      	ldr	r1, [r7, #24]
 80044ea:	0148      	lsls	r0, r1, #5
 80044ec:	69f9      	ldr	r1, [r7, #28]
 80044ee:	4401      	add	r1, r0
 80044f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044f4:	4313      	orrs	r3, r2
 80044f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80044f8:	79fb      	ldrb	r3, [r7, #7]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d10d      	bne.n	800451a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	6919      	ldr	r1, [r3, #16]
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004516:	460a      	mov	r2, r1
 8004518:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	791b      	ldrb	r3, [r3, #4]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d128      	bne.n	8004574 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d110      	bne.n	8004554 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	0151      	lsls	r1, r2, #5
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	440a      	add	r2, r1
 8004548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800454c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	e00f      	b.n	8004574 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	0151      	lsls	r1, r2, #5
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	440a      	add	r2, r1
 800456a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800456e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004572:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	0151      	lsls	r1, r2, #5
 8004586:	69fa      	ldr	r2, [r7, #28]
 8004588:	440a      	add	r2, r1
 800458a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800458e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004592:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3720      	adds	r7, #32
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	1ff80000 	.word	0x1ff80000

080045a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	4613      	mov	r3, r2
 80045b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	785b      	ldrb	r3, [r3, #1]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	f040 80ce 	bne.w	8004762 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d132      	bne.n	8004634 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	0151      	lsls	r1, r2, #5
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	440a      	add	r2, r1
 80045e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	0151      	lsls	r1, r2, #5
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	440a      	add	r2, r1
 8004608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800460c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004610:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	0151      	lsls	r1, r2, #5
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	440a      	add	r2, r1
 8004628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800462c:	0cdb      	lsrs	r3, r3, #19
 800462e:	04db      	lsls	r3, r3, #19
 8004630:	6113      	str	r3, [r2, #16]
 8004632:	e04e      	b.n	80046d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	0151      	lsls	r1, r2, #5
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	440a      	add	r2, r1
 800464a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800464e:	0cdb      	lsrs	r3, r3, #19
 8004650:	04db      	lsls	r3, r3, #19
 8004652:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	0151      	lsls	r1, r2, #5
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	440a      	add	r2, r1
 800466a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800466e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004672:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004676:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	699a      	ldr	r2, [r3, #24]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	429a      	cmp	r2, r3
 8004682:	d903      	bls.n	800468c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	0151      	lsls	r1, r2, #5
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	440a      	add	r2, r1
 80046a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b8:	691a      	ldr	r2, [r3, #16]
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c2:	6939      	ldr	r1, [r7, #16]
 80046c4:	0148      	lsls	r0, r1, #5
 80046c6:	6979      	ldr	r1, [r7, #20]
 80046c8:	4401      	add	r1, r0
 80046ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046ce:	4313      	orrs	r3, r2
 80046d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d11e      	bne.n	8004716 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d009      	beq.n	80046f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ec:	461a      	mov	r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	0151      	lsls	r1, r2, #5
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	440a      	add	r2, r1
 800470a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800470e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	e097      	b.n	8004846 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	0151      	lsls	r1, r2, #5
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	440a      	add	r2, r1
 800472c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004730:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004734:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 8083 	beq.w	8004846 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	f003 030f 	and.w	r3, r3, #15
 8004750:	2101      	movs	r1, #1
 8004752:	fa01 f303 	lsl.w	r3, r1, r3
 8004756:	6979      	ldr	r1, [r7, #20]
 8004758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800475c:	4313      	orrs	r3, r2
 800475e:	634b      	str	r3, [r1, #52]	; 0x34
 8004760:	e071      	b.n	8004846 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	0151      	lsls	r1, r2, #5
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	440a      	add	r2, r1
 8004778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800477c:	0cdb      	lsrs	r3, r3, #19
 800477e:	04db      	lsls	r3, r3, #19
 8004780:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	0151      	lsls	r1, r2, #5
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	440a      	add	r2, r1
 8004798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800479c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	0151      	lsls	r1, r2, #5
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	440a      	add	r2, r1
 80047d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047f4:	6939      	ldr	r1, [r7, #16]
 80047f6:	0148      	lsls	r0, r1, #5
 80047f8:	6979      	ldr	r1, [r7, #20]
 80047fa:	4401      	add	r1, r0
 80047fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004800:	4313      	orrs	r3, r2
 8004802:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004804:	79fb      	ldrb	r3, [r7, #7]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d10d      	bne.n	8004826 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d009      	beq.n	8004826 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	6919      	ldr	r1, [r3, #16]
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004822:	460a      	mov	r2, r1
 8004824:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	0151      	lsls	r1, r2, #5
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	440a      	add	r2, r1
 800483c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004840:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004844:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	371c      	adds	r7, #28
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	785b      	ldrb	r3, [r3, #1]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d14a      	bne.n	8004908 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004886:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800488a:	f040 8086 	bne.w	800499a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	7812      	ldrb	r2, [r2, #0]
 80048a2:	0151      	lsls	r1, r2, #5
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	440a      	add	r2, r1
 80048a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	7812      	ldrb	r2, [r2, #0]
 80048c6:	0151      	lsls	r1, r2, #5
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	440a      	add	r2, r1
 80048cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3301      	adds	r3, #1
 80048da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f242 7210 	movw	r2, #10000	; 0x2710
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d902      	bls.n	80048ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	75fb      	strb	r3, [r7, #23]
          break;
 80048ea:	e056      	b.n	800499a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004900:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004904:	d0e7      	beq.n	80048d6 <USB_EPStopXfer+0x82>
 8004906:	e048      	b.n	800499a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800491c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004920:	d13b      	bne.n	800499a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	7812      	ldrb	r2, [r2, #0]
 8004936:	0151      	lsls	r1, r2, #5
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	440a      	add	r2, r1
 800493c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004940:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004944:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	7812      	ldrb	r2, [r2, #0]
 800495a:	0151      	lsls	r1, r2, #5
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	440a      	add	r2, r1
 8004960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004964:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004968:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	3301      	adds	r3, #1
 800496e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f242 7210 	movw	r2, #10000	; 0x2710
 8004976:	4293      	cmp	r3, r2
 8004978:	d902      	bls.n	8004980 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	75fb      	strb	r3, [r7, #23]
          break;
 800497e:	e00c      	b.n	800499a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004994:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004998:	d0e7      	beq.n	800496a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800499a:	7dfb      	ldrb	r3, [r7, #23]
}
 800499c:	4618      	mov	r0, r3
 800499e:	371c      	adds	r7, #28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b089      	sub	sp, #36	; 0x24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	4611      	mov	r1, r2
 80049b4:	461a      	mov	r2, r3
 80049b6:	460b      	mov	r3, r1
 80049b8:	71fb      	strb	r3, [r7, #7]
 80049ba:	4613      	mov	r3, r2
 80049bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80049c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d123      	bne.n	8004a16 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80049ce:	88bb      	ldrh	r3, [r7, #4]
 80049d0:	3303      	adds	r3, #3
 80049d2:	089b      	lsrs	r3, r3, #2
 80049d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80049d6:	2300      	movs	r3, #0
 80049d8:	61bb      	str	r3, [r7, #24]
 80049da:	e018      	b.n	8004a0e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80049dc:	79fb      	ldrb	r3, [r7, #7]
 80049de:	031a      	lsls	r2, r3, #12
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e8:	461a      	mov	r2, r3
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	3301      	adds	r3, #1
 80049f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	3301      	adds	r3, #1
 80049fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	3301      	adds	r3, #1
 8004a00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	3301      	adds	r3, #1
 8004a06:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d3e2      	bcc.n	80049dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3724      	adds	r7, #36	; 0x24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b08b      	sub	sp, #44	; 0x2c
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a3a:	88fb      	ldrh	r3, [r7, #6]
 8004a3c:	089b      	lsrs	r3, r3, #2
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	f003 0303 	and.w	r3, r3, #3
 8004a48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	623b      	str	r3, [r7, #32]
 8004a4e:	e014      	b.n	8004a7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	3301      	adds	r3, #1
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	3301      	adds	r3, #1
 8004a66:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	3301      	adds	r3, #1
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	3301      	adds	r3, #1
 8004a78:	623b      	str	r3, [r7, #32]
 8004a7a:	6a3a      	ldr	r2, [r7, #32]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d3e6      	bcc.n	8004a50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a82:	8bfb      	ldrh	r3, [r7, #30]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01e      	beq.n	8004ac6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a92:	461a      	mov	r2, r3
 8004a94:	f107 0310 	add.w	r3, r7, #16
 8004a98:	6812      	ldr	r2, [r2, #0]
 8004a9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	701a      	strb	r2, [r3, #0]
      i++;
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004aba:	8bfb      	ldrh	r3, [r7, #30]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004ac0:	8bfb      	ldrh	r3, [r7, #30]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1ea      	bne.n	8004a9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	372c      	adds	r7, #44	; 0x2c
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	785b      	ldrb	r3, [r3, #1]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d12c      	bne.n	8004b4a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	db12      	blt.n	8004b28 <USB_EPSetStall+0x54>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00f      	beq.n	8004b28 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	0151      	lsls	r1, r2, #5
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	440a      	add	r2, r1
 8004b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b26:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	0151      	lsls	r1, r2, #5
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	440a      	add	r2, r1
 8004b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	e02b      	b.n	8004ba2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	db12      	blt.n	8004b82 <USB_EPSetStall+0xae>
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00f      	beq.n	8004b82 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	0151      	lsls	r1, r2, #5
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	440a      	add	r2, r1
 8004b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b80:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	0151      	lsls	r1, r2, #5
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	440a      	add	r2, r1
 8004b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ba0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	785b      	ldrb	r3, [r3, #1]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d128      	bne.n	8004c1e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	0151      	lsls	r1, r2, #5
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	440a      	add	r2, r1
 8004be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	791b      	ldrb	r3, [r3, #4]
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d003      	beq.n	8004bfc <USB_EPClearStall+0x4c>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	791b      	ldrb	r3, [r3, #4]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d138      	bne.n	8004c6e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	0151      	lsls	r1, r2, #5
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	440a      	add	r2, r1
 8004c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	e027      	b.n	8004c6e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	0151      	lsls	r1, r2, #5
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	440a      	add	r2, r1
 8004c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c3c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	791b      	ldrb	r3, [r3, #4]
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d003      	beq.n	8004c4e <USB_EPClearStall+0x9e>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	791b      	ldrb	r3, [r3, #4]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d10f      	bne.n	8004c6e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	0151      	lsls	r1, r2, #5
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	440a      	add	r2, r1
 8004c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c9a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c9e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004cb0:	68f9      	ldr	r1, [r7, #12]
 8004cb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ce2:	f023 0303 	bic.w	r3, r3, #3
 8004ce6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cf6:	f023 0302 	bic.w	r3, r3, #2
 8004cfa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d24:	f023 0303 	bic.w	r3, r3, #3
 8004d28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d38:	f043 0302 	orr.w	r3, r3, #2
 8004d3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4013      	ands	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004d64:	68fb      	ldr	r3, [r7, #12]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b085      	sub	sp, #20
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	4013      	ands	r3, r2
 8004d94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	0c1b      	lsrs	r3, r3, #16
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b085      	sub	sp, #20
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc2:	69db      	ldr	r3, [r3, #28]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	b29b      	uxth	r3, r3
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b085      	sub	sp, #20
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	460b      	mov	r3, r1
 8004de4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	4013      	ands	r3, r2
 8004e06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e08:	68bb      	ldr	r3, [r7, #8]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b087      	sub	sp, #28
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e38:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004e3a:	78fb      	ldrb	r3, [r7, #3]
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	fa22 f303 	lsr.w	r3, r2, r3
 8004e46:	01db      	lsls	r3, r3, #7
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	4013      	ands	r3, r2
 8004e62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e64:	68bb      	ldr	r3, [r7, #8]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b085      	sub	sp, #20
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004eac:	f023 0307 	bic.w	r3, r3, #7
 8004eb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	460b      	mov	r3, r1
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	333c      	adds	r3, #60	; 0x3c
 8004eea:	3304      	adds	r3, #4
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	4a26      	ldr	r2, [pc, #152]	; (8004f8c <USB_EP0_OutStart+0xb8>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d90a      	bls.n	8004f0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f08:	d101      	bne.n	8004f0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e037      	b.n	8004f7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f14:	461a      	mov	r2, r3
 8004f16:	2300      	movs	r3, #0
 8004f18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f3c:	f043 0318 	orr.w	r3, r3, #24
 8004f40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f50:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004f54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004f56:	7afb      	ldrb	r3, [r7, #11]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d10f      	bne.n	8004f7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f62:	461a      	mov	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f76:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004f7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	4f54300a 	.word	0x4f54300a

08004f90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4a13      	ldr	r2, [pc, #76]	; (8004ff4 <USB_CoreReset+0x64>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d901      	bls.n	8004fae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e01b      	b.n	8004fe6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	daf2      	bge.n	8004f9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f043 0201 	orr.w	r2, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <USB_CoreReset+0x64>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d901      	bls.n	8004fd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e006      	b.n	8004fe6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d0f0      	beq.n	8004fc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	00030d40 	.word	0x00030d40

08004ff8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005004:	2010      	movs	r0, #16
 8005006:	f002 f93d 	bl	8007284 <USBD_static_malloc>
 800500a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d109      	bne.n	8005026 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	32b0      	adds	r2, #176	; 0xb0
 800501c:	2100      	movs	r1, #0
 800501e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005022:	2302      	movs	r3, #2
 8005024:	e048      	b.n	80050b8 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	32b0      	adds	r2, #176	; 0xb0
 8005030:	68f9      	ldr	r1, [r7, #12]
 8005032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	32b0      	adds	r2, #176	; 0xb0
 8005040:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	7c1b      	ldrb	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10d      	bne.n	800506e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005052:	4b1b      	ldr	r3, [pc, #108]	; (80050c0 <USBD_HID_Init+0xc8>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	f003 020f 	and.w	r2, r3, #15
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	3326      	adds	r3, #38	; 0x26
 8005068:	2207      	movs	r2, #7
 800506a:	801a      	strh	r2, [r3, #0]
 800506c:	e00c      	b.n	8005088 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800506e:	4b14      	ldr	r3, [pc, #80]	; (80050c0 <USBD_HID_Init+0xc8>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	f003 020f 	and.w	r2, r3, #15
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	3326      	adds	r3, #38	; 0x26
 8005084:	220a      	movs	r2, #10
 8005086:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005088:	4b0d      	ldr	r3, [pc, #52]	; (80050c0 <USBD_HID_Init+0xc8>)
 800508a:	7819      	ldrb	r1, [r3, #0]
 800508c:	2304      	movs	r3, #4
 800508e:	2203      	movs	r2, #3
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f001 ffe6 	bl	8007062 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005096:	4b0a      	ldr	r3, [pc, #40]	; (80050c0 <USBD_HID_Init+0xc8>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	f003 020f 	and.w	r2, r3, #15
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	3324      	adds	r3, #36	; 0x24
 80050ac:	2201      	movs	r2, #1
 80050ae:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	200000ce 	.word	0x200000ce

080050c4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80050d0:	4b1f      	ldr	r3, [pc, #124]	; (8005150 <USBD_HID_DeInit+0x8c>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	4619      	mov	r1, r3
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f001 ffe9 	bl	80070ae <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80050dc:	4b1c      	ldr	r3, [pc, #112]	; (8005150 <USBD_HID_DeInit+0x8c>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	f003 020f 	and.w	r2, r3, #15
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	3324      	adds	r3, #36	; 0x24
 80050f2:	2200      	movs	r2, #0
 80050f4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80050f6:	4b16      	ldr	r3, [pc, #88]	; (8005150 <USBD_HID_DeInit+0x8c>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	f003 020f 	and.w	r2, r3, #15
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	4613      	mov	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	3326      	adds	r3, #38	; 0x26
 800510c:	2200      	movs	r2, #0
 800510e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	32b0      	adds	r2, #176	; 0xb0
 800511a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d011      	beq.n	8005146 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	32b0      	adds	r2, #176	; 0xb0
 800512c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005130:	4618      	mov	r0, r3
 8005132:	f002 f8b5 	bl	80072a0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	32b0      	adds	r2, #176	; 0xb0
 8005140:	2100      	movs	r1, #0
 8005142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	200000ce 	.word	0x200000ce

08005154 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	32b0      	adds	r2, #176	; 0xb0
 8005168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800516c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800516e:	2300      	movs	r3, #0
 8005170:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800517c:	2303      	movs	r3, #3
 800517e:	e0e8      	b.n	8005352 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005188:	2b00      	cmp	r3, #0
 800518a:	d046      	beq.n	800521a <USBD_HID_Setup+0xc6>
 800518c:	2b20      	cmp	r3, #32
 800518e:	f040 80d8 	bne.w	8005342 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	785b      	ldrb	r3, [r3, #1]
 8005196:	3b02      	subs	r3, #2
 8005198:	2b09      	cmp	r3, #9
 800519a:	d836      	bhi.n	800520a <USBD_HID_Setup+0xb6>
 800519c:	a201      	add	r2, pc, #4	; (adr r2, 80051a4 <USBD_HID_Setup+0x50>)
 800519e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a2:	bf00      	nop
 80051a4:	080051fb 	.word	0x080051fb
 80051a8:	080051db 	.word	0x080051db
 80051ac:	0800520b 	.word	0x0800520b
 80051b0:	0800520b 	.word	0x0800520b
 80051b4:	0800520b 	.word	0x0800520b
 80051b8:	0800520b 	.word	0x0800520b
 80051bc:	0800520b 	.word	0x0800520b
 80051c0:	0800520b 	.word	0x0800520b
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	080051cd 	.word	0x080051cd
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	885b      	ldrh	r3, [r3, #2]
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	601a      	str	r2, [r3, #0]
          break;
 80051d8:	e01e      	b.n	8005218 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	4619      	mov	r1, r3
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f001 fbe9 	bl	80069b8 <USBD_CtlSendData>
          break;
 80051e6:	e017      	b.n	8005218 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	885b      	ldrh	r3, [r3, #2]
 80051ec:	0a1b      	lsrs	r3, r3, #8
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	461a      	mov	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	605a      	str	r2, [r3, #4]
          break;
 80051f8:	e00e      	b.n	8005218 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3304      	adds	r3, #4
 80051fe:	2201      	movs	r2, #1
 8005200:	4619      	mov	r1, r3
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f001 fbd8 	bl	80069b8 <USBD_CtlSendData>
          break;
 8005208:	e006      	b.n	8005218 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800520a:	6839      	ldr	r1, [r7, #0]
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f001 fb62 	bl	80068d6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005212:	2303      	movs	r3, #3
 8005214:	75fb      	strb	r3, [r7, #23]
          break;
 8005216:	bf00      	nop
      }
      break;
 8005218:	e09a      	b.n	8005350 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	785b      	ldrb	r3, [r3, #1]
 800521e:	2b0b      	cmp	r3, #11
 8005220:	f200 8086 	bhi.w	8005330 <USBD_HID_Setup+0x1dc>
 8005224:	a201      	add	r2, pc, #4	; (adr r2, 800522c <USBD_HID_Setup+0xd8>)
 8005226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522a:	bf00      	nop
 800522c:	0800525d 	.word	0x0800525d
 8005230:	0800533f 	.word	0x0800533f
 8005234:	08005331 	.word	0x08005331
 8005238:	08005331 	.word	0x08005331
 800523c:	08005331 	.word	0x08005331
 8005240:	08005331 	.word	0x08005331
 8005244:	08005287 	.word	0x08005287
 8005248:	08005331 	.word	0x08005331
 800524c:	08005331 	.word	0x08005331
 8005250:	08005331 	.word	0x08005331
 8005254:	080052df 	.word	0x080052df
 8005258:	08005309 	.word	0x08005309
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b03      	cmp	r3, #3
 8005266:	d107      	bne.n	8005278 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005268:	f107 030a 	add.w	r3, r7, #10
 800526c:	2202      	movs	r2, #2
 800526e:	4619      	mov	r1, r3
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f001 fba1 	bl	80069b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005276:	e063      	b.n	8005340 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005278:	6839      	ldr	r1, [r7, #0]
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f001 fb2b 	bl	80068d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005280:	2303      	movs	r3, #3
 8005282:	75fb      	strb	r3, [r7, #23]
          break;
 8005284:	e05c      	b.n	8005340 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	885b      	ldrh	r3, [r3, #2]
 800528a:	0a1b      	lsrs	r3, r3, #8
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b22      	cmp	r3, #34	; 0x22
 8005290:	d108      	bne.n	80052a4 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	88db      	ldrh	r3, [r3, #6]
 8005296:	2b4a      	cmp	r3, #74	; 0x4a
 8005298:	bf28      	it	cs
 800529a:	234a      	movcs	r3, #74	; 0x4a
 800529c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800529e:	4b2f      	ldr	r3, [pc, #188]	; (800535c <USBD_HID_Setup+0x208>)
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	e015      	b.n	80052d0 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	885b      	ldrh	r3, [r3, #2]
 80052a8:	0a1b      	lsrs	r3, r3, #8
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b21      	cmp	r3, #33	; 0x21
 80052ae:	d108      	bne.n	80052c2 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80052b0:	4b2b      	ldr	r3, [pc, #172]	; (8005360 <USBD_HID_Setup+0x20c>)
 80052b2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	88db      	ldrh	r3, [r3, #6]
 80052b8:	2b09      	cmp	r3, #9
 80052ba:	bf28      	it	cs
 80052bc:	2309      	movcs	r3, #9
 80052be:	82bb      	strh	r3, [r7, #20]
 80052c0:	e006      	b.n	80052d0 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80052c2:	6839      	ldr	r1, [r7, #0]
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f001 fb06 	bl	80068d6 <USBD_CtlError>
            ret = USBD_FAIL;
 80052ca:	2303      	movs	r3, #3
 80052cc:	75fb      	strb	r3, [r7, #23]
            break;
 80052ce:	e037      	b.n	8005340 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80052d0:	8abb      	ldrh	r3, [r7, #20]
 80052d2:	461a      	mov	r2, r3
 80052d4:	6939      	ldr	r1, [r7, #16]
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f001 fb6e 	bl	80069b8 <USBD_CtlSendData>
          break;
 80052dc:	e030      	b.n	8005340 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b03      	cmp	r3, #3
 80052e8:	d107      	bne.n	80052fa <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3308      	adds	r3, #8
 80052ee:	2201      	movs	r2, #1
 80052f0:	4619      	mov	r1, r3
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f001 fb60 	bl	80069b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052f8:	e022      	b.n	8005340 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80052fa:	6839      	ldr	r1, [r7, #0]
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f001 faea 	bl	80068d6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005302:	2303      	movs	r3, #3
 8005304:	75fb      	strb	r3, [r7, #23]
          break;
 8005306:	e01b      	b.n	8005340 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b03      	cmp	r3, #3
 8005312:	d106      	bne.n	8005322 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	885b      	ldrh	r3, [r3, #2]
 8005318:	b2db      	uxtb	r3, r3
 800531a:	461a      	mov	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005320:	e00e      	b.n	8005340 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005322:	6839      	ldr	r1, [r7, #0]
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f001 fad6 	bl	80068d6 <USBD_CtlError>
            ret = USBD_FAIL;
 800532a:	2303      	movs	r3, #3
 800532c:	75fb      	strb	r3, [r7, #23]
          break;
 800532e:	e007      	b.n	8005340 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005330:	6839      	ldr	r1, [r7, #0]
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f001 facf 	bl	80068d6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005338:	2303      	movs	r3, #3
 800533a:	75fb      	strb	r3, [r7, #23]
          break;
 800533c:	e000      	b.n	8005340 <USBD_HID_Setup+0x1ec>
          break;
 800533e:	bf00      	nop
      }
      break;
 8005340:	e006      	b.n	8005350 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005342:	6839      	ldr	r1, [r7, #0]
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f001 fac6 	bl	80068d6 <USBD_CtlError>
      ret = USBD_FAIL;
 800534a:	2303      	movs	r3, #3
 800534c:	75fb      	strb	r3, [r7, #23]
      break;
 800534e:	bf00      	nop
  }

  return (uint8_t)ret;
 8005350:	7dfb      	ldrb	r3, [r7, #23]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	20000084 	.word	0x20000084
 8005360:	2000006c 	.word	0x2000006c

08005364 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	4613      	mov	r3, r2
 8005370:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	32b0      	adds	r2, #176	; 0xb0
 800537c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005380:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005388:	2303      	movs	r3, #3
 800538a:	e014      	b.n	80053b6 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b03      	cmp	r3, #3
 8005396:	d10d      	bne.n	80053b4 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	7b1b      	ldrb	r3, [r3, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d109      	bne.n	80053b4 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2201      	movs	r2, #1
 80053a4:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80053a6:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <USBD_HID_SendReport+0x5c>)
 80053a8:	7819      	ldrb	r1, [r3, #0]
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f001 ff25 	bl	80071fe <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	200000ce 	.word	0x200000ce

080053c4 <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval;

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	7c1b      	ldrb	r3, [r3, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d102      	bne.n	80053da <USBD_HID_GetPollingInterval+0x16>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 80053d4:	2308      	movs	r3, #8
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	e001      	b.n	80053de <USBD_HID_GetPollingInterval+0x1a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 80053da:	230a      	movs	r3, #10
 80053dc:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 80053de:	68fb      	ldr	r3, [r7, #12]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80053f4:	2181      	movs	r1, #129	; 0x81
 80053f6:	4809      	ldr	r0, [pc, #36]	; (800541c <USBD_HID_GetFSCfgDesc+0x30>)
 80053f8:	f000 fc35 	bl	8005c66 <USBD_GetEpDesc>
 80053fc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	220a      	movs	r2, #10
 8005408:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2222      	movs	r2, #34	; 0x22
 800540e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005410:	4b02      	ldr	r3, [pc, #8]	; (800541c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	20000048 	.word	0x20000048

08005420 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005428:	2181      	movs	r1, #129	; 0x81
 800542a:	4809      	ldr	r0, [pc, #36]	; (8005450 <USBD_HID_GetHSCfgDesc+0x30>)
 800542c:	f000 fc1b 	bl	8005c66 <USBD_GetEpDesc>
 8005430:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2207      	movs	r2, #7
 800543c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2222      	movs	r2, #34	; 0x22
 8005442:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005444:	4b02      	ldr	r3, [pc, #8]	; (8005450 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20000048 	.word	0x20000048

08005454 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800545c:	2181      	movs	r1, #129	; 0x81
 800545e:	4809      	ldr	r0, [pc, #36]	; (8005484 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005460:	f000 fc01 	bl	8005c66 <USBD_GetEpDesc>
 8005464:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	220a      	movs	r2, #10
 8005470:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2222      	movs	r2, #34	; 0x22
 8005476:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005478:	4b02      	ldr	r3, [pc, #8]	; (8005484 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20000048 	.word	0x20000048

08005488 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	32b0      	adds	r2, #176	; 0xb0
 800549e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a2:	2200      	movs	r2, #0
 80054a4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	220a      	movs	r2, #10
 80054c0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80054c2:	4b03      	ldr	r3, [pc, #12]	; (80054d0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	20000078 	.word	0x20000078

080054d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	4613      	mov	r3, r2
 80054e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e01f      	b.n	800552c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	79fa      	ldrb	r2, [r7, #7]
 800551e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f001 fd37 	bl	8006f94 <USBD_LL_Init>
 8005526:	4603      	mov	r3, r0
 8005528:	75fb      	strb	r3, [r7, #23]

  return ret;
 800552a:	7dfb      	ldrb	r3, [r7, #23]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005548:	2303      	movs	r3, #3
 800554a:	e025      	b.n	8005598 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	32ae      	adds	r2, #174	; 0xae
 800555e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00f      	beq.n	8005588 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	32ae      	adds	r2, #174	; 0xae
 8005572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005578:	f107 020e 	add.w	r2, r7, #14
 800557c:	4610      	mov	r0, r2
 800557e:	4798      	blx	r3
 8005580:	4602      	mov	r2, r0
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f001 fd3f 	bl	800702c <USBD_LL_Start>
 80055ae:	4603      	mov	r3, r0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b084      	sub	sp, #16
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	460b      	mov	r3, r1
 80055d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d009      	beq.n	80055fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	78fa      	ldrb	r2, [r7, #3]
 80055f2:	4611      	mov	r1, r2
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	4798      	blx	r3
 80055f8:	4603      	mov	r3, r0
 80055fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	460b      	mov	r3, r1
 8005610:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	78fa      	ldrb	r2, [r7, #3]
 8005620:	4611      	mov	r1, r2
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	4798      	blx	r3
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800562c:	2303      	movs	r3, #3
 800562e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005630:	7bfb      	ldrb	r3, [r7, #15]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800564a:	6839      	ldr	r1, [r7, #0]
 800564c:	4618      	mov	r0, r3
 800564e:	f001 f908 	bl	8006862 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005660:	461a      	mov	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800566e:	f003 031f 	and.w	r3, r3, #31
 8005672:	2b02      	cmp	r3, #2
 8005674:	d01a      	beq.n	80056ac <USBD_LL_SetupStage+0x72>
 8005676:	2b02      	cmp	r3, #2
 8005678:	d822      	bhi.n	80056c0 <USBD_LL_SetupStage+0x86>
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <USBD_LL_SetupStage+0x4a>
 800567e:	2b01      	cmp	r3, #1
 8005680:	d00a      	beq.n	8005698 <USBD_LL_SetupStage+0x5e>
 8005682:	e01d      	b.n	80056c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800568a:	4619      	mov	r1, r3
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fb5f 	bl	8005d50 <USBD_StdDevReq>
 8005692:	4603      	mov	r3, r0
 8005694:	73fb      	strb	r3, [r7, #15]
      break;
 8005696:	e020      	b.n	80056da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800569e:	4619      	mov	r1, r3
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fbc7 	bl	8005e34 <USBD_StdItfReq>
 80056a6:	4603      	mov	r3, r0
 80056a8:	73fb      	strb	r3, [r7, #15]
      break;
 80056aa:	e016      	b.n	80056da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056b2:	4619      	mov	r1, r3
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fc29 	bl	8005f0c <USBD_StdEPReq>
 80056ba:	4603      	mov	r3, r0
 80056bc:	73fb      	strb	r3, [r7, #15]
      break;
 80056be:	e00c      	b.n	80056da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f001 fd0c 	bl	80070ec <USBD_LL_StallEP>
 80056d4:	4603      	mov	r3, r0
 80056d6:	73fb      	strb	r3, [r7, #15]
      break;
 80056d8:	bf00      	nop
  }

  return ret;
 80056da:	7bfb      	ldrb	r3, [r7, #15]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	460b      	mov	r3, r1
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80056f6:	7afb      	ldrb	r3, [r7, #11]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d16e      	bne.n	80057da <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005702:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800570a:	2b03      	cmp	r3, #3
 800570c:	f040 8098 	bne.w	8005840 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	429a      	cmp	r2, r3
 800571a:	d913      	bls.n	8005744 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	1ad2      	subs	r2, r2, r3
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	4293      	cmp	r3, r2
 8005734:	bf28      	it	cs
 8005736:	4613      	movcs	r3, r2
 8005738:	461a      	mov	r2, r3
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f001 f967 	bl	8006a10 <USBD_CtlContinueRx>
 8005742:	e07d      	b.n	8005840 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800574a:	f003 031f 	and.w	r3, r3, #31
 800574e:	2b02      	cmp	r3, #2
 8005750:	d014      	beq.n	800577c <USBD_LL_DataOutStage+0x98>
 8005752:	2b02      	cmp	r3, #2
 8005754:	d81d      	bhi.n	8005792 <USBD_LL_DataOutStage+0xae>
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <USBD_LL_DataOutStage+0x7c>
 800575a:	2b01      	cmp	r3, #1
 800575c:	d003      	beq.n	8005766 <USBD_LL_DataOutStage+0x82>
 800575e:	e018      	b.n	8005792 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	75bb      	strb	r3, [r7, #22]
            break;
 8005764:	e018      	b.n	8005798 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800576c:	b2db      	uxtb	r3, r3
 800576e:	4619      	mov	r1, r3
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 fa5e 	bl	8005c32 <USBD_CoreFindIF>
 8005776:	4603      	mov	r3, r0
 8005778:	75bb      	strb	r3, [r7, #22]
            break;
 800577a:	e00d      	b.n	8005798 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005782:	b2db      	uxtb	r3, r3
 8005784:	4619      	mov	r1, r3
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 fa60 	bl	8005c4c <USBD_CoreFindEP>
 800578c:	4603      	mov	r3, r0
 800578e:	75bb      	strb	r3, [r7, #22]
            break;
 8005790:	e002      	b.n	8005798 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	75bb      	strb	r3, [r7, #22]
            break;
 8005796:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005798:	7dbb      	ldrb	r3, [r7, #22]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d119      	bne.n	80057d2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	d113      	bne.n	80057d2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80057aa:	7dba      	ldrb	r2, [r7, #22]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	32ae      	adds	r2, #174	; 0xae
 80057b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00b      	beq.n	80057d2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80057ba:	7dba      	ldrb	r2, [r7, #22]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80057c2:	7dba      	ldrb	r2, [r7, #22]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	32ae      	adds	r2, #174	; 0xae
 80057c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f001 f92d 	bl	8006a32 <USBD_CtlSendStatus>
 80057d8:	e032      	b.n	8005840 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80057da:	7afb      	ldrb	r3, [r7, #11]
 80057dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	4619      	mov	r1, r3
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 fa31 	bl	8005c4c <USBD_CoreFindEP>
 80057ea:	4603      	mov	r3, r0
 80057ec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80057ee:	7dbb      	ldrb	r3, [r7, #22]
 80057f0:	2bff      	cmp	r3, #255	; 0xff
 80057f2:	d025      	beq.n	8005840 <USBD_LL_DataOutStage+0x15c>
 80057f4:	7dbb      	ldrb	r3, [r7, #22]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d122      	bne.n	8005840 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b03      	cmp	r3, #3
 8005804:	d117      	bne.n	8005836 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005806:	7dba      	ldrb	r2, [r7, #22]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	32ae      	adds	r2, #174	; 0xae
 800580c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00f      	beq.n	8005836 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005816:	7dba      	ldrb	r2, [r7, #22]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800581e:	7dba      	ldrb	r2, [r7, #22]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	32ae      	adds	r2, #174	; 0xae
 8005824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	7afa      	ldrb	r2, [r7, #11]
 800582c:	4611      	mov	r1, r2
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	4798      	blx	r3
 8005832:	4603      	mov	r3, r0
 8005834:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005836:	7dfb      	ldrb	r3, [r7, #23]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800583c:	7dfb      	ldrb	r3, [r7, #23]
 800583e:	e000      	b.n	8005842 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b086      	sub	sp, #24
 800584e:	af00      	add	r7, sp, #0
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	460b      	mov	r3, r1
 8005854:	607a      	str	r2, [r7, #4]
 8005856:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005858:	7afb      	ldrb	r3, [r7, #11]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d16f      	bne.n	800593e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3314      	adds	r3, #20
 8005862:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800586a:	2b02      	cmp	r3, #2
 800586c:	d15a      	bne.n	8005924 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	689a      	ldr	r2, [r3, #8]
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	429a      	cmp	r2, r3
 8005878:	d914      	bls.n	80058a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	1ad2      	subs	r2, r2, r3
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	461a      	mov	r2, r3
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f001 f8ac 	bl	80069ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005896:	2300      	movs	r3, #0
 8005898:	2200      	movs	r2, #0
 800589a:	2100      	movs	r1, #0
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f001 fccf 	bl	8007240 <USBD_LL_PrepareReceive>
 80058a2:	e03f      	b.n	8005924 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	68da      	ldr	r2, [r3, #12]
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d11c      	bne.n	80058ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d316      	bcc.n	80058ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d20f      	bcs.n	80058ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80058ca:	2200      	movs	r2, #0
 80058cc:	2100      	movs	r1, #0
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f001 f88d 	bl	80069ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058dc:	2300      	movs	r3, #0
 80058de:	2200      	movs	r2, #0
 80058e0:	2100      	movs	r1, #0
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f001 fcac 	bl	8007240 <USBD_LL_PrepareReceive>
 80058e8:	e01c      	b.n	8005924 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d10f      	bne.n	8005916 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d009      	beq.n	8005916 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005916:	2180      	movs	r1, #128	; 0x80
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f001 fbe7 	bl	80070ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f001 f89a 	bl	8006a58 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d03a      	beq.n	80059a4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f7ff fe42 	bl	80055b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800593c:	e032      	b.n	80059a4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800593e:	7afb      	ldrb	r3, [r7, #11]
 8005940:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005944:	b2db      	uxtb	r3, r3
 8005946:	4619      	mov	r1, r3
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f97f 	bl	8005c4c <USBD_CoreFindEP>
 800594e:	4603      	mov	r3, r0
 8005950:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005952:	7dfb      	ldrb	r3, [r7, #23]
 8005954:	2bff      	cmp	r3, #255	; 0xff
 8005956:	d025      	beq.n	80059a4 <USBD_LL_DataInStage+0x15a>
 8005958:	7dfb      	ldrb	r3, [r7, #23]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d122      	bne.n	80059a4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b03      	cmp	r3, #3
 8005968:	d11c      	bne.n	80059a4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800596a:	7dfa      	ldrb	r2, [r7, #23]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	32ae      	adds	r2, #174	; 0xae
 8005970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d014      	beq.n	80059a4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800597a:	7dfa      	ldrb	r2, [r7, #23]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005982:	7dfa      	ldrb	r2, [r7, #23]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	32ae      	adds	r2, #174	; 0xae
 8005988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	7afa      	ldrb	r2, [r7, #11]
 8005990:	4611      	mov	r1, r2
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	4798      	blx	r3
 8005996:	4603      	mov	r3, r0
 8005998:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800599a:	7dbb      	ldrb	r3, [r7, #22]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80059a0:	7dbb      	ldrb	r3, [r7, #22]
 80059a2:	e000      	b.n	80059a6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b084      	sub	sp, #16
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d014      	beq.n	8005a14 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00e      	beq.n	8005a14 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6852      	ldr	r2, [r2, #4]
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	4611      	mov	r1, r2
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	4798      	blx	r3
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005a10:	2303      	movs	r3, #3
 8005a12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a14:	2340      	movs	r3, #64	; 0x40
 8005a16:	2200      	movs	r2, #0
 8005a18:	2100      	movs	r1, #0
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f001 fb21 	bl	8007062 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2240      	movs	r2, #64	; 0x40
 8005a2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a30:	2340      	movs	r3, #64	; 0x40
 8005a32:	2200      	movs	r2, #0
 8005a34:	2180      	movs	r1, #128	; 0x80
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f001 fb13 	bl	8007062 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2240      	movs	r2, #64	; 0x40
 8005a46:	621a      	str	r2, [r3, #32]

  return ret;
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	78fa      	ldrb	r2, [r7, #3]
 8005a62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2204      	movs	r2, #4
 8005a8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d106      	bne.n	8005ac0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b082      	sub	sp, #8
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d110      	bne.n	8005b04 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00b      	beq.n	8005b04 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d005      	beq.n	8005b04 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b082      	sub	sp, #8
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	460b      	mov	r3, r1
 8005b18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	32ae      	adds	r2, #174	; 0xae
 8005b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e01c      	b.n	8005b6a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d115      	bne.n	8005b68 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	32ae      	adds	r2, #174	; 0xae
 8005b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00b      	beq.n	8005b68 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	32ae      	adds	r2, #174	; 0xae
 8005b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	78fa      	ldrb	r2, [r7, #3]
 8005b62:	4611      	mov	r1, r2
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b082      	sub	sp, #8
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	32ae      	adds	r2, #174	; 0xae
 8005b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e01c      	b.n	8005bce <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b03      	cmp	r3, #3
 8005b9e:	d115      	bne.n	8005bcc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	32ae      	adds	r2, #174	; 0xae
 8005baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00b      	beq.n	8005bcc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	32ae      	adds	r2, #174	; 0xae
 8005bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	78fa      	ldrb	r2, [r7, #3]
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00e      	beq.n	8005c28 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6852      	ldr	r2, [r2, #4]
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	4611      	mov	r1, r2
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	4798      	blx	r3
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005c24:	2303      	movs	r3, #3
 8005c26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c3e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	460b      	mov	r3, r1
 8005c56:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c58:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b086      	sub	sp, #24
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	885b      	ldrh	r3, [r3, #2]
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d920      	bls.n	8005cd0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005c96:	e013      	b.n	8005cc0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005c98:	f107 030a 	add.w	r3, r7, #10
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	6978      	ldr	r0, [r7, #20]
 8005ca0:	f000 f81b 	bl	8005cda <USBD_GetNextDesc>
 8005ca4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	785b      	ldrb	r3, [r3, #1]
 8005caa:	2b05      	cmp	r3, #5
 8005cac:	d108      	bne.n	8005cc0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	789b      	ldrb	r3, [r3, #2]
 8005cb6:	78fa      	ldrb	r2, [r7, #3]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d008      	beq.n	8005cce <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	885b      	ldrh	r3, [r3, #2]
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	897b      	ldrh	r3, [r7, #10]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d8e5      	bhi.n	8005c98 <USBD_GetEpDesc+0x32>
 8005ccc:	e000      	b.n	8005cd0 <USBD_GetEpDesc+0x6a>
          break;
 8005cce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005cd0:	693b      	ldr	r3, [r7, #16]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b085      	sub	sp, #20
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	881a      	ldrh	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	4413      	add	r3, r2
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4413      	add	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005d06:	68fb      	ldr	r3, [r7, #12]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005d32:	8a3b      	ldrh	r3, [r7, #16]
 8005d34:	021b      	lsls	r3, r3, #8
 8005d36:	b21a      	sxth	r2, r3
 8005d38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	b21b      	sxth	r3, r3
 8005d40:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005d42:	89fb      	ldrh	r3, [r7, #14]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	371c      	adds	r7, #28
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d66:	2b40      	cmp	r3, #64	; 0x40
 8005d68:	d005      	beq.n	8005d76 <USBD_StdDevReq+0x26>
 8005d6a:	2b40      	cmp	r3, #64	; 0x40
 8005d6c:	d857      	bhi.n	8005e1e <USBD_StdDevReq+0xce>
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00f      	beq.n	8005d92 <USBD_StdDevReq+0x42>
 8005d72:	2b20      	cmp	r3, #32
 8005d74:	d153      	bne.n	8005e1e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	32ae      	adds	r2, #174	; 0xae
 8005d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	4798      	blx	r3
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d90:	e04a      	b.n	8005e28 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	785b      	ldrb	r3, [r3, #1]
 8005d96:	2b09      	cmp	r3, #9
 8005d98:	d83b      	bhi.n	8005e12 <USBD_StdDevReq+0xc2>
 8005d9a:	a201      	add	r2, pc, #4	; (adr r2, 8005da0 <USBD_StdDevReq+0x50>)
 8005d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da0:	08005df5 	.word	0x08005df5
 8005da4:	08005e09 	.word	0x08005e09
 8005da8:	08005e13 	.word	0x08005e13
 8005dac:	08005dff 	.word	0x08005dff
 8005db0:	08005e13 	.word	0x08005e13
 8005db4:	08005dd3 	.word	0x08005dd3
 8005db8:	08005dc9 	.word	0x08005dc9
 8005dbc:	08005e13 	.word	0x08005e13
 8005dc0:	08005deb 	.word	0x08005deb
 8005dc4:	08005ddd 	.word	0x08005ddd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fa3c 	bl	8006248 <USBD_GetDescriptor>
          break;
 8005dd0:	e024      	b.n	8005e1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005dd2:	6839      	ldr	r1, [r7, #0]
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fba1 	bl	800651c <USBD_SetAddress>
          break;
 8005dda:	e01f      	b.n	8005e1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005ddc:	6839      	ldr	r1, [r7, #0]
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fbe0 	bl	80065a4 <USBD_SetConfig>
 8005de4:	4603      	mov	r3, r0
 8005de6:	73fb      	strb	r3, [r7, #15]
          break;
 8005de8:	e018      	b.n	8005e1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005dea:	6839      	ldr	r1, [r7, #0]
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fc83 	bl	80066f8 <USBD_GetConfig>
          break;
 8005df2:	e013      	b.n	8005e1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fcb4 	bl	8006764 <USBD_GetStatus>
          break;
 8005dfc:	e00e      	b.n	8005e1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fce3 	bl	80067cc <USBD_SetFeature>
          break;
 8005e06:	e009      	b.n	8005e1c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e08:	6839      	ldr	r1, [r7, #0]
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fd07 	bl	800681e <USBD_ClrFeature>
          break;
 8005e10:	e004      	b.n	8005e1c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fd5e 	bl	80068d6 <USBD_CtlError>
          break;
 8005e1a:	bf00      	nop
      }
      break;
 8005e1c:	e004      	b.n	8005e28 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fd58 	bl	80068d6 <USBD_CtlError>
      break;
 8005e26:	bf00      	nop
  }

  return ret;
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop

08005e34 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e4a:	2b40      	cmp	r3, #64	; 0x40
 8005e4c:	d005      	beq.n	8005e5a <USBD_StdItfReq+0x26>
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d852      	bhi.n	8005ef8 <USBD_StdItfReq+0xc4>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <USBD_StdItfReq+0x26>
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d14e      	bne.n	8005ef8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	3b01      	subs	r3, #1
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d840      	bhi.n	8005eea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	889b      	ldrh	r3, [r3, #4]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d836      	bhi.n	8005ee0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	889b      	ldrh	r3, [r3, #4]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	4619      	mov	r1, r3
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff fed9 	bl	8005c32 <USBD_CoreFindIF>
 8005e80:	4603      	mov	r3, r0
 8005e82:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e84:	7bbb      	ldrb	r3, [r7, #14]
 8005e86:	2bff      	cmp	r3, #255	; 0xff
 8005e88:	d01d      	beq.n	8005ec6 <USBD_StdItfReq+0x92>
 8005e8a:	7bbb      	ldrb	r3, [r7, #14]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d11a      	bne.n	8005ec6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005e90:	7bba      	ldrb	r2, [r7, #14]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	32ae      	adds	r2, #174	; 0xae
 8005e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00f      	beq.n	8005ec0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005ea0:	7bba      	ldrb	r2, [r7, #14]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ea8:	7bba      	ldrb	r2, [r7, #14]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	32ae      	adds	r2, #174	; 0xae
 8005eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	4798      	blx	r3
 8005eba:	4603      	mov	r3, r0
 8005ebc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005ebe:	e004      	b.n	8005eca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005ec4:	e001      	b.n	8005eca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	88db      	ldrh	r3, [r3, #6]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d110      	bne.n	8005ef4 <USBD_StdItfReq+0xc0>
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10d      	bne.n	8005ef4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fdaa 	bl	8006a32 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005ede:	e009      	b.n	8005ef4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fcf7 	bl	80068d6 <USBD_CtlError>
          break;
 8005ee8:	e004      	b.n	8005ef4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005eea:	6839      	ldr	r1, [r7, #0]
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fcf2 	bl	80068d6 <USBD_CtlError>
          break;
 8005ef2:	e000      	b.n	8005ef6 <USBD_StdItfReq+0xc2>
          break;
 8005ef4:	bf00      	nop
      }
      break;
 8005ef6:	e004      	b.n	8005f02 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fceb 	bl	80068d6 <USBD_CtlError>
      break;
 8005f00:	bf00      	nop
  }

  return ret;
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f16:	2300      	movs	r3, #0
 8005f18:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	889b      	ldrh	r3, [r3, #4]
 8005f1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f28:	2b40      	cmp	r3, #64	; 0x40
 8005f2a:	d007      	beq.n	8005f3c <USBD_StdEPReq+0x30>
 8005f2c:	2b40      	cmp	r3, #64	; 0x40
 8005f2e:	f200 817f 	bhi.w	8006230 <USBD_StdEPReq+0x324>
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d02a      	beq.n	8005f8c <USBD_StdEPReq+0x80>
 8005f36:	2b20      	cmp	r3, #32
 8005f38:	f040 817a 	bne.w	8006230 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005f3c:	7bbb      	ldrb	r3, [r7, #14]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff fe83 	bl	8005c4c <USBD_CoreFindEP>
 8005f46:	4603      	mov	r3, r0
 8005f48:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f4a:	7b7b      	ldrb	r3, [r7, #13]
 8005f4c:	2bff      	cmp	r3, #255	; 0xff
 8005f4e:	f000 8174 	beq.w	800623a <USBD_StdEPReq+0x32e>
 8005f52:	7b7b      	ldrb	r3, [r7, #13]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f040 8170 	bne.w	800623a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005f5a:	7b7a      	ldrb	r2, [r7, #13]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005f62:	7b7a      	ldrb	r2, [r7, #13]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	32ae      	adds	r2, #174	; 0xae
 8005f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 8163 	beq.w	800623a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005f74:	7b7a      	ldrb	r2, [r7, #13]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	32ae      	adds	r2, #174	; 0xae
 8005f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	4798      	blx	r3
 8005f86:	4603      	mov	r3, r0
 8005f88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f8a:	e156      	b.n	800623a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	785b      	ldrb	r3, [r3, #1]
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d008      	beq.n	8005fa6 <USBD_StdEPReq+0x9a>
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	f300 8145 	bgt.w	8006224 <USBD_StdEPReq+0x318>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 809b 	beq.w	80060d6 <USBD_StdEPReq+0x1ca>
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d03c      	beq.n	800601e <USBD_StdEPReq+0x112>
 8005fa4:	e13e      	b.n	8006224 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d002      	beq.n	8005fb8 <USBD_StdEPReq+0xac>
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d016      	beq.n	8005fe4 <USBD_StdEPReq+0xd8>
 8005fb6:	e02c      	b.n	8006012 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fb8:	7bbb      	ldrb	r3, [r7, #14]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00d      	beq.n	8005fda <USBD_StdEPReq+0xce>
 8005fbe:	7bbb      	ldrb	r3, [r7, #14]
 8005fc0:	2b80      	cmp	r3, #128	; 0x80
 8005fc2:	d00a      	beq.n	8005fda <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fc4:	7bbb      	ldrb	r3, [r7, #14]
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f001 f88f 	bl	80070ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fce:	2180      	movs	r1, #128	; 0x80
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 f88b 	bl	80070ec <USBD_LL_StallEP>
 8005fd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005fd8:	e020      	b.n	800601c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fc7a 	bl	80068d6 <USBD_CtlError>
              break;
 8005fe2:	e01b      	b.n	800601c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	885b      	ldrh	r3, [r3, #2]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10e      	bne.n	800600a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00b      	beq.n	800600a <USBD_StdEPReq+0xfe>
 8005ff2:	7bbb      	ldrb	r3, [r7, #14]
 8005ff4:	2b80      	cmp	r3, #128	; 0x80
 8005ff6:	d008      	beq.n	800600a <USBD_StdEPReq+0xfe>
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	88db      	ldrh	r3, [r3, #6]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d104      	bne.n	800600a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006000:	7bbb      	ldrb	r3, [r7, #14]
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 f871 	bl	80070ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fd11 	bl	8006a32 <USBD_CtlSendStatus>

              break;
 8006010:	e004      	b.n	800601c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fc5e 	bl	80068d6 <USBD_CtlError>
              break;
 800601a:	bf00      	nop
          }
          break;
 800601c:	e107      	b.n	800622e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d002      	beq.n	8006030 <USBD_StdEPReq+0x124>
 800602a:	2b03      	cmp	r3, #3
 800602c:	d016      	beq.n	800605c <USBD_StdEPReq+0x150>
 800602e:	e04b      	b.n	80060c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006030:	7bbb      	ldrb	r3, [r7, #14]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00d      	beq.n	8006052 <USBD_StdEPReq+0x146>
 8006036:	7bbb      	ldrb	r3, [r7, #14]
 8006038:	2b80      	cmp	r3, #128	; 0x80
 800603a:	d00a      	beq.n	8006052 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800603c:	7bbb      	ldrb	r3, [r7, #14]
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f001 f853 	bl	80070ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006046:	2180      	movs	r1, #128	; 0x80
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 f84f 	bl	80070ec <USBD_LL_StallEP>
 800604e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006050:	e040      	b.n	80060d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006052:	6839      	ldr	r1, [r7, #0]
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fc3e 	bl	80068d6 <USBD_CtlError>
              break;
 800605a:	e03b      	b.n	80060d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	885b      	ldrh	r3, [r3, #2]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d136      	bne.n	80060d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006064:	7bbb      	ldrb	r3, [r7, #14]
 8006066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800606a:	2b00      	cmp	r3, #0
 800606c:	d004      	beq.n	8006078 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800606e:	7bbb      	ldrb	r3, [r7, #14]
 8006070:	4619      	mov	r1, r3
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f001 f859 	bl	800712a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fcda 	bl	8006a32 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800607e:	7bbb      	ldrb	r3, [r7, #14]
 8006080:	4619      	mov	r1, r3
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff fde2 	bl	8005c4c <USBD_CoreFindEP>
 8006088:	4603      	mov	r3, r0
 800608a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800608c:	7b7b      	ldrb	r3, [r7, #13]
 800608e:	2bff      	cmp	r3, #255	; 0xff
 8006090:	d01f      	beq.n	80060d2 <USBD_StdEPReq+0x1c6>
 8006092:	7b7b      	ldrb	r3, [r7, #13]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d11c      	bne.n	80060d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006098:	7b7a      	ldrb	r2, [r7, #13]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80060a0:	7b7a      	ldrb	r2, [r7, #13]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	32ae      	adds	r2, #174	; 0xae
 80060a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d010      	beq.n	80060d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80060b0:	7b7a      	ldrb	r2, [r7, #13]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	32ae      	adds	r2, #174	; 0xae
 80060b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	6839      	ldr	r1, [r7, #0]
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	4798      	blx	r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80060c6:	e004      	b.n	80060d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fc03 	bl	80068d6 <USBD_CtlError>
              break;
 80060d0:	e000      	b.n	80060d4 <USBD_StdEPReq+0x1c8>
              break;
 80060d2:	bf00      	nop
          }
          break;
 80060d4:	e0ab      	b.n	800622e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d002      	beq.n	80060e8 <USBD_StdEPReq+0x1dc>
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d032      	beq.n	800614c <USBD_StdEPReq+0x240>
 80060e6:	e097      	b.n	8006218 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060e8:	7bbb      	ldrb	r3, [r7, #14]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d007      	beq.n	80060fe <USBD_StdEPReq+0x1f2>
 80060ee:	7bbb      	ldrb	r3, [r7, #14]
 80060f0:	2b80      	cmp	r3, #128	; 0x80
 80060f2:	d004      	beq.n	80060fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80060f4:	6839      	ldr	r1, [r7, #0]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fbed 	bl	80068d6 <USBD_CtlError>
                break;
 80060fc:	e091      	b.n	8006222 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80060fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006102:	2b00      	cmp	r3, #0
 8006104:	da0b      	bge.n	800611e <USBD_StdEPReq+0x212>
 8006106:	7bbb      	ldrb	r3, [r7, #14]
 8006108:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	3310      	adds	r3, #16
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	4413      	add	r3, r2
 800611a:	3304      	adds	r3, #4
 800611c:	e00b      	b.n	8006136 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800611e:	7bbb      	ldrb	r3, [r7, #14]
 8006120:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	4413      	add	r3, r2
 8006134:	3304      	adds	r3, #4
 8006136:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2202      	movs	r2, #2
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fc37 	bl	80069b8 <USBD_CtlSendData>
              break;
 800614a:	e06a      	b.n	8006222 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800614c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006150:	2b00      	cmp	r3, #0
 8006152:	da11      	bge.n	8006178 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006154:	7bbb      	ldrb	r3, [r7, #14]
 8006156:	f003 020f 	and.w	r2, r3, #15
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	440b      	add	r3, r1
 8006166:	3324      	adds	r3, #36	; 0x24
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d117      	bne.n	800619e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fbb0 	bl	80068d6 <USBD_CtlError>
                  break;
 8006176:	e054      	b.n	8006222 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006178:	7bbb      	ldrb	r3, [r7, #14]
 800617a:	f003 020f 	and.w	r2, r3, #15
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	440b      	add	r3, r1
 800618a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d104      	bne.n	800619e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fb9d 	bl	80068d6 <USBD_CtlError>
                  break;
 800619c:	e041      	b.n	8006222 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800619e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	da0b      	bge.n	80061be <USBD_StdEPReq+0x2b2>
 80061a6:	7bbb      	ldrb	r3, [r7, #14]
 80061a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061ac:	4613      	mov	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	3310      	adds	r3, #16
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	4413      	add	r3, r2
 80061ba:	3304      	adds	r3, #4
 80061bc:	e00b      	b.n	80061d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061be:	7bbb      	ldrb	r3, [r7, #14]
 80061c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	4413      	add	r3, r2
 80061d4:	3304      	adds	r3, #4
 80061d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80061d8:	7bbb      	ldrb	r3, [r7, #14]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d002      	beq.n	80061e4 <USBD_StdEPReq+0x2d8>
 80061de:	7bbb      	ldrb	r3, [r7, #14]
 80061e0:	2b80      	cmp	r3, #128	; 0x80
 80061e2:	d103      	bne.n	80061ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2200      	movs	r2, #0
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	e00e      	b.n	800620a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80061ec:	7bbb      	ldrb	r3, [r7, #14]
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 ffb9 	bl	8007168 <USBD_LL_IsStallEP>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2201      	movs	r2, #1
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	e002      	b.n	800620a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2200      	movs	r2, #0
 8006208:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2202      	movs	r2, #2
 800620e:	4619      	mov	r1, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fbd1 	bl	80069b8 <USBD_CtlSendData>
              break;
 8006216:	e004      	b.n	8006222 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fb5b 	bl	80068d6 <USBD_CtlError>
              break;
 8006220:	bf00      	nop
          }
          break;
 8006222:	e004      	b.n	800622e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fb55 	bl	80068d6 <USBD_CtlError>
          break;
 800622c:	bf00      	nop
      }
      break;
 800622e:	e005      	b.n	800623c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fb4f 	bl	80068d6 <USBD_CtlError>
      break;
 8006238:	e000      	b.n	800623c <USBD_StdEPReq+0x330>
      break;
 800623a:	bf00      	nop
  }

  return ret;
 800623c:	7bfb      	ldrb	r3, [r7, #15]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
	...

08006248 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	885b      	ldrh	r3, [r3, #2]
 8006262:	0a1b      	lsrs	r3, r3, #8
 8006264:	b29b      	uxth	r3, r3
 8006266:	3b01      	subs	r3, #1
 8006268:	2b06      	cmp	r3, #6
 800626a:	f200 8128 	bhi.w	80064be <USBD_GetDescriptor+0x276>
 800626e:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <USBD_GetDescriptor+0x2c>)
 8006270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006274:	08006291 	.word	0x08006291
 8006278:	080062a9 	.word	0x080062a9
 800627c:	080062e9 	.word	0x080062e9
 8006280:	080064bf 	.word	0x080064bf
 8006284:	080064bf 	.word	0x080064bf
 8006288:	0800645f 	.word	0x0800645f
 800628c:	0800648b 	.word	0x0800648b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	7c12      	ldrb	r2, [r2, #16]
 800629c:	f107 0108 	add.w	r1, r7, #8
 80062a0:	4610      	mov	r0, r2
 80062a2:	4798      	blx	r3
 80062a4:	60f8      	str	r0, [r7, #12]
      break;
 80062a6:	e112      	b.n	80064ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	7c1b      	ldrb	r3, [r3, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10d      	bne.n	80062cc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b8:	f107 0208 	add.w	r2, r7, #8
 80062bc:	4610      	mov	r0, r2
 80062be:	4798      	blx	r3
 80062c0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3301      	adds	r3, #1
 80062c6:	2202      	movs	r2, #2
 80062c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80062ca:	e100      	b.n	80064ce <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	f107 0208 	add.w	r2, r7, #8
 80062d8:	4610      	mov	r0, r2
 80062da:	4798      	blx	r3
 80062dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3301      	adds	r3, #1
 80062e2:	2202      	movs	r2, #2
 80062e4:	701a      	strb	r2, [r3, #0]
      break;
 80062e6:	e0f2      	b.n	80064ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	885b      	ldrh	r3, [r3, #2]
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b05      	cmp	r3, #5
 80062f0:	f200 80ac 	bhi.w	800644c <USBD_GetDescriptor+0x204>
 80062f4:	a201      	add	r2, pc, #4	; (adr r2, 80062fc <USBD_GetDescriptor+0xb4>)
 80062f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fa:	bf00      	nop
 80062fc:	08006315 	.word	0x08006315
 8006300:	08006349 	.word	0x08006349
 8006304:	0800637d 	.word	0x0800637d
 8006308:	080063b1 	.word	0x080063b1
 800630c:	080063e5 	.word	0x080063e5
 8006310:	08006419 	.word	0x08006419
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	7c12      	ldrb	r2, [r2, #16]
 800632c:	f107 0108 	add.w	r1, r7, #8
 8006330:	4610      	mov	r0, r2
 8006332:	4798      	blx	r3
 8006334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006336:	e091      	b.n	800645c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006338:	6839      	ldr	r1, [r7, #0]
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 facb 	bl	80068d6 <USBD_CtlError>
            err++;
 8006340:	7afb      	ldrb	r3, [r7, #11]
 8006342:	3301      	adds	r3, #1
 8006344:	72fb      	strb	r3, [r7, #11]
          break;
 8006346:	e089      	b.n	800645c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00b      	beq.n	800636c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	7c12      	ldrb	r2, [r2, #16]
 8006360:	f107 0108 	add.w	r1, r7, #8
 8006364:	4610      	mov	r0, r2
 8006366:	4798      	blx	r3
 8006368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800636a:	e077      	b.n	800645c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fab1 	bl	80068d6 <USBD_CtlError>
            err++;
 8006374:	7afb      	ldrb	r3, [r7, #11]
 8006376:	3301      	adds	r3, #1
 8006378:	72fb      	strb	r3, [r7, #11]
          break;
 800637a:	e06f      	b.n	800645c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00b      	beq.n	80063a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	7c12      	ldrb	r2, [r2, #16]
 8006394:	f107 0108 	add.w	r1, r7, #8
 8006398:	4610      	mov	r0, r2
 800639a:	4798      	blx	r3
 800639c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800639e:	e05d      	b.n	800645c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fa97 	bl	80068d6 <USBD_CtlError>
            err++;
 80063a8:	7afb      	ldrb	r3, [r7, #11]
 80063aa:	3301      	adds	r3, #1
 80063ac:	72fb      	strb	r3, [r7, #11]
          break;
 80063ae:	e055      	b.n	800645c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00b      	beq.n	80063d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	7c12      	ldrb	r2, [r2, #16]
 80063c8:	f107 0108 	add.w	r1, r7, #8
 80063cc:	4610      	mov	r0, r2
 80063ce:	4798      	blx	r3
 80063d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063d2:	e043      	b.n	800645c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fa7d 	bl	80068d6 <USBD_CtlError>
            err++;
 80063dc:	7afb      	ldrb	r3, [r7, #11]
 80063de:	3301      	adds	r3, #1
 80063e0:	72fb      	strb	r3, [r7, #11]
          break;
 80063e2:	e03b      	b.n	800645c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00b      	beq.n	8006408 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	7c12      	ldrb	r2, [r2, #16]
 80063fc:	f107 0108 	add.w	r1, r7, #8
 8006400:	4610      	mov	r0, r2
 8006402:	4798      	blx	r3
 8006404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006406:	e029      	b.n	800645c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fa63 	bl	80068d6 <USBD_CtlError>
            err++;
 8006410:	7afb      	ldrb	r3, [r7, #11]
 8006412:	3301      	adds	r3, #1
 8006414:	72fb      	strb	r3, [r7, #11]
          break;
 8006416:	e021      	b.n	800645c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	7c12      	ldrb	r2, [r2, #16]
 8006430:	f107 0108 	add.w	r1, r7, #8
 8006434:	4610      	mov	r0, r2
 8006436:	4798      	blx	r3
 8006438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800643a:	e00f      	b.n	800645c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fa49 	bl	80068d6 <USBD_CtlError>
            err++;
 8006444:	7afb      	ldrb	r3, [r7, #11]
 8006446:	3301      	adds	r3, #1
 8006448:	72fb      	strb	r3, [r7, #11]
          break;
 800644a:	e007      	b.n	800645c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fa41 	bl	80068d6 <USBD_CtlError>
          err++;
 8006454:	7afb      	ldrb	r3, [r7, #11]
 8006456:	3301      	adds	r3, #1
 8006458:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800645a:	bf00      	nop
      }
      break;
 800645c:	e037      	b.n	80064ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	7c1b      	ldrb	r3, [r3, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d109      	bne.n	800647a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646e:	f107 0208 	add.w	r2, r7, #8
 8006472:	4610      	mov	r0, r2
 8006474:	4798      	blx	r3
 8006476:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006478:	e029      	b.n	80064ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fa2a 	bl	80068d6 <USBD_CtlError>
        err++;
 8006482:	7afb      	ldrb	r3, [r7, #11]
 8006484:	3301      	adds	r3, #1
 8006486:	72fb      	strb	r3, [r7, #11]
      break;
 8006488:	e021      	b.n	80064ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	7c1b      	ldrb	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10d      	bne.n	80064ae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649a:	f107 0208 	add.w	r2, r7, #8
 800649e:	4610      	mov	r0, r2
 80064a0:	4798      	blx	r3
 80064a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3301      	adds	r3, #1
 80064a8:	2207      	movs	r2, #7
 80064aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064ac:	e00f      	b.n	80064ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fa10 	bl	80068d6 <USBD_CtlError>
        err++;
 80064b6:	7afb      	ldrb	r3, [r7, #11]
 80064b8:	3301      	adds	r3, #1
 80064ba:	72fb      	strb	r3, [r7, #11]
      break;
 80064bc:	e007      	b.n	80064ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80064be:	6839      	ldr	r1, [r7, #0]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fa08 	bl	80068d6 <USBD_CtlError>
      err++;
 80064c6:	7afb      	ldrb	r3, [r7, #11]
 80064c8:	3301      	adds	r3, #1
 80064ca:	72fb      	strb	r3, [r7, #11]
      break;
 80064cc:	bf00      	nop
  }

  if (err != 0U)
 80064ce:	7afb      	ldrb	r3, [r7, #11]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d11e      	bne.n	8006512 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	88db      	ldrh	r3, [r3, #6]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d016      	beq.n	800650a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80064dc:	893b      	ldrh	r3, [r7, #8]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00e      	beq.n	8006500 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	88da      	ldrh	r2, [r3, #6]
 80064e6:	893b      	ldrh	r3, [r7, #8]
 80064e8:	4293      	cmp	r3, r2
 80064ea:	bf28      	it	cs
 80064ec:	4613      	movcs	r3, r2
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80064f2:	893b      	ldrh	r3, [r7, #8]
 80064f4:	461a      	mov	r2, r3
 80064f6:	68f9      	ldr	r1, [r7, #12]
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fa5d 	bl	80069b8 <USBD_CtlSendData>
 80064fe:	e009      	b.n	8006514 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f9e7 	bl	80068d6 <USBD_CtlError>
 8006508:	e004      	b.n	8006514 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fa91 	bl	8006a32 <USBD_CtlSendStatus>
 8006510:	e000      	b.n	8006514 <USBD_GetDescriptor+0x2cc>
    return;
 8006512:	bf00      	nop
  }
}
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop

0800651c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	889b      	ldrh	r3, [r3, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d131      	bne.n	8006592 <USBD_SetAddress+0x76>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	88db      	ldrh	r3, [r3, #6]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d12d      	bne.n	8006592 <USBD_SetAddress+0x76>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	885b      	ldrh	r3, [r3, #2]
 800653a:	2b7f      	cmp	r3, #127	; 0x7f
 800653c:	d829      	bhi.n	8006592 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	885b      	ldrh	r3, [r3, #2]
 8006542:	b2db      	uxtb	r3, r3
 8006544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006548:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b03      	cmp	r3, #3
 8006554:	d104      	bne.n	8006560 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 f9bc 	bl	80068d6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800655e:	e01d      	b.n	800659c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	7bfa      	ldrb	r2, [r7, #15]
 8006564:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	4619      	mov	r1, r3
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fe27 	bl	80071c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fa5d 	bl	8006a32 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d004      	beq.n	8006588 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2202      	movs	r2, #2
 8006582:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006586:	e009      	b.n	800659c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006590:	e004      	b.n	800659c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006592:	6839      	ldr	r1, [r7, #0]
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f99e 	bl	80068d6 <USBD_CtlError>
  }
}
 800659a:	bf00      	nop
 800659c:	bf00      	nop
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	885b      	ldrh	r3, [r3, #2]
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	4b4e      	ldr	r3, [pc, #312]	; (80066f4 <USBD_SetConfig+0x150>)
 80065ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80065bc:	4b4d      	ldr	r3, [pc, #308]	; (80066f4 <USBD_SetConfig+0x150>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d905      	bls.n	80065d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f985 	bl	80068d6 <USBD_CtlError>
    return USBD_FAIL;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e08c      	b.n	80066ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d002      	beq.n	80065e2 <USBD_SetConfig+0x3e>
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d029      	beq.n	8006634 <USBD_SetConfig+0x90>
 80065e0:	e075      	b.n	80066ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80065e2:	4b44      	ldr	r3, [pc, #272]	; (80066f4 <USBD_SetConfig+0x150>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d020      	beq.n	800662c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80065ea:	4b42      	ldr	r3, [pc, #264]	; (80066f4 <USBD_SetConfig+0x150>)
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80065f4:	4b3f      	ldr	r3, [pc, #252]	; (80066f4 <USBD_SetConfig+0x150>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fe ffe7 	bl	80055ce <USBD_SetClassConfig>
 8006600:	4603      	mov	r3, r0
 8006602:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006604:	7bfb      	ldrb	r3, [r7, #15]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d008      	beq.n	800661c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800660a:	6839      	ldr	r1, [r7, #0]
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f962 	bl	80068d6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2202      	movs	r2, #2
 8006616:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800661a:	e065      	b.n	80066e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fa08 	bl	8006a32 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2203      	movs	r2, #3
 8006626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800662a:	e05d      	b.n	80066e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fa00 	bl	8006a32 <USBD_CtlSendStatus>
      break;
 8006632:	e059      	b.n	80066e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006634:	4b2f      	ldr	r3, [pc, #188]	; (80066f4 <USBD_SetConfig+0x150>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d112      	bne.n	8006662 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006644:	4b2b      	ldr	r3, [pc, #172]	; (80066f4 <USBD_SetConfig+0x150>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800664e:	4b29      	ldr	r3, [pc, #164]	; (80066f4 <USBD_SetConfig+0x150>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	4619      	mov	r1, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7fe ffd6 	bl	8005606 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f9e9 	bl	8006a32 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006660:	e042      	b.n	80066e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006662:	4b24      	ldr	r3, [pc, #144]	; (80066f4 <USBD_SetConfig+0x150>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	429a      	cmp	r2, r3
 800666e:	d02a      	beq.n	80066c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	b2db      	uxtb	r3, r3
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7fe ffc4 	bl	8005606 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800667e:	4b1d      	ldr	r3, [pc, #116]	; (80066f4 <USBD_SetConfig+0x150>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006688:	4b1a      	ldr	r3, [pc, #104]	; (80066f4 <USBD_SetConfig+0x150>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7fe ff9d 	bl	80055ce <USBD_SetClassConfig>
 8006694:	4603      	mov	r3, r0
 8006696:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00f      	beq.n	80066be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800669e:	6839      	ldr	r1, [r7, #0]
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f918 	bl	80068d6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	4619      	mov	r1, r3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7fe ffa9 	bl	8005606 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80066bc:	e014      	b.n	80066e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f9b7 	bl	8006a32 <USBD_CtlSendStatus>
      break;
 80066c4:	e010      	b.n	80066e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f9b3 	bl	8006a32 <USBD_CtlSendStatus>
      break;
 80066cc:	e00c      	b.n	80066e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f900 	bl	80068d6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80066d6:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <USBD_SetConfig+0x150>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	4619      	mov	r1, r3
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f7fe ff92 	bl	8005606 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80066e2:	2303      	movs	r3, #3
 80066e4:	73fb      	strb	r3, [r7, #15]
      break;
 80066e6:	bf00      	nop
  }

  return ret;
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	2000018c 	.word	0x2000018c

080066f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	88db      	ldrh	r3, [r3, #6]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d004      	beq.n	8006714 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800670a:	6839      	ldr	r1, [r7, #0]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f8e2 	bl	80068d6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006712:	e023      	b.n	800675c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b02      	cmp	r3, #2
 800671e:	dc02      	bgt.n	8006726 <USBD_GetConfig+0x2e>
 8006720:	2b00      	cmp	r3, #0
 8006722:	dc03      	bgt.n	800672c <USBD_GetConfig+0x34>
 8006724:	e015      	b.n	8006752 <USBD_GetConfig+0x5a>
 8006726:	2b03      	cmp	r3, #3
 8006728:	d00b      	beq.n	8006742 <USBD_GetConfig+0x4a>
 800672a:	e012      	b.n	8006752 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	3308      	adds	r3, #8
 8006736:	2201      	movs	r2, #1
 8006738:	4619      	mov	r1, r3
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f93c 	bl	80069b8 <USBD_CtlSendData>
        break;
 8006740:	e00c      	b.n	800675c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3304      	adds	r3, #4
 8006746:	2201      	movs	r2, #1
 8006748:	4619      	mov	r1, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f934 	bl	80069b8 <USBD_CtlSendData>
        break;
 8006750:	e004      	b.n	800675c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f8be 	bl	80068d6 <USBD_CtlError>
        break;
 800675a:	bf00      	nop
}
 800675c:	bf00      	nop
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006774:	b2db      	uxtb	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	2b02      	cmp	r3, #2
 800677a:	d81e      	bhi.n	80067ba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	88db      	ldrh	r3, [r3, #6]
 8006780:	2b02      	cmp	r3, #2
 8006782:	d004      	beq.n	800678e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f8a5 	bl	80068d6 <USBD_CtlError>
        break;
 800678c:	e01a      	b.n	80067c4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800679a:	2b00      	cmp	r3, #0
 800679c:	d005      	beq.n	80067aa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f043 0202 	orr.w	r2, r3, #2
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	330c      	adds	r3, #12
 80067ae:	2202      	movs	r2, #2
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f900 	bl	80069b8 <USBD_CtlSendData>
      break;
 80067b8:	e004      	b.n	80067c4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80067ba:	6839      	ldr	r1, [r7, #0]
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f88a 	bl	80068d6 <USBD_CtlError>
      break;
 80067c2:	bf00      	nop
  }
}
 80067c4:	bf00      	nop
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	885b      	ldrh	r3, [r3, #2]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d107      	bne.n	80067ee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f923 	bl	8006a32 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80067ec:	e013      	b.n	8006816 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	885b      	ldrh	r3, [r3, #2]
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d10b      	bne.n	800680e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	889b      	ldrh	r3, [r3, #4]
 80067fa:	0a1b      	lsrs	r3, r3, #8
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f913 	bl	8006a32 <USBD_CtlSendStatus>
}
 800680c:	e003      	b.n	8006816 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f860 	bl	80068d6 <USBD_CtlError>
}
 8006816:	bf00      	nop
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b082      	sub	sp, #8
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800682e:	b2db      	uxtb	r3, r3
 8006830:	3b01      	subs	r3, #1
 8006832:	2b02      	cmp	r3, #2
 8006834:	d80b      	bhi.n	800684e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	885b      	ldrh	r3, [r3, #2]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d10c      	bne.n	8006858 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f8f3 	bl	8006a32 <USBD_CtlSendStatus>
      }
      break;
 800684c:	e004      	b.n	8006858 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800684e:	6839      	ldr	r1, [r7, #0]
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f840 	bl	80068d6 <USBD_CtlError>
      break;
 8006856:	e000      	b.n	800685a <USBD_ClrFeature+0x3c>
      break;
 8006858:	bf00      	nop
  }
}
 800685a:	bf00      	nop
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b084      	sub	sp, #16
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	781a      	ldrb	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	3301      	adds	r3, #1
 800687c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	781a      	ldrb	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3301      	adds	r3, #1
 800688a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f7ff fa41 	bl	8005d14 <SWAPBYTE>
 8006892:	4603      	mov	r3, r0
 8006894:	461a      	mov	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3301      	adds	r3, #1
 800689e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3301      	adds	r3, #1
 80068a4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f7ff fa34 	bl	8005d14 <SWAPBYTE>
 80068ac:	4603      	mov	r3, r0
 80068ae:	461a      	mov	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3301      	adds	r3, #1
 80068b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3301      	adds	r3, #1
 80068be:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f7ff fa27 	bl	8005d14 <SWAPBYTE>
 80068c6:	4603      	mov	r3, r0
 80068c8:	461a      	mov	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	80da      	strh	r2, [r3, #6]
}
 80068ce:	bf00      	nop
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b082      	sub	sp, #8
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80068e0:	2180      	movs	r1, #128	; 0x80
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fc02 	bl	80070ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80068e8:	2100      	movs	r1, #0
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fbfe 	bl	80070ec <USBD_LL_StallEP>
}
 80068f0:	bf00      	nop
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d036      	beq.n	800697c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006912:	6938      	ldr	r0, [r7, #16]
 8006914:	f000 f836 	bl	8006984 <USBD_GetLen>
 8006918:	4603      	mov	r3, r0
 800691a:	3301      	adds	r3, #1
 800691c:	b29b      	uxth	r3, r3
 800691e:	005b      	lsls	r3, r3, #1
 8006920:	b29a      	uxth	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006926:	7dfb      	ldrb	r3, [r7, #23]
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	4413      	add	r3, r2
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	7812      	ldrb	r2, [r2, #0]
 8006930:	701a      	strb	r2, [r3, #0]
  idx++;
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	3301      	adds	r3, #1
 8006936:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006938:	7dfb      	ldrb	r3, [r7, #23]
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	4413      	add	r3, r2
 800693e:	2203      	movs	r2, #3
 8006940:	701a      	strb	r2, [r3, #0]
  idx++;
 8006942:	7dfb      	ldrb	r3, [r7, #23]
 8006944:	3301      	adds	r3, #1
 8006946:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006948:	e013      	b.n	8006972 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	4413      	add	r3, r2
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	7812      	ldrb	r2, [r2, #0]
 8006954:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	3301      	adds	r3, #1
 800695a:	613b      	str	r3, [r7, #16]
    idx++;
 800695c:	7dfb      	ldrb	r3, [r7, #23]
 800695e:	3301      	adds	r3, #1
 8006960:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006962:	7dfb      	ldrb	r3, [r7, #23]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	4413      	add	r3, r2
 8006968:	2200      	movs	r2, #0
 800696a:	701a      	strb	r2, [r3, #0]
    idx++;
 800696c:	7dfb      	ldrb	r3, [r7, #23]
 800696e:	3301      	adds	r3, #1
 8006970:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e7      	bne.n	800694a <USBD_GetString+0x52>
 800697a:	e000      	b.n	800697e <USBD_GetString+0x86>
    return;
 800697c:	bf00      	nop
  }
}
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006994:	e005      	b.n	80069a2 <USBD_GetLen+0x1e>
  {
    len++;
 8006996:	7bfb      	ldrb	r3, [r7, #15]
 8006998:	3301      	adds	r3, #1
 800699a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	3301      	adds	r3, #1
 80069a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1f5      	bne.n	8006996 <USBD_GetLen+0x12>
  }

  return len;
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	2100      	movs	r1, #0
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 fc0d 	bl	80071fe <USBD_LL_Transmit>

  return USBD_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	60f8      	str	r0, [r7, #12]
 80069f6:	60b9      	str	r1, [r7, #8]
 80069f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	2100      	movs	r1, #0
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 fbfc 	bl	80071fe <USBD_LL_Transmit>

  return USBD_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	2100      	movs	r1, #0
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 fc0c 	bl	8007240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b082      	sub	sp, #8
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2204      	movs	r2, #4
 8006a3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a42:	2300      	movs	r3, #0
 8006a44:	2200      	movs	r2, #0
 8006a46:	2100      	movs	r1, #0
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fbd8 	bl	80071fe <USBD_LL_Transmit>

  return USBD_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2205      	movs	r2, #5
 8006a64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a68:	2300      	movs	r3, #0
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fbe6 	bl	8007240 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006a84:	2200      	movs	r2, #0
 8006a86:	490e      	ldr	r1, [pc, #56]	; (8006ac0 <MX_USB_DEVICE_Init+0x40>)
 8006a88:	480e      	ldr	r0, [pc, #56]	; (8006ac4 <MX_USB_DEVICE_Init+0x44>)
 8006a8a:	f7fe fd23 	bl	80054d4 <USBD_Init>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006a94:	f7fa f838 	bl	8000b08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006a98:	490b      	ldr	r1, [pc, #44]	; (8006ac8 <MX_USB_DEVICE_Init+0x48>)
 8006a9a:	480a      	ldr	r0, [pc, #40]	; (8006ac4 <MX_USB_DEVICE_Init+0x44>)
 8006a9c:	f7fe fd4a 	bl	8005534 <USBD_RegisterClass>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006aa6:	f7fa f82f 	bl	8000b08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006aaa:	4806      	ldr	r0, [pc, #24]	; (8006ac4 <MX_USB_DEVICE_Init+0x44>)
 8006aac:	f7fe fd78 	bl	80055a0 <USBD_Start>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006ab6:	f7fa f827 	bl	8000b08 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006aba:	bf00      	nop
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	200000d0 	.word	0x200000d0
 8006ac4:	20000190 	.word	0x20000190
 8006ac8:	20000010 	.word	0x20000010

08006acc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	6039      	str	r1, [r7, #0]
 8006ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	2212      	movs	r2, #18
 8006adc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ade:	4b03      	ldr	r3, [pc, #12]	; (8006aec <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	200000ec 	.word	0x200000ec

08006af0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	4603      	mov	r3, r0
 8006af8:	6039      	str	r1, [r7, #0]
 8006afa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2204      	movs	r2, #4
 8006b00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006b02:	4b03      	ldr	r3, [pc, #12]	; (8006b10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	20000100 	.word	0x20000100

08006b14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	6039      	str	r1, [r7, #0]
 8006b1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b20:	79fb      	ldrb	r3, [r7, #7]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d105      	bne.n	8006b32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	4907      	ldr	r1, [pc, #28]	; (8006b48 <USBD_FS_ProductStrDescriptor+0x34>)
 8006b2a:	4808      	ldr	r0, [pc, #32]	; (8006b4c <USBD_FS_ProductStrDescriptor+0x38>)
 8006b2c:	f7ff fee4 	bl	80068f8 <USBD_GetString>
 8006b30:	e004      	b.n	8006b3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	4904      	ldr	r1, [pc, #16]	; (8006b48 <USBD_FS_ProductStrDescriptor+0x34>)
 8006b36:	4805      	ldr	r0, [pc, #20]	; (8006b4c <USBD_FS_ProductStrDescriptor+0x38>)
 8006b38:	f7ff fede 	bl	80068f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b3c:	4b02      	ldr	r3, [pc, #8]	; (8006b48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3708      	adds	r7, #8
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	2000046c 	.word	0x2000046c
 8006b4c:	08007e78 	.word	0x08007e78

08006b50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	6039      	str	r1, [r7, #0]
 8006b5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	4904      	ldr	r1, [pc, #16]	; (8006b70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006b60:	4804      	ldr	r0, [pc, #16]	; (8006b74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006b62:	f7ff fec9 	bl	80068f8 <USBD_GetString>
  return USBD_StrDesc;
 8006b66:	4b02      	ldr	r3, [pc, #8]	; (8006b70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	2000046c 	.word	0x2000046c
 8006b74:	08007e90 	.word	0x08007e90

08006b78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	6039      	str	r1, [r7, #0]
 8006b82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	221a      	movs	r2, #26
 8006b88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006b8a:	f000 f843 	bl	8006c14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006b8e:	4b02      	ldr	r3, [pc, #8]	; (8006b98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	20000104 	.word	0x20000104

08006b9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	6039      	str	r1, [r7, #0]
 8006ba6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ba8:	79fb      	ldrb	r3, [r7, #7]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d105      	bne.n	8006bba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	4907      	ldr	r1, [pc, #28]	; (8006bd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006bb2:	4808      	ldr	r0, [pc, #32]	; (8006bd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006bb4:	f7ff fea0 	bl	80068f8 <USBD_GetString>
 8006bb8:	e004      	b.n	8006bc4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	4904      	ldr	r1, [pc, #16]	; (8006bd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006bbe:	4805      	ldr	r0, [pc, #20]	; (8006bd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006bc0:	f7ff fe9a 	bl	80068f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006bc4:	4b02      	ldr	r3, [pc, #8]	; (8006bd0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	2000046c 	.word	0x2000046c
 8006bd4:	08007ea4 	.word	0x08007ea4

08006bd8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	4603      	mov	r3, r0
 8006be0:	6039      	str	r1, [r7, #0]
 8006be2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006be4:	79fb      	ldrb	r3, [r7, #7]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d105      	bne.n	8006bf6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	4907      	ldr	r1, [pc, #28]	; (8006c0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006bee:	4808      	ldr	r0, [pc, #32]	; (8006c10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006bf0:	f7ff fe82 	bl	80068f8 <USBD_GetString>
 8006bf4:	e004      	b.n	8006c00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	4904      	ldr	r1, [pc, #16]	; (8006c0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006bfa:	4805      	ldr	r0, [pc, #20]	; (8006c10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006bfc:	f7ff fe7c 	bl	80068f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c00:	4b02      	ldr	r3, [pc, #8]	; (8006c0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	2000046c 	.word	0x2000046c
 8006c10:	08007eb0 	.word	0x08007eb0

08006c14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006c1a:	4b0f      	ldr	r3, [pc, #60]	; (8006c58 <Get_SerialNum+0x44>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006c20:	4b0e      	ldr	r3, [pc, #56]	; (8006c5c <Get_SerialNum+0x48>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006c26:	4b0e      	ldr	r3, [pc, #56]	; (8006c60 <Get_SerialNum+0x4c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4413      	add	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d009      	beq.n	8006c4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006c3a:	2208      	movs	r2, #8
 8006c3c:	4909      	ldr	r1, [pc, #36]	; (8006c64 <Get_SerialNum+0x50>)
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 f814 	bl	8006c6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006c44:	2204      	movs	r2, #4
 8006c46:	4908      	ldr	r1, [pc, #32]	; (8006c68 <Get_SerialNum+0x54>)
 8006c48:	68b8      	ldr	r0, [r7, #8]
 8006c4a:	f000 f80f 	bl	8006c6c <IntToUnicode>
  }
}
 8006c4e:	bf00      	nop
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	1fff7a10 	.word	0x1fff7a10
 8006c5c:	1fff7a14 	.word	0x1fff7a14
 8006c60:	1fff7a18 	.word	0x1fff7a18
 8006c64:	20000106 	.word	0x20000106
 8006c68:	20000116 	.word	0x20000116

08006c6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	4613      	mov	r3, r2
 8006c78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006c7e:	2300      	movs	r3, #0
 8006c80:	75fb      	strb	r3, [r7, #23]
 8006c82:	e027      	b.n	8006cd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	0f1b      	lsrs	r3, r3, #28
 8006c88:	2b09      	cmp	r3, #9
 8006c8a:	d80b      	bhi.n	8006ca4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	0f1b      	lsrs	r3, r3, #28
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	4619      	mov	r1, r3
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	440b      	add	r3, r1
 8006c9c:	3230      	adds	r2, #48	; 0x30
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	701a      	strb	r2, [r3, #0]
 8006ca2:	e00a      	b.n	8006cba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	0f1b      	lsrs	r3, r3, #28
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	4619      	mov	r1, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	440b      	add	r3, r1
 8006cb4:	3237      	adds	r2, #55	; 0x37
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	011b      	lsls	r3, r3, #4
 8006cbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	4413      	add	r3, r2
 8006cca:	2200      	movs	r2, #0
 8006ccc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	75fb      	strb	r3, [r7, #23]
 8006cd4:	7dfa      	ldrb	r2, [r7, #23]
 8006cd6:	79fb      	ldrb	r3, [r7, #7]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d3d3      	bcc.n	8006c84 <IntToUnicode+0x18>
  }
}
 8006cdc:	bf00      	nop
 8006cde:	bf00      	nop
 8006ce0:	371c      	adds	r7, #28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
	...

08006cec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b08a      	sub	sp, #40	; 0x28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cf4:	f107 0314 	add.w	r3, r7, #20
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	605a      	str	r2, [r3, #4]
 8006cfe:	609a      	str	r2, [r3, #8]
 8006d00:	60da      	str	r2, [r3, #12]
 8006d02:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d0c:	d147      	bne.n	8006d9e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d0e:	2300      	movs	r3, #0
 8006d10:	613b      	str	r3, [r7, #16]
 8006d12:	4b25      	ldr	r3, [pc, #148]	; (8006da8 <HAL_PCD_MspInit+0xbc>)
 8006d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d16:	4a24      	ldr	r2, [pc, #144]	; (8006da8 <HAL_PCD_MspInit+0xbc>)
 8006d18:	f043 0301 	orr.w	r3, r3, #1
 8006d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d1e:	4b22      	ldr	r3, [pc, #136]	; (8006da8 <HAL_PCD_MspInit+0xbc>)
 8006d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	613b      	str	r3, [r7, #16]
 8006d28:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006d2a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8006d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d30:	2302      	movs	r3, #2
 8006d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d34:	2300      	movs	r3, #0
 8006d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006d3c:	230a      	movs	r3, #10
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d40:	f107 0314 	add.w	r3, r7, #20
 8006d44:	4619      	mov	r1, r3
 8006d46:	4819      	ldr	r0, [pc, #100]	; (8006dac <HAL_PCD_MspInit+0xc0>)
 8006d48:	f7fa f96c 	bl	8001024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d52:	2300      	movs	r3, #0
 8006d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006d5a:	f107 0314 	add.w	r3, r7, #20
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4812      	ldr	r0, [pc, #72]	; (8006dac <HAL_PCD_MspInit+0xc0>)
 8006d62:	f7fa f95f 	bl	8001024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006d66:	4b10      	ldr	r3, [pc, #64]	; (8006da8 <HAL_PCD_MspInit+0xbc>)
 8006d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6a:	4a0f      	ldr	r2, [pc, #60]	; (8006da8 <HAL_PCD_MspInit+0xbc>)
 8006d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d70:	6353      	str	r3, [r2, #52]	; 0x34
 8006d72:	2300      	movs	r3, #0
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	4b0c      	ldr	r3, [pc, #48]	; (8006da8 <HAL_PCD_MspInit+0xbc>)
 8006d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7a:	4a0b      	ldr	r2, [pc, #44]	; (8006da8 <HAL_PCD_MspInit+0xbc>)
 8006d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d80:	6453      	str	r3, [r2, #68]	; 0x44
 8006d82:	4b09      	ldr	r3, [pc, #36]	; (8006da8 <HAL_PCD_MspInit+0xbc>)
 8006d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2100      	movs	r1, #0
 8006d92:	2043      	movs	r0, #67	; 0x43
 8006d94:	f7fa f90f 	bl	8000fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006d98:	2043      	movs	r0, #67	; 0x43
 8006d9a:	f7fa f928 	bl	8000fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006d9e:	bf00      	nop
 8006da0:	3728      	adds	r7, #40	; 0x28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	40023800 	.word	0x40023800
 8006dac:	40020000 	.word	0x40020000

08006db0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	f7fe fc37 	bl	800563a <USBD_LL_SetupStage>
}
 8006dcc:	bf00      	nop
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006de6:	78fa      	ldrb	r2, [r7, #3]
 8006de8:	6879      	ldr	r1, [r7, #4]
 8006dea:	4613      	mov	r3, r2
 8006dec:	00db      	lsls	r3, r3, #3
 8006dee:	4413      	add	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	440b      	add	r3, r1
 8006df4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	78fb      	ldrb	r3, [r7, #3]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	f7fe fc71 	bl	80056e4 <USBD_LL_DataOutStage>
}
 8006e02:	bf00      	nop
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b082      	sub	sp, #8
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	460b      	mov	r3, r1
 8006e14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006e1c:	78fa      	ldrb	r2, [r7, #3]
 8006e1e:	6879      	ldr	r1, [r7, #4]
 8006e20:	4613      	mov	r3, r2
 8006e22:	00db      	lsls	r3, r3, #3
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	440b      	add	r3, r1
 8006e2a:	334c      	adds	r3, #76	; 0x4c
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	78fb      	ldrb	r3, [r7, #3]
 8006e30:	4619      	mov	r1, r3
 8006e32:	f7fe fd0a 	bl	800584a <USBD_LL_DataInStage>
}
 8006e36:	bf00      	nop
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fe fe3e 	bl	8005ace <USBD_LL_SOF>
}
 8006e52:	bf00      	nop
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006e62:	2301      	movs	r3, #1
 8006e64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d102      	bne.n	8006e74 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	73fb      	strb	r3, [r7, #15]
 8006e72:	e008      	b.n	8006e86 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d102      	bne.n	8006e82 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	73fb      	strb	r3, [r7, #15]
 8006e80:	e001      	b.n	8006e86 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006e82:	f7f9 fe41 	bl	8000b08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e8c:	7bfa      	ldrb	r2, [r7, #15]
 8006e8e:	4611      	mov	r1, r2
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fe fdde 	bl	8005a52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe fd86 	bl	80059ae <USBD_LL_Reset>
}
 8006ea2:	bf00      	nop
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe fdd9 	bl	8005a72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	6812      	ldr	r2, [r2, #0]
 8006ece:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ed2:	f043 0301 	orr.w	r3, r3, #1
 8006ed6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d005      	beq.n	8006eec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ee0:	4b04      	ldr	r3, [pc, #16]	; (8006ef4 <HAL_PCD_SuspendCallback+0x48>)
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	4a03      	ldr	r2, [pc, #12]	; (8006ef4 <HAL_PCD_SuspendCallback+0x48>)
 8006ee6:	f043 0306 	orr.w	r3, r3, #6
 8006eea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006eec:	bf00      	nop
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	e000ed00 	.word	0xe000ed00

08006ef8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fe fdc9 	bl	8005a9e <USBD_LL_Resume>
}
 8006f0c:	bf00      	nop
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f26:	78fa      	ldrb	r2, [r7, #3]
 8006f28:	4611      	mov	r1, r2
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fe fe21 	bl	8005b72 <USBD_LL_IsoOUTIncomplete>
}
 8006f30:	bf00      	nop
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	460b      	mov	r3, r1
 8006f42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f4a:	78fa      	ldrb	r2, [r7, #3]
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fe fddd 	bl	8005b0e <USBD_LL_IsoINIncomplete>
}
 8006f54:	bf00      	nop
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe fe33 	bl	8005bd6 <USBD_LL_DevConnected>
}
 8006f70:	bf00      	nop
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fe fe30 	bl	8005bec <USBD_LL_DevDisconnected>
}
 8006f8c:	bf00      	nop
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d13c      	bne.n	800701e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006fa4:	4a20      	ldr	r2, [pc, #128]	; (8007028 <USBD_LL_Init+0x94>)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a1e      	ldr	r2, [pc, #120]	; (8007028 <USBD_LL_Init+0x94>)
 8006fb0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006fb4:	4b1c      	ldr	r3, [pc, #112]	; (8007028 <USBD_LL_Init+0x94>)
 8006fb6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006fba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006fbc:	4b1a      	ldr	r3, [pc, #104]	; (8007028 <USBD_LL_Init+0x94>)
 8006fbe:	2204      	movs	r2, #4
 8006fc0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006fc2:	4b19      	ldr	r3, [pc, #100]	; (8007028 <USBD_LL_Init+0x94>)
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006fc8:	4b17      	ldr	r3, [pc, #92]	; (8007028 <USBD_LL_Init+0x94>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006fce:	4b16      	ldr	r3, [pc, #88]	; (8007028 <USBD_LL_Init+0x94>)
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8006fd4:	4b14      	ldr	r3, [pc, #80]	; (8007028 <USBD_LL_Init+0x94>)
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006fda:	4b13      	ldr	r3, [pc, #76]	; (8007028 <USBD_LL_Init+0x94>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006fe0:	4b11      	ldr	r3, [pc, #68]	; (8007028 <USBD_LL_Init+0x94>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006fe6:	4b10      	ldr	r3, [pc, #64]	; (8007028 <USBD_LL_Init+0x94>)
 8006fe8:	2201      	movs	r2, #1
 8006fea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006fec:	4b0e      	ldr	r3, [pc, #56]	; (8007028 <USBD_LL_Init+0x94>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006ff2:	480d      	ldr	r0, [pc, #52]	; (8007028 <USBD_LL_Init+0x94>)
 8006ff4:	f7fa f9f3 	bl	80013de <HAL_PCD_Init>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006ffe:	f7f9 fd83 	bl	8000b08 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007002:	2180      	movs	r1, #128	; 0x80
 8007004:	4808      	ldr	r0, [pc, #32]	; (8007028 <USBD_LL_Init+0x94>)
 8007006:	f7fb fc32 	bl	800286e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800700a:	2240      	movs	r2, #64	; 0x40
 800700c:	2100      	movs	r1, #0
 800700e:	4806      	ldr	r0, [pc, #24]	; (8007028 <USBD_LL_Init+0x94>)
 8007010:	f7fb fbe6 	bl	80027e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007014:	2280      	movs	r2, #128	; 0x80
 8007016:	2101      	movs	r1, #1
 8007018:	4803      	ldr	r0, [pc, #12]	; (8007028 <USBD_LL_Init+0x94>)
 800701a:	f7fb fbe1 	bl	80027e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	2000066c 	.word	0x2000066c

0800702c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007042:	4618      	mov	r0, r3
 8007044:	f7fa fae8 	bl	8001618 <HAL_PCD_Start>
 8007048:	4603      	mov	r3, r0
 800704a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	4618      	mov	r0, r3
 8007050:	f000 f930 	bl	80072b4 <USBD_Get_USB_Status>
 8007054:	4603      	mov	r3, r0
 8007056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007058:	7bbb      	ldrb	r3, [r7, #14]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b084      	sub	sp, #16
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	4608      	mov	r0, r1
 800706c:	4611      	mov	r1, r2
 800706e:	461a      	mov	r2, r3
 8007070:	4603      	mov	r3, r0
 8007072:	70fb      	strb	r3, [r7, #3]
 8007074:	460b      	mov	r3, r1
 8007076:	70bb      	strb	r3, [r7, #2]
 8007078:	4613      	mov	r3, r2
 800707a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007080:	2300      	movs	r3, #0
 8007082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800708a:	78bb      	ldrb	r3, [r7, #2]
 800708c:	883a      	ldrh	r2, [r7, #0]
 800708e:	78f9      	ldrb	r1, [r7, #3]
 8007090:	f7fa ffb9 	bl	8002006 <HAL_PCD_EP_Open>
 8007094:	4603      	mov	r3, r0
 8007096:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007098:	7bfb      	ldrb	r3, [r7, #15]
 800709a:	4618      	mov	r0, r3
 800709c:	f000 f90a 	bl	80072b4 <USBD_Get_USB_Status>
 80070a0:	4603      	mov	r3, r0
 80070a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b084      	sub	sp, #16
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	460b      	mov	r3, r1
 80070b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80070c8:	78fa      	ldrb	r2, [r7, #3]
 80070ca:	4611      	mov	r1, r2
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7fb f802 	bl	80020d6 <HAL_PCD_EP_Close>
 80070d2:	4603      	mov	r3, r0
 80070d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 f8eb 	bl	80072b4 <USBD_Get_USB_Status>
 80070de:	4603      	mov	r3, r0
 80070e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	460b      	mov	r3, r1
 80070f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070f8:	2300      	movs	r3, #0
 80070fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007106:	78fa      	ldrb	r2, [r7, #3]
 8007108:	4611      	mov	r1, r2
 800710a:	4618      	mov	r0, r3
 800710c:	f7fb f8c2 	bl	8002294 <HAL_PCD_EP_SetStall>
 8007110:	4603      	mov	r3, r0
 8007112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007114:	7bfb      	ldrb	r3, [r7, #15]
 8007116:	4618      	mov	r0, r3
 8007118:	f000 f8cc 	bl	80072b4 <USBD_Get_USB_Status>
 800711c:	4603      	mov	r3, r0
 800711e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007120:	7bbb      	ldrb	r3, [r7, #14]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3710      	adds	r7, #16
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b084      	sub	sp, #16
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	460b      	mov	r3, r1
 8007134:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007136:	2300      	movs	r3, #0
 8007138:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007144:	78fa      	ldrb	r2, [r7, #3]
 8007146:	4611      	mov	r1, r2
 8007148:	4618      	mov	r0, r3
 800714a:	f7fb f907 	bl	800235c <HAL_PCD_EP_ClrStall>
 800714e:	4603      	mov	r3, r0
 8007150:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007152:	7bfb      	ldrb	r3, [r7, #15]
 8007154:	4618      	mov	r0, r3
 8007156:	f000 f8ad 	bl	80072b4 <USBD_Get_USB_Status>
 800715a:	4603      	mov	r3, r0
 800715c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800715e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800717a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800717c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007180:	2b00      	cmp	r3, #0
 8007182:	da0b      	bge.n	800719c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800718a:	68f9      	ldr	r1, [r7, #12]
 800718c:	4613      	mov	r3, r2
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	4413      	add	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	440b      	add	r3, r1
 8007196:	333e      	adds	r3, #62	; 0x3e
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	e00b      	b.n	80071b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800719c:	78fb      	ldrb	r3, [r7, #3]
 800719e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071a2:	68f9      	ldr	r1, [r7, #12]
 80071a4:	4613      	mov	r3, r2
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	4413      	add	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	440b      	add	r3, r1
 80071ae:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80071b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071da:	78fa      	ldrb	r2, [r7, #3]
 80071dc:	4611      	mov	r1, r2
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fa feec 	bl	8001fbc <HAL_PCD_SetAddress>
 80071e4:	4603      	mov	r3, r0
 80071e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 f862 	bl	80072b4 <USBD_Get_USB_Status>
 80071f0:	4603      	mov	r3, r0
 80071f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b086      	sub	sp, #24
 8007202:	af00      	add	r7, sp, #0
 8007204:	60f8      	str	r0, [r7, #12]
 8007206:	607a      	str	r2, [r7, #4]
 8007208:	603b      	str	r3, [r7, #0]
 800720a:	460b      	mov	r3, r1
 800720c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007212:	2300      	movs	r3, #0
 8007214:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800721c:	7af9      	ldrb	r1, [r7, #11]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	f7fa ffed 	bl	8002200 <HAL_PCD_EP_Transmit>
 8007226:	4603      	mov	r3, r0
 8007228:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800722a:	7dfb      	ldrb	r3, [r7, #23]
 800722c:	4618      	mov	r0, r3
 800722e:	f000 f841 	bl	80072b4 <USBD_Get_USB_Status>
 8007232:	4603      	mov	r3, r0
 8007234:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007236:	7dbb      	ldrb	r3, [r7, #22]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	607a      	str	r2, [r7, #4]
 800724a:	603b      	str	r3, [r7, #0]
 800724c:	460b      	mov	r3, r1
 800724e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800725e:	7af9      	ldrb	r1, [r7, #11]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	f7fa ff81 	bl	800216a <HAL_PCD_EP_Receive>
 8007268:	4603      	mov	r3, r0
 800726a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800726c:	7dfb      	ldrb	r3, [r7, #23]
 800726e:	4618      	mov	r0, r3
 8007270:	f000 f820 	bl	80072b4 <USBD_Get_USB_Status>
 8007274:	4603      	mov	r3, r0
 8007276:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007278:	7dbb      	ldrb	r3, [r7, #22]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800728c:	4b03      	ldr	r3, [pc, #12]	; (800729c <USBD_static_malloc+0x18>)
}
 800728e:	4618      	mov	r0, r3
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	20000b78 	.word	0x20000b78

080072a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]

}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	4603      	mov	r3, r0
 80072bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80072c2:	79fb      	ldrb	r3, [r7, #7]
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d817      	bhi.n	80072f8 <USBD_Get_USB_Status+0x44>
 80072c8:	a201      	add	r2, pc, #4	; (adr r2, 80072d0 <USBD_Get_USB_Status+0x1c>)
 80072ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ce:	bf00      	nop
 80072d0:	080072e1 	.word	0x080072e1
 80072d4:	080072e7 	.word	0x080072e7
 80072d8:	080072ed 	.word	0x080072ed
 80072dc:	080072f3 	.word	0x080072f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80072e0:	2300      	movs	r3, #0
 80072e2:	73fb      	strb	r3, [r7, #15]
    break;
 80072e4:	e00b      	b.n	80072fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80072e6:	2303      	movs	r3, #3
 80072e8:	73fb      	strb	r3, [r7, #15]
    break;
 80072ea:	e008      	b.n	80072fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80072ec:	2301      	movs	r3, #1
 80072ee:	73fb      	strb	r3, [r7, #15]
    break;
 80072f0:	e005      	b.n	80072fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80072f2:	2303      	movs	r3, #3
 80072f4:	73fb      	strb	r3, [r7, #15]
    break;
 80072f6:	e002      	b.n	80072fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80072f8:	2303      	movs	r3, #3
 80072fa:	73fb      	strb	r3, [r7, #15]
    break;
 80072fc:	bf00      	nop
  }
  return usb_status;
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <memset>:
 800730c:	4402      	add	r2, r0
 800730e:	4603      	mov	r3, r0
 8007310:	4293      	cmp	r3, r2
 8007312:	d100      	bne.n	8007316 <memset+0xa>
 8007314:	4770      	bx	lr
 8007316:	f803 1b01 	strb.w	r1, [r3], #1
 800731a:	e7f9      	b.n	8007310 <memset+0x4>

0800731c <__libc_init_array>:
 800731c:	b570      	push	{r4, r5, r6, lr}
 800731e:	4d0d      	ldr	r5, [pc, #52]	; (8007354 <__libc_init_array+0x38>)
 8007320:	4c0d      	ldr	r4, [pc, #52]	; (8007358 <__libc_init_array+0x3c>)
 8007322:	1b64      	subs	r4, r4, r5
 8007324:	10a4      	asrs	r4, r4, #2
 8007326:	2600      	movs	r6, #0
 8007328:	42a6      	cmp	r6, r4
 800732a:	d109      	bne.n	8007340 <__libc_init_array+0x24>
 800732c:	4d0b      	ldr	r5, [pc, #44]	; (800735c <__libc_init_array+0x40>)
 800732e:	4c0c      	ldr	r4, [pc, #48]	; (8007360 <__libc_init_array+0x44>)
 8007330:	f000 fd96 	bl	8007e60 <_init>
 8007334:	1b64      	subs	r4, r4, r5
 8007336:	10a4      	asrs	r4, r4, #2
 8007338:	2600      	movs	r6, #0
 800733a:	42a6      	cmp	r6, r4
 800733c:	d105      	bne.n	800734a <__libc_init_array+0x2e>
 800733e:	bd70      	pop	{r4, r5, r6, pc}
 8007340:	f855 3b04 	ldr.w	r3, [r5], #4
 8007344:	4798      	blx	r3
 8007346:	3601      	adds	r6, #1
 8007348:	e7ee      	b.n	8007328 <__libc_init_array+0xc>
 800734a:	f855 3b04 	ldr.w	r3, [r5], #4
 800734e:	4798      	blx	r3
 8007350:	3601      	adds	r6, #1
 8007352:	e7f2      	b.n	800733a <__libc_init_array+0x1e>
 8007354:	080082b0 	.word	0x080082b0
 8007358:	080082b0 	.word	0x080082b0
 800735c:	080082b0 	.word	0x080082b0
 8007360:	080082b4 	.word	0x080082b4

08007364 <cosf>:
 8007364:	ee10 3a10 	vmov	r3, s0
 8007368:	b507      	push	{r0, r1, r2, lr}
 800736a:	4a1e      	ldr	r2, [pc, #120]	; (80073e4 <cosf+0x80>)
 800736c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007370:	4293      	cmp	r3, r2
 8007372:	dc06      	bgt.n	8007382 <cosf+0x1e>
 8007374:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80073e8 <cosf+0x84>
 8007378:	b003      	add	sp, #12
 800737a:	f85d eb04 	ldr.w	lr, [sp], #4
 800737e:	f000 b87b 	b.w	8007478 <__kernel_cosf>
 8007382:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007386:	db04      	blt.n	8007392 <cosf+0x2e>
 8007388:	ee30 0a40 	vsub.f32	s0, s0, s0
 800738c:	b003      	add	sp, #12
 800738e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007392:	4668      	mov	r0, sp
 8007394:	f000 f916 	bl	80075c4 <__ieee754_rem_pio2f>
 8007398:	f000 0003 	and.w	r0, r0, #3
 800739c:	2801      	cmp	r0, #1
 800739e:	d009      	beq.n	80073b4 <cosf+0x50>
 80073a0:	2802      	cmp	r0, #2
 80073a2:	d010      	beq.n	80073c6 <cosf+0x62>
 80073a4:	b9b0      	cbnz	r0, 80073d4 <cosf+0x70>
 80073a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80073aa:	ed9d 0a00 	vldr	s0, [sp]
 80073ae:	f000 f863 	bl	8007478 <__kernel_cosf>
 80073b2:	e7eb      	b.n	800738c <cosf+0x28>
 80073b4:	eddd 0a01 	vldr	s1, [sp, #4]
 80073b8:	ed9d 0a00 	vldr	s0, [sp]
 80073bc:	f000 f8ba 	bl	8007534 <__kernel_sinf>
 80073c0:	eeb1 0a40 	vneg.f32	s0, s0
 80073c4:	e7e2      	b.n	800738c <cosf+0x28>
 80073c6:	eddd 0a01 	vldr	s1, [sp, #4]
 80073ca:	ed9d 0a00 	vldr	s0, [sp]
 80073ce:	f000 f853 	bl	8007478 <__kernel_cosf>
 80073d2:	e7f5      	b.n	80073c0 <cosf+0x5c>
 80073d4:	eddd 0a01 	vldr	s1, [sp, #4]
 80073d8:	ed9d 0a00 	vldr	s0, [sp]
 80073dc:	2001      	movs	r0, #1
 80073de:	f000 f8a9 	bl	8007534 <__kernel_sinf>
 80073e2:	e7d3      	b.n	800738c <cosf+0x28>
 80073e4:	3f490fd8 	.word	0x3f490fd8
 80073e8:	00000000 	.word	0x00000000

080073ec <sinf>:
 80073ec:	ee10 3a10 	vmov	r3, s0
 80073f0:	b507      	push	{r0, r1, r2, lr}
 80073f2:	4a1f      	ldr	r2, [pc, #124]	; (8007470 <sinf+0x84>)
 80073f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073f8:	4293      	cmp	r3, r2
 80073fa:	dc07      	bgt.n	800740c <sinf+0x20>
 80073fc:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8007474 <sinf+0x88>
 8007400:	2000      	movs	r0, #0
 8007402:	b003      	add	sp, #12
 8007404:	f85d eb04 	ldr.w	lr, [sp], #4
 8007408:	f000 b894 	b.w	8007534 <__kernel_sinf>
 800740c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007410:	db04      	blt.n	800741c <sinf+0x30>
 8007412:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007416:	b003      	add	sp, #12
 8007418:	f85d fb04 	ldr.w	pc, [sp], #4
 800741c:	4668      	mov	r0, sp
 800741e:	f000 f8d1 	bl	80075c4 <__ieee754_rem_pio2f>
 8007422:	f000 0003 	and.w	r0, r0, #3
 8007426:	2801      	cmp	r0, #1
 8007428:	d00a      	beq.n	8007440 <sinf+0x54>
 800742a:	2802      	cmp	r0, #2
 800742c:	d00f      	beq.n	800744e <sinf+0x62>
 800742e:	b9c0      	cbnz	r0, 8007462 <sinf+0x76>
 8007430:	eddd 0a01 	vldr	s1, [sp, #4]
 8007434:	ed9d 0a00 	vldr	s0, [sp]
 8007438:	2001      	movs	r0, #1
 800743a:	f000 f87b 	bl	8007534 <__kernel_sinf>
 800743e:	e7ea      	b.n	8007416 <sinf+0x2a>
 8007440:	eddd 0a01 	vldr	s1, [sp, #4]
 8007444:	ed9d 0a00 	vldr	s0, [sp]
 8007448:	f000 f816 	bl	8007478 <__kernel_cosf>
 800744c:	e7e3      	b.n	8007416 <sinf+0x2a>
 800744e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007452:	ed9d 0a00 	vldr	s0, [sp]
 8007456:	2001      	movs	r0, #1
 8007458:	f000 f86c 	bl	8007534 <__kernel_sinf>
 800745c:	eeb1 0a40 	vneg.f32	s0, s0
 8007460:	e7d9      	b.n	8007416 <sinf+0x2a>
 8007462:	eddd 0a01 	vldr	s1, [sp, #4]
 8007466:	ed9d 0a00 	vldr	s0, [sp]
 800746a:	f000 f805 	bl	8007478 <__kernel_cosf>
 800746e:	e7f5      	b.n	800745c <sinf+0x70>
 8007470:	3f490fd8 	.word	0x3f490fd8
 8007474:	00000000 	.word	0x00000000

08007478 <__kernel_cosf>:
 8007478:	ee10 3a10 	vmov	r3, s0
 800747c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007480:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007488:	da05      	bge.n	8007496 <__kernel_cosf+0x1e>
 800748a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800748e:	ee17 2a90 	vmov	r2, s15
 8007492:	2a00      	cmp	r2, #0
 8007494:	d03b      	beq.n	800750e <__kernel_cosf+0x96>
 8007496:	ee20 7a00 	vmul.f32	s14, s0, s0
 800749a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007514 <__kernel_cosf+0x9c>
 800749e:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8007518 <__kernel_cosf+0xa0>
 80074a2:	4a1e      	ldr	r2, [pc, #120]	; (800751c <__kernel_cosf+0xa4>)
 80074a4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80074a8:	4293      	cmp	r3, r2
 80074aa:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8007520 <__kernel_cosf+0xa8>
 80074ae:	eee6 7a07 	vfma.f32	s15, s12, s14
 80074b2:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8007524 <__kernel_cosf+0xac>
 80074b6:	eea7 6a87 	vfma.f32	s12, s15, s14
 80074ba:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8007528 <__kernel_cosf+0xb0>
 80074be:	eee6 7a07 	vfma.f32	s15, s12, s14
 80074c2:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 800752c <__kernel_cosf+0xb4>
 80074c6:	eea7 6a87 	vfma.f32	s12, s15, s14
 80074ca:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80074ce:	ee26 6a07 	vmul.f32	s12, s12, s14
 80074d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80074d6:	eee7 0a06 	vfma.f32	s1, s14, s12
 80074da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074de:	dc04      	bgt.n	80074ea <__kernel_cosf+0x72>
 80074e0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80074e4:	ee36 0ae7 	vsub.f32	s0, s13, s15
 80074e8:	4770      	bx	lr
 80074ea:	4a11      	ldr	r2, [pc, #68]	; (8007530 <__kernel_cosf+0xb8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	bfda      	itte	le
 80074f0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80074f4:	ee07 3a10 	vmovle	s14, r3
 80074f8:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80074fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007500:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8007504:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007508:	ee30 0a67 	vsub.f32	s0, s0, s15
 800750c:	4770      	bx	lr
 800750e:	eeb0 0a66 	vmov.f32	s0, s13
 8007512:	4770      	bx	lr
 8007514:	ad47d74e 	.word	0xad47d74e
 8007518:	310f74f6 	.word	0x310f74f6
 800751c:	3e999999 	.word	0x3e999999
 8007520:	b493f27c 	.word	0xb493f27c
 8007524:	37d00d01 	.word	0x37d00d01
 8007528:	bab60b61 	.word	0xbab60b61
 800752c:	3d2aaaab 	.word	0x3d2aaaab
 8007530:	3f480000 	.word	0x3f480000

08007534 <__kernel_sinf>:
 8007534:	ee10 3a10 	vmov	r3, s0
 8007538:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800753c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007540:	da04      	bge.n	800754c <__kernel_sinf+0x18>
 8007542:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007546:	ee17 3a90 	vmov	r3, s15
 800754a:	b35b      	cbz	r3, 80075a4 <__kernel_sinf+0x70>
 800754c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007550:	eddf 7a15 	vldr	s15, [pc, #84]	; 80075a8 <__kernel_sinf+0x74>
 8007554:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80075ac <__kernel_sinf+0x78>
 8007558:	eea7 6a27 	vfma.f32	s12, s14, s15
 800755c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80075b0 <__kernel_sinf+0x7c>
 8007560:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007564:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80075b4 <__kernel_sinf+0x80>
 8007568:	eea7 6a87 	vfma.f32	s12, s15, s14
 800756c:	eddf 7a12 	vldr	s15, [pc, #72]	; 80075b8 <__kernel_sinf+0x84>
 8007570:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007574:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007578:	b930      	cbnz	r0, 8007588 <__kernel_sinf+0x54>
 800757a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80075bc <__kernel_sinf+0x88>
 800757e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007582:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007586:	4770      	bx	lr
 8007588:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800758c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007590:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007594:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007598:	eddf 7a09 	vldr	s15, [pc, #36]	; 80075c0 <__kernel_sinf+0x8c>
 800759c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80075a0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	2f2ec9d3 	.word	0x2f2ec9d3
 80075ac:	b2d72f34 	.word	0xb2d72f34
 80075b0:	3638ef1b 	.word	0x3638ef1b
 80075b4:	b9500d01 	.word	0xb9500d01
 80075b8:	3c088889 	.word	0x3c088889
 80075bc:	be2aaaab 	.word	0xbe2aaaab
 80075c0:	3e2aaaab 	.word	0x3e2aaaab

080075c4 <__ieee754_rem_pio2f>:
 80075c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075c6:	ee10 6a10 	vmov	r6, s0
 80075ca:	4b86      	ldr	r3, [pc, #536]	; (80077e4 <__ieee754_rem_pio2f+0x220>)
 80075cc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80075d0:	429d      	cmp	r5, r3
 80075d2:	b087      	sub	sp, #28
 80075d4:	4604      	mov	r4, r0
 80075d6:	dc05      	bgt.n	80075e4 <__ieee754_rem_pio2f+0x20>
 80075d8:	2300      	movs	r3, #0
 80075da:	ed80 0a00 	vstr	s0, [r0]
 80075de:	6043      	str	r3, [r0, #4]
 80075e0:	2000      	movs	r0, #0
 80075e2:	e020      	b.n	8007626 <__ieee754_rem_pio2f+0x62>
 80075e4:	4b80      	ldr	r3, [pc, #512]	; (80077e8 <__ieee754_rem_pio2f+0x224>)
 80075e6:	429d      	cmp	r5, r3
 80075e8:	dc38      	bgt.n	800765c <__ieee754_rem_pio2f+0x98>
 80075ea:	2e00      	cmp	r6, #0
 80075ec:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80077ec <__ieee754_rem_pio2f+0x228>
 80075f0:	4b7f      	ldr	r3, [pc, #508]	; (80077f0 <__ieee754_rem_pio2f+0x22c>)
 80075f2:	f025 050f 	bic.w	r5, r5, #15
 80075f6:	dd18      	ble.n	800762a <__ieee754_rem_pio2f+0x66>
 80075f8:	429d      	cmp	r5, r3
 80075fa:	ee70 7a47 	vsub.f32	s15, s0, s14
 80075fe:	bf09      	itett	eq
 8007600:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80077f4 <__ieee754_rem_pio2f+0x230>
 8007604:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80077f8 <__ieee754_rem_pio2f+0x234>
 8007608:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800760c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80077fc <__ieee754_rem_pio2f+0x238>
 8007610:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007614:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007618:	edc0 6a00 	vstr	s13, [r0]
 800761c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007620:	edc0 7a01 	vstr	s15, [r0, #4]
 8007624:	2001      	movs	r0, #1
 8007626:	b007      	add	sp, #28
 8007628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800762a:	429d      	cmp	r5, r3
 800762c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007630:	bf09      	itett	eq
 8007632:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80077f4 <__ieee754_rem_pio2f+0x230>
 8007636:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80077f8 <__ieee754_rem_pio2f+0x234>
 800763a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800763e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80077fc <__ieee754_rem_pio2f+0x238>
 8007642:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007646:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800764a:	edc0 6a00 	vstr	s13, [r0]
 800764e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007652:	edc0 7a01 	vstr	s15, [r0, #4]
 8007656:	f04f 30ff 	mov.w	r0, #4294967295
 800765a:	e7e4      	b.n	8007626 <__ieee754_rem_pio2f+0x62>
 800765c:	4b68      	ldr	r3, [pc, #416]	; (8007800 <__ieee754_rem_pio2f+0x23c>)
 800765e:	429d      	cmp	r5, r3
 8007660:	dc71      	bgt.n	8007746 <__ieee754_rem_pio2f+0x182>
 8007662:	f000 f8db 	bl	800781c <fabsf>
 8007666:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007804 <__ieee754_rem_pio2f+0x240>
 800766a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800766e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007676:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800767a:	ee17 0a90 	vmov	r0, s15
 800767e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80077ec <__ieee754_rem_pio2f+0x228>
 8007682:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007686:	281f      	cmp	r0, #31
 8007688:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80077f8 <__ieee754_rem_pio2f+0x234>
 800768c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007690:	eeb1 6a47 	vneg.f32	s12, s14
 8007694:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007698:	ee16 2a90 	vmov	r2, s13
 800769c:	dc1c      	bgt.n	80076d8 <__ieee754_rem_pio2f+0x114>
 800769e:	495a      	ldr	r1, [pc, #360]	; (8007808 <__ieee754_rem_pio2f+0x244>)
 80076a0:	1e47      	subs	r7, r0, #1
 80076a2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80076a6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80076aa:	428b      	cmp	r3, r1
 80076ac:	d014      	beq.n	80076d8 <__ieee754_rem_pio2f+0x114>
 80076ae:	6022      	str	r2, [r4, #0]
 80076b0:	ed94 7a00 	vldr	s14, [r4]
 80076b4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80076b8:	2e00      	cmp	r6, #0
 80076ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 80076be:	ed84 0a01 	vstr	s0, [r4, #4]
 80076c2:	dab0      	bge.n	8007626 <__ieee754_rem_pio2f+0x62>
 80076c4:	eeb1 7a47 	vneg.f32	s14, s14
 80076c8:	eeb1 0a40 	vneg.f32	s0, s0
 80076cc:	ed84 7a00 	vstr	s14, [r4]
 80076d0:	ed84 0a01 	vstr	s0, [r4, #4]
 80076d4:	4240      	negs	r0, r0
 80076d6:	e7a6      	b.n	8007626 <__ieee754_rem_pio2f+0x62>
 80076d8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80076dc:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 80076e0:	2908      	cmp	r1, #8
 80076e2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80076e6:	dde2      	ble.n	80076ae <__ieee754_rem_pio2f+0xea>
 80076e8:	eddf 5a42 	vldr	s11, [pc, #264]	; 80077f4 <__ieee754_rem_pio2f+0x230>
 80076ec:	eef0 6a40 	vmov.f32	s13, s0
 80076f0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80076f4:	ee70 7a66 	vsub.f32	s15, s0, s13
 80076f8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80076fc:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80077fc <__ieee754_rem_pio2f+0x238>
 8007700:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8007704:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8007708:	ee15 2a90 	vmov	r2, s11
 800770c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007710:	1a5b      	subs	r3, r3, r1
 8007712:	2b19      	cmp	r3, #25
 8007714:	dc04      	bgt.n	8007720 <__ieee754_rem_pio2f+0x15c>
 8007716:	edc4 5a00 	vstr	s11, [r4]
 800771a:	eeb0 0a66 	vmov.f32	s0, s13
 800771e:	e7c7      	b.n	80076b0 <__ieee754_rem_pio2f+0xec>
 8007720:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800780c <__ieee754_rem_pio2f+0x248>
 8007724:	eeb0 0a66 	vmov.f32	s0, s13
 8007728:	eea6 0a25 	vfma.f32	s0, s12, s11
 800772c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007730:	eddf 6a37 	vldr	s13, [pc, #220]	; 8007810 <__ieee754_rem_pio2f+0x24c>
 8007734:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007738:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800773c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007740:	ed84 7a00 	vstr	s14, [r4]
 8007744:	e7b4      	b.n	80076b0 <__ieee754_rem_pio2f+0xec>
 8007746:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800774a:	db06      	blt.n	800775a <__ieee754_rem_pio2f+0x196>
 800774c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007750:	edc0 7a01 	vstr	s15, [r0, #4]
 8007754:	edc0 7a00 	vstr	s15, [r0]
 8007758:	e742      	b.n	80075e0 <__ieee754_rem_pio2f+0x1c>
 800775a:	15ea      	asrs	r2, r5, #23
 800775c:	3a86      	subs	r2, #134	; 0x86
 800775e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007762:	ee07 3a90 	vmov	s15, r3
 8007766:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800776a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8007814 <__ieee754_rem_pio2f+0x250>
 800776e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007772:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007776:	ed8d 7a03 	vstr	s14, [sp, #12]
 800777a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800777e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007782:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007786:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800778a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800778e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007792:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800779a:	edcd 7a05 	vstr	s15, [sp, #20]
 800779e:	d11e      	bne.n	80077de <__ieee754_rem_pio2f+0x21a>
 80077a0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80077a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a8:	bf14      	ite	ne
 80077aa:	2302      	movne	r3, #2
 80077ac:	2301      	moveq	r3, #1
 80077ae:	491a      	ldr	r1, [pc, #104]	; (8007818 <__ieee754_rem_pio2f+0x254>)
 80077b0:	9101      	str	r1, [sp, #4]
 80077b2:	2102      	movs	r1, #2
 80077b4:	9100      	str	r1, [sp, #0]
 80077b6:	a803      	add	r0, sp, #12
 80077b8:	4621      	mov	r1, r4
 80077ba:	f000 f837 	bl	800782c <__kernel_rem_pio2f>
 80077be:	2e00      	cmp	r6, #0
 80077c0:	f6bf af31 	bge.w	8007626 <__ieee754_rem_pio2f+0x62>
 80077c4:	edd4 7a00 	vldr	s15, [r4]
 80077c8:	eef1 7a67 	vneg.f32	s15, s15
 80077cc:	edc4 7a00 	vstr	s15, [r4]
 80077d0:	edd4 7a01 	vldr	s15, [r4, #4]
 80077d4:	eef1 7a67 	vneg.f32	s15, s15
 80077d8:	edc4 7a01 	vstr	s15, [r4, #4]
 80077dc:	e77a      	b.n	80076d4 <__ieee754_rem_pio2f+0x110>
 80077de:	2303      	movs	r3, #3
 80077e0:	e7e5      	b.n	80077ae <__ieee754_rem_pio2f+0x1ea>
 80077e2:	bf00      	nop
 80077e4:	3f490fd8 	.word	0x3f490fd8
 80077e8:	4016cbe3 	.word	0x4016cbe3
 80077ec:	3fc90f80 	.word	0x3fc90f80
 80077f0:	3fc90fd0 	.word	0x3fc90fd0
 80077f4:	37354400 	.word	0x37354400
 80077f8:	37354443 	.word	0x37354443
 80077fc:	2e85a308 	.word	0x2e85a308
 8007800:	43490f80 	.word	0x43490f80
 8007804:	3f22f984 	.word	0x3f22f984
 8007808:	08007ed8 	.word	0x08007ed8
 800780c:	2e85a300 	.word	0x2e85a300
 8007810:	248d3132 	.word	0x248d3132
 8007814:	43800000 	.word	0x43800000
 8007818:	08007f58 	.word	0x08007f58

0800781c <fabsf>:
 800781c:	ee10 3a10 	vmov	r3, s0
 8007820:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007824:	ee00 3a10 	vmov	s0, r3
 8007828:	4770      	bx	lr
	...

0800782c <__kernel_rem_pio2f>:
 800782c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007830:	ed2d 8b04 	vpush	{d8-d9}
 8007834:	b0d9      	sub	sp, #356	; 0x164
 8007836:	4688      	mov	r8, r1
 8007838:	9002      	str	r0, [sp, #8]
 800783a:	49b8      	ldr	r1, [pc, #736]	; (8007b1c <__kernel_rem_pio2f+0x2f0>)
 800783c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800783e:	9301      	str	r3, [sp, #4]
 8007840:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8007844:	9901      	ldr	r1, [sp, #4]
 8007846:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8007848:	f101 3bff 	add.w	fp, r1, #4294967295
 800784c:	1d11      	adds	r1, r2, #4
 800784e:	db25      	blt.n	800789c <__kernel_rem_pio2f+0x70>
 8007850:	1ed0      	subs	r0, r2, #3
 8007852:	bf48      	it	mi
 8007854:	1d10      	addmi	r0, r2, #4
 8007856:	10c0      	asrs	r0, r0, #3
 8007858:	1c45      	adds	r5, r0, #1
 800785a:	00e9      	lsls	r1, r5, #3
 800785c:	eba0 070b 	sub.w	r7, r0, fp
 8007860:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8007b2c <__kernel_rem_pio2f+0x300>
 8007864:	9103      	str	r1, [sp, #12]
 8007866:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800786a:	eb0a 0c0b 	add.w	ip, sl, fp
 800786e:	ae1c      	add	r6, sp, #112	; 0x70
 8007870:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8007874:	2400      	movs	r4, #0
 8007876:	4564      	cmp	r4, ip
 8007878:	dd12      	ble.n	80078a0 <__kernel_rem_pio2f+0x74>
 800787a:	9901      	ldr	r1, [sp, #4]
 800787c:	ac1c      	add	r4, sp, #112	; 0x70
 800787e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8007882:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8007886:	f04f 0c00 	mov.w	ip, #0
 800788a:	45d4      	cmp	ip, sl
 800788c:	dc27      	bgt.n	80078de <__kernel_rem_pio2f+0xb2>
 800788e:	f8dd e008 	ldr.w	lr, [sp, #8]
 8007892:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8007b2c <__kernel_rem_pio2f+0x300>
 8007896:	4627      	mov	r7, r4
 8007898:	2600      	movs	r6, #0
 800789a:	e016      	b.n	80078ca <__kernel_rem_pio2f+0x9e>
 800789c:	2000      	movs	r0, #0
 800789e:	e7db      	b.n	8007858 <__kernel_rem_pio2f+0x2c>
 80078a0:	42e7      	cmn	r7, r4
 80078a2:	bf5d      	ittte	pl
 80078a4:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 80078a8:	ee07 1a90 	vmovpl	s15, r1
 80078ac:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80078b0:	eef0 7a47 	vmovmi.f32	s15, s14
 80078b4:	ece6 7a01 	vstmia	r6!, {s15}
 80078b8:	3401      	adds	r4, #1
 80078ba:	e7dc      	b.n	8007876 <__kernel_rem_pio2f+0x4a>
 80078bc:	ecfe 6a01 	vldmia	lr!, {s13}
 80078c0:	ed97 7a00 	vldr	s14, [r7]
 80078c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80078c8:	3601      	adds	r6, #1
 80078ca:	455e      	cmp	r6, fp
 80078cc:	f1a7 0704 	sub.w	r7, r7, #4
 80078d0:	ddf4      	ble.n	80078bc <__kernel_rem_pio2f+0x90>
 80078d2:	ece9 7a01 	vstmia	r9!, {s15}
 80078d6:	f10c 0c01 	add.w	ip, ip, #1
 80078da:	3404      	adds	r4, #4
 80078dc:	e7d5      	b.n	800788a <__kernel_rem_pio2f+0x5e>
 80078de:	a908      	add	r1, sp, #32
 80078e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078e4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80078e8:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8007b28 <__kernel_rem_pio2f+0x2fc>
 80078ec:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8007b24 <__kernel_rem_pio2f+0x2f8>
 80078f0:	9105      	str	r1, [sp, #20]
 80078f2:	9304      	str	r3, [sp, #16]
 80078f4:	4656      	mov	r6, sl
 80078f6:	00b3      	lsls	r3, r6, #2
 80078f8:	9306      	str	r3, [sp, #24]
 80078fa:	ab58      	add	r3, sp, #352	; 0x160
 80078fc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8007900:	ac08      	add	r4, sp, #32
 8007902:	ab44      	add	r3, sp, #272	; 0x110
 8007904:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8007908:	46a4      	mov	ip, r4
 800790a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800790e:	4637      	mov	r7, r6
 8007910:	2f00      	cmp	r7, #0
 8007912:	f1a0 0004 	sub.w	r0, r0, #4
 8007916:	dc4a      	bgt.n	80079ae <__kernel_rem_pio2f+0x182>
 8007918:	4628      	mov	r0, r5
 800791a:	9207      	str	r2, [sp, #28]
 800791c:	f000 f9f8 	bl	8007d10 <scalbnf>
 8007920:	eeb0 8a40 	vmov.f32	s16, s0
 8007924:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007928:	ee28 0a00 	vmul.f32	s0, s16, s0
 800792c:	f000 fa56 	bl	8007ddc <floorf>
 8007930:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8007934:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007938:	2d00      	cmp	r5, #0
 800793a:	9a07      	ldr	r2, [sp, #28]
 800793c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007940:	ee17 9a90 	vmov	r9, s15
 8007944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007948:	ee38 8a67 	vsub.f32	s16, s16, s15
 800794c:	dd41      	ble.n	80079d2 <__kernel_rem_pio2f+0x1a6>
 800794e:	f106 3cff 	add.w	ip, r6, #4294967295
 8007952:	ab08      	add	r3, sp, #32
 8007954:	f1c5 0e08 	rsb	lr, r5, #8
 8007958:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800795c:	fa47 f00e 	asr.w	r0, r7, lr
 8007960:	4481      	add	r9, r0
 8007962:	fa00 f00e 	lsl.w	r0, r0, lr
 8007966:	1a3f      	subs	r7, r7, r0
 8007968:	f1c5 0007 	rsb	r0, r5, #7
 800796c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8007970:	4107      	asrs	r7, r0
 8007972:	2f00      	cmp	r7, #0
 8007974:	dd3c      	ble.n	80079f0 <__kernel_rem_pio2f+0x1c4>
 8007976:	f04f 0e00 	mov.w	lr, #0
 800797a:	f109 0901 	add.w	r9, r9, #1
 800797e:	4671      	mov	r1, lr
 8007980:	4576      	cmp	r6, lr
 8007982:	dc67      	bgt.n	8007a54 <__kernel_rem_pio2f+0x228>
 8007984:	2d00      	cmp	r5, #0
 8007986:	dd03      	ble.n	8007990 <__kernel_rem_pio2f+0x164>
 8007988:	2d01      	cmp	r5, #1
 800798a:	d074      	beq.n	8007a76 <__kernel_rem_pio2f+0x24a>
 800798c:	2d02      	cmp	r5, #2
 800798e:	d07b      	beq.n	8007a88 <__kernel_rem_pio2f+0x25c>
 8007990:	2f02      	cmp	r7, #2
 8007992:	d12d      	bne.n	80079f0 <__kernel_rem_pio2f+0x1c4>
 8007994:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007998:	ee30 8a48 	vsub.f32	s16, s0, s16
 800799c:	b341      	cbz	r1, 80079f0 <__kernel_rem_pio2f+0x1c4>
 800799e:	4628      	mov	r0, r5
 80079a0:	9207      	str	r2, [sp, #28]
 80079a2:	f000 f9b5 	bl	8007d10 <scalbnf>
 80079a6:	9a07      	ldr	r2, [sp, #28]
 80079a8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80079ac:	e020      	b.n	80079f0 <__kernel_rem_pio2f+0x1c4>
 80079ae:	ee60 7a28 	vmul.f32	s15, s0, s17
 80079b2:	3f01      	subs	r7, #1
 80079b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079bc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80079c0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80079c4:	ecac 0a01 	vstmia	ip!, {s0}
 80079c8:	ed90 0a00 	vldr	s0, [r0]
 80079cc:	ee37 0a80 	vadd.f32	s0, s15, s0
 80079d0:	e79e      	b.n	8007910 <__kernel_rem_pio2f+0xe4>
 80079d2:	d105      	bne.n	80079e0 <__kernel_rem_pio2f+0x1b4>
 80079d4:	1e70      	subs	r0, r6, #1
 80079d6:	ab08      	add	r3, sp, #32
 80079d8:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80079dc:	11ff      	asrs	r7, r7, #7
 80079de:	e7c8      	b.n	8007972 <__kernel_rem_pio2f+0x146>
 80079e0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80079e4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80079e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ec:	da30      	bge.n	8007a50 <__kernel_rem_pio2f+0x224>
 80079ee:	2700      	movs	r7, #0
 80079f0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80079f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079f8:	f040 809a 	bne.w	8007b30 <__kernel_rem_pio2f+0x304>
 80079fc:	1e74      	subs	r4, r6, #1
 80079fe:	46a4      	mov	ip, r4
 8007a00:	2100      	movs	r1, #0
 8007a02:	45d4      	cmp	ip, sl
 8007a04:	da47      	bge.n	8007a96 <__kernel_rem_pio2f+0x26a>
 8007a06:	2900      	cmp	r1, #0
 8007a08:	d063      	beq.n	8007ad2 <__kernel_rem_pio2f+0x2a6>
 8007a0a:	ab08      	add	r3, sp, #32
 8007a0c:	3d08      	subs	r5, #8
 8007a0e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d07f      	beq.n	8007b16 <__kernel_rem_pio2f+0x2ea>
 8007a16:	4628      	mov	r0, r5
 8007a18:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007a1c:	f000 f978 	bl	8007d10 <scalbnf>
 8007a20:	1c63      	adds	r3, r4, #1
 8007a22:	aa44      	add	r2, sp, #272	; 0x110
 8007a24:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8007b28 <__kernel_rem_pio2f+0x2fc>
 8007a28:	0099      	lsls	r1, r3, #2
 8007a2a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007a2e:	4623      	mov	r3, r4
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f280 80ad 	bge.w	8007b90 <__kernel_rem_pio2f+0x364>
 8007a36:	4623      	mov	r3, r4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f2c0 80cb 	blt.w	8007bd4 <__kernel_rem_pio2f+0x3a8>
 8007a3e:	aa44      	add	r2, sp, #272	; 0x110
 8007a40:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8007a44:	4e36      	ldr	r6, [pc, #216]	; (8007b20 <__kernel_rem_pio2f+0x2f4>)
 8007a46:	eddf 7a39 	vldr	s15, [pc, #228]	; 8007b2c <__kernel_rem_pio2f+0x300>
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	1ae2      	subs	r2, r4, r3
 8007a4e:	e0b6      	b.n	8007bbe <__kernel_rem_pio2f+0x392>
 8007a50:	2702      	movs	r7, #2
 8007a52:	e790      	b.n	8007976 <__kernel_rem_pio2f+0x14a>
 8007a54:	6820      	ldr	r0, [r4, #0]
 8007a56:	b949      	cbnz	r1, 8007a6c <__kernel_rem_pio2f+0x240>
 8007a58:	b118      	cbz	r0, 8007a62 <__kernel_rem_pio2f+0x236>
 8007a5a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8007a5e:	6020      	str	r0, [r4, #0]
 8007a60:	2001      	movs	r0, #1
 8007a62:	f10e 0e01 	add.w	lr, lr, #1
 8007a66:	3404      	adds	r4, #4
 8007a68:	4601      	mov	r1, r0
 8007a6a:	e789      	b.n	8007980 <__kernel_rem_pio2f+0x154>
 8007a6c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8007a70:	6020      	str	r0, [r4, #0]
 8007a72:	4608      	mov	r0, r1
 8007a74:	e7f5      	b.n	8007a62 <__kernel_rem_pio2f+0x236>
 8007a76:	1e74      	subs	r4, r6, #1
 8007a78:	ab08      	add	r3, sp, #32
 8007a7a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007a7e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8007a82:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007a86:	e783      	b.n	8007990 <__kernel_rem_pio2f+0x164>
 8007a88:	1e74      	subs	r4, r6, #1
 8007a8a:	ab08      	add	r3, sp, #32
 8007a8c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007a90:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8007a94:	e7f5      	b.n	8007a82 <__kernel_rem_pio2f+0x256>
 8007a96:	ab08      	add	r3, sp, #32
 8007a98:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8007a9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007aa0:	4301      	orrs	r1, r0
 8007aa2:	e7ae      	b.n	8007a02 <__kernel_rem_pio2f+0x1d6>
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8007aaa:	2f00      	cmp	r7, #0
 8007aac:	d0fa      	beq.n	8007aa4 <__kernel_rem_pio2f+0x278>
 8007aae:	9b06      	ldr	r3, [sp, #24]
 8007ab0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8007ab4:	eb0d 0403 	add.w	r4, sp, r3
 8007ab8:	9b01      	ldr	r3, [sp, #4]
 8007aba:	18f7      	adds	r7, r6, r3
 8007abc:	ab1c      	add	r3, sp, #112	; 0x70
 8007abe:	f106 0c01 	add.w	ip, r6, #1
 8007ac2:	3c4c      	subs	r4, #76	; 0x4c
 8007ac4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ac8:	4430      	add	r0, r6
 8007aca:	4560      	cmp	r0, ip
 8007acc:	da04      	bge.n	8007ad8 <__kernel_rem_pio2f+0x2ac>
 8007ace:	4606      	mov	r6, r0
 8007ad0:	e711      	b.n	80078f6 <__kernel_rem_pio2f+0xca>
 8007ad2:	9c05      	ldr	r4, [sp, #20]
 8007ad4:	2001      	movs	r0, #1
 8007ad6:	e7e6      	b.n	8007aa6 <__kernel_rem_pio2f+0x27a>
 8007ad8:	9b04      	ldr	r3, [sp, #16]
 8007ada:	f8dd e008 	ldr.w	lr, [sp, #8]
 8007ade:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8007ae2:	9306      	str	r3, [sp, #24]
 8007ae4:	ee07 3a90 	vmov	s15, r3
 8007ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007aec:	2600      	movs	r6, #0
 8007aee:	ece7 7a01 	vstmia	r7!, {s15}
 8007af2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007b2c <__kernel_rem_pio2f+0x300>
 8007af6:	46b9      	mov	r9, r7
 8007af8:	455e      	cmp	r6, fp
 8007afa:	dd04      	ble.n	8007b06 <__kernel_rem_pio2f+0x2da>
 8007afc:	ece4 7a01 	vstmia	r4!, {s15}
 8007b00:	f10c 0c01 	add.w	ip, ip, #1
 8007b04:	e7e1      	b.n	8007aca <__kernel_rem_pio2f+0x29e>
 8007b06:	ecfe 6a01 	vldmia	lr!, {s13}
 8007b0a:	ed39 7a01 	vldmdb	r9!, {s14}
 8007b0e:	3601      	adds	r6, #1
 8007b10:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007b14:	e7f0      	b.n	8007af8 <__kernel_rem_pio2f+0x2cc>
 8007b16:	3c01      	subs	r4, #1
 8007b18:	e777      	b.n	8007a0a <__kernel_rem_pio2f+0x1de>
 8007b1a:	bf00      	nop
 8007b1c:	0800829c 	.word	0x0800829c
 8007b20:	08008270 	.word	0x08008270
 8007b24:	43800000 	.word	0x43800000
 8007b28:	3b800000 	.word	0x3b800000
 8007b2c:	00000000 	.word	0x00000000
 8007b30:	9b03      	ldr	r3, [sp, #12]
 8007b32:	eeb0 0a48 	vmov.f32	s0, s16
 8007b36:	1a98      	subs	r0, r3, r2
 8007b38:	f000 f8ea 	bl	8007d10 <scalbnf>
 8007b3c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8007b24 <__kernel_rem_pio2f+0x2f8>
 8007b40:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b48:	db19      	blt.n	8007b7e <__kernel_rem_pio2f+0x352>
 8007b4a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007b28 <__kernel_rem_pio2f+0x2fc>
 8007b4e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007b52:	aa08      	add	r2, sp, #32
 8007b54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b58:	1c74      	adds	r4, r6, #1
 8007b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b5e:	3508      	adds	r5, #8
 8007b60:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007b64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b68:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007b6c:	ee10 3a10 	vmov	r3, s0
 8007b70:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8007b74:	ee17 3a90 	vmov	r3, s15
 8007b78:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007b7c:	e74b      	b.n	8007a16 <__kernel_rem_pio2f+0x1ea>
 8007b7e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007b82:	aa08      	add	r2, sp, #32
 8007b84:	ee10 3a10 	vmov	r3, s0
 8007b88:	4634      	mov	r4, r6
 8007b8a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8007b8e:	e742      	b.n	8007a16 <__kernel_rem_pio2f+0x1ea>
 8007b90:	a808      	add	r0, sp, #32
 8007b92:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007b96:	9001      	str	r0, [sp, #4]
 8007b98:	ee07 0a90 	vmov	s15, r0
 8007b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007ba6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007baa:	ed62 7a01 	vstmdb	r2!, {s15}
 8007bae:	e73f      	b.n	8007a30 <__kernel_rem_pio2f+0x204>
 8007bb0:	ecf6 6a01 	vldmia	r6!, {s13}
 8007bb4:	ecb5 7a01 	vldmia	r5!, {s14}
 8007bb8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	4550      	cmp	r0, sl
 8007bc0:	dc01      	bgt.n	8007bc6 <__kernel_rem_pio2f+0x39a>
 8007bc2:	4290      	cmp	r0, r2
 8007bc4:	ddf4      	ble.n	8007bb0 <__kernel_rem_pio2f+0x384>
 8007bc6:	a858      	add	r0, sp, #352	; 0x160
 8007bc8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007bcc:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	e731      	b.n	8007a38 <__kernel_rem_pio2f+0x20c>
 8007bd4:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	dc09      	bgt.n	8007bee <__kernel_rem_pio2f+0x3c2>
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	dc2b      	bgt.n	8007c36 <__kernel_rem_pio2f+0x40a>
 8007bde:	d044      	beq.n	8007c6a <__kernel_rem_pio2f+0x43e>
 8007be0:	f009 0007 	and.w	r0, r9, #7
 8007be4:	b059      	add	sp, #356	; 0x164
 8007be6:	ecbd 8b04 	vpop	{d8-d9}
 8007bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bee:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	d1f5      	bne.n	8007be0 <__kernel_rem_pio2f+0x3b4>
 8007bf4:	aa30      	add	r2, sp, #192	; 0xc0
 8007bf6:	1f0b      	subs	r3, r1, #4
 8007bf8:	4413      	add	r3, r2
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	f1a2 0204 	sub.w	r2, r2, #4
 8007c04:	dc52      	bgt.n	8007cac <__kernel_rem_pio2f+0x480>
 8007c06:	4622      	mov	r2, r4
 8007c08:	2a01      	cmp	r2, #1
 8007c0a:	f1a3 0304 	sub.w	r3, r3, #4
 8007c0e:	dc5d      	bgt.n	8007ccc <__kernel_rem_pio2f+0x4a0>
 8007c10:	ab30      	add	r3, sp, #192	; 0xc0
 8007c12:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8007b2c <__kernel_rem_pio2f+0x300>
 8007c16:	440b      	add	r3, r1
 8007c18:	2c01      	cmp	r4, #1
 8007c1a:	dc67      	bgt.n	8007cec <__kernel_rem_pio2f+0x4c0>
 8007c1c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8007c20:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8007c24:	2f00      	cmp	r7, #0
 8007c26:	d167      	bne.n	8007cf8 <__kernel_rem_pio2f+0x4cc>
 8007c28:	edc8 6a00 	vstr	s13, [r8]
 8007c2c:	ed88 7a01 	vstr	s14, [r8, #4]
 8007c30:	edc8 7a02 	vstr	s15, [r8, #8]
 8007c34:	e7d4      	b.n	8007be0 <__kernel_rem_pio2f+0x3b4>
 8007c36:	ab30      	add	r3, sp, #192	; 0xc0
 8007c38:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8007b2c <__kernel_rem_pio2f+0x300>
 8007c3c:	440b      	add	r3, r1
 8007c3e:	4622      	mov	r2, r4
 8007c40:	2a00      	cmp	r2, #0
 8007c42:	da24      	bge.n	8007c8e <__kernel_rem_pio2f+0x462>
 8007c44:	b34f      	cbz	r7, 8007c9a <__kernel_rem_pio2f+0x46e>
 8007c46:	eef1 7a47 	vneg.f32	s15, s14
 8007c4a:	edc8 7a00 	vstr	s15, [r8]
 8007c4e:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8007c52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c56:	aa31      	add	r2, sp, #196	; 0xc4
 8007c58:	2301      	movs	r3, #1
 8007c5a:	429c      	cmp	r4, r3
 8007c5c:	da20      	bge.n	8007ca0 <__kernel_rem_pio2f+0x474>
 8007c5e:	b10f      	cbz	r7, 8007c64 <__kernel_rem_pio2f+0x438>
 8007c60:	eef1 7a67 	vneg.f32	s15, s15
 8007c64:	edc8 7a01 	vstr	s15, [r8, #4]
 8007c68:	e7ba      	b.n	8007be0 <__kernel_rem_pio2f+0x3b4>
 8007c6a:	ab30      	add	r3, sp, #192	; 0xc0
 8007c6c:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8007b2c <__kernel_rem_pio2f+0x300>
 8007c70:	440b      	add	r3, r1
 8007c72:	2c00      	cmp	r4, #0
 8007c74:	da05      	bge.n	8007c82 <__kernel_rem_pio2f+0x456>
 8007c76:	b10f      	cbz	r7, 8007c7c <__kernel_rem_pio2f+0x450>
 8007c78:	eef1 7a67 	vneg.f32	s15, s15
 8007c7c:	edc8 7a00 	vstr	s15, [r8]
 8007c80:	e7ae      	b.n	8007be0 <__kernel_rem_pio2f+0x3b4>
 8007c82:	ed33 7a01 	vldmdb	r3!, {s14}
 8007c86:	3c01      	subs	r4, #1
 8007c88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c8c:	e7f1      	b.n	8007c72 <__kernel_rem_pio2f+0x446>
 8007c8e:	ed73 7a01 	vldmdb	r3!, {s15}
 8007c92:	3a01      	subs	r2, #1
 8007c94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007c98:	e7d2      	b.n	8007c40 <__kernel_rem_pio2f+0x414>
 8007c9a:	eef0 7a47 	vmov.f32	s15, s14
 8007c9e:	e7d4      	b.n	8007c4a <__kernel_rem_pio2f+0x41e>
 8007ca0:	ecb2 7a01 	vldmia	r2!, {s14}
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007caa:	e7d6      	b.n	8007c5a <__kernel_rem_pio2f+0x42e>
 8007cac:	edd2 7a00 	vldr	s15, [r2]
 8007cb0:	edd2 6a01 	vldr	s13, [r2, #4]
 8007cb4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007cb8:	3801      	subs	r0, #1
 8007cba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007cbe:	ed82 7a00 	vstr	s14, [r2]
 8007cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cc6:	edc2 7a01 	vstr	s15, [r2, #4]
 8007cca:	e798      	b.n	8007bfe <__kernel_rem_pio2f+0x3d2>
 8007ccc:	edd3 7a00 	vldr	s15, [r3]
 8007cd0:	edd3 6a01 	vldr	s13, [r3, #4]
 8007cd4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007cd8:	3a01      	subs	r2, #1
 8007cda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007cde:	ed83 7a00 	vstr	s14, [r3]
 8007ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ce6:	edc3 7a01 	vstr	s15, [r3, #4]
 8007cea:	e78d      	b.n	8007c08 <__kernel_rem_pio2f+0x3dc>
 8007cec:	ed33 7a01 	vldmdb	r3!, {s14}
 8007cf0:	3c01      	subs	r4, #1
 8007cf2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007cf6:	e78f      	b.n	8007c18 <__kernel_rem_pio2f+0x3ec>
 8007cf8:	eef1 6a66 	vneg.f32	s13, s13
 8007cfc:	eeb1 7a47 	vneg.f32	s14, s14
 8007d00:	edc8 6a00 	vstr	s13, [r8]
 8007d04:	ed88 7a01 	vstr	s14, [r8, #4]
 8007d08:	eef1 7a67 	vneg.f32	s15, s15
 8007d0c:	e790      	b.n	8007c30 <__kernel_rem_pio2f+0x404>
 8007d0e:	bf00      	nop

08007d10 <scalbnf>:
 8007d10:	ee10 3a10 	vmov	r3, s0
 8007d14:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007d18:	d02b      	beq.n	8007d72 <scalbnf+0x62>
 8007d1a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007d1e:	d302      	bcc.n	8007d26 <scalbnf+0x16>
 8007d20:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007d24:	4770      	bx	lr
 8007d26:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007d2a:	d123      	bne.n	8007d74 <scalbnf+0x64>
 8007d2c:	4b24      	ldr	r3, [pc, #144]	; (8007dc0 <scalbnf+0xb0>)
 8007d2e:	eddf 7a25 	vldr	s15, [pc, #148]	; 8007dc4 <scalbnf+0xb4>
 8007d32:	4298      	cmp	r0, r3
 8007d34:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007d38:	db17      	blt.n	8007d6a <scalbnf+0x5a>
 8007d3a:	ee10 3a10 	vmov	r3, s0
 8007d3e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007d42:	3a19      	subs	r2, #25
 8007d44:	f24c 3150 	movw	r1, #50000	; 0xc350
 8007d48:	4288      	cmp	r0, r1
 8007d4a:	dd15      	ble.n	8007d78 <scalbnf+0x68>
 8007d4c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007dc8 <scalbnf+0xb8>
 8007d50:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8007dcc <scalbnf+0xbc>
 8007d54:	ee10 3a10 	vmov	r3, s0
 8007d58:	eeb0 7a67 	vmov.f32	s14, s15
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	bfb8      	it	lt
 8007d60:	eef0 7a66 	vmovlt.f32	s15, s13
 8007d64:	ee27 0a87 	vmul.f32	s0, s15, s14
 8007d68:	4770      	bx	lr
 8007d6a:	eddf 7a19 	vldr	s15, [pc, #100]	; 8007dd0 <scalbnf+0xc0>
 8007d6e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007d72:	4770      	bx	lr
 8007d74:	0dd2      	lsrs	r2, r2, #23
 8007d76:	e7e5      	b.n	8007d44 <scalbnf+0x34>
 8007d78:	4410      	add	r0, r2
 8007d7a:	28fe      	cmp	r0, #254	; 0xfe
 8007d7c:	dce6      	bgt.n	8007d4c <scalbnf+0x3c>
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	dd06      	ble.n	8007d90 <scalbnf+0x80>
 8007d82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d86:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007d8a:	ee00 3a10 	vmov	s0, r3
 8007d8e:	4770      	bx	lr
 8007d90:	f110 0f16 	cmn.w	r0, #22
 8007d94:	da09      	bge.n	8007daa <scalbnf+0x9a>
 8007d96:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007dd0 <scalbnf+0xc0>
 8007d9a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8007dd4 <scalbnf+0xc4>
 8007d9e:	ee10 3a10 	vmov	r3, s0
 8007da2:	eeb0 7a67 	vmov.f32	s14, s15
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	e7d9      	b.n	8007d5e <scalbnf+0x4e>
 8007daa:	3019      	adds	r0, #25
 8007dac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007db0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007db4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8007dd8 <scalbnf+0xc8>
 8007db8:	ee07 3a90 	vmov	s15, r3
 8007dbc:	e7d7      	b.n	8007d6e <scalbnf+0x5e>
 8007dbe:	bf00      	nop
 8007dc0:	ffff3cb0 	.word	0xffff3cb0
 8007dc4:	4c000000 	.word	0x4c000000
 8007dc8:	7149f2ca 	.word	0x7149f2ca
 8007dcc:	f149f2ca 	.word	0xf149f2ca
 8007dd0:	0da24260 	.word	0x0da24260
 8007dd4:	8da24260 	.word	0x8da24260
 8007dd8:	33000000 	.word	0x33000000

08007ddc <floorf>:
 8007ddc:	ee10 3a10 	vmov	r3, s0
 8007de0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007de4:	3a7f      	subs	r2, #127	; 0x7f
 8007de6:	2a16      	cmp	r2, #22
 8007de8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007dec:	dc2a      	bgt.n	8007e44 <floorf+0x68>
 8007dee:	2a00      	cmp	r2, #0
 8007df0:	da11      	bge.n	8007e16 <floorf+0x3a>
 8007df2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007e54 <floorf+0x78>
 8007df6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007dfa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e02:	dd05      	ble.n	8007e10 <floorf+0x34>
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	da23      	bge.n	8007e50 <floorf+0x74>
 8007e08:	4a13      	ldr	r2, [pc, #76]	; (8007e58 <floorf+0x7c>)
 8007e0a:	2900      	cmp	r1, #0
 8007e0c:	bf18      	it	ne
 8007e0e:	4613      	movne	r3, r2
 8007e10:	ee00 3a10 	vmov	s0, r3
 8007e14:	4770      	bx	lr
 8007e16:	4911      	ldr	r1, [pc, #68]	; (8007e5c <floorf+0x80>)
 8007e18:	4111      	asrs	r1, r2
 8007e1a:	420b      	tst	r3, r1
 8007e1c:	d0fa      	beq.n	8007e14 <floorf+0x38>
 8007e1e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007e54 <floorf+0x78>
 8007e22:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007e26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e2e:	ddef      	ble.n	8007e10 <floorf+0x34>
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	bfbe      	ittt	lt
 8007e34:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007e38:	fa40 f202 	asrlt.w	r2, r0, r2
 8007e3c:	189b      	addlt	r3, r3, r2
 8007e3e:	ea23 0301 	bic.w	r3, r3, r1
 8007e42:	e7e5      	b.n	8007e10 <floorf+0x34>
 8007e44:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007e48:	d3e4      	bcc.n	8007e14 <floorf+0x38>
 8007e4a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007e4e:	4770      	bx	lr
 8007e50:	2300      	movs	r3, #0
 8007e52:	e7dd      	b.n	8007e10 <floorf+0x34>
 8007e54:	7149f2ca 	.word	0x7149f2ca
 8007e58:	bf800000 	.word	0xbf800000
 8007e5c:	007fffff 	.word	0x007fffff

08007e60 <_init>:
 8007e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e62:	bf00      	nop
 8007e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e66:	bc08      	pop	{r3}
 8007e68:	469e      	mov	lr, r3
 8007e6a:	4770      	bx	lr

08007e6c <_fini>:
 8007e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6e:	bf00      	nop
 8007e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e72:	bc08      	pop	{r3}
 8007e74:	469e      	mov	lr, r3
 8007e76:	4770      	bx	lr
