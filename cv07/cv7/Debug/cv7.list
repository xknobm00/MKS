
cv7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dc0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003e80  08003e80  00013e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f4c  08003f4c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003f4c  08003f4c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f4c  08003f4c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f4c  08003f4c  00013f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f50  08003f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001094  20000010  08003f64  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010a4  08003f64  000210a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010fc2  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000294b  00000000  00000000  0003103d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  00033988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d0e  00000000  00000000  00034a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001124f  00000000  00000000  0003574e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000131b4  00000000  00000000  0004699d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006c87a  00000000  00000000  00059b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003be0  00000000  00000000  000c63cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000c9fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003e68 	.word	0x08003e68

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003e68 	.word	0x08003e68

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	4a06      	ldr	r2, [pc, #24]	; (8000248 <vApplicationGetIdleTaskMemory+0x28>)
 8000230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	4a05      	ldr	r2, [pc, #20]	; (800024c <vApplicationGetIdleTaskMemory+0x2c>)
 8000236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2280      	movs	r2, #128	; 0x80
 800023c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	2000002c 	.word	0x2000002c
 800024c:	20000080 	.word	0x20000080

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b5b0      	push	{r4, r5, r7, lr}
 8000252:	b09a      	sub	sp, #104	; 0x68
 8000254:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000256:	f000 fb63 	bl	8000920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025a:	f000 f859 	bl	8000310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025e:	f000 f8d1 	bl	8000404 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000262:	f000 f89f 	bl	80003a4 <MX_USART2_UART_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of xVisualQueue */
  osMessageQDef(xVisualQueue, 16, int16_t);
 8000266:	2558      	movs	r5, #88	; 0x58
 8000268:	197b      	adds	r3, r7, r5
 800026a:	4a21      	ldr	r2, [pc, #132]	; (80002f0 <main+0xa0>)
 800026c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800026e:	c313      	stmia	r3!, {r0, r1, r4}
 8000270:	6812      	ldr	r2, [r2, #0]
 8000272:	601a      	str	r2, [r3, #0]
  xVisualQueueHandle = osMessageCreate(osMessageQ(xVisualQueue), NULL);
 8000274:	197b      	adds	r3, r7, r5
 8000276:	2100      	movs	r1, #0
 8000278:	0018      	movs	r0, r3
 800027a:	f002 f889 	bl	8002390 <osMessageCreate>
 800027e:	0002      	movs	r2, r0
 8000280:	4b1c      	ldr	r3, [pc, #112]	; (80002f4 <main+0xa4>)
 8000282:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000284:	253c      	movs	r5, #60	; 0x3c
 8000286:	197b      	adds	r3, r7, r5
 8000288:	4a1b      	ldr	r2, [pc, #108]	; (80002f8 <main+0xa8>)
 800028a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800028c:	c313      	stmia	r3!, {r0, r1, r4}
 800028e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000290:	c313      	stmia	r3!, {r0, r1, r4}
 8000292:	6812      	ldr	r2, [r2, #0]
 8000294:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000296:	197b      	adds	r3, r7, r5
 8000298:	2100      	movs	r1, #0
 800029a:	0018      	movs	r0, r3
 800029c:	f002 f817 	bl	80022ce <osThreadCreate>
 80002a0:	0002      	movs	r2, r0
 80002a2:	4b16      	ldr	r3, [pc, #88]	; (80002fc <main+0xac>)
 80002a4:	601a      	str	r2, [r3, #0]

  /* definition and creation of VisualTask */
  osThreadDef(VisualTask, StartVisualTask, osPriorityNormal, 0, 128);
 80002a6:	2520      	movs	r5, #32
 80002a8:	197b      	adds	r3, r7, r5
 80002aa:	4a15      	ldr	r2, [pc, #84]	; (8000300 <main+0xb0>)
 80002ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002ae:	c313      	stmia	r3!, {r0, r1, r4}
 80002b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002b2:	c313      	stmia	r3!, {r0, r1, r4}
 80002b4:	6812      	ldr	r2, [r2, #0]
 80002b6:	601a      	str	r2, [r3, #0]
  VisualTaskHandle = osThreadCreate(osThread(VisualTask), NULL);
 80002b8:	197b      	adds	r3, r7, r5
 80002ba:	2100      	movs	r1, #0
 80002bc:	0018      	movs	r0, r3
 80002be:	f002 f806 	bl	80022ce <osThreadCreate>
 80002c2:	0002      	movs	r2, r0
 80002c4:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <main+0xb4>)
 80002c6:	601a      	str	r2, [r3, #0]

  /* definition and creation of AcceleroTask */
  osThreadDef(AcceleroTask, StartAcceleroTask, osPriorityNormal, 0, 128);
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	4a0f      	ldr	r2, [pc, #60]	; (8000308 <main+0xb8>)
 80002cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002ce:	c313      	stmia	r3!, {r0, r1, r4}
 80002d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002d2:	c313      	stmia	r3!, {r0, r1, r4}
 80002d4:	6812      	ldr	r2, [r2, #0]
 80002d6:	601a      	str	r2, [r3, #0]
  AcceleroTaskHandle = osThreadCreate(osThread(AcceleroTask), NULL);
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2100      	movs	r1, #0
 80002dc:	0018      	movs	r0, r3
 80002de:	f001 fff6 	bl	80022ce <osThreadCreate>
 80002e2:	0002      	movs	r2, r0
 80002e4:	4b09      	ldr	r3, [pc, #36]	; (800030c <main+0xbc>)
 80002e6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002e8:	f001 ffe9 	bl	80022be <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ec:	e7fe      	b.n	80002ec <main+0x9c>
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	08003e80 	.word	0x08003e80
 80002f4:	20000310 	.word	0x20000310
 80002f8:	08003e9c 	.word	0x08003e9c
 80002fc:	20000304 	.word	0x20000304
 8000300:	08003ec4 	.word	0x08003ec4
 8000304:	20000308 	.word	0x20000308
 8000308:	08003ef0 	.word	0x08003ef0
 800030c:	2000030c 	.word	0x2000030c

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b590      	push	{r4, r7, lr}
 8000312:	b091      	sub	sp, #68	; 0x44
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	2410      	movs	r4, #16
 8000318:	193b      	adds	r3, r7, r4
 800031a:	0018      	movs	r0, r3
 800031c:	2330      	movs	r3, #48	; 0x30
 800031e:	001a      	movs	r2, r3
 8000320:	2100      	movs	r1, #0
 8000322:	f003 fd6b 	bl	8003dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000326:	003b      	movs	r3, r7
 8000328:	0018      	movs	r0, r3
 800032a:	2310      	movs	r3, #16
 800032c:	001a      	movs	r2, r3
 800032e:	2100      	movs	r1, #0
 8000330:	f003 fd64 	bl	8003dfc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000334:	0021      	movs	r1, r4
 8000336:	187b      	adds	r3, r7, r1
 8000338:	2202      	movs	r2, #2
 800033a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2201      	movs	r2, #1
 8000340:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2210      	movs	r2, #16
 8000346:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000348:	187b      	adds	r3, r7, r1
 800034a:	2202      	movs	r2, #2
 800034c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800034e:	187b      	adds	r3, r7, r1
 8000350:	2200      	movs	r2, #0
 8000352:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000354:	187b      	adds	r3, r7, r1
 8000356:	22a0      	movs	r2, #160	; 0xa0
 8000358:	0392      	lsls	r2, r2, #14
 800035a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2200      	movs	r2, #0
 8000360:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000362:	187b      	adds	r3, r7, r1
 8000364:	0018      	movs	r0, r3
 8000366:	f000 fd47 	bl	8000df8 <HAL_RCC_OscConfig>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800036e:	f000 f993 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000372:	003b      	movs	r3, r7
 8000374:	2207      	movs	r2, #7
 8000376:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000378:	003b      	movs	r3, r7
 800037a:	2202      	movs	r2, #2
 800037c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037e:	003b      	movs	r3, r7
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000384:	003b      	movs	r3, r7
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800038a:	003b      	movs	r3, r7
 800038c:	2101      	movs	r1, #1
 800038e:	0018      	movs	r0, r3
 8000390:	f001 f84c 	bl	800142c <HAL_RCC_ClockConfig>
 8000394:	1e03      	subs	r3, r0, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000398:	f000 f97e 	bl	8000698 <Error_Handler>
  }
}
 800039c:	46c0      	nop			; (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	b011      	add	sp, #68	; 0x44
 80003a2:	bd90      	pop	{r4, r7, pc}

080003a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003a8:	4b14      	ldr	r3, [pc, #80]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003aa:	4a15      	ldr	r2, [pc, #84]	; (8000400 <MX_USART2_UART_Init+0x5c>)
 80003ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003b0:	2296      	movs	r2, #150	; 0x96
 80003b2:	0212      	lsls	r2, r2, #8
 80003b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003b6:	4b11      	ldr	r3, [pc, #68]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003ca:	220c      	movs	r2, #12
 80003cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003e6:	4b05      	ldr	r3, [pc, #20]	; (80003fc <MX_USART2_UART_Init+0x58>)
 80003e8:	0018      	movs	r0, r3
 80003ea:	f001 fbfb 	bl	8001be4 <HAL_UART_Init>
 80003ee:	1e03      	subs	r3, r0, #0
 80003f0:	d001      	beq.n	80003f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003f2:	f000 f951 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000280 	.word	0x20000280
 8000400:	40004400 	.word	0x40004400

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b590      	push	{r4, r7, lr}
 8000406:	b08b      	sub	sp, #44	; 0x2c
 8000408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040a:	2414      	movs	r4, #20
 800040c:	193b      	adds	r3, r7, r4
 800040e:	0018      	movs	r0, r3
 8000410:	2314      	movs	r3, #20
 8000412:	001a      	movs	r2, r3
 8000414:	2100      	movs	r1, #0
 8000416:	f003 fcf1 	bl	8003dfc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041a:	4b40      	ldr	r3, [pc, #256]	; (800051c <MX_GPIO_Init+0x118>)
 800041c:	695a      	ldr	r2, [r3, #20]
 800041e:	4b3f      	ldr	r3, [pc, #252]	; (800051c <MX_GPIO_Init+0x118>)
 8000420:	2180      	movs	r1, #128	; 0x80
 8000422:	0309      	lsls	r1, r1, #12
 8000424:	430a      	orrs	r2, r1
 8000426:	615a      	str	r2, [r3, #20]
 8000428:	4b3c      	ldr	r3, [pc, #240]	; (800051c <MX_GPIO_Init+0x118>)
 800042a:	695a      	ldr	r2, [r3, #20]
 800042c:	2380      	movs	r3, #128	; 0x80
 800042e:	031b      	lsls	r3, r3, #12
 8000430:	4013      	ands	r3, r2
 8000432:	613b      	str	r3, [r7, #16]
 8000434:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000436:	4b39      	ldr	r3, [pc, #228]	; (800051c <MX_GPIO_Init+0x118>)
 8000438:	695a      	ldr	r2, [r3, #20]
 800043a:	4b38      	ldr	r3, [pc, #224]	; (800051c <MX_GPIO_Init+0x118>)
 800043c:	2180      	movs	r1, #128	; 0x80
 800043e:	03c9      	lsls	r1, r1, #15
 8000440:	430a      	orrs	r2, r1
 8000442:	615a      	str	r2, [r3, #20]
 8000444:	4b35      	ldr	r3, [pc, #212]	; (800051c <MX_GPIO_Init+0x118>)
 8000446:	695a      	ldr	r2, [r3, #20]
 8000448:	2380      	movs	r3, #128	; 0x80
 800044a:	03db      	lsls	r3, r3, #15
 800044c:	4013      	ands	r3, r2
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b32      	ldr	r3, [pc, #200]	; (800051c <MX_GPIO_Init+0x118>)
 8000454:	695a      	ldr	r2, [r3, #20]
 8000456:	4b31      	ldr	r3, [pc, #196]	; (800051c <MX_GPIO_Init+0x118>)
 8000458:	2180      	movs	r1, #128	; 0x80
 800045a:	0289      	lsls	r1, r1, #10
 800045c:	430a      	orrs	r2, r1
 800045e:	615a      	str	r2, [r3, #20]
 8000460:	4b2e      	ldr	r3, [pc, #184]	; (800051c <MX_GPIO_Init+0x118>)
 8000462:	695a      	ldr	r2, [r3, #20]
 8000464:	2380      	movs	r3, #128	; 0x80
 8000466:	029b      	lsls	r3, r3, #10
 8000468:	4013      	ands	r3, r2
 800046a:	60bb      	str	r3, [r7, #8]
 800046c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046e:	4b2b      	ldr	r3, [pc, #172]	; (800051c <MX_GPIO_Init+0x118>)
 8000470:	695a      	ldr	r2, [r3, #20]
 8000472:	4b2a      	ldr	r3, [pc, #168]	; (800051c <MX_GPIO_Init+0x118>)
 8000474:	2180      	movs	r1, #128	; 0x80
 8000476:	02c9      	lsls	r1, r1, #11
 8000478:	430a      	orrs	r2, r1
 800047a:	615a      	str	r2, [r3, #20]
 800047c:	4b27      	ldr	r3, [pc, #156]	; (800051c <MX_GPIO_Init+0x118>)
 800047e:	695a      	ldr	r2, [r3, #20]
 8000480:	2380      	movs	r3, #128	; 0x80
 8000482:	02db      	lsls	r3, r3, #11
 8000484:	4013      	ands	r3, r2
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LD2_Pin, GPIO_PIN_RESET);
 800048a:	2390      	movs	r3, #144	; 0x90
 800048c:	05db      	lsls	r3, r3, #23
 800048e:	2200      	movs	r2, #0
 8000490:	2130      	movs	r1, #48	; 0x30
 8000492:	0018      	movs	r0, r3
 8000494:	f000 fc92 	bl	8000dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000498:	4b21      	ldr	r3, [pc, #132]	; (8000520 <MX_GPIO_Init+0x11c>)
 800049a:	2200      	movs	r2, #0
 800049c:	2101      	movs	r1, #1
 800049e:	0018      	movs	r0, r3
 80004a0:	f000 fc8c 	bl	8000dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2280      	movs	r2, #128	; 0x80
 80004a8:	0192      	lsls	r2, r2, #6
 80004aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	2284      	movs	r2, #132	; 0x84
 80004b0:	0392      	lsls	r2, r2, #14
 80004b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004ba:	193b      	adds	r3, r7, r4
 80004bc:	4a19      	ldr	r2, [pc, #100]	; (8000524 <MX_GPIO_Init+0x120>)
 80004be:	0019      	movs	r1, r3
 80004c0:	0010      	movs	r0, r2
 80004c2:	f000 fb0b 	bl	8000adc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LD2_Pin;
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	2230      	movs	r2, #48	; 0x30
 80004ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	2201      	movs	r2, #1
 80004d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	2200      	movs	r2, #0
 80004dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004de:	193a      	adds	r2, r7, r4
 80004e0:	2390      	movs	r3, #144	; 0x90
 80004e2:	05db      	lsls	r3, r3, #23
 80004e4:	0011      	movs	r1, r2
 80004e6:	0018      	movs	r0, r3
 80004e8:	f000 faf8 	bl	8000adc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80004ec:	0021      	movs	r1, r4
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	2201      	movs	r2, #1
 80004f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2201      	movs	r2, #1
 80004f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000506:	187b      	adds	r3, r7, r1
 8000508:	4a05      	ldr	r2, [pc, #20]	; (8000520 <MX_GPIO_Init+0x11c>)
 800050a:	0019      	movs	r1, r3
 800050c:	0010      	movs	r0, r2
 800050e:	f000 fae5 	bl	8000adc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	b00b      	add	sp, #44	; 0x2c
 8000518:	bd90      	pop	{r4, r7, pc}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	40021000 	.word	0x40021000
 8000520:	48000400 	.word	0x48000400
 8000524:	48000800 	.word	0x48000800

08000528 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000530:	2001      	movs	r0, #1
 8000532:	f001 ff19 	bl	8002368 <osDelay>
 8000536:	e7fb      	b.n	8000530 <StartDefaultTask+0x8>

08000538 <StartVisualTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartVisualTask */
void StartVisualTask(void const * argument)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
		int16_t msg;

		if (xQueueReceive(xVisualQueueHandle, &msg, portMAX_DELAY)) {
 8000540:	4b22      	ldr	r3, [pc, #136]	; (80005cc <StartVisualTask+0x94>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2201      	movs	r2, #1
 8000546:	4252      	negs	r2, r2
 8000548:	240e      	movs	r4, #14
 800054a:	1939      	adds	r1, r7, r4
 800054c:	0018      	movs	r0, r3
 800054e:	f002 f9ab 	bl	80028a8 <xQueueReceive>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d036      	beq.n	80005c4 <StartVisualTask+0x8c>
			if (msg < -1000) {
 8000556:	193b      	adds	r3, r7, r4
 8000558:	2200      	movs	r2, #0
 800055a:	5e9b      	ldrsh	r3, [r3, r2]
 800055c:	4a1c      	ldr	r2, [pc, #112]	; (80005d0 <StartVisualTask+0x98>)
 800055e:	4293      	cmp	r3, r2
 8000560:	da0d      	bge.n	800057e <StartVisualTask+0x46>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000562:	2390      	movs	r3, #144	; 0x90
 8000564:	05db      	lsls	r3, r3, #23
 8000566:	2201      	movs	r2, #1
 8000568:	2110      	movs	r1, #16
 800056a:	0018      	movs	r0, r3
 800056c:	f000 fc26 	bl	8000dbc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000570:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <StartVisualTask+0x9c>)
 8000572:	2200      	movs	r2, #0
 8000574:	2101      	movs	r1, #1
 8000576:	0018      	movs	r0, r3
 8000578:	f000 fc20 	bl	8000dbc <HAL_GPIO_WritePin>
 800057c:	e022      	b.n	80005c4 <StartVisualTask+0x8c>
			} else if (msg < 1000) {
 800057e:	230e      	movs	r3, #14
 8000580:	18fb      	adds	r3, r7, r3
 8000582:	2200      	movs	r2, #0
 8000584:	5e9a      	ldrsh	r2, [r3, r2]
 8000586:	23fa      	movs	r3, #250	; 0xfa
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	429a      	cmp	r2, r3
 800058c:	da0d      	bge.n	80005aa <StartVisualTask+0x72>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800058e:	2390      	movs	r3, #144	; 0x90
 8000590:	05db      	lsls	r3, r3, #23
 8000592:	2200      	movs	r2, #0
 8000594:	2110      	movs	r1, #16
 8000596:	0018      	movs	r0, r3
 8000598:	f000 fc10 	bl	8000dbc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800059c:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <StartVisualTask+0x9c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	2101      	movs	r1, #1
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 fc0a 	bl	8000dbc <HAL_GPIO_WritePin>
 80005a8:	e00c      	b.n	80005c4 <StartVisualTask+0x8c>
			} else {
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80005aa:	2390      	movs	r3, #144	; 0x90
 80005ac:	05db      	lsls	r3, r3, #23
 80005ae:	2200      	movs	r2, #0
 80005b0:	2110      	movs	r1, #16
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 fc02 	bl	8000dbc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <StartVisualTask+0x9c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	2101      	movs	r1, #1
 80005be:	0018      	movs	r0, r3
 80005c0:	f000 fbfc 	bl	8000dbc <HAL_GPIO_WritePin>
			}

		}


		osDelay(1);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f001 fecf 	bl	8002368 <osDelay>
  {
 80005ca:	e7b9      	b.n	8000540 <StartVisualTask+0x8>
 80005cc:	20000310 	.word	0x20000310
 80005d0:	fffffc18 	.word	0xfffffc18
 80005d4:	48000400 	.word	0x48000400

080005d8 <StartAcceleroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAcceleroTask */
void StartAcceleroTask(void const * argument)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	int16_t msg;

	msg = -5000;
 80005e0:	210e      	movs	r1, #14
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	4a20      	ldr	r2, [pc, #128]	; (8000668 <StartAcceleroTask+0x90>)
 80005e6:	801a      	strh	r2, [r3, #0]
	xQueueSend(xVisualQueueHandle, &msg, 0);
 80005e8:	4b20      	ldr	r3, [pc, #128]	; (800066c <StartAcceleroTask+0x94>)
 80005ea:	6818      	ldr	r0, [r3, #0]
 80005ec:	000c      	movs	r4, r1
 80005ee:	1879      	adds	r1, r7, r1
 80005f0:	2300      	movs	r3, #0
 80005f2:	2200      	movs	r2, #0
 80005f4:	f002 f894 	bl	8002720 <xQueueGenericSend>
	osDelay(300);
 80005f8:	2396      	movs	r3, #150	; 0x96
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 feb3 	bl	8002368 <osDelay>

	msg = 0;
 8000602:	0021      	movs	r1, r4
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2200      	movs	r2, #0
 8000608:	801a      	strh	r2, [r3, #0]
	xQueueSend(xVisualQueueHandle, &msg, 0);
 800060a:	4b18      	ldr	r3, [pc, #96]	; (800066c <StartAcceleroTask+0x94>)
 800060c:	6818      	ldr	r0, [r3, #0]
 800060e:	000c      	movs	r4, r1
 8000610:	1879      	adds	r1, r7, r1
 8000612:	2300      	movs	r3, #0
 8000614:	2200      	movs	r2, #0
 8000616:	f002 f883 	bl	8002720 <xQueueGenericSend>
	osDelay(300);
 800061a:	2396      	movs	r3, #150	; 0x96
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	0018      	movs	r0, r3
 8000620:	f001 fea2 	bl	8002368 <osDelay>

	msg = 5000;
 8000624:	0021      	movs	r1, r4
 8000626:	187b      	adds	r3, r7, r1
 8000628:	4a11      	ldr	r2, [pc, #68]	; (8000670 <StartAcceleroTask+0x98>)
 800062a:	801a      	strh	r2, [r3, #0]
	xQueueSend(xVisualQueueHandle, &msg, 0);
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <StartAcceleroTask+0x94>)
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	000c      	movs	r4, r1
 8000632:	1879      	adds	r1, r7, r1
 8000634:	2300      	movs	r3, #0
 8000636:	2200      	movs	r2, #0
 8000638:	f002 f872 	bl	8002720 <xQueueGenericSend>
	osDelay(300);
 800063c:	2396      	movs	r3, #150	; 0x96
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	0018      	movs	r0, r3
 8000642:	f001 fe91 	bl	8002368 <osDelay>

	msg = 0;
 8000646:	0021      	movs	r1, r4
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2200      	movs	r2, #0
 800064c:	801a      	strh	r2, [r3, #0]
	xQueueSend(xVisualQueueHandle, &msg, 0);
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <StartAcceleroTask+0x94>)
 8000650:	6818      	ldr	r0, [r3, #0]
 8000652:	1879      	adds	r1, r7, r1
 8000654:	2300      	movs	r3, #0
 8000656:	2200      	movs	r2, #0
 8000658:	f002 f862 	bl	8002720 <xQueueGenericSend>
	osDelay(300);
 800065c:	2396      	movs	r3, #150	; 0x96
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fe81 	bl	8002368 <osDelay>
  {
 8000666:	e7bb      	b.n	80005e0 <StartAcceleroTask+0x8>
 8000668:	ffffec78 	.word	0xffffec78
 800066c:	20000310 	.word	0x20000310
 8000670:	00001388 	.word	0x00001388

08000674 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d101      	bne.n	800068a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000686:	f000 f95f 	bl	8000948 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b002      	add	sp, #8
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	40002000 	.word	0x40002000

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <Error_Handler+0x8>
	...

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_MspInit+0x50>)
 80006ac:	699a      	ldr	r2, [r3, #24]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <HAL_MspInit+0x50>)
 80006b0:	2101      	movs	r1, #1
 80006b2:	430a      	orrs	r2, r1
 80006b4:	619a      	str	r2, [r3, #24]
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <HAL_MspInit+0x50>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	2201      	movs	r2, #1
 80006bc:	4013      	ands	r3, r2
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <HAL_MspInit+0x50>)
 80006c4:	69da      	ldr	r2, [r3, #28]
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <HAL_MspInit+0x50>)
 80006c8:	2180      	movs	r1, #128	; 0x80
 80006ca:	0549      	lsls	r1, r1, #21
 80006cc:	430a      	orrs	r2, r1
 80006ce:	61da      	str	r2, [r3, #28]
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <HAL_MspInit+0x50>)
 80006d2:	69da      	ldr	r2, [r3, #28]
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	055b      	lsls	r3, r3, #21
 80006d8:	4013      	ands	r3, r2
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80006de:	2302      	movs	r3, #2
 80006e0:	425b      	negs	r3, r3
 80006e2:	2200      	movs	r2, #0
 80006e4:	2103      	movs	r1, #3
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f9d2 	bl	8000a90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b002      	add	sp, #8
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000

080006f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b08b      	sub	sp, #44	; 0x2c
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	2414      	movs	r4, #20
 8000702:	193b      	adds	r3, r7, r4
 8000704:	0018      	movs	r0, r3
 8000706:	2314      	movs	r3, #20
 8000708:	001a      	movs	r2, r3
 800070a:	2100      	movs	r1, #0
 800070c:	f003 fb76 	bl	8003dfc <memset>
  if(huart->Instance==USART2)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a1c      	ldr	r2, [pc, #112]	; (8000788 <HAL_UART_MspInit+0x90>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d132      	bne.n	8000780 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <HAL_UART_MspInit+0x94>)
 800071c:	69da      	ldr	r2, [r3, #28]
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <HAL_UART_MspInit+0x94>)
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	0289      	lsls	r1, r1, #10
 8000724:	430a      	orrs	r2, r1
 8000726:	61da      	str	r2, [r3, #28]
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <HAL_UART_MspInit+0x94>)
 800072a:	69da      	ldr	r2, [r3, #28]
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	029b      	lsls	r3, r3, #10
 8000730:	4013      	ands	r3, r2
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <HAL_UART_MspInit+0x94>)
 8000738:	695a      	ldr	r2, [r3, #20]
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <HAL_UART_MspInit+0x94>)
 800073c:	2180      	movs	r1, #128	; 0x80
 800073e:	0289      	lsls	r1, r1, #10
 8000740:	430a      	orrs	r2, r1
 8000742:	615a      	str	r2, [r3, #20]
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <HAL_UART_MspInit+0x94>)
 8000746:	695a      	ldr	r2, [r3, #20]
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	029b      	lsls	r3, r3, #10
 800074c:	4013      	ands	r3, r2
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000752:	0021      	movs	r1, r4
 8000754:	187b      	adds	r3, r7, r1
 8000756:	220c      	movs	r2, #12
 8000758:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2202      	movs	r2, #2
 800075e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2201      	movs	r2, #1
 8000770:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	187a      	adds	r2, r7, r1
 8000774:	2390      	movs	r3, #144	; 0x90
 8000776:	05db      	lsls	r3, r3, #23
 8000778:	0011      	movs	r1, r2
 800077a:	0018      	movs	r0, r3
 800077c:	f000 f9ae 	bl	8000adc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	b00b      	add	sp, #44	; 0x2c
 8000786:	bd90      	pop	{r4, r7, pc}
 8000788:	40004400 	.word	0x40004400
 800078c:	40021000 	.word	0x40021000

08000790 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000790:	b5b0      	push	{r4, r5, r7, lr}
 8000792:	b08c      	sub	sp, #48	; 0x30
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80007a0:	4b38      	ldr	r3, [pc, #224]	; (8000884 <HAL_InitTick+0xf4>)
 80007a2:	69da      	ldr	r2, [r3, #28]
 80007a4:	4b37      	ldr	r3, [pc, #220]	; (8000884 <HAL_InitTick+0xf4>)
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	0049      	lsls	r1, r1, #1
 80007aa:	430a      	orrs	r2, r1
 80007ac:	61da      	str	r2, [r3, #28]
 80007ae:	4b35      	ldr	r3, [pc, #212]	; (8000884 <HAL_InitTick+0xf4>)
 80007b0:	69da      	ldr	r2, [r3, #28]
 80007b2:	2380      	movs	r3, #128	; 0x80
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	4013      	ands	r3, r2
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007bc:	230c      	movs	r3, #12
 80007be:	18fa      	adds	r2, r7, r3
 80007c0:	2410      	movs	r4, #16
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	0011      	movs	r1, r2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 ff82 	bl	80016d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d104      	bne.n	80007e2 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007d8:	f000 ff64 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
 80007dc:	0003      	movs	r3, r0
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007e0:	e004      	b.n	80007ec <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007e2:	f000 ff5f 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
 80007e6:	0003      	movs	r3, r0
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ee:	4926      	ldr	r1, [pc, #152]	; (8000888 <HAL_InitTick+0xf8>)
 80007f0:	0018      	movs	r0, r3
 80007f2:	f7ff fc89 	bl	8000108 <__udivsi3>
 80007f6:	0003      	movs	r3, r0
 80007f8:	3b01      	subs	r3, #1
 80007fa:	623b      	str	r3, [r7, #32]

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80007fc:	4b23      	ldr	r3, [pc, #140]	; (800088c <HAL_InitTick+0xfc>)
 80007fe:	4a24      	ldr	r2, [pc, #144]	; (8000890 <HAL_InitTick+0x100>)
 8000800:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <HAL_InitTick+0xfc>)
 8000804:	4a23      	ldr	r2, [pc, #140]	; (8000894 <HAL_InitTick+0x104>)
 8000806:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <HAL_InitTick+0xfc>)
 800080a:	6a3a      	ldr	r2, [r7, #32]
 800080c:	605a      	str	r2, [r3, #4]
  htim14.Init.ClockDivision = 0;
 800080e:	4b1f      	ldr	r3, [pc, #124]	; (800088c <HAL_InitTick+0xfc>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000814:	4b1d      	ldr	r3, [pc, #116]	; (800088c <HAL_InitTick+0xfc>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <HAL_InitTick+0xfc>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000820:	252b      	movs	r5, #43	; 0x2b
 8000822:	197c      	adds	r4, r7, r5
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <HAL_InitTick+0xfc>)
 8000826:	0018      	movs	r0, r3
 8000828:	f000 ff7c 	bl	8001724 <HAL_TIM_Base_Init>
 800082c:	0003      	movs	r3, r0
 800082e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000830:	197b      	adds	r3, r7, r5
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d11e      	bne.n	8000876 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000838:	197c      	adds	r4, r7, r5
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <HAL_InitTick+0xfc>)
 800083c:	0018      	movs	r0, r3
 800083e:	f000 ffc9 	bl	80017d4 <HAL_TIM_Base_Start_IT>
 8000842:	0003      	movs	r3, r0
 8000844:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000846:	197b      	adds	r3, r7, r5
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d113      	bne.n	8000876 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800084e:	2013      	movs	r0, #19
 8000850:	f000 f933 	bl	8000aba <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b03      	cmp	r3, #3
 8000858:	d809      	bhi.n	800086e <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM14_IRQn, TickPriority, 0U);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2200      	movs	r2, #0
 800085e:	0019      	movs	r1, r3
 8000860:	2013      	movs	r0, #19
 8000862:	f000 f915 	bl	8000a90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_InitTick+0x108>)
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	e003      	b.n	8000876 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 800086e:	232b      	movs	r3, #43	; 0x2b
 8000870:	18fb      	adds	r3, r7, r3
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000876:	232b      	movs	r3, #43	; 0x2b
 8000878:	18fb      	adds	r3, r7, r3
 800087a:	781b      	ldrb	r3, [r3, #0]
}
 800087c:	0018      	movs	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	b00c      	add	sp, #48	; 0x30
 8000882:	bdb0      	pop	{r4, r5, r7, pc}
 8000884:	40021000 	.word	0x40021000
 8000888:	000f4240 	.word	0x000f4240
 800088c:	20000314 	.word	0x20000314
 8000890:	40002000 	.word	0x40002000
 8000894:	000003e7 	.word	0x000003e7
 8000898:	20000004 	.word	0x20000004

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <NMI_Handler+0x4>

080008a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <HardFault_Handler+0x4>

080008a8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <TIM14_IRQHandler+0x14>)
 80008ae:	0018      	movs	r0, r3
 80008b0:	f000 ffdc 	bl	800186c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	20000314 	.word	0x20000314

080008c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <LoopForever+0x6>)
  ldr r1, =_edata
 80008d2:	490e      	ldr	r1, [pc, #56]	; (800090c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d4:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <LoopForever+0xe>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e8:	4c0b      	ldr	r4, [pc, #44]	; (8000918 <LoopForever+0x16>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008f6:	f7ff ffe3 	bl	80008c0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80008fa:	f003 fa87 	bl	8003e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008fe:	f7ff fca7 	bl	8000250 <main>

08000902 <LoopForever>:

LoopForever:
    b LoopForever
 8000902:	e7fe      	b.n	8000902 <LoopForever>
  ldr   r0, =_estack
 8000904:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800090c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000910:	08003f54 	.word	0x08003f54
  ldr r2, =_sbss
 8000914:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000918:	200010a4 	.word	0x200010a4

0800091c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800091c:	e7fe      	b.n	800091c <ADC1_IRQHandler>
	...

08000920 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <HAL_Init+0x24>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_Init+0x24>)
 800092a:	2110      	movs	r1, #16
 800092c:	430a      	orrs	r2, r1
 800092e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000930:	2003      	movs	r0, #3
 8000932:	f7ff ff2d 	bl	8000790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000936:	f7ff feb5 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800093a:	2300      	movs	r3, #0
}
 800093c:	0018      	movs	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	40022000 	.word	0x40022000

08000948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_IncTick+0x1c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	001a      	movs	r2, r3
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_IncTick+0x20>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	18d2      	adds	r2, r2, r3
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <HAL_IncTick+0x20>)
 800095a:	601a      	str	r2, [r3, #0]
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	20000008 	.word	0x20000008
 8000968:	2000035c 	.word	0x2000035c

0800096c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  return uwTick;
 8000970:	4b02      	ldr	r3, [pc, #8]	; (800097c <HAL_GetTick+0x10>)
 8000972:	681b      	ldr	r3, [r3, #0]
}
 8000974:	0018      	movs	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	2000035c 	.word	0x2000035c

08000980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	0002      	movs	r2, r0
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b7f      	cmp	r3, #127	; 0x7f
 8000992:	d809      	bhi.n	80009a8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000994:	1dfb      	adds	r3, r7, #7
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	001a      	movs	r2, r3
 800099a:	231f      	movs	r3, #31
 800099c:	401a      	ands	r2, r3
 800099e:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <__NVIC_EnableIRQ+0x30>)
 80009a0:	2101      	movs	r1, #1
 80009a2:	4091      	lsls	r1, r2
 80009a4:	000a      	movs	r2, r1
 80009a6:	601a      	str	r2, [r3, #0]
  }
}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b002      	add	sp, #8
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	e000e100 	.word	0xe000e100

080009b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	0002      	movs	r2, r0
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b7f      	cmp	r3, #127	; 0x7f
 80009c8:	d828      	bhi.n	8000a1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ca:	4a2f      	ldr	r2, [pc, #188]	; (8000a88 <__NVIC_SetPriority+0xd4>)
 80009cc:	1dfb      	adds	r3, r7, #7
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b25b      	sxtb	r3, r3
 80009d2:	089b      	lsrs	r3, r3, #2
 80009d4:	33c0      	adds	r3, #192	; 0xc0
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	589b      	ldr	r3, [r3, r2]
 80009da:	1dfa      	adds	r2, r7, #7
 80009dc:	7812      	ldrb	r2, [r2, #0]
 80009de:	0011      	movs	r1, r2
 80009e0:	2203      	movs	r2, #3
 80009e2:	400a      	ands	r2, r1
 80009e4:	00d2      	lsls	r2, r2, #3
 80009e6:	21ff      	movs	r1, #255	; 0xff
 80009e8:	4091      	lsls	r1, r2
 80009ea:	000a      	movs	r2, r1
 80009ec:	43d2      	mvns	r2, r2
 80009ee:	401a      	ands	r2, r3
 80009f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	019b      	lsls	r3, r3, #6
 80009f6:	22ff      	movs	r2, #255	; 0xff
 80009f8:	401a      	ands	r2, r3
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	0018      	movs	r0, r3
 8000a00:	2303      	movs	r3, #3
 8000a02:	4003      	ands	r3, r0
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a08:	481f      	ldr	r0, [pc, #124]	; (8000a88 <__NVIC_SetPriority+0xd4>)
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	b25b      	sxtb	r3, r3
 8000a10:	089b      	lsrs	r3, r3, #2
 8000a12:	430a      	orrs	r2, r1
 8000a14:	33c0      	adds	r3, #192	; 0xc0
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a1a:	e031      	b.n	8000a80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a1c:	4a1b      	ldr	r2, [pc, #108]	; (8000a8c <__NVIC_SetPriority+0xd8>)
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	0019      	movs	r1, r3
 8000a24:	230f      	movs	r3, #15
 8000a26:	400b      	ands	r3, r1
 8000a28:	3b08      	subs	r3, #8
 8000a2a:	089b      	lsrs	r3, r3, #2
 8000a2c:	3306      	adds	r3, #6
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	18d3      	adds	r3, r2, r3
 8000a32:	3304      	adds	r3, #4
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	1dfa      	adds	r2, r7, #7
 8000a38:	7812      	ldrb	r2, [r2, #0]
 8000a3a:	0011      	movs	r1, r2
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	400a      	ands	r2, r1
 8000a40:	00d2      	lsls	r2, r2, #3
 8000a42:	21ff      	movs	r1, #255	; 0xff
 8000a44:	4091      	lsls	r1, r2
 8000a46:	000a      	movs	r2, r1
 8000a48:	43d2      	mvns	r2, r2
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	019b      	lsls	r3, r3, #6
 8000a52:	22ff      	movs	r2, #255	; 0xff
 8000a54:	401a      	ands	r2, r3
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	4003      	ands	r3, r0
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a64:	4809      	ldr	r0, [pc, #36]	; (8000a8c <__NVIC_SetPriority+0xd8>)
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	001c      	movs	r4, r3
 8000a6c:	230f      	movs	r3, #15
 8000a6e:	4023      	ands	r3, r4
 8000a70:	3b08      	subs	r3, #8
 8000a72:	089b      	lsrs	r3, r3, #2
 8000a74:	430a      	orrs	r2, r1
 8000a76:	3306      	adds	r3, #6
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	18c3      	adds	r3, r0, r3
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	601a      	str	r2, [r3, #0]
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b003      	add	sp, #12
 8000a86:	bd90      	pop	{r4, r7, pc}
 8000a88:	e000e100 	.word	0xe000e100
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
 8000a9a:	210f      	movs	r1, #15
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	1c02      	adds	r2, r0, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000aa2:	68ba      	ldr	r2, [r7, #8]
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b25b      	sxtb	r3, r3
 8000aaa:	0011      	movs	r1, r2
 8000aac:	0018      	movs	r0, r3
 8000aae:	f7ff ff81 	bl	80009b4 <__NVIC_SetPriority>
}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b004      	add	sp, #16
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	0002      	movs	r2, r0
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	b25b      	sxtb	r3, r3
 8000acc:	0018      	movs	r0, r3
 8000ace:	f7ff ff57 	bl	8000980 <__NVIC_EnableIRQ>
}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b002      	add	sp, #8
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aea:	e14f      	b.n	8000d8c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2101      	movs	r1, #1
 8000af2:	697a      	ldr	r2, [r7, #20]
 8000af4:	4091      	lsls	r1, r2
 8000af6:	000a      	movs	r2, r1
 8000af8:	4013      	ands	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d100      	bne.n	8000b04 <HAL_GPIO_Init+0x28>
 8000b02:	e140      	b.n	8000d86 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	2203      	movs	r2, #3
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d005      	beq.n	8000b1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2203      	movs	r2, #3
 8000b16:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d130      	bne.n	8000b7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	2203      	movs	r2, #3
 8000b28:	409a      	lsls	r2, r3
 8000b2a:	0013      	movs	r3, r2
 8000b2c:	43da      	mvns	r2, r3
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	409a      	lsls	r2, r3
 8000b3e:	0013      	movs	r3, r2
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b52:	2201      	movs	r2, #1
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	409a      	lsls	r2, r3
 8000b58:	0013      	movs	r3, r2
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	091b      	lsrs	r3, r3, #4
 8000b68:	2201      	movs	r2, #1
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	409a      	lsls	r2, r3
 8000b70:	0013      	movs	r3, r2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	2203      	movs	r2, #3
 8000b84:	4013      	ands	r3, r2
 8000b86:	2b03      	cmp	r3, #3
 8000b88:	d017      	beq.n	8000bba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	2203      	movs	r2, #3
 8000b96:	409a      	lsls	r2, r3
 8000b98:	0013      	movs	r3, r2
 8000b9a:	43da      	mvns	r2, r3
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	689a      	ldr	r2, [r3, #8]
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	409a      	lsls	r2, r3
 8000bac:	0013      	movs	r3, r2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d123      	bne.n	8000c0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	08da      	lsrs	r2, r3, #3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3208      	adds	r2, #8
 8000bce:	0092      	lsls	r2, r2, #2
 8000bd0:	58d3      	ldr	r3, [r2, r3]
 8000bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	2207      	movs	r2, #7
 8000bd8:	4013      	ands	r3, r2
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	220f      	movs	r2, #15
 8000bde:	409a      	lsls	r2, r3
 8000be0:	0013      	movs	r3, r2
 8000be2:	43da      	mvns	r2, r3
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	691a      	ldr	r2, [r3, #16]
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	2107      	movs	r1, #7
 8000bf2:	400b      	ands	r3, r1
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	409a      	lsls	r2, r3
 8000bf8:	0013      	movs	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	08da      	lsrs	r2, r3, #3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3208      	adds	r2, #8
 8000c08:	0092      	lsls	r2, r2, #2
 8000c0a:	6939      	ldr	r1, [r7, #16]
 8000c0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	2203      	movs	r2, #3
 8000c1a:	409a      	lsls	r2, r3
 8000c1c:	0013      	movs	r3, r2
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	409a      	lsls	r2, r3
 8000c34:	0013      	movs	r3, r2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	23c0      	movs	r3, #192	; 0xc0
 8000c48:	029b      	lsls	r3, r3, #10
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	d100      	bne.n	8000c50 <HAL_GPIO_Init+0x174>
 8000c4e:	e09a      	b.n	8000d86 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c50:	4b54      	ldr	r3, [pc, #336]	; (8000da4 <HAL_GPIO_Init+0x2c8>)
 8000c52:	699a      	ldr	r2, [r3, #24]
 8000c54:	4b53      	ldr	r3, [pc, #332]	; (8000da4 <HAL_GPIO_Init+0x2c8>)
 8000c56:	2101      	movs	r1, #1
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	619a      	str	r2, [r3, #24]
 8000c5c:	4b51      	ldr	r3, [pc, #324]	; (8000da4 <HAL_GPIO_Init+0x2c8>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	2201      	movs	r2, #1
 8000c62:	4013      	ands	r3, r2
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c68:	4a4f      	ldr	r2, [pc, #316]	; (8000da8 <HAL_GPIO_Init+0x2cc>)
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	089b      	lsrs	r3, r3, #2
 8000c6e:	3302      	adds	r3, #2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	589b      	ldr	r3, [r3, r2]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	2203      	movs	r2, #3
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	220f      	movs	r2, #15
 8000c80:	409a      	lsls	r2, r3
 8000c82:	0013      	movs	r3, r2
 8000c84:	43da      	mvns	r2, r3
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	2390      	movs	r3, #144	; 0x90
 8000c90:	05db      	lsls	r3, r3, #23
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d013      	beq.n	8000cbe <HAL_GPIO_Init+0x1e2>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a44      	ldr	r2, [pc, #272]	; (8000dac <HAL_GPIO_Init+0x2d0>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d00d      	beq.n	8000cba <HAL_GPIO_Init+0x1de>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a43      	ldr	r2, [pc, #268]	; (8000db0 <HAL_GPIO_Init+0x2d4>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d007      	beq.n	8000cb6 <HAL_GPIO_Init+0x1da>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a42      	ldr	r2, [pc, #264]	; (8000db4 <HAL_GPIO_Init+0x2d8>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d101      	bne.n	8000cb2 <HAL_GPIO_Init+0x1d6>
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e006      	b.n	8000cc0 <HAL_GPIO_Init+0x1e4>
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	e004      	b.n	8000cc0 <HAL_GPIO_Init+0x1e4>
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	e002      	b.n	8000cc0 <HAL_GPIO_Init+0x1e4>
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e000      	b.n	8000cc0 <HAL_GPIO_Init+0x1e4>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	2103      	movs	r1, #3
 8000cc4:	400a      	ands	r2, r1
 8000cc6:	0092      	lsls	r2, r2, #2
 8000cc8:	4093      	lsls	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cd0:	4935      	ldr	r1, [pc, #212]	; (8000da8 <HAL_GPIO_Init+0x2cc>)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	089b      	lsrs	r3, r3, #2
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cde:	4b36      	ldr	r3, [pc, #216]	; (8000db8 <HAL_GPIO_Init+0x2dc>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	025b      	lsls	r3, r3, #9
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	d003      	beq.n	8000d02 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d02:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <HAL_GPIO_Init+0x2dc>)
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000d08:	4b2b      	ldr	r3, [pc, #172]	; (8000db8 <HAL_GPIO_Init+0x2dc>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	43da      	mvns	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	029b      	lsls	r3, r3, #10
 8000d20:	4013      	ands	r3, r2
 8000d22:	d003      	beq.n	8000d2c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <HAL_GPIO_Init+0x2dc>)
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d32:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <HAL_GPIO_Init+0x2dc>)
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	035b      	lsls	r3, r3, #13
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	d003      	beq.n	8000d56 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <HAL_GPIO_Init+0x2dc>)
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d5c:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <HAL_GPIO_Init+0x2dc>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	43da      	mvns	r2, r3
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	039b      	lsls	r3, r3, #14
 8000d74:	4013      	ands	r3, r2
 8000d76:	d003      	beq.n	8000d80 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <HAL_GPIO_Init+0x2dc>)
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	40da      	lsrs	r2, r3
 8000d94:	1e13      	subs	r3, r2, #0
 8000d96:	d000      	beq.n	8000d9a <HAL_GPIO_Init+0x2be>
 8000d98:	e6a8      	b.n	8000aec <HAL_GPIO_Init+0x10>
  } 
}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b006      	add	sp, #24
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40010000 	.word	0x40010000
 8000dac:	48000400 	.word	0x48000400
 8000db0:	48000800 	.word	0x48000800
 8000db4:	48000c00 	.word	0x48000c00
 8000db8:	40010400 	.word	0x40010400

08000dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	0008      	movs	r0, r1
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	1cbb      	adds	r3, r7, #2
 8000dca:	1c02      	adds	r2, r0, #0
 8000dcc:	801a      	strh	r2, [r3, #0]
 8000dce:	1c7b      	adds	r3, r7, #1
 8000dd0:	1c0a      	adds	r2, r1, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dd4:	1c7b      	adds	r3, r7, #1
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d004      	beq.n	8000de6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ddc:	1cbb      	adds	r3, r7, #2
 8000dde:	881a      	ldrh	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000de4:	e003      	b.n	8000dee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000de6:	1cbb      	adds	r3, r7, #2
 8000de8:	881a      	ldrh	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b002      	add	sp, #8
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e301      	b.n	800140e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4013      	ands	r3, r2
 8000e12:	d100      	bne.n	8000e16 <HAL_RCC_OscConfig+0x1e>
 8000e14:	e08d      	b.n	8000f32 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e16:	4bc3      	ldr	r3, [pc, #780]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	d00e      	beq.n	8000e40 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e22:	4bc0      	ldr	r3, [pc, #768]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	220c      	movs	r2, #12
 8000e28:	4013      	ands	r3, r2
 8000e2a:	2b08      	cmp	r3, #8
 8000e2c:	d116      	bne.n	8000e5c <HAL_RCC_OscConfig+0x64>
 8000e2e:	4bbd      	ldr	r3, [pc, #756]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	2380      	movs	r3, #128	; 0x80
 8000e34:	025b      	lsls	r3, r3, #9
 8000e36:	401a      	ands	r2, r3
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	025b      	lsls	r3, r3, #9
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d10d      	bne.n	8000e5c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e40:	4bb8      	ldr	r3, [pc, #736]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	029b      	lsls	r3, r3, #10
 8000e48:	4013      	ands	r3, r2
 8000e4a:	d100      	bne.n	8000e4e <HAL_RCC_OscConfig+0x56>
 8000e4c:	e070      	b.n	8000f30 <HAL_RCC_OscConfig+0x138>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d000      	beq.n	8000e58 <HAL_RCC_OscConfig+0x60>
 8000e56:	e06b      	b.n	8000f30 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e2d8      	b.n	800140e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d107      	bne.n	8000e74 <HAL_RCC_OscConfig+0x7c>
 8000e64:	4baf      	ldr	r3, [pc, #700]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4bae      	ldr	r3, [pc, #696]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000e6a:	2180      	movs	r1, #128	; 0x80
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e02f      	b.n	8000ed4 <HAL_RCC_OscConfig+0xdc>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d10c      	bne.n	8000e96 <HAL_RCC_OscConfig+0x9e>
 8000e7c:	4ba9      	ldr	r3, [pc, #676]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4ba8      	ldr	r3, [pc, #672]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000e82:	49a9      	ldr	r1, [pc, #676]	; (8001128 <HAL_RCC_OscConfig+0x330>)
 8000e84:	400a      	ands	r2, r1
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	4ba6      	ldr	r3, [pc, #664]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4ba5      	ldr	r3, [pc, #660]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000e8e:	49a7      	ldr	r1, [pc, #668]	; (800112c <HAL_RCC_OscConfig+0x334>)
 8000e90:	400a      	ands	r2, r1
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	e01e      	b.n	8000ed4 <HAL_RCC_OscConfig+0xdc>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b05      	cmp	r3, #5
 8000e9c:	d10e      	bne.n	8000ebc <HAL_RCC_OscConfig+0xc4>
 8000e9e:	4ba1      	ldr	r3, [pc, #644]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4ba0      	ldr	r3, [pc, #640]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000ea4:	2180      	movs	r1, #128	; 0x80
 8000ea6:	02c9      	lsls	r1, r1, #11
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	4b9d      	ldr	r3, [pc, #628]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b9c      	ldr	r3, [pc, #624]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000eb2:	2180      	movs	r1, #128	; 0x80
 8000eb4:	0249      	lsls	r1, r1, #9
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	e00b      	b.n	8000ed4 <HAL_RCC_OscConfig+0xdc>
 8000ebc:	4b99      	ldr	r3, [pc, #612]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b98      	ldr	r3, [pc, #608]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000ec2:	4999      	ldr	r1, [pc, #612]	; (8001128 <HAL_RCC_OscConfig+0x330>)
 8000ec4:	400a      	ands	r2, r1
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	4b96      	ldr	r3, [pc, #600]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b95      	ldr	r3, [pc, #596]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000ece:	4997      	ldr	r1, [pc, #604]	; (800112c <HAL_RCC_OscConfig+0x334>)
 8000ed0:	400a      	ands	r2, r1
 8000ed2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d014      	beq.n	8000f06 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000edc:	f7ff fd46 	bl	800096c <HAL_GetTick>
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee4:	e008      	b.n	8000ef8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ee6:	f7ff fd41 	bl	800096c <HAL_GetTick>
 8000eea:	0002      	movs	r2, r0
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b64      	cmp	r3, #100	; 0x64
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e28a      	b.n	800140e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef8:	4b8a      	ldr	r3, [pc, #552]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	029b      	lsls	r3, r3, #10
 8000f00:	4013      	ands	r3, r2
 8000f02:	d0f0      	beq.n	8000ee6 <HAL_RCC_OscConfig+0xee>
 8000f04:	e015      	b.n	8000f32 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f06:	f7ff fd31 	bl	800096c <HAL_GetTick>
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f10:	f7ff fd2c 	bl	800096c <HAL_GetTick>
 8000f14:	0002      	movs	r2, r0
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b64      	cmp	r3, #100	; 0x64
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e275      	b.n	800140e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f22:	4b80      	ldr	r3, [pc, #512]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	2380      	movs	r3, #128	; 0x80
 8000f28:	029b      	lsls	r3, r3, #10
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d1f0      	bne.n	8000f10 <HAL_RCC_OscConfig+0x118>
 8000f2e:	e000      	b.n	8000f32 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f30:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2202      	movs	r2, #2
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d100      	bne.n	8000f3e <HAL_RCC_OscConfig+0x146>
 8000f3c:	e069      	b.n	8001012 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f3e:	4b79      	ldr	r3, [pc, #484]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	220c      	movs	r2, #12
 8000f44:	4013      	ands	r3, r2
 8000f46:	d00b      	beq.n	8000f60 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f48:	4b76      	ldr	r3, [pc, #472]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	220c      	movs	r2, #12
 8000f4e:	4013      	ands	r3, r2
 8000f50:	2b08      	cmp	r3, #8
 8000f52:	d11c      	bne.n	8000f8e <HAL_RCC_OscConfig+0x196>
 8000f54:	4b73      	ldr	r3, [pc, #460]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	2380      	movs	r3, #128	; 0x80
 8000f5a:	025b      	lsls	r3, r3, #9
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d116      	bne.n	8000f8e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f60:	4b70      	ldr	r3, [pc, #448]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2202      	movs	r2, #2
 8000f66:	4013      	ands	r3, r2
 8000f68:	d005      	beq.n	8000f76 <HAL_RCC_OscConfig+0x17e>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d001      	beq.n	8000f76 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e24b      	b.n	800140e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f76:	4b6b      	ldr	r3, [pc, #428]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	22f8      	movs	r2, #248	; 0xf8
 8000f7c:	4393      	bics	r3, r2
 8000f7e:	0019      	movs	r1, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	00da      	lsls	r2, r3, #3
 8000f86:	4b67      	ldr	r3, [pc, #412]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f8c:	e041      	b.n	8001012 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d024      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f96:	4b63      	ldr	r3, [pc, #396]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b62      	ldr	r3, [pc, #392]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa2:	f7ff fce3 	bl	800096c <HAL_GetTick>
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fac:	f7ff fcde 	bl	800096c <HAL_GetTick>
 8000fb0:	0002      	movs	r2, r0
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e227      	b.n	800140e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fbe:	4b59      	ldr	r3, [pc, #356]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d0f1      	beq.n	8000fac <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc8:	4b56      	ldr	r3, [pc, #344]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	22f8      	movs	r2, #248	; 0xf8
 8000fce:	4393      	bics	r3, r2
 8000fd0:	0019      	movs	r1, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	00da      	lsls	r2, r3, #3
 8000fd8:	4b52      	ldr	r3, [pc, #328]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e018      	b.n	8001012 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fe0:	4b50      	ldr	r3, [pc, #320]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b4f      	ldr	r3, [pc, #316]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	438a      	bics	r2, r1
 8000fea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fcbe 	bl	800096c <HAL_GetTick>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ff6:	f7ff fcb9 	bl	800096c <HAL_GetTick>
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e202      	b.n	800140e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001008:	4b46      	ldr	r3, [pc, #280]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2202      	movs	r2, #2
 800100e:	4013      	ands	r3, r2
 8001010:	d1f1      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2208      	movs	r2, #8
 8001018:	4013      	ands	r3, r2
 800101a:	d036      	beq.n	800108a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d019      	beq.n	8001058 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001024:	4b3f      	ldr	r3, [pc, #252]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8001026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001028:	4b3e      	ldr	r3, [pc, #248]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 800102a:	2101      	movs	r1, #1
 800102c:	430a      	orrs	r2, r1
 800102e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001030:	f7ff fc9c 	bl	800096c <HAL_GetTick>
 8001034:	0003      	movs	r3, r0
 8001036:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800103a:	f7ff fc97 	bl	800096c <HAL_GetTick>
 800103e:	0002      	movs	r2, r0
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e1e0      	b.n	800140e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800104c:	4b35      	ldr	r3, [pc, #212]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 800104e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001050:	2202      	movs	r2, #2
 8001052:	4013      	ands	r3, r2
 8001054:	d0f1      	beq.n	800103a <HAL_RCC_OscConfig+0x242>
 8001056:	e018      	b.n	800108a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001058:	4b32      	ldr	r3, [pc, #200]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 800105a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800105c:	4b31      	ldr	r3, [pc, #196]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 800105e:	2101      	movs	r1, #1
 8001060:	438a      	bics	r2, r1
 8001062:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001064:	f7ff fc82 	bl	800096c <HAL_GetTick>
 8001068:	0003      	movs	r3, r0
 800106a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800106e:	f7ff fc7d 	bl	800096c <HAL_GetTick>
 8001072:	0002      	movs	r2, r0
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e1c6      	b.n	800140e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001080:	4b28      	ldr	r3, [pc, #160]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	2202      	movs	r2, #2
 8001086:	4013      	ands	r3, r2
 8001088:	d1f1      	bne.n	800106e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2204      	movs	r2, #4
 8001090:	4013      	ands	r3, r2
 8001092:	d100      	bne.n	8001096 <HAL_RCC_OscConfig+0x29e>
 8001094:	e0b4      	b.n	8001200 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001096:	201f      	movs	r0, #31
 8001098:	183b      	adds	r3, r7, r0
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 80010a0:	69da      	ldr	r2, [r3, #28]
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	055b      	lsls	r3, r3, #21
 80010a6:	4013      	ands	r3, r2
 80010a8:	d110      	bne.n	80010cc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 80010ac:	69da      	ldr	r2, [r3, #28]
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	0549      	lsls	r1, r1, #21
 80010b4:	430a      	orrs	r2, r1
 80010b6:	61da      	str	r2, [r3, #28]
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 80010ba:	69da      	ldr	r2, [r3, #28]
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	055b      	lsls	r3, r3, #21
 80010c0:	4013      	ands	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010c6:	183b      	adds	r3, r7, r0
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4013      	ands	r3, r2
 80010d6:	d11a      	bne.n	800110e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 80010de:	2180      	movs	r1, #128	; 0x80
 80010e0:	0049      	lsls	r1, r1, #1
 80010e2:	430a      	orrs	r2, r1
 80010e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010e6:	f7ff fc41 	bl	800096c <HAL_GetTick>
 80010ea:	0003      	movs	r3, r0
 80010ec:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f0:	f7ff fc3c 	bl	800096c <HAL_GetTick>
 80010f4:	0002      	movs	r2, r0
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e185      	b.n	800140e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4013      	ands	r3, r2
 800110c:	d0f0      	beq.n	80010f0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d10e      	bne.n	8001134 <HAL_RCC_OscConfig+0x33c>
 8001116:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 8001118:	6a1a      	ldr	r2, [r3, #32]
 800111a:	4b02      	ldr	r3, [pc, #8]	; (8001124 <HAL_RCC_OscConfig+0x32c>)
 800111c:	2101      	movs	r1, #1
 800111e:	430a      	orrs	r2, r1
 8001120:	621a      	str	r2, [r3, #32]
 8001122:	e035      	b.n	8001190 <HAL_RCC_OscConfig+0x398>
 8001124:	40021000 	.word	0x40021000
 8001128:	fffeffff 	.word	0xfffeffff
 800112c:	fffbffff 	.word	0xfffbffff
 8001130:	40007000 	.word	0x40007000
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10c      	bne.n	8001156 <HAL_RCC_OscConfig+0x35e>
 800113c:	4bb6      	ldr	r3, [pc, #728]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 800113e:	6a1a      	ldr	r2, [r3, #32]
 8001140:	4bb5      	ldr	r3, [pc, #724]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001142:	2101      	movs	r1, #1
 8001144:	438a      	bics	r2, r1
 8001146:	621a      	str	r2, [r3, #32]
 8001148:	4bb3      	ldr	r3, [pc, #716]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 800114a:	6a1a      	ldr	r2, [r3, #32]
 800114c:	4bb2      	ldr	r3, [pc, #712]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 800114e:	2104      	movs	r1, #4
 8001150:	438a      	bics	r2, r1
 8001152:	621a      	str	r2, [r3, #32]
 8001154:	e01c      	b.n	8001190 <HAL_RCC_OscConfig+0x398>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2b05      	cmp	r3, #5
 800115c:	d10c      	bne.n	8001178 <HAL_RCC_OscConfig+0x380>
 800115e:	4bae      	ldr	r3, [pc, #696]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001160:	6a1a      	ldr	r2, [r3, #32]
 8001162:	4bad      	ldr	r3, [pc, #692]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001164:	2104      	movs	r1, #4
 8001166:	430a      	orrs	r2, r1
 8001168:	621a      	str	r2, [r3, #32]
 800116a:	4bab      	ldr	r3, [pc, #684]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 800116c:	6a1a      	ldr	r2, [r3, #32]
 800116e:	4baa      	ldr	r3, [pc, #680]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001170:	2101      	movs	r1, #1
 8001172:	430a      	orrs	r2, r1
 8001174:	621a      	str	r2, [r3, #32]
 8001176:	e00b      	b.n	8001190 <HAL_RCC_OscConfig+0x398>
 8001178:	4ba7      	ldr	r3, [pc, #668]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 800117a:	6a1a      	ldr	r2, [r3, #32]
 800117c:	4ba6      	ldr	r3, [pc, #664]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 800117e:	2101      	movs	r1, #1
 8001180:	438a      	bics	r2, r1
 8001182:	621a      	str	r2, [r3, #32]
 8001184:	4ba4      	ldr	r3, [pc, #656]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001186:	6a1a      	ldr	r2, [r3, #32]
 8001188:	4ba3      	ldr	r3, [pc, #652]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 800118a:	2104      	movs	r1, #4
 800118c:	438a      	bics	r2, r1
 800118e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d014      	beq.n	80011c2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001198:	f7ff fbe8 	bl	800096c <HAL_GetTick>
 800119c:	0003      	movs	r3, r0
 800119e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a0:	e009      	b.n	80011b6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011a2:	f7ff fbe3 	bl	800096c <HAL_GetTick>
 80011a6:	0002      	movs	r2, r0
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	4a9b      	ldr	r2, [pc, #620]	; (800141c <HAL_RCC_OscConfig+0x624>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e12b      	b.n	800140e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b6:	4b98      	ldr	r3, [pc, #608]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	2202      	movs	r2, #2
 80011bc:	4013      	ands	r3, r2
 80011be:	d0f0      	beq.n	80011a2 <HAL_RCC_OscConfig+0x3aa>
 80011c0:	e013      	b.n	80011ea <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c2:	f7ff fbd3 	bl	800096c <HAL_GetTick>
 80011c6:	0003      	movs	r3, r0
 80011c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ca:	e009      	b.n	80011e0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011cc:	f7ff fbce 	bl	800096c <HAL_GetTick>
 80011d0:	0002      	movs	r2, r0
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	4a91      	ldr	r2, [pc, #580]	; (800141c <HAL_RCC_OscConfig+0x624>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e116      	b.n	800140e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e0:	4b8d      	ldr	r3, [pc, #564]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	2202      	movs	r2, #2
 80011e6:	4013      	ands	r3, r2
 80011e8:	d1f0      	bne.n	80011cc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011ea:	231f      	movs	r3, #31
 80011ec:	18fb      	adds	r3, r7, r3
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d105      	bne.n	8001200 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011f4:	4b88      	ldr	r3, [pc, #544]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 80011f6:	69da      	ldr	r2, [r3, #28]
 80011f8:	4b87      	ldr	r3, [pc, #540]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 80011fa:	4989      	ldr	r1, [pc, #548]	; (8001420 <HAL_RCC_OscConfig+0x628>)
 80011fc:	400a      	ands	r2, r1
 80011fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2210      	movs	r2, #16
 8001206:	4013      	ands	r3, r2
 8001208:	d063      	beq.n	80012d2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d12a      	bne.n	8001268 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001212:	4b81      	ldr	r3, [pc, #516]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001216:	4b80      	ldr	r3, [pc, #512]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001218:	2104      	movs	r1, #4
 800121a:	430a      	orrs	r2, r1
 800121c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800121e:	4b7e      	ldr	r3, [pc, #504]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001222:	4b7d      	ldr	r3, [pc, #500]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001224:	2101      	movs	r1, #1
 8001226:	430a      	orrs	r2, r1
 8001228:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122a:	f7ff fb9f 	bl	800096c <HAL_GetTick>
 800122e:	0003      	movs	r3, r0
 8001230:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001234:	f7ff fb9a 	bl	800096c <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e0e3      	b.n	800140e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001246:	4b74      	ldr	r3, [pc, #464]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800124a:	2202      	movs	r2, #2
 800124c:	4013      	ands	r3, r2
 800124e:	d0f1      	beq.n	8001234 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001250:	4b71      	ldr	r3, [pc, #452]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001254:	22f8      	movs	r2, #248	; 0xf8
 8001256:	4393      	bics	r3, r2
 8001258:	0019      	movs	r1, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	00da      	lsls	r2, r3, #3
 8001260:	4b6d      	ldr	r3, [pc, #436]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001262:	430a      	orrs	r2, r1
 8001264:	635a      	str	r2, [r3, #52]	; 0x34
 8001266:	e034      	b.n	80012d2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	3305      	adds	r3, #5
 800126e:	d111      	bne.n	8001294 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001270:	4b69      	ldr	r3, [pc, #420]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001274:	4b68      	ldr	r3, [pc, #416]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001276:	2104      	movs	r1, #4
 8001278:	438a      	bics	r2, r1
 800127a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800127c:	4b66      	ldr	r3, [pc, #408]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 800127e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001280:	22f8      	movs	r2, #248	; 0xf8
 8001282:	4393      	bics	r3, r2
 8001284:	0019      	movs	r1, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	00da      	lsls	r2, r3, #3
 800128c:	4b62      	ldr	r3, [pc, #392]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 800128e:	430a      	orrs	r2, r1
 8001290:	635a      	str	r2, [r3, #52]	; 0x34
 8001292:	e01e      	b.n	80012d2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001294:	4b60      	ldr	r3, [pc, #384]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001298:	4b5f      	ldr	r3, [pc, #380]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 800129a:	2104      	movs	r1, #4
 800129c:	430a      	orrs	r2, r1
 800129e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80012a0:	4b5d      	ldr	r3, [pc, #372]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 80012a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a4:	4b5c      	ldr	r3, [pc, #368]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	438a      	bics	r2, r1
 80012aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ac:	f7ff fb5e 	bl	800096c <HAL_GetTick>
 80012b0:	0003      	movs	r3, r0
 80012b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012b6:	f7ff fb59 	bl	800096c <HAL_GetTick>
 80012ba:	0002      	movs	r2, r0
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e0a2      	b.n	800140e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012c8:	4b53      	ldr	r3, [pc, #332]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 80012ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012cc:	2202      	movs	r2, #2
 80012ce:	4013      	ands	r3, r2
 80012d0:	d1f1      	bne.n	80012b6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d100      	bne.n	80012dc <HAL_RCC_OscConfig+0x4e4>
 80012da:	e097      	b.n	800140c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012dc:	4b4e      	ldr	r3, [pc, #312]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	220c      	movs	r2, #12
 80012e2:	4013      	ands	r3, r2
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d100      	bne.n	80012ea <HAL_RCC_OscConfig+0x4f2>
 80012e8:	e06b      	b.n	80013c2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d14c      	bne.n	800138c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f2:	4b49      	ldr	r3, [pc, #292]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b48      	ldr	r3, [pc, #288]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 80012f8:	494a      	ldr	r1, [pc, #296]	; (8001424 <HAL_RCC_OscConfig+0x62c>)
 80012fa:	400a      	ands	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fe:	f7ff fb35 	bl	800096c <HAL_GetTick>
 8001302:	0003      	movs	r3, r0
 8001304:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001308:	f7ff fb30 	bl	800096c <HAL_GetTick>
 800130c:	0002      	movs	r2, r0
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e079      	b.n	800140e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131a:	4b3f      	ldr	r3, [pc, #252]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	049b      	lsls	r3, r3, #18
 8001322:	4013      	ands	r3, r2
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001326:	4b3c      	ldr	r3, [pc, #240]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132a:	220f      	movs	r2, #15
 800132c:	4393      	bics	r3, r2
 800132e:	0019      	movs	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001334:	4b38      	ldr	r3, [pc, #224]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001336:	430a      	orrs	r2, r1
 8001338:	62da      	str	r2, [r3, #44]	; 0x2c
 800133a:	4b37      	ldr	r3, [pc, #220]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4a3a      	ldr	r2, [pc, #232]	; (8001428 <HAL_RCC_OscConfig+0x630>)
 8001340:	4013      	ands	r3, r2
 8001342:	0019      	movs	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	431a      	orrs	r2, r3
 800134e:	4b32      	ldr	r3, [pc, #200]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001350:	430a      	orrs	r2, r1
 8001352:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001354:	4b30      	ldr	r3, [pc, #192]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 800135a:	2180      	movs	r1, #128	; 0x80
 800135c:	0449      	lsls	r1, r1, #17
 800135e:	430a      	orrs	r2, r1
 8001360:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001362:	f7ff fb03 	bl	800096c <HAL_GetTick>
 8001366:	0003      	movs	r3, r0
 8001368:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800136c:	f7ff fafe 	bl	800096c <HAL_GetTick>
 8001370:	0002      	movs	r2, r0
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e047      	b.n	800140e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800137e:	4b26      	ldr	r3, [pc, #152]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	049b      	lsls	r3, r3, #18
 8001386:	4013      	ands	r3, r2
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0x574>
 800138a:	e03f      	b.n	800140c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b21      	ldr	r3, [pc, #132]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 8001392:	4924      	ldr	r1, [pc, #144]	; (8001424 <HAL_RCC_OscConfig+0x62c>)
 8001394:	400a      	ands	r2, r1
 8001396:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fae8 	bl	800096c <HAL_GetTick>
 800139c:	0003      	movs	r3, r0
 800139e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a2:	f7ff fae3 	bl	800096c <HAL_GetTick>
 80013a6:	0002      	movs	r2, r0
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e02c      	b.n	800140e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	049b      	lsls	r3, r3, #18
 80013bc:	4013      	ands	r3, r2
 80013be:	d1f0      	bne.n	80013a2 <HAL_RCC_OscConfig+0x5aa>
 80013c0:	e024      	b.n	800140c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d101      	bne.n	80013ce <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e01f      	b.n	800140e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80013d4:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HAL_RCC_OscConfig+0x620>)
 80013d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	025b      	lsls	r3, r3, #9
 80013e0:	401a      	ands	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d10e      	bne.n	8001408 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	220f      	movs	r2, #15
 80013ee:	401a      	ands	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d107      	bne.n	8001408 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	23f0      	movs	r3, #240	; 0xf0
 80013fc:	039b      	lsls	r3, r3, #14
 80013fe:	401a      	ands	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	0018      	movs	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	b008      	add	sp, #32
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	40021000 	.word	0x40021000
 800141c:	00001388 	.word	0x00001388
 8001420:	efffffff 	.word	0xefffffff
 8001424:	feffffff 	.word	0xfeffffff
 8001428:	ffc2ffff 	.word	0xffc2ffff

0800142c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e0b3      	b.n	80015a8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001440:	4b5b      	ldr	r3, [pc, #364]	; (80015b0 <HAL_RCC_ClockConfig+0x184>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2201      	movs	r2, #1
 8001446:	4013      	ands	r3, r2
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d911      	bls.n	8001472 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144e:	4b58      	ldr	r3, [pc, #352]	; (80015b0 <HAL_RCC_ClockConfig+0x184>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2201      	movs	r2, #1
 8001454:	4393      	bics	r3, r2
 8001456:	0019      	movs	r1, r3
 8001458:	4b55      	ldr	r3, [pc, #340]	; (80015b0 <HAL_RCC_ClockConfig+0x184>)
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001460:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <HAL_RCC_ClockConfig+0x184>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2201      	movs	r2, #1
 8001466:	4013      	ands	r3, r2
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d001      	beq.n	8001472 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e09a      	b.n	80015a8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2202      	movs	r2, #2
 8001478:	4013      	ands	r3, r2
 800147a:	d015      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2204      	movs	r2, #4
 8001482:	4013      	ands	r3, r2
 8001484:	d006      	beq.n	8001494 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001486:	4b4b      	ldr	r3, [pc, #300]	; (80015b4 <HAL_RCC_ClockConfig+0x188>)
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	4b4a      	ldr	r3, [pc, #296]	; (80015b4 <HAL_RCC_ClockConfig+0x188>)
 800148c:	21e0      	movs	r1, #224	; 0xe0
 800148e:	00c9      	lsls	r1, r1, #3
 8001490:	430a      	orrs	r2, r1
 8001492:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001494:	4b47      	ldr	r3, [pc, #284]	; (80015b4 <HAL_RCC_ClockConfig+0x188>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	22f0      	movs	r2, #240	; 0xf0
 800149a:	4393      	bics	r3, r2
 800149c:	0019      	movs	r1, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	4b44      	ldr	r3, [pc, #272]	; (80015b4 <HAL_RCC_ClockConfig+0x188>)
 80014a4:	430a      	orrs	r2, r1
 80014a6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2201      	movs	r2, #1
 80014ae:	4013      	ands	r3, r2
 80014b0:	d040      	beq.n	8001534 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d107      	bne.n	80014ca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	4b3e      	ldr	r3, [pc, #248]	; (80015b4 <HAL_RCC_ClockConfig+0x188>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	029b      	lsls	r3, r3, #10
 80014c2:	4013      	ands	r3, r2
 80014c4:	d114      	bne.n	80014f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e06e      	b.n	80015a8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d107      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d2:	4b38      	ldr	r3, [pc, #224]	; (80015b4 <HAL_RCC_ClockConfig+0x188>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	049b      	lsls	r3, r3, #18
 80014da:	4013      	ands	r3, r2
 80014dc:	d108      	bne.n	80014f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e062      	b.n	80015a8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e2:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <HAL_RCC_ClockConfig+0x188>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2202      	movs	r2, #2
 80014e8:	4013      	ands	r3, r2
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e05b      	b.n	80015a8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014f0:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <HAL_RCC_ClockConfig+0x188>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2203      	movs	r2, #3
 80014f6:	4393      	bics	r3, r2
 80014f8:	0019      	movs	r1, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <HAL_RCC_ClockConfig+0x188>)
 8001500:	430a      	orrs	r2, r1
 8001502:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001504:	f7ff fa32 	bl	800096c <HAL_GetTick>
 8001508:	0003      	movs	r3, r0
 800150a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150c:	e009      	b.n	8001522 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150e:	f7ff fa2d 	bl	800096c <HAL_GetTick>
 8001512:	0002      	movs	r2, r0
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	4a27      	ldr	r2, [pc, #156]	; (80015b8 <HAL_RCC_ClockConfig+0x18c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e042      	b.n	80015a8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001522:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <HAL_RCC_ClockConfig+0x188>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	220c      	movs	r2, #12
 8001528:	401a      	ands	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	429a      	cmp	r2, r3
 8001532:	d1ec      	bne.n	800150e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001534:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <HAL_RCC_ClockConfig+0x184>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2201      	movs	r2, #1
 800153a:	4013      	ands	r3, r2
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d211      	bcs.n	8001566 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_RCC_ClockConfig+0x184>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2201      	movs	r2, #1
 8001548:	4393      	bics	r3, r2
 800154a:	0019      	movs	r1, r3
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_RCC_ClockConfig+0x184>)
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001554:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <HAL_RCC_ClockConfig+0x184>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2201      	movs	r2, #1
 800155a:	4013      	ands	r3, r2
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d001      	beq.n	8001566 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e020      	b.n	80015a8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2204      	movs	r2, #4
 800156c:	4013      	ands	r3, r2
 800156e:	d009      	beq.n	8001584 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001570:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <HAL_RCC_ClockConfig+0x188>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	4a11      	ldr	r2, [pc, #68]	; (80015bc <HAL_RCC_ClockConfig+0x190>)
 8001576:	4013      	ands	r3, r2
 8001578:	0019      	movs	r1, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <HAL_RCC_ClockConfig+0x188>)
 8001580:	430a      	orrs	r2, r1
 8001582:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001584:	f000 f820 	bl	80015c8 <HAL_RCC_GetSysClockFreq>
 8001588:	0001      	movs	r1, r0
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_RCC_ClockConfig+0x188>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	091b      	lsrs	r3, r3, #4
 8001590:	220f      	movs	r2, #15
 8001592:	4013      	ands	r3, r2
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_RCC_ClockConfig+0x194>)
 8001596:	5cd3      	ldrb	r3, [r2, r3]
 8001598:	000a      	movs	r2, r1
 800159a:	40da      	lsrs	r2, r3
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_RCC_ClockConfig+0x198>)
 800159e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80015a0:	2003      	movs	r0, #3
 80015a2:	f7ff f8f5 	bl	8000790 <HAL_InitTick>
  
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	0018      	movs	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b004      	add	sp, #16
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40022000 	.word	0x40022000
 80015b4:	40021000 	.word	0x40021000
 80015b8:	00001388 	.word	0x00001388
 80015bc:	fffff8ff 	.word	0xfffff8ff
 80015c0:	08003f34 	.word	0x08003f34
 80015c4:	20000000 	.word	0x20000000

080015c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b08f      	sub	sp, #60	; 0x3c
 80015cc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80015ce:	2314      	movs	r3, #20
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	4a2b      	ldr	r2, [pc, #172]	; (8001680 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015d6:	c313      	stmia	r3!, {r0, r1, r4}
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	4a29      	ldr	r2, [pc, #164]	; (8001684 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015e2:	c313      	stmia	r3!, {r0, r1, r4}
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80015f0:	2300      	movs	r3, #0
 80015f2:	637b      	str	r3, [r7, #52]	; 0x34
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80015fc:	4b22      	ldr	r3, [pc, #136]	; (8001688 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001604:	220c      	movs	r2, #12
 8001606:	4013      	ands	r3, r2
 8001608:	2b04      	cmp	r3, #4
 800160a:	d002      	beq.n	8001612 <HAL_RCC_GetSysClockFreq+0x4a>
 800160c:	2b08      	cmp	r3, #8
 800160e:	d003      	beq.n	8001618 <HAL_RCC_GetSysClockFreq+0x50>
 8001610:	e02d      	b.n	800166e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001612:	4b1e      	ldr	r3, [pc, #120]	; (800168c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001614:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001616:	e02d      	b.n	8001674 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161a:	0c9b      	lsrs	r3, r3, #18
 800161c:	220f      	movs	r2, #15
 800161e:	4013      	ands	r3, r2
 8001620:	2214      	movs	r2, #20
 8001622:	18ba      	adds	r2, r7, r2
 8001624:	5cd3      	ldrb	r3, [r2, r3]
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_RCC_GetSysClockFreq+0xc0>)
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162c:	220f      	movs	r2, #15
 800162e:	4013      	ands	r3, r2
 8001630:	1d3a      	adds	r2, r7, #4
 8001632:	5cd3      	ldrb	r3, [r2, r3]
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	025b      	lsls	r3, r3, #9
 800163c:	4013      	ands	r3, r2
 800163e:	d009      	beq.n	8001654 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001642:	4812      	ldr	r0, [pc, #72]	; (800168c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001644:	f7fe fd60 	bl	8000108 <__udivsi3>
 8001648:	0003      	movs	r3, r0
 800164a:	001a      	movs	r2, r3
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	4353      	muls	r3, r2
 8001650:	637b      	str	r3, [r7, #52]	; 0x34
 8001652:	e009      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001656:	000a      	movs	r2, r1
 8001658:	0152      	lsls	r2, r2, #5
 800165a:	1a52      	subs	r2, r2, r1
 800165c:	0193      	lsls	r3, r2, #6
 800165e:	1a9b      	subs	r3, r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	185b      	adds	r3, r3, r1
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800166c:	e002      	b.n	8001674 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800166e:	4b07      	ldr	r3, [pc, #28]	; (800168c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001670:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001672:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b00f      	add	sp, #60	; 0x3c
 800167c:	bd90      	pop	{r4, r7, pc}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	08003f0c 	.word	0x08003f0c
 8001684:	08003f1c 	.word	0x08003f1c
 8001688:	40021000 	.word	0x40021000
 800168c:	007a1200 	.word	0x007a1200

08001690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001694:	4b02      	ldr	r3, [pc, #8]	; (80016a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	20000000 	.word	0x20000000

080016a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80016a8:	f7ff fff2 	bl	8001690 <HAL_RCC_GetHCLKFreq>
 80016ac:	0001      	movs	r1, r0
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	0a1b      	lsrs	r3, r3, #8
 80016b4:	2207      	movs	r2, #7
 80016b6:	4013      	ands	r3, r2
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80016ba:	5cd3      	ldrb	r3, [r2, r3]
 80016bc:	40d9      	lsrs	r1, r3
 80016be:	000b      	movs	r3, r1
}    
 80016c0:	0018      	movs	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	40021000 	.word	0x40021000
 80016cc:	08003f44 	.word	0x08003f44

080016d0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2207      	movs	r2, #7
 80016de:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_RCC_GetClockConfig+0x4c>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2203      	movs	r2, #3
 80016e6:	401a      	ands	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_GetClockConfig+0x4c>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	22f0      	movs	r2, #240	; 0xf0
 80016f2:	401a      	ands	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_RCC_GetClockConfig+0x4c>)
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	23e0      	movs	r3, #224	; 0xe0
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	401a      	ands	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_RCC_GetClockConfig+0x50>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2201      	movs	r2, #1
 800170c:	401a      	ands	r2, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	601a      	str	r2, [r3, #0]
}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	46bd      	mov	sp, r7
 8001716:	b002      	add	sp, #8
 8001718:	bd80      	pop	{r7, pc}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	40021000 	.word	0x40021000
 8001720:	40022000 	.word	0x40022000

08001724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e042      	b.n	80017bc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	223d      	movs	r2, #61	; 0x3d
 800173a:	5c9b      	ldrb	r3, [r3, r2]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d107      	bne.n	8001752 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	223c      	movs	r2, #60	; 0x3c
 8001746:	2100      	movs	r1, #0
 8001748:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	0018      	movs	r0, r3
 800174e:	f000 f839 	bl	80017c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	223d      	movs	r2, #61	; 0x3d
 8001756:	2102      	movs	r1, #2
 8001758:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3304      	adds	r3, #4
 8001762:	0019      	movs	r1, r3
 8001764:	0010      	movs	r0, r2
 8001766:	f000 f9b7 	bl	8001ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2246      	movs	r2, #70	; 0x46
 800176e:	2101      	movs	r1, #1
 8001770:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	223e      	movs	r2, #62	; 0x3e
 8001776:	2101      	movs	r1, #1
 8001778:	5499      	strb	r1, [r3, r2]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	223f      	movs	r2, #63	; 0x3f
 800177e:	2101      	movs	r1, #1
 8001780:	5499      	strb	r1, [r3, r2]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2240      	movs	r2, #64	; 0x40
 8001786:	2101      	movs	r1, #1
 8001788:	5499      	strb	r1, [r3, r2]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2241      	movs	r2, #65	; 0x41
 800178e:	2101      	movs	r1, #1
 8001790:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2242      	movs	r2, #66	; 0x42
 8001796:	2101      	movs	r1, #1
 8001798:	5499      	strb	r1, [r3, r2]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2243      	movs	r2, #67	; 0x43
 800179e:	2101      	movs	r1, #1
 80017a0:	5499      	strb	r1, [r3, r2]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2244      	movs	r2, #68	; 0x44
 80017a6:	2101      	movs	r1, #1
 80017a8:	5499      	strb	r1, [r3, r2]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2245      	movs	r2, #69	; 0x45
 80017ae:	2101      	movs	r1, #1
 80017b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	223d      	movs	r2, #61	; 0x3d
 80017b6:	2101      	movs	r1, #1
 80017b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	b002      	add	sp, #8
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80017cc:	46c0      	nop			; (mov r8, r8)
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b002      	add	sp, #8
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	223d      	movs	r2, #61	; 0x3d
 80017e0:	5c9b      	ldrb	r3, [r3, r2]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d001      	beq.n	80017ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e035      	b.n	8001858 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	223d      	movs	r2, #61	; 0x3d
 80017f0:	2102      	movs	r1, #2
 80017f2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2101      	movs	r1, #1
 8001800:	430a      	orrs	r2, r1
 8001802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a15      	ldr	r2, [pc, #84]	; (8001860 <HAL_TIM_Base_Start_IT+0x8c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d009      	beq.n	8001822 <HAL_TIM_Base_Start_IT+0x4e>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a14      	ldr	r2, [pc, #80]	; (8001864 <HAL_TIM_Base_Start_IT+0x90>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d004      	beq.n	8001822 <HAL_TIM_Base_Start_IT+0x4e>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a12      	ldr	r2, [pc, #72]	; (8001868 <HAL_TIM_Base_Start_IT+0x94>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d111      	bne.n	8001846 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2207      	movs	r2, #7
 800182a:	4013      	ands	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2b06      	cmp	r3, #6
 8001832:	d010      	beq.n	8001856 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2101      	movs	r1, #1
 8001840:	430a      	orrs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001844:	e007      	b.n	8001856 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2101      	movs	r1, #1
 8001852:	430a      	orrs	r2, r1
 8001854:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	0018      	movs	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	b004      	add	sp, #16
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40012c00 	.word	0x40012c00
 8001864:	40000400 	.word	0x40000400
 8001868:	40014000 	.word	0x40014000

0800186c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	2202      	movs	r2, #2
 800187c:	4013      	ands	r3, r2
 800187e:	2b02      	cmp	r3, #2
 8001880:	d124      	bne.n	80018cc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2202      	movs	r2, #2
 800188a:	4013      	ands	r3, r2
 800188c:	2b02      	cmp	r3, #2
 800188e:	d11d      	bne.n	80018cc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2203      	movs	r2, #3
 8001896:	4252      	negs	r2, r2
 8001898:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	2203      	movs	r2, #3
 80018a8:	4013      	ands	r3, r2
 80018aa:	d004      	beq.n	80018b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	0018      	movs	r0, r3
 80018b0:	f000 f8fa 	bl	8001aa8 <HAL_TIM_IC_CaptureCallback>
 80018b4:	e007      	b.n	80018c6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	0018      	movs	r0, r3
 80018ba:	f000 f8ed 	bl	8001a98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	0018      	movs	r0, r3
 80018c2:	f000 f8f9 	bl	8001ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	2204      	movs	r2, #4
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d125      	bne.n	8001926 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2204      	movs	r2, #4
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d11e      	bne.n	8001926 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2205      	movs	r2, #5
 80018ee:	4252      	negs	r2, r2
 80018f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2202      	movs	r2, #2
 80018f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	699a      	ldr	r2, [r3, #24]
 80018fe:	23c0      	movs	r3, #192	; 0xc0
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4013      	ands	r3, r2
 8001904:	d004      	beq.n	8001910 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	0018      	movs	r0, r3
 800190a:	f000 f8cd 	bl	8001aa8 <HAL_TIM_IC_CaptureCallback>
 800190e:	e007      	b.n	8001920 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	0018      	movs	r0, r3
 8001914:	f000 f8c0 	bl	8001a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	0018      	movs	r0, r3
 800191c:	f000 f8cc 	bl	8001ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	2208      	movs	r2, #8
 800192e:	4013      	ands	r3, r2
 8001930:	2b08      	cmp	r3, #8
 8001932:	d124      	bne.n	800197e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	2208      	movs	r2, #8
 800193c:	4013      	ands	r3, r2
 800193e:	2b08      	cmp	r3, #8
 8001940:	d11d      	bne.n	800197e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2209      	movs	r2, #9
 8001948:	4252      	negs	r2, r2
 800194a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2204      	movs	r2, #4
 8001950:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	2203      	movs	r2, #3
 800195a:	4013      	ands	r3, r2
 800195c:	d004      	beq.n	8001968 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	0018      	movs	r0, r3
 8001962:	f000 f8a1 	bl	8001aa8 <HAL_TIM_IC_CaptureCallback>
 8001966:	e007      	b.n	8001978 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	0018      	movs	r0, r3
 800196c:	f000 f894 	bl	8001a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	0018      	movs	r0, r3
 8001974:	f000 f8a0 	bl	8001ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	2210      	movs	r2, #16
 8001986:	4013      	ands	r3, r2
 8001988:	2b10      	cmp	r3, #16
 800198a:	d125      	bne.n	80019d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	2210      	movs	r2, #16
 8001994:	4013      	ands	r3, r2
 8001996:	2b10      	cmp	r3, #16
 8001998:	d11e      	bne.n	80019d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2211      	movs	r2, #17
 80019a0:	4252      	negs	r2, r2
 80019a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2208      	movs	r2, #8
 80019a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	69da      	ldr	r2, [r3, #28]
 80019b0:	23c0      	movs	r3, #192	; 0xc0
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4013      	ands	r3, r2
 80019b6:	d004      	beq.n	80019c2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	0018      	movs	r0, r3
 80019bc:	f000 f874 	bl	8001aa8 <HAL_TIM_IC_CaptureCallback>
 80019c0:	e007      	b.n	80019d2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	0018      	movs	r0, r3
 80019c6:	f000 f867 	bl	8001a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	0018      	movs	r0, r3
 80019ce:	f000 f873 	bl	8001ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	2201      	movs	r2, #1
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d10f      	bne.n	8001a06 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2201      	movs	r2, #1
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d108      	bne.n	8001a06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2202      	movs	r2, #2
 80019fa:	4252      	negs	r2, r2
 80019fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7fe fe37 	bl	8000674 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2b80      	cmp	r3, #128	; 0x80
 8001a12:	d10f      	bne.n	8001a34 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2280      	movs	r2, #128	; 0x80
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b80      	cmp	r3, #128	; 0x80
 8001a20:	d108      	bne.n	8001a34 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2281      	movs	r2, #129	; 0x81
 8001a28:	4252      	negs	r2, r2
 8001a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f000 f8d0 	bl	8001bd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	2240      	movs	r2, #64	; 0x40
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b40      	cmp	r3, #64	; 0x40
 8001a40:	d10f      	bne.n	8001a62 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	2240      	movs	r2, #64	; 0x40
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b40      	cmp	r3, #64	; 0x40
 8001a4e:	d108      	bne.n	8001a62 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2241      	movs	r2, #65	; 0x41
 8001a56:	4252      	negs	r2, r2
 8001a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f000 f833 	bl	8001ac8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b20      	cmp	r3, #32
 8001a6e:	d10f      	bne.n	8001a90 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	2220      	movs	r2, #32
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	d108      	bne.n	8001a90 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2221      	movs	r2, #33	; 0x21
 8001a84:	4252      	negs	r2, r2
 8001a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f000 f89a 	bl	8001bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b002      	add	sp, #8
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001aa0:	46c0      	nop			; (mov r8, r8)
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ab0:	46c0      	nop			; (mov r8, r8)
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b002      	add	sp, #8
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ac0:	46c0      	nop			; (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ad0:	46c0      	nop			; (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b002      	add	sp, #8
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a2f      	ldr	r2, [pc, #188]	; (8001ba8 <TIM_Base_SetConfig+0xd0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d003      	beq.n	8001af8 <TIM_Base_SetConfig+0x20>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a2e      	ldr	r2, [pc, #184]	; (8001bac <TIM_Base_SetConfig+0xd4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d108      	bne.n	8001b0a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2270      	movs	r2, #112	; 0x70
 8001afc:	4393      	bics	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a26      	ldr	r2, [pc, #152]	; (8001ba8 <TIM_Base_SetConfig+0xd0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <TIM_Base_SetConfig+0x62>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a25      	ldr	r2, [pc, #148]	; (8001bac <TIM_Base_SetConfig+0xd4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d00f      	beq.n	8001b3a <TIM_Base_SetConfig+0x62>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a24      	ldr	r2, [pc, #144]	; (8001bb0 <TIM_Base_SetConfig+0xd8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00b      	beq.n	8001b3a <TIM_Base_SetConfig+0x62>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a23      	ldr	r2, [pc, #140]	; (8001bb4 <TIM_Base_SetConfig+0xdc>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d007      	beq.n	8001b3a <TIM_Base_SetConfig+0x62>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a22      	ldr	r2, [pc, #136]	; (8001bb8 <TIM_Base_SetConfig+0xe0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d003      	beq.n	8001b3a <TIM_Base_SetConfig+0x62>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a21      	ldr	r2, [pc, #132]	; (8001bbc <TIM_Base_SetConfig+0xe4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d108      	bne.n	8001b4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4a20      	ldr	r2, [pc, #128]	; (8001bc0 <TIM_Base_SetConfig+0xe8>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	4393      	bics	r3, r2
 8001b52:	001a      	movs	r2, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a0c      	ldr	r2, [pc, #48]	; (8001ba8 <TIM_Base_SetConfig+0xd0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d00b      	beq.n	8001b92 <TIM_Base_SetConfig+0xba>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <TIM_Base_SetConfig+0xdc>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d007      	beq.n	8001b92 <TIM_Base_SetConfig+0xba>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a0c      	ldr	r2, [pc, #48]	; (8001bb8 <TIM_Base_SetConfig+0xe0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d003      	beq.n	8001b92 <TIM_Base_SetConfig+0xba>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <TIM_Base_SetConfig+0xe4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d103      	bne.n	8001b9a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	615a      	str	r2, [r3, #20]
}
 8001ba0:	46c0      	nop			; (mov r8, r8)
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b004      	add	sp, #16
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40012c00 	.word	0x40012c00
 8001bac:	40000400 	.word	0x40000400
 8001bb0:	40002000 	.word	0x40002000
 8001bb4:	40014000 	.word	0x40014000
 8001bb8:	40014400 	.word	0x40014400
 8001bbc:	40014800 	.word	0x40014800
 8001bc0:	fffffcff 	.word	0xfffffcff

08001bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001bcc:	46c0      	nop			; (mov r8, r8)
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b002      	add	sp, #8
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bdc:	46c0      	nop			; (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b002      	add	sp, #8
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e044      	b.n	8001c80 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d107      	bne.n	8001c0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2274      	movs	r2, #116	; 0x74
 8001c02:	2100      	movs	r1, #0
 8001c04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f7fe fd75 	bl	80006f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2224      	movs	r2, #36	; 0x24
 8001c12:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2101      	movs	r1, #1
 8001c20:	438a      	bics	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	0018      	movs	r0, r3
 8001c28:	f000 f830 	bl	8001c8c <UART_SetConfig>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e024      	b.n	8001c80 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	0018      	movs	r0, r3
 8001c42:	f000 f963 	bl	8001f0c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	490d      	ldr	r1, [pc, #52]	; (8001c88 <HAL_UART_Init+0xa4>)
 8001c52:	400a      	ands	r2, r1
 8001c54:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2108      	movs	r1, #8
 8001c62:	438a      	bics	r2, r1
 8001c64:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2101      	movs	r1, #1
 8001c72:	430a      	orrs	r2, r1
 8001c74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f000 f9fb 	bl	8002074 <UART_CheckIdleState>
 8001c7e:	0003      	movs	r3, r0
}
 8001c80:	0018      	movs	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b002      	add	sp, #8
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	fffff7ff 	.word	0xfffff7ff

08001c8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c94:	231e      	movs	r3, #30
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a8d      	ldr	r2, [pc, #564]	; (8001ef0 <UART_SetConfig+0x264>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4a88      	ldr	r2, [pc, #544]	; (8001ef4 <UART_SetConfig+0x268>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	0019      	movs	r1, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	4a7f      	ldr	r2, [pc, #508]	; (8001ef8 <UART_SetConfig+0x26c>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	0019      	movs	r1, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a7b      	ldr	r2, [pc, #492]	; (8001efc <UART_SetConfig+0x270>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d127      	bne.n	8001d62 <UART_SetConfig+0xd6>
 8001d12:	4b7b      	ldr	r3, [pc, #492]	; (8001f00 <UART_SetConfig+0x274>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	2203      	movs	r2, #3
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d00d      	beq.n	8001d3a <UART_SetConfig+0xae>
 8001d1e:	d81b      	bhi.n	8001d58 <UART_SetConfig+0xcc>
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d014      	beq.n	8001d4e <UART_SetConfig+0xc2>
 8001d24:	d818      	bhi.n	8001d58 <UART_SetConfig+0xcc>
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <UART_SetConfig+0xa4>
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d00a      	beq.n	8001d44 <UART_SetConfig+0xb8>
 8001d2e:	e013      	b.n	8001d58 <UART_SetConfig+0xcc>
 8001d30:	231f      	movs	r3, #31
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
 8001d38:	e021      	b.n	8001d7e <UART_SetConfig+0xf2>
 8001d3a:	231f      	movs	r3, #31
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	2202      	movs	r2, #2
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	e01c      	b.n	8001d7e <UART_SetConfig+0xf2>
 8001d44:	231f      	movs	r3, #31
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	2204      	movs	r2, #4
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	e017      	b.n	8001d7e <UART_SetConfig+0xf2>
 8001d4e:	231f      	movs	r3, #31
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	2208      	movs	r2, #8
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	e012      	b.n	8001d7e <UART_SetConfig+0xf2>
 8001d58:	231f      	movs	r3, #31
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	2210      	movs	r2, #16
 8001d5e:	701a      	strb	r2, [r3, #0]
 8001d60:	e00d      	b.n	8001d7e <UART_SetConfig+0xf2>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a67      	ldr	r2, [pc, #412]	; (8001f04 <UART_SetConfig+0x278>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d104      	bne.n	8001d76 <UART_SetConfig+0xea>
 8001d6c:	231f      	movs	r3, #31
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	2200      	movs	r2, #0
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	e003      	b.n	8001d7e <UART_SetConfig+0xf2>
 8001d76:	231f      	movs	r3, #31
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	2210      	movs	r2, #16
 8001d7c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69da      	ldr	r2, [r3, #28]
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d15d      	bne.n	8001e46 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8001d8a:	231f      	movs	r3, #31
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d015      	beq.n	8001dc0 <UART_SetConfig+0x134>
 8001d94:	dc18      	bgt.n	8001dc8 <UART_SetConfig+0x13c>
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d00d      	beq.n	8001db6 <UART_SetConfig+0x12a>
 8001d9a:	dc15      	bgt.n	8001dc8 <UART_SetConfig+0x13c>
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <UART_SetConfig+0x11a>
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d005      	beq.n	8001db0 <UART_SetConfig+0x124>
 8001da4:	e010      	b.n	8001dc8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001da6:	f7ff fc7d 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
 8001daa:	0003      	movs	r3, r0
 8001dac:	61bb      	str	r3, [r7, #24]
        break;
 8001dae:	e012      	b.n	8001dd6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001db0:	4b55      	ldr	r3, [pc, #340]	; (8001f08 <UART_SetConfig+0x27c>)
 8001db2:	61bb      	str	r3, [r7, #24]
        break;
 8001db4:	e00f      	b.n	8001dd6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001db6:	f7ff fc07 	bl	80015c8 <HAL_RCC_GetSysClockFreq>
 8001dba:	0003      	movs	r3, r0
 8001dbc:	61bb      	str	r3, [r7, #24]
        break;
 8001dbe:	e00a      	b.n	8001dd6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	021b      	lsls	r3, r3, #8
 8001dc4:	61bb      	str	r3, [r7, #24]
        break;
 8001dc6:	e006      	b.n	8001dd6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001dcc:	231e      	movs	r3, #30
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
        break;
 8001dd4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d100      	bne.n	8001dde <UART_SetConfig+0x152>
 8001ddc:	e07b      	b.n	8001ed6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	005a      	lsls	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	085b      	lsrs	r3, r3, #1
 8001de8:	18d2      	adds	r2, r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	0019      	movs	r1, r3
 8001df0:	0010      	movs	r0, r2
 8001df2:	f7fe f989 	bl	8000108 <__udivsi3>
 8001df6:	0003      	movs	r3, r0
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	2b0f      	cmp	r3, #15
 8001e00:	d91c      	bls.n	8001e3c <UART_SetConfig+0x1b0>
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	025b      	lsls	r3, r3, #9
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d217      	bcs.n	8001e3c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	200e      	movs	r0, #14
 8001e12:	183b      	adds	r3, r7, r0
 8001e14:	210f      	movs	r1, #15
 8001e16:	438a      	bics	r2, r1
 8001e18:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	085b      	lsrs	r3, r3, #1
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	2207      	movs	r2, #7
 8001e22:	4013      	ands	r3, r2
 8001e24:	b299      	uxth	r1, r3
 8001e26:	183b      	adds	r3, r7, r0
 8001e28:	183a      	adds	r2, r7, r0
 8001e2a:	8812      	ldrh	r2, [r2, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	183a      	adds	r2, r7, r0
 8001e36:	8812      	ldrh	r2, [r2, #0]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	e04c      	b.n	8001ed6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001e3c:	231e      	movs	r3, #30
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	e047      	b.n	8001ed6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001e46:	231f      	movs	r3, #31
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d015      	beq.n	8001e7c <UART_SetConfig+0x1f0>
 8001e50:	dc18      	bgt.n	8001e84 <UART_SetConfig+0x1f8>
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d00d      	beq.n	8001e72 <UART_SetConfig+0x1e6>
 8001e56:	dc15      	bgt.n	8001e84 <UART_SetConfig+0x1f8>
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <UART_SetConfig+0x1d6>
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d005      	beq.n	8001e6c <UART_SetConfig+0x1e0>
 8001e60:	e010      	b.n	8001e84 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e62:	f7ff fc1f 	bl	80016a4 <HAL_RCC_GetPCLK1Freq>
 8001e66:	0003      	movs	r3, r0
 8001e68:	61bb      	str	r3, [r7, #24]
        break;
 8001e6a:	e012      	b.n	8001e92 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e6c:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <UART_SetConfig+0x27c>)
 8001e6e:	61bb      	str	r3, [r7, #24]
        break;
 8001e70:	e00f      	b.n	8001e92 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e72:	f7ff fba9 	bl	80015c8 <HAL_RCC_GetSysClockFreq>
 8001e76:	0003      	movs	r3, r0
 8001e78:	61bb      	str	r3, [r7, #24]
        break;
 8001e7a:	e00a      	b.n	8001e92 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	61bb      	str	r3, [r7, #24]
        break;
 8001e82:	e006      	b.n	8001e92 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001e88:	231e      	movs	r3, #30
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
        break;
 8001e90:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01e      	beq.n	8001ed6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	085a      	lsrs	r2, r3, #1
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	18d2      	adds	r2, r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	0019      	movs	r1, r3
 8001ea8:	0010      	movs	r0, r2
 8001eaa:	f7fe f92d 	bl	8000108 <__udivsi3>
 8001eae:	0003      	movs	r3, r0
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	2b0f      	cmp	r3, #15
 8001eb8:	d909      	bls.n	8001ece <UART_SetConfig+0x242>
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	025b      	lsls	r3, r3, #9
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d204      	bcs.n	8001ece <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	60da      	str	r2, [r3, #12]
 8001ecc:	e003      	b.n	8001ed6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001ece:	231e      	movs	r3, #30
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001ee2:	231e      	movs	r3, #30
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	781b      	ldrb	r3, [r3, #0]
}
 8001ee8:	0018      	movs	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b008      	add	sp, #32
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	ffff69f3 	.word	0xffff69f3
 8001ef4:	ffffcfff 	.word	0xffffcfff
 8001ef8:	fffff4ff 	.word	0xfffff4ff
 8001efc:	40013800 	.word	0x40013800
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40004400 	.word	0x40004400
 8001f08:	007a1200 	.word	0x007a1200

08001f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d00b      	beq.n	8001f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4a4a      	ldr	r2, [pc, #296]	; (8002050 <UART_AdvFeatureConfig+0x144>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	0019      	movs	r1, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d00b      	beq.n	8001f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4a43      	ldr	r2, [pc, #268]	; (8002054 <UART_AdvFeatureConfig+0x148>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d00b      	beq.n	8001f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4a3b      	ldr	r2, [pc, #236]	; (8002058 <UART_AdvFeatureConfig+0x14c>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	0019      	movs	r1, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	2208      	movs	r2, #8
 8001f80:	4013      	ands	r3, r2
 8001f82:	d00b      	beq.n	8001f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4a34      	ldr	r2, [pc, #208]	; (800205c <UART_AdvFeatureConfig+0x150>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	2210      	movs	r2, #16
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d00b      	beq.n	8001fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	4a2c      	ldr	r2, [pc, #176]	; (8002060 <UART_AdvFeatureConfig+0x154>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d00b      	beq.n	8001fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	4a25      	ldr	r2, [pc, #148]	; (8002064 <UART_AdvFeatureConfig+0x158>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	2240      	movs	r2, #64	; 0x40
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d01d      	beq.n	8002026 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <UART_AdvFeatureConfig+0x15c>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	035b      	lsls	r3, r3, #13
 800200a:	429a      	cmp	r2, r3
 800200c:	d10b      	bne.n	8002026 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a15      	ldr	r2, [pc, #84]	; (800206c <UART_AdvFeatureConfig+0x160>)
 8002016:	4013      	ands	r3, r2
 8002018:	0019      	movs	r1, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202a:	2280      	movs	r2, #128	; 0x80
 800202c:	4013      	ands	r3, r2
 800202e:	d00b      	beq.n	8002048 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4a0e      	ldr	r2, [pc, #56]	; (8002070 <UART_AdvFeatureConfig+0x164>)
 8002038:	4013      	ands	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	605a      	str	r2, [r3, #4]
  }
}
 8002048:	46c0      	nop			; (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	b002      	add	sp, #8
 800204e:	bd80      	pop	{r7, pc}
 8002050:	fffdffff 	.word	0xfffdffff
 8002054:	fffeffff 	.word	0xfffeffff
 8002058:	fffbffff 	.word	0xfffbffff
 800205c:	ffff7fff 	.word	0xffff7fff
 8002060:	ffffefff 	.word	0xffffefff
 8002064:	ffffdfff 	.word	0xffffdfff
 8002068:	ffefffff 	.word	0xffefffff
 800206c:	ff9fffff 	.word	0xff9fffff
 8002070:	fff7ffff 	.word	0xfff7ffff

08002074 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af02      	add	r7, sp, #8
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	2100      	movs	r1, #0
 8002082:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002084:	f7fe fc72 	bl	800096c <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2208      	movs	r2, #8
 8002094:	4013      	ands	r3, r2
 8002096:	2b08      	cmp	r3, #8
 8002098:	d10c      	bne.n	80020b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2280      	movs	r2, #128	; 0x80
 800209e:	0391      	lsls	r1, r2, #14
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4a17      	ldr	r2, [pc, #92]	; (8002100 <UART_CheckIdleState+0x8c>)
 80020a4:	9200      	str	r2, [sp, #0]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f000 f82c 	bl	8002104 <UART_WaitOnFlagUntilTimeout>
 80020ac:	1e03      	subs	r3, r0, #0
 80020ae:	d001      	beq.n	80020b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e021      	b.n	80020f8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2204      	movs	r2, #4
 80020bc:	4013      	ands	r3, r2
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d10c      	bne.n	80020dc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2280      	movs	r2, #128	; 0x80
 80020c6:	03d1      	lsls	r1, r2, #15
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4a0d      	ldr	r2, [pc, #52]	; (8002100 <UART_CheckIdleState+0x8c>)
 80020cc:	9200      	str	r2, [sp, #0]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f000 f818 	bl	8002104 <UART_WaitOnFlagUntilTimeout>
 80020d4:	1e03      	subs	r3, r0, #0
 80020d6:	d001      	beq.n	80020dc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e00d      	b.n	80020f8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2220      	movs	r2, #32
 80020e0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2220      	movs	r2, #32
 80020e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2274      	movs	r2, #116	; 0x74
 80020f2:	2100      	movs	r1, #0
 80020f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	0018      	movs	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b004      	add	sp, #16
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	01ffffff 	.word	0x01ffffff

08002104 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b094      	sub	sp, #80	; 0x50
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	1dfb      	adds	r3, r7, #7
 8002112:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002114:	e0a3      	b.n	800225e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002118:	3301      	adds	r3, #1
 800211a:	d100      	bne.n	800211e <UART_WaitOnFlagUntilTimeout+0x1a>
 800211c:	e09f      	b.n	800225e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800211e:	f7fe fc25 	bl	800096c <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800212a:	429a      	cmp	r2, r3
 800212c:	d302      	bcc.n	8002134 <UART_WaitOnFlagUntilTimeout+0x30>
 800212e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002130:	2b00      	cmp	r3, #0
 8002132:	d13d      	bne.n	80021b0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002134:	f3ef 8310 	mrs	r3, PRIMASK
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800213c:	647b      	str	r3, [r7, #68]	; 0x44
 800213e:	2301      	movs	r3, #1
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002144:	f383 8810 	msr	PRIMASK, r3
}
 8002148:	46c0      	nop			; (mov r8, r8)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	494c      	ldr	r1, [pc, #304]	; (8002288 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002156:	400a      	ands	r2, r1
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800215c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002160:	f383 8810 	msr	PRIMASK, r3
}
 8002164:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002166:	f3ef 8310 	mrs	r3, PRIMASK
 800216a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800216c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800216e:	643b      	str	r3, [r7, #64]	; 0x40
 8002170:	2301      	movs	r3, #1
 8002172:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002176:	f383 8810 	msr	PRIMASK, r3
}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2101      	movs	r1, #1
 8002188:	438a      	bics	r2, r1
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800218e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002192:	f383 8810 	msr	PRIMASK, r3
}
 8002196:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2220      	movs	r2, #32
 800219c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2220      	movs	r2, #32
 80021a2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2274      	movs	r2, #116	; 0x74
 80021a8:	2100      	movs	r1, #0
 80021aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e067      	b.n	8002280 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2204      	movs	r2, #4
 80021b8:	4013      	ands	r3, r2
 80021ba:	d050      	beq.n	800225e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	69da      	ldr	r2, [r3, #28]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	401a      	ands	r2, r3
 80021c8:	2380      	movs	r3, #128	; 0x80
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d146      	bne.n	800225e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2280      	movs	r2, #128	; 0x80
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021da:	f3ef 8310 	mrs	r3, PRIMASK
 80021de:	613b      	str	r3, [r7, #16]
  return(result);
 80021e0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021e4:	2301      	movs	r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	f383 8810 	msr	PRIMASK, r3
}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4923      	ldr	r1, [pc, #140]	; (8002288 <UART_WaitOnFlagUntilTimeout+0x184>)
 80021fc:	400a      	ands	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002202:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	f383 8810 	msr	PRIMASK, r3
}
 800220a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800220c:	f3ef 8310 	mrs	r3, PRIMASK
 8002210:	61fb      	str	r3, [r7, #28]
  return(result);
 8002212:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002214:	64bb      	str	r3, [r7, #72]	; 0x48
 8002216:	2301      	movs	r3, #1
 8002218:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	f383 8810 	msr	PRIMASK, r3
}
 8002220:	46c0      	nop			; (mov r8, r8)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2101      	movs	r1, #1
 800222e:	438a      	bics	r2, r1
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	f383 8810 	msr	PRIMASK, r3
}
 800223c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2220      	movs	r2, #32
 8002242:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2220      	movs	r2, #32
 8002248:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2280      	movs	r2, #128	; 0x80
 800224e:	2120      	movs	r1, #32
 8002250:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2274      	movs	r2, #116	; 0x74
 8002256:	2100      	movs	r1, #0
 8002258:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e010      	b.n	8002280 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	4013      	ands	r3, r2
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	425a      	negs	r2, r3
 800226e:	4153      	adcs	r3, r2
 8002270:	b2db      	uxtb	r3, r3
 8002272:	001a      	movs	r2, r3
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d100      	bne.n	800227e <UART_WaitOnFlagUntilTimeout+0x17a>
 800227c:	e74b      	b.n	8002116 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	0018      	movs	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	b014      	add	sp, #80	; 0x50
 8002286:	bd80      	pop	{r7, pc}
 8002288:	fffffe5f 	.word	0xfffffe5f

0800228c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	0002      	movs	r2, r0
 8002294:	1dbb      	adds	r3, r7, #6
 8002296:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800229c:	1dbb      	adds	r3, r7, #6
 800229e:	2200      	movs	r2, #0
 80022a0:	5e9b      	ldrsh	r3, [r3, r2]
 80022a2:	2b84      	cmp	r3, #132	; 0x84
 80022a4:	d006      	beq.n	80022b4 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80022a6:	1dbb      	adds	r3, r7, #6
 80022a8:	2200      	movs	r2, #0
 80022aa:	5e9a      	ldrsh	r2, [r3, r2]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	18d3      	adds	r3, r2, r3
 80022b0:	3303      	adds	r3, #3
 80022b2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80022b4:	68fb      	ldr	r3, [r7, #12]
}
 80022b6:	0018      	movs	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b004      	add	sp, #16
 80022bc:	bd80      	pop	{r7, pc}

080022be <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80022c2:	f000 fe57 	bl	8002f74 <vTaskStartScheduler>
  
  return osOK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	0018      	movs	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80022ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d0:	b089      	sub	sp, #36	; 0x24
 80022d2:	af04      	add	r7, sp, #16
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d020      	beq.n	8002322 <osThreadCreate+0x54>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01c      	beq.n	8002322 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685c      	ldr	r4, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691e      	ldr	r6, [r3, #16]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2208      	movs	r2, #8
 80022f8:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022fa:	0018      	movs	r0, r3
 80022fc:	f7ff ffc6 	bl	800228c <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002308:	6839      	ldr	r1, [r7, #0]
 800230a:	9302      	str	r3, [sp, #8]
 800230c:	9201      	str	r2, [sp, #4]
 800230e:	9000      	str	r0, [sp, #0]
 8002310:	000b      	movs	r3, r1
 8002312:	0032      	movs	r2, r6
 8002314:	0029      	movs	r1, r5
 8002316:	0020      	movs	r0, r4
 8002318:	f000 fc98 	bl	8002c4c <xTaskCreateStatic>
 800231c:	0003      	movs	r3, r0
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	e01d      	b.n	800235e <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685c      	ldr	r4, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800232e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2208      	movs	r2, #8
 8002334:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002336:	0018      	movs	r0, r3
 8002338:	f7ff ffa8 	bl	800228c <makeFreeRtosPriority>
 800233c:	0001      	movs	r1, r0
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	230c      	movs	r3, #12
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	9301      	str	r3, [sp, #4]
 8002346:	9100      	str	r1, [sp, #0]
 8002348:	0013      	movs	r3, r2
 800234a:	0032      	movs	r2, r6
 800234c:	0029      	movs	r1, r5
 800234e:	0020      	movs	r0, r4
 8002350:	f000 fcbf 	bl	8002cd2 <xTaskCreate>
 8002354:	0003      	movs	r3, r0
 8002356:	2b01      	cmp	r3, #1
 8002358:	d001      	beq.n	800235e <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 800235a:	2300      	movs	r3, #0
 800235c:	e000      	b.n	8002360 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800235e:	68fb      	ldr	r3, [r7, #12]
}
 8002360:	0018      	movs	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	b005      	add	sp, #20
 8002366:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002368 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <osDelay+0x16>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	e000      	b.n	8002380 <osDelay+0x18>
 800237e:	2301      	movs	r3, #1
 8002380:	0018      	movs	r0, r3
 8002382:	f000 fdd1 	bl	8002f28 <vTaskDelay>
  
  return osOK;
 8002386:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002388:	0018      	movs	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	b004      	add	sp, #16
 800238e:	bd80      	pop	{r7, pc}

08002390 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b085      	sub	sp, #20
 8002394:	af02      	add	r7, sp, #8
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d011      	beq.n	80023c6 <osMessageCreate+0x36>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00d      	beq.n	80023c6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6859      	ldr	r1, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	2400      	movs	r4, #0
 80023bc:	9400      	str	r4, [sp, #0]
 80023be:	f000 f90c 	bl	80025da <xQueueGenericCreateStatic>
 80023c2:	0003      	movs	r3, r0
 80023c4:	e008      	b.n	80023d8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	0019      	movs	r1, r3
 80023d2:	f000 f94d 	bl	8002670 <xQueueGenericCreate>
 80023d6:	0003      	movs	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80023d8:	0018      	movs	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	b003      	add	sp, #12
 80023de:	bd90      	pop	{r4, r7, pc}

080023e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3308      	adds	r3, #8
 80023ec:	001a      	movs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	4252      	negs	r2, r2
 80023f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3308      	adds	r3, #8
 80023fe:	001a      	movs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3308      	adds	r3, #8
 8002408:	001a      	movs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002414:	46c0      	nop			; (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	b002      	add	sp, #8
 800241a:	bd80      	pop	{r7, pc}

0800241c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	46bd      	mov	sp, r7
 800242e:	b002      	add	sp, #8
 8002430:	bd80      	pop	{r7, pc}

08002432 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	601a      	str	r2, [r3, #0]
}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	46bd      	mov	sp, r7
 8002472:	b004      	add	sp, #16
 8002474:	bd80      	pop	{r7, pc}

08002476 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	3301      	adds	r3, #1
 800248a:	d103      	bne.n	8002494 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	e00c      	b.n	80024ae <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3308      	adds	r3, #8
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	e002      	b.n	80024a2 <vListInsert+0x2c>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d2f6      	bcs.n	800249c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	601a      	str	r2, [r3, #0]
}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	46bd      	mov	sp, r7
 80024de:	b004      	add	sp, #16
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6892      	ldr	r2, [r2, #8]
 80024f8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6852      	ldr	r2, [r2, #4]
 8002502:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	429a      	cmp	r2, r3
 800250c:	d103      	bne.n	8002516 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	1e5a      	subs	r2, r3, #1
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
}
 800252a:	0018      	movs	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	b004      	add	sp, #16
 8002530:	bd80      	pop	{r7, pc}

08002532 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <xQueueGenericReset+0x18>
 8002546:	b672      	cpsid	i
 8002548:	e7fe      	b.n	8002548 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800254a:	f001 fa19 	bl	8003980 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	434b      	muls	r3, r1
 800255c:	18d2      	adds	r2, r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002578:	1e59      	subs	r1, r3, #1
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	434b      	muls	r3, r1
 8002580:	18d2      	adds	r2, r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2244      	movs	r2, #68	; 0x44
 800258a:	21ff      	movs	r1, #255	; 0xff
 800258c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2245      	movs	r2, #69	; 0x45
 8002592:	21ff      	movs	r1, #255	; 0xff
 8002594:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10d      	bne.n	80025b8 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d013      	beq.n	80025cc <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	3310      	adds	r3, #16
 80025a8:	0018      	movs	r0, r3
 80025aa:	f000 feed 	bl	8003388 <xTaskRemoveFromEventList>
 80025ae:	1e03      	subs	r3, r0, #0
 80025b0:	d00c      	beq.n	80025cc <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80025b2:	f001 f9d5 	bl	8003960 <vPortYield>
 80025b6:	e009      	b.n	80025cc <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	3310      	adds	r3, #16
 80025bc:	0018      	movs	r0, r3
 80025be:	f7ff ff0f 	bl	80023e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3324      	adds	r3, #36	; 0x24
 80025c6:	0018      	movs	r0, r3
 80025c8:	f7ff ff0a 	bl	80023e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80025cc:	f001 f9ea 	bl	80039a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80025d0:	2301      	movs	r3, #1
}
 80025d2:	0018      	movs	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b004      	add	sp, #16
 80025d8:	bd80      	pop	{r7, pc}

080025da <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80025da:	b590      	push	{r4, r7, lr}
 80025dc:	b089      	sub	sp, #36	; 0x24
 80025de:	af02      	add	r7, sp, #8
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <xQueueGenericCreateStatic+0x18>
 80025ee:	b672      	cpsid	i
 80025f0:	e7fe      	b.n	80025f0 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <xQueueGenericCreateStatic+0x22>
 80025f8:	b672      	cpsid	i
 80025fa:	e7fe      	b.n	80025fa <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <xQueueGenericCreateStatic+0x2e>
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <xQueueGenericCreateStatic+0x32>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <xQueueGenericCreateStatic+0x34>
 800260c:	2300      	movs	r3, #0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <xQueueGenericCreateStatic+0x3c>
 8002612:	b672      	cpsid	i
 8002614:	e7fe      	b.n	8002614 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <xQueueGenericCreateStatic+0x48>
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <xQueueGenericCreateStatic+0x4c>
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <xQueueGenericCreateStatic+0x4e>
 8002626:	2300      	movs	r3, #0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <xQueueGenericCreateStatic+0x56>
 800262c:	b672      	cpsid	i
 800262e:	e7fe      	b.n	800262e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002630:	2348      	movs	r3, #72	; 0x48
 8002632:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	2b48      	cmp	r3, #72	; 0x48
 8002638:	d001      	beq.n	800263e <xQueueGenericCreateStatic+0x64>
 800263a:	b672      	cpsid	i
 800263c:	e7fe      	b.n	800263c <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00e      	beq.n	8002666 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2246      	movs	r2, #70	; 0x46
 800264c:	2101      	movs	r1, #1
 800264e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002650:	2328      	movs	r3, #40	; 0x28
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	781c      	ldrb	r4, [r3, #0]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	0023      	movs	r3, r4
 8002662:	f000 f83b 	bl	80026dc <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002666:	697b      	ldr	r3, [r7, #20]
	}
 8002668:	0018      	movs	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	b007      	add	sp, #28
 800266e:	bd90      	pop	{r4, r7, pc}

08002670 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b08b      	sub	sp, #44	; 0x2c
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	1dfb      	adds	r3, r7, #7
 800267c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <xQueueGenericCreate+0x18>
 8002684:	b672      	cpsid	i
 8002686:	e7fe      	b.n	8002686 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d102      	bne.n	8002694 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	e003      	b.n	800269c <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	4353      	muls	r3, r2
 800269a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	3348      	adds	r3, #72	; 0x48
 80026a0:	0018      	movs	r0, r3
 80026a2:	f001 fa05 	bl	8003ab0 <pvPortMalloc>
 80026a6:	0003      	movs	r3, r0
 80026a8:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d010      	beq.n	80026d2 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	3348      	adds	r3, #72	; 0x48
 80026b4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	2246      	movs	r2, #70	; 0x46
 80026ba:	2100      	movs	r1, #0
 80026bc:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026be:	1dfb      	adds	r3, r7, #7
 80026c0:	781c      	ldrb	r4, [r3, #0]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	0023      	movs	r3, r4
 80026ce:	f000 f805 	bl	80026dc <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80026d2:	69bb      	ldr	r3, [r7, #24]
	}
 80026d4:	0018      	movs	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b009      	add	sp, #36	; 0x24
 80026da:	bd90      	pop	{r4, r7, pc}

080026dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	001a      	movs	r2, r3
 80026ea:	1cfb      	adds	r3, r7, #3
 80026ec:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d103      	bne.n	80026fc <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e002      	b.n	8002702 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2101      	movs	r1, #1
 8002712:	0018      	movs	r0, r3
 8002714:	f7ff ff0d 	bl	8002532 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002718:	46c0      	nop			; (mov r8, r8)
 800271a:	46bd      	mov	sp, r7
 800271c:	b004      	add	sp, #16
 800271e:	bd80      	pop	{r7, pc}

08002720 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08a      	sub	sp, #40	; 0x28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800272e:	2300      	movs	r3, #0
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <xQueueGenericSend+0x20>
 800273c:	b672      	cpsid	i
 800273e:	e7fe      	b.n	800273e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d103      	bne.n	800274e <xQueueGenericSend+0x2e>
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <xQueueGenericSend+0x32>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <xQueueGenericSend+0x34>
 8002752:	2300      	movs	r3, #0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <xQueueGenericSend+0x3c>
 8002758:	b672      	cpsid	i
 800275a:	e7fe      	b.n	800275a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d103      	bne.n	800276a <xQueueGenericSend+0x4a>
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <xQueueGenericSend+0x4e>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <xQueueGenericSend+0x50>
 800276e:	2300      	movs	r3, #0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <xQueueGenericSend+0x58>
 8002774:	b672      	cpsid	i
 8002776:	e7fe      	b.n	8002776 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002778:	f000 ff9e 	bl	80036b8 <xTaskGetSchedulerState>
 800277c:	1e03      	subs	r3, r0, #0
 800277e:	d102      	bne.n	8002786 <xQueueGenericSend+0x66>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <xQueueGenericSend+0x6a>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <xQueueGenericSend+0x6c>
 800278a:	2300      	movs	r3, #0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <xQueueGenericSend+0x74>
 8002790:	b672      	cpsid	i
 8002792:	e7fe      	b.n	8002792 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002794:	f001 f8f4 	bl	8003980 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d302      	bcc.n	80027aa <xQueueGenericSend+0x8a>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d11e      	bne.n	80027e8 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	0018      	movs	r0, r3
 80027b2:	f000 f92e 	bl	8002a12 <prvCopyDataToQueue>
 80027b6:	0003      	movs	r3, r0
 80027b8:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	3324      	adds	r3, #36	; 0x24
 80027c6:	0018      	movs	r0, r3
 80027c8:	f000 fdde 	bl	8003388 <xTaskRemoveFromEventList>
 80027cc:	1e03      	subs	r3, r0, #0
 80027ce:	d007      	beq.n	80027e0 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80027d0:	f001 f8c6 	bl	8003960 <vPortYield>
 80027d4:	e004      	b.n	80027e0 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80027dc:	f001 f8c0 	bl	8003960 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80027e0:	f001 f8e0 	bl	80039a4 <vPortExitCritical>
				return pdPASS;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e05b      	b.n	80028a0 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d103      	bne.n	80027f6 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027ee:	f001 f8d9 	bl	80039a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	e054      	b.n	80028a0 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d106      	bne.n	800280a <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027fc:	2314      	movs	r3, #20
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	0018      	movs	r0, r3
 8002802:	f000 fe1d 	bl	8003440 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002806:	2301      	movs	r3, #1
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800280a:	f001 f8cb 	bl	80039a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800280e:	f000 fbff 	bl	8003010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002812:	f001 f8b5 	bl	8003980 <vPortEnterCritical>
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	2244      	movs	r2, #68	; 0x44
 800281a:	5c9b      	ldrb	r3, [r3, r2]
 800281c:	b25b      	sxtb	r3, r3
 800281e:	3301      	adds	r3, #1
 8002820:	d103      	bne.n	800282a <xQueueGenericSend+0x10a>
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	2244      	movs	r2, #68	; 0x44
 8002826:	2100      	movs	r1, #0
 8002828:	5499      	strb	r1, [r3, r2]
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	2245      	movs	r2, #69	; 0x45
 800282e:	5c9b      	ldrb	r3, [r3, r2]
 8002830:	b25b      	sxtb	r3, r3
 8002832:	3301      	adds	r3, #1
 8002834:	d103      	bne.n	800283e <xQueueGenericSend+0x11e>
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	2245      	movs	r2, #69	; 0x45
 800283a:	2100      	movs	r1, #0
 800283c:	5499      	strb	r1, [r3, r2]
 800283e:	f001 f8b1 	bl	80039a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002842:	1d3a      	adds	r2, r7, #4
 8002844:	2314      	movs	r3, #20
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	0011      	movs	r1, r2
 800284a:	0018      	movs	r0, r3
 800284c:	f000 fe0c 	bl	8003468 <xTaskCheckForTimeOut>
 8002850:	1e03      	subs	r3, r0, #0
 8002852:	d11e      	bne.n	8002892 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	0018      	movs	r0, r3
 8002858:	f000 f9e0 	bl	8002c1c <prvIsQueueFull>
 800285c:	1e03      	subs	r3, r0, #0
 800285e:	d011      	beq.n	8002884 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	3310      	adds	r3, #16
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	0011      	movs	r1, r2
 8002868:	0018      	movs	r0, r3
 800286a:	f000 fd6f 	bl	800334c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	0018      	movs	r0, r3
 8002872:	f000 f95f 	bl	8002b34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002876:	f000 fbd7 	bl	8003028 <xTaskResumeAll>
 800287a:	1e03      	subs	r3, r0, #0
 800287c:	d18a      	bne.n	8002794 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800287e:	f001 f86f 	bl	8003960 <vPortYield>
 8002882:	e787      	b.n	8002794 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	0018      	movs	r0, r3
 8002888:	f000 f954 	bl	8002b34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800288c:	f000 fbcc 	bl	8003028 <xTaskResumeAll>
 8002890:	e780      	b.n	8002794 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	0018      	movs	r0, r3
 8002896:	f000 f94d 	bl	8002b34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800289a:	f000 fbc5 	bl	8003028 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800289e:	2300      	movs	r3, #0
		}
	}
}
 80028a0:	0018      	movs	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b00a      	add	sp, #40	; 0x28
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <xQueueReceive+0x1e>
 80028c2:	b672      	cpsid	i
 80028c4:	e7fe      	b.n	80028c4 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d103      	bne.n	80028d4 <xQueueReceive+0x2c>
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <xQueueReceive+0x30>
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <xQueueReceive+0x32>
 80028d8:	2300      	movs	r3, #0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <xQueueReceive+0x3a>
 80028de:	b672      	cpsid	i
 80028e0:	e7fe      	b.n	80028e0 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028e2:	f000 fee9 	bl	80036b8 <xTaskGetSchedulerState>
 80028e6:	1e03      	subs	r3, r0, #0
 80028e8:	d102      	bne.n	80028f0 <xQueueReceive+0x48>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <xQueueReceive+0x4c>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <xQueueReceive+0x4e>
 80028f4:	2300      	movs	r3, #0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <xQueueReceive+0x56>
 80028fa:	b672      	cpsid	i
 80028fc:	e7fe      	b.n	80028fc <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80028fe:	f001 f83f 	bl	8003980 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002906:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d01a      	beq.n	8002944 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	0011      	movs	r1, r2
 8002914:	0018      	movs	r0, r3
 8002916:	f000 f8e7 	bl	8002ae8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	1e5a      	subs	r2, r3, #1
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d008      	beq.n	800293c <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	3310      	adds	r3, #16
 800292e:	0018      	movs	r0, r3
 8002930:	f000 fd2a 	bl	8003388 <xTaskRemoveFromEventList>
 8002934:	1e03      	subs	r3, r0, #0
 8002936:	d001      	beq.n	800293c <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002938:	f001 f812 	bl	8003960 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800293c:	f001 f832 	bl	80039a4 <vPortExitCritical>
				return pdPASS;
 8002940:	2301      	movs	r3, #1
 8002942:	e062      	b.n	8002a0a <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d103      	bne.n	8002952 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800294a:	f001 f82b 	bl	80039a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800294e:	2300      	movs	r3, #0
 8002950:	e05b      	b.n	8002a0a <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	2b00      	cmp	r3, #0
 8002956:	d106      	bne.n	8002966 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002958:	2314      	movs	r3, #20
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	0018      	movs	r0, r3
 800295e:	f000 fd6f 	bl	8003440 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002962:	2301      	movs	r3, #1
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002966:	f001 f81d 	bl	80039a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800296a:	f000 fb51 	bl	8003010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800296e:	f001 f807 	bl	8003980 <vPortEnterCritical>
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	2244      	movs	r2, #68	; 0x44
 8002976:	5c9b      	ldrb	r3, [r3, r2]
 8002978:	b25b      	sxtb	r3, r3
 800297a:	3301      	adds	r3, #1
 800297c:	d103      	bne.n	8002986 <xQueueReceive+0xde>
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	2244      	movs	r2, #68	; 0x44
 8002982:	2100      	movs	r1, #0
 8002984:	5499      	strb	r1, [r3, r2]
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	2245      	movs	r2, #69	; 0x45
 800298a:	5c9b      	ldrb	r3, [r3, r2]
 800298c:	b25b      	sxtb	r3, r3
 800298e:	3301      	adds	r3, #1
 8002990:	d103      	bne.n	800299a <xQueueReceive+0xf2>
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	2245      	movs	r2, #69	; 0x45
 8002996:	2100      	movs	r1, #0
 8002998:	5499      	strb	r1, [r3, r2]
 800299a:	f001 f803 	bl	80039a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800299e:	1d3a      	adds	r2, r7, #4
 80029a0:	2314      	movs	r3, #20
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	0011      	movs	r1, r2
 80029a6:	0018      	movs	r0, r3
 80029a8:	f000 fd5e 	bl	8003468 <xTaskCheckForTimeOut>
 80029ac:	1e03      	subs	r3, r0, #0
 80029ae:	d11e      	bne.n	80029ee <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 f91c 	bl	8002bf0 <prvIsQueueEmpty>
 80029b8:	1e03      	subs	r3, r0, #0
 80029ba:	d011      	beq.n	80029e0 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	3324      	adds	r3, #36	; 0x24
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	0011      	movs	r1, r2
 80029c4:	0018      	movs	r0, r3
 80029c6:	f000 fcc1 	bl	800334c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	0018      	movs	r0, r3
 80029ce:	f000 f8b1 	bl	8002b34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80029d2:	f000 fb29 	bl	8003028 <xTaskResumeAll>
 80029d6:	1e03      	subs	r3, r0, #0
 80029d8:	d191      	bne.n	80028fe <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 80029da:	f000 ffc1 	bl	8003960 <vPortYield>
 80029de:	e78e      	b.n	80028fe <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	0018      	movs	r0, r3
 80029e4:	f000 f8a6 	bl	8002b34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029e8:	f000 fb1e 	bl	8003028 <xTaskResumeAll>
 80029ec:	e787      	b.n	80028fe <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	0018      	movs	r0, r3
 80029f2:	f000 f89f 	bl	8002b34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029f6:	f000 fb17 	bl	8003028 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	0018      	movs	r0, r3
 80029fe:	f000 f8f7 	bl	8002bf0 <prvIsQueueEmpty>
 8002a02:	1e03      	subs	r3, r0, #0
 8002a04:	d100      	bne.n	8002a08 <xQueueReceive+0x160>
 8002a06:	e77a      	b.n	80028fe <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002a08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b00a      	add	sp, #40	; 0x28
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b086      	sub	sp, #24
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10e      	bne.n	8002a4e <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d14e      	bne.n	8002ad6 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f000 fe57 	bl	80036f0 <xTaskPriorityDisinherit>
 8002a42:	0003      	movs	r3, r0
 8002a44:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	e043      	b.n	8002ad6 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d119      	bne.n	8002a88 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6898      	ldr	r0, [r3, #8]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	0019      	movs	r1, r3
 8002a60:	f001 f9f8 	bl	8003e54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	18d2      	adds	r2, r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d32b      	bcc.n	8002ad6 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	609a      	str	r2, [r3, #8]
 8002a86:	e026      	b.n	8002ad6 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	68d8      	ldr	r0, [r3, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	0019      	movs	r1, r3
 8002a94:	f001 f9de 	bl	8003e54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	425b      	negs	r3, r3
 8002aa2:	18d2      	adds	r2, r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d207      	bcs.n	8002ac4 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	425b      	negs	r3, r3
 8002abe:	18d2      	adds	r2, r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d105      	bne.n	8002ad6 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002ade:	697b      	ldr	r3, [r7, #20]
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b006      	add	sp, #24
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d018      	beq.n	8002b2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	18d2      	adds	r2, r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d303      	bcc.n	8002b1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68d9      	ldr	r1, [r3, #12]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	0018      	movs	r0, r3
 8002b28:	f001 f994 	bl	8003e54 <memcpy>
	}
}
 8002b2c:	46c0      	nop			; (mov r8, r8)
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b002      	add	sp, #8
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002b3c:	f000 ff20 	bl	8003980 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002b40:	230f      	movs	r3, #15
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	2145      	movs	r1, #69	; 0x45
 8002b48:	5c52      	ldrb	r2, [r2, r1]
 8002b4a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b4c:	e013      	b.n	8002b76 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d016      	beq.n	8002b84 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3324      	adds	r3, #36	; 0x24
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f000 fc14 	bl	8003388 <xTaskRemoveFromEventList>
 8002b60:	1e03      	subs	r3, r0, #0
 8002b62:	d001      	beq.n	8002b68 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002b64:	f000 fcd0 	bl	8003508 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b68:	210f      	movs	r1, #15
 8002b6a:	187b      	adds	r3, r7, r1
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	187b      	adds	r3, r7, r1
 8002b74:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b76:	230f      	movs	r3, #15
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	dce5      	bgt.n	8002b4e <prvUnlockQueue+0x1a>
 8002b82:	e000      	b.n	8002b86 <prvUnlockQueue+0x52>
					break;
 8002b84:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2245      	movs	r2, #69	; 0x45
 8002b8a:	21ff      	movs	r1, #255	; 0xff
 8002b8c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002b8e:	f000 ff09 	bl	80039a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b92:	f000 fef5 	bl	8003980 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b96:	230e      	movs	r3, #14
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	2144      	movs	r1, #68	; 0x44
 8002b9e:	5c52      	ldrb	r2, [r2, r1]
 8002ba0:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ba2:	e013      	b.n	8002bcc <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d016      	beq.n	8002bda <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3310      	adds	r3, #16
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f000 fbe9 	bl	8003388 <xTaskRemoveFromEventList>
 8002bb6:	1e03      	subs	r3, r0, #0
 8002bb8:	d001      	beq.n	8002bbe <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8002bba:	f000 fca5 	bl	8003508 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002bbe:	210e      	movs	r1, #14
 8002bc0:	187b      	adds	r3, r7, r1
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	187b      	adds	r3, r7, r1
 8002bca:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bcc:	230e      	movs	r3, #14
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	b25b      	sxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	dce5      	bgt.n	8002ba4 <prvUnlockQueue+0x70>
 8002bd8:	e000      	b.n	8002bdc <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8002bda:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2244      	movs	r2, #68	; 0x44
 8002be0:	21ff      	movs	r1, #255	; 0xff
 8002be2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002be4:	f000 fede 	bl	80039a4 <vPortExitCritical>
}
 8002be8:	46c0      	nop			; (mov r8, r8)
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b004      	add	sp, #16
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bf8:	f000 fec2 	bl	8003980 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c04:	2301      	movs	r3, #1
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	e001      	b.n	8002c0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c0e:	f000 fec9 	bl	80039a4 <vPortExitCritical>

	return xReturn;
 8002c12:	68fb      	ldr	r3, [r7, #12]
}
 8002c14:	0018      	movs	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b004      	add	sp, #16
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c24:	f000 feac 	bl	8003980 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d102      	bne.n	8002c3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002c34:	2301      	movs	r3, #1
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	e001      	b.n	8002c3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c3e:	f000 feb1 	bl	80039a4 <vPortExitCritical>

	return xReturn;
 8002c42:	68fb      	ldr	r3, [r7, #12]
}
 8002c44:	0018      	movs	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b004      	add	sp, #16
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c4c:	b590      	push	{r4, r7, lr}
 8002c4e:	b08d      	sub	sp, #52	; 0x34
 8002c50:	af04      	add	r7, sp, #16
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
 8002c58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <xTaskCreateStatic+0x18>
 8002c60:	b672      	cpsid	i
 8002c62:	e7fe      	b.n	8002c62 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8002c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <xTaskCreateStatic+0x22>
 8002c6a:	b672      	cpsid	i
 8002c6c:	e7fe      	b.n	8002c6c <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c6e:	2354      	movs	r3, #84	; 0x54
 8002c70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2b54      	cmp	r3, #84	; 0x54
 8002c76:	d001      	beq.n	8002c7c <xTaskCreateStatic+0x30>
 8002c78:	b672      	cpsid	i
 8002c7a:	e7fe      	b.n	8002c7a <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d020      	beq.n	8002cc4 <xTaskCreateStatic+0x78>
 8002c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01d      	beq.n	8002cc4 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8a:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	2251      	movs	r2, #81	; 0x51
 8002c96:	2102      	movs	r1, #2
 8002c98:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c9a:	683c      	ldr	r4, [r7, #0]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	68b9      	ldr	r1, [r7, #8]
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	9303      	str	r3, [sp, #12]
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	9302      	str	r3, [sp, #8]
 8002caa:	2318      	movs	r3, #24
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	0023      	movs	r3, r4
 8002cb6:	f000 f859 	bl	8002d6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f000 f8cf 	bl	8002e60 <prvAddNewTaskToReadyList>
 8002cc2:	e001      	b.n	8002cc8 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002cc8:	69bb      	ldr	r3, [r7, #24]
	}
 8002cca:	0018      	movs	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b009      	add	sp, #36	; 0x24
 8002cd0:	bd90      	pop	{r4, r7, pc}

08002cd2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002cd2:	b590      	push	{r4, r7, lr}
 8002cd4:	b08d      	sub	sp, #52	; 0x34
 8002cd6:	af04      	add	r7, sp, #16
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	603b      	str	r3, [r7, #0]
 8002cde:	1dbb      	adds	r3, r7, #6
 8002ce0:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ce2:	1dbb      	adds	r3, r7, #6
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 fee1 	bl	8003ab0 <pvPortMalloc>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d010      	beq.n	8002d1a <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002cf8:	2054      	movs	r0, #84	; 0x54
 8002cfa:	f000 fed9 	bl	8003ab0 <pvPortMalloc>
 8002cfe:	0003      	movs	r3, r0
 8002d00:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d0e:	e006      	b.n	8002d1e <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	0018      	movs	r0, r3
 8002d14:	f000 ff72 	bl	8003bfc <vPortFree>
 8002d18:	e001      	b.n	8002d1e <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d01a      	beq.n	8002d5a <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	2251      	movs	r2, #81	; 0x51
 8002d28:	2100      	movs	r1, #0
 8002d2a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d2c:	1dbb      	adds	r3, r7, #6
 8002d2e:	881a      	ldrh	r2, [r3, #0]
 8002d30:	683c      	ldr	r4, [r7, #0]
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	2300      	movs	r3, #0
 8002d38:	9303      	str	r3, [sp, #12]
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	9302      	str	r3, [sp, #8]
 8002d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d40:	9301      	str	r3, [sp, #4]
 8002d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	0023      	movs	r3, r4
 8002d48:	f000 f810 	bl	8002d6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f000 f886 	bl	8002e60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d54:	2301      	movs	r3, #1
 8002d56:	61bb      	str	r3, [r7, #24]
 8002d58:	e002      	b.n	8002d60 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	425b      	negs	r3, r3
 8002d5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d60:	69bb      	ldr	r3, [r7, #24]
	}
 8002d62:	0018      	movs	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b009      	add	sp, #36	; 0x24
 8002d68:	bd90      	pop	{r4, r7, pc}
	...

08002d6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4936      	ldr	r1, [pc, #216]	; (8002e5c <prvInitialiseNewTask+0xf0>)
 8002d82:	468c      	mov	ip, r1
 8002d84:	4463      	add	r3, ip
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	18d3      	adds	r3, r2, r3
 8002d8a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	2207      	movs	r2, #7
 8002d90:	4393      	bics	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	2207      	movs	r2, #7
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d001      	beq.n	8002da0 <prvInitialiseNewTask+0x34>
 8002d9c:	b672      	cpsid	i
 8002d9e:	e7fe      	b.n	8002d9e <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	e013      	b.n	8002dce <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	18d3      	adds	r3, r2, r3
 8002dac:	7818      	ldrb	r0, [r3, #0]
 8002dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db0:	2134      	movs	r1, #52	; 0x34
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	18d3      	adds	r3, r2, r3
 8002db6:	185b      	adds	r3, r3, r1
 8002db8:	1c02      	adds	r2, r0, #0
 8002dba:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	18d3      	adds	r3, r2, r3
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d006      	beq.n	8002dd6 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2b0f      	cmp	r3, #15
 8002dd2:	d9e8      	bls.n	8002da6 <prvInitialiseNewTask+0x3a>
 8002dd4:	e000      	b.n	8002dd8 <prvInitialiseNewTask+0x6c>
		{
			break;
 8002dd6:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dda:	2243      	movs	r2, #67	; 0x43
 8002ddc:	2100      	movs	r1, #0
 8002dde:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	2b06      	cmp	r3, #6
 8002de4:	d901      	bls.n	8002dea <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002de6:	2306      	movs	r3, #6
 8002de8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	6a3a      	ldr	r2, [r7, #32]
 8002dee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df2:	6a3a      	ldr	r2, [r7, #32]
 8002df4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	2200      	movs	r2, #0
 8002dfa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	3304      	adds	r3, #4
 8002e00:	0018      	movs	r0, r3
 8002e02:	f7ff fb0b 	bl	800241c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	3318      	adds	r3, #24
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f7ff fb06 	bl	800241c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	2207      	movs	r2, #7
 8002e1a:	1ad2      	subs	r2, r2, r3
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e28:	2200      	movs	r2, #0
 8002e2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2e:	2250      	movs	r2, #80	; 0x50
 8002e30:	2100      	movs	r1, #0
 8002e32:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	68f9      	ldr	r1, [r7, #12]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f000 fd08 	bl	8003850 <pxPortInitialiseStack>
 8002e40:	0002      	movs	r2, r0
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b006      	add	sp, #24
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	3fffffff 	.word	0x3fffffff

08002e60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e68:	f000 fd8a 	bl	8003980 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e6c:	4b28      	ldr	r3, [pc, #160]	; (8002f10 <prvAddNewTaskToReadyList+0xb0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	4b27      	ldr	r3, [pc, #156]	; (8002f10 <prvAddNewTaskToReadyList+0xb0>)
 8002e74:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002e76:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <prvAddNewTaskToReadyList+0xb4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d109      	bne.n	8002e92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e7e:	4b25      	ldr	r3, [pc, #148]	; (8002f14 <prvAddNewTaskToReadyList+0xb4>)
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e84:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <prvAddNewTaskToReadyList+0xb0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d110      	bne.n	8002eae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e8c:	f000 fb56 	bl	800353c <prvInitialiseTaskLists>
 8002e90:	e00d      	b.n	8002eae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e92:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <prvAddNewTaskToReadyList+0xb8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e9a:	4b1e      	ldr	r3, [pc, #120]	; (8002f14 <prvAddNewTaskToReadyList+0xb4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d802      	bhi.n	8002eae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ea8:	4b1a      	ldr	r3, [pc, #104]	; (8002f14 <prvAddNewTaskToReadyList+0xb4>)
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002eae:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <prvAddNewTaskToReadyList+0xbc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <prvAddNewTaskToReadyList+0xbc>)
 8002eb6:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ebc:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <prvAddNewTaskToReadyList+0xc0>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d903      	bls.n	8002ecc <prvAddNewTaskToReadyList+0x6c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec8:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <prvAddNewTaskToReadyList+0xc0>)
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed0:	0013      	movs	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	189b      	adds	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4a12      	ldr	r2, [pc, #72]	; (8002f24 <prvAddNewTaskToReadyList+0xc4>)
 8002eda:	189a      	adds	r2, r3, r2
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3304      	adds	r3, #4
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	0010      	movs	r0, r2
 8002ee4:	f7ff faa5 	bl	8002432 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ee8:	f000 fd5c 	bl	80039a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002eec:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <prvAddNewTaskToReadyList+0xb8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ef4:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <prvAddNewTaskToReadyList+0xb4>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d201      	bcs.n	8002f06 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f02:	f000 fd2d 	bl	8003960 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b002      	add	sp, #8
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	20000460 	.word	0x20000460
 8002f14:	20000360 	.word	0x20000360
 8002f18:	2000046c 	.word	0x2000046c
 8002f1c:	2000047c 	.word	0x2000047c
 8002f20:	20000468 	.word	0x20000468
 8002f24:	20000364 	.word	0x20000364

08002f28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d010      	beq.n	8002f5c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <vTaskDelay+0x48>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <vTaskDelay+0x1e>
 8002f42:	b672      	cpsid	i
 8002f44:	e7fe      	b.n	8002f44 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8002f46:	f000 f863 	bl	8003010 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f000 fc2a 	bl	80037a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f54:	f000 f868 	bl	8003028 <xTaskResumeAll>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8002f62:	f000 fcfd 	bl	8003960 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b004      	add	sp, #16
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	20000488 	.word	0x20000488

08002f74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b089      	sub	sp, #36	; 0x24
 8002f78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f82:	003a      	movs	r2, r7
 8002f84:	1d39      	adds	r1, r7, #4
 8002f86:	2308      	movs	r3, #8
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f7fd f948 	bl	8000220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f90:	683c      	ldr	r4, [r7, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	4918      	ldr	r1, [pc, #96]	; (8002ff8 <vTaskStartScheduler+0x84>)
 8002f98:	4818      	ldr	r0, [pc, #96]	; (8002ffc <vTaskStartScheduler+0x88>)
 8002f9a:	9202      	str	r2, [sp, #8]
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	0022      	movs	r2, r4
 8002fa6:	f7ff fe51 	bl	8002c4c <xTaskCreateStatic>
 8002faa:	0002      	movs	r2, r0
 8002fac:	4b14      	ldr	r3, [pc, #80]	; (8003000 <vTaskStartScheduler+0x8c>)
 8002fae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002fb0:	4b13      	ldr	r3, [pc, #76]	; (8003000 <vTaskStartScheduler+0x8c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	e001      	b.n	8002fc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d10d      	bne.n	8002fe4 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8002fc8:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fca:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <vTaskStartScheduler+0x90>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4252      	negs	r2, r2
 8002fd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <vTaskStartScheduler+0x94>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <vTaskStartScheduler+0x98>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fde:	f000 fc9b 	bl	8003918 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fe2:	e004      	b.n	8002fee <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	d101      	bne.n	8002fee <vTaskStartScheduler+0x7a>
 8002fea:	b672      	cpsid	i
 8002fec:	e7fe      	b.n	8002fec <vTaskStartScheduler+0x78>
}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b005      	add	sp, #20
 8002ff4:	bd90      	pop	{r4, r7, pc}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	08003f2c 	.word	0x08003f2c
 8002ffc:	0800351d 	.word	0x0800351d
 8003000:	20000484 	.word	0x20000484
 8003004:	20000480 	.word	0x20000480
 8003008:	2000046c 	.word	0x2000046c
 800300c:	20000464 	.word	0x20000464

08003010 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003014:	4b03      	ldr	r3, [pc, #12]	; (8003024 <vTaskSuspendAll+0x14>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	4b02      	ldr	r3, [pc, #8]	; (8003024 <vTaskSuspendAll+0x14>)
 800301c:	601a      	str	r2, [r3, #0]
}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20000488 	.word	0x20000488

08003028 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003036:	4b3a      	ldr	r3, [pc, #232]	; (8003120 <xTaskResumeAll+0xf8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <xTaskResumeAll+0x1a>
 800303e:	b672      	cpsid	i
 8003040:	e7fe      	b.n	8003040 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003042:	f000 fc9d 	bl	8003980 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003046:	4b36      	ldr	r3, [pc, #216]	; (8003120 <xTaskResumeAll+0xf8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4b34      	ldr	r3, [pc, #208]	; (8003120 <xTaskResumeAll+0xf8>)
 800304e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003050:	4b33      	ldr	r3, [pc, #204]	; (8003120 <xTaskResumeAll+0xf8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d15b      	bne.n	8003110 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003058:	4b32      	ldr	r3, [pc, #200]	; (8003124 <xTaskResumeAll+0xfc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d057      	beq.n	8003110 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003060:	e02f      	b.n	80030c2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003062:	4b31      	ldr	r3, [pc, #196]	; (8003128 <xTaskResumeAll+0x100>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	3318      	adds	r3, #24
 800306e:	0018      	movs	r0, r3
 8003070:	f7ff fa37 	bl	80024e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	3304      	adds	r3, #4
 8003078:	0018      	movs	r0, r3
 800307a:	f7ff fa32 	bl	80024e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003082:	4b2a      	ldr	r3, [pc, #168]	; (800312c <xTaskResumeAll+0x104>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d903      	bls.n	8003092 <xTaskResumeAll+0x6a>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308e:	4b27      	ldr	r3, [pc, #156]	; (800312c <xTaskResumeAll+0x104>)
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003096:	0013      	movs	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	189b      	adds	r3, r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4a24      	ldr	r2, [pc, #144]	; (8003130 <xTaskResumeAll+0x108>)
 80030a0:	189a      	adds	r2, r3, r2
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3304      	adds	r3, #4
 80030a6:	0019      	movs	r1, r3
 80030a8:	0010      	movs	r0, r2
 80030aa:	f7ff f9c2 	bl	8002432 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b2:	4b20      	ldr	r3, [pc, #128]	; (8003134 <xTaskResumeAll+0x10c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d302      	bcc.n	80030c2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80030bc:	4b1e      	ldr	r3, [pc, #120]	; (8003138 <xTaskResumeAll+0x110>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030c2:	4b19      	ldr	r3, [pc, #100]	; (8003128 <xTaskResumeAll+0x100>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1cb      	bne.n	8003062 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80030d0:	f000 face 	bl	8003670 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80030d4:	4b19      	ldr	r3, [pc, #100]	; (800313c <xTaskResumeAll+0x114>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00f      	beq.n	8003100 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80030e0:	f000 f82e 	bl	8003140 <xTaskIncrementTick>
 80030e4:	1e03      	subs	r3, r0, #0
 80030e6:	d002      	beq.n	80030ee <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80030e8:	4b13      	ldr	r3, [pc, #76]	; (8003138 <xTaskResumeAll+0x110>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f2      	bne.n	80030e0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <xTaskResumeAll+0x114>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003100:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <xTaskResumeAll+0x110>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003108:	2301      	movs	r3, #1
 800310a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800310c:	f000 fc28 	bl	8003960 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003110:	f000 fc48 	bl	80039a4 <vPortExitCritical>

	return xAlreadyYielded;
 8003114:	68bb      	ldr	r3, [r7, #8]
}
 8003116:	0018      	movs	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	b004      	add	sp, #16
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	20000488 	.word	0x20000488
 8003124:	20000460 	.word	0x20000460
 8003128:	20000420 	.word	0x20000420
 800312c:	20000468 	.word	0x20000468
 8003130:	20000364 	.word	0x20000364
 8003134:	20000360 	.word	0x20000360
 8003138:	20000474 	.word	0x20000474
 800313c:	20000470 	.word	0x20000470

08003140 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800314a:	4b4c      	ldr	r3, [pc, #304]	; (800327c <xTaskIncrementTick+0x13c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d000      	beq.n	8003154 <xTaskIncrementTick+0x14>
 8003152:	e083      	b.n	800325c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003154:	4b4a      	ldr	r3, [pc, #296]	; (8003280 <xTaskIncrementTick+0x140>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3301      	adds	r3, #1
 800315a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800315c:	4b48      	ldr	r3, [pc, #288]	; (8003280 <xTaskIncrementTick+0x140>)
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d117      	bne.n	8003198 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8003168:	4b46      	ldr	r3, [pc, #280]	; (8003284 <xTaskIncrementTick+0x144>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <xTaskIncrementTick+0x36>
 8003172:	b672      	cpsid	i
 8003174:	e7fe      	b.n	8003174 <xTaskIncrementTick+0x34>
 8003176:	4b43      	ldr	r3, [pc, #268]	; (8003284 <xTaskIncrementTick+0x144>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	4b42      	ldr	r3, [pc, #264]	; (8003288 <xTaskIncrementTick+0x148>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4b40      	ldr	r3, [pc, #256]	; (8003284 <xTaskIncrementTick+0x144>)
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	4b40      	ldr	r3, [pc, #256]	; (8003288 <xTaskIncrementTick+0x148>)
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	4b40      	ldr	r3, [pc, #256]	; (800328c <xTaskIncrementTick+0x14c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	4b3e      	ldr	r3, [pc, #248]	; (800328c <xTaskIncrementTick+0x14c>)
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	f000 fa6c 	bl	8003670 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003198:	4b3d      	ldr	r3, [pc, #244]	; (8003290 <xTaskIncrementTick+0x150>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d34e      	bcc.n	8003240 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031a2:	4b38      	ldr	r3, [pc, #224]	; (8003284 <xTaskIncrementTick+0x144>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <xTaskIncrementTick+0x70>
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <xTaskIncrementTick+0x72>
 80031b0:	2300      	movs	r3, #0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d004      	beq.n	80031c0 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031b6:	4b36      	ldr	r3, [pc, #216]	; (8003290 <xTaskIncrementTick+0x150>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	4252      	negs	r2, r2
 80031bc:	601a      	str	r2, [r3, #0]
					break;
 80031be:	e03f      	b.n	8003240 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031c0:	4b30      	ldr	r3, [pc, #192]	; (8003284 <xTaskIncrementTick+0x144>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d203      	bcs.n	80031e0 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80031d8:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <xTaskIncrementTick+0x150>)
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	601a      	str	r2, [r3, #0]
						break;
 80031de:	e02f      	b.n	8003240 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	3304      	adds	r3, #4
 80031e4:	0018      	movs	r0, r3
 80031e6:	f7ff f97c 	bl	80024e2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d004      	beq.n	80031fc <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	3318      	adds	r3, #24
 80031f6:	0018      	movs	r0, r3
 80031f8:	f7ff f973 	bl	80024e2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	4b24      	ldr	r3, [pc, #144]	; (8003294 <xTaskIncrementTick+0x154>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d903      	bls.n	8003210 <xTaskIncrementTick+0xd0>
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320c:	4b21      	ldr	r3, [pc, #132]	; (8003294 <xTaskIncrementTick+0x154>)
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003214:	0013      	movs	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	189b      	adds	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4a1e      	ldr	r2, [pc, #120]	; (8003298 <xTaskIncrementTick+0x158>)
 800321e:	189a      	adds	r2, r3, r2
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	3304      	adds	r3, #4
 8003224:	0019      	movs	r1, r3
 8003226:	0010      	movs	r0, r2
 8003228:	f7ff f903 	bl	8002432 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003230:	4b1a      	ldr	r3, [pc, #104]	; (800329c <xTaskIncrementTick+0x15c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	429a      	cmp	r2, r3
 8003238:	d3b3      	bcc.n	80031a2 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800323a:	2301      	movs	r3, #1
 800323c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800323e:	e7b0      	b.n	80031a2 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003240:	4b16      	ldr	r3, [pc, #88]	; (800329c <xTaskIncrementTick+0x15c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003246:	4914      	ldr	r1, [pc, #80]	; (8003298 <xTaskIncrementTick+0x158>)
 8003248:	0013      	movs	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	189b      	adds	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	585b      	ldr	r3, [r3, r1]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d907      	bls.n	8003266 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003256:	2301      	movs	r3, #1
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	e004      	b.n	8003266 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800325c:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <xTaskIncrementTick+0x160>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <xTaskIncrementTick+0x160>)
 8003264:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003266:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <xTaskIncrementTick+0x164>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800326e:	2301      	movs	r3, #1
 8003270:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003272:	697b      	ldr	r3, [r7, #20]
}
 8003274:	0018      	movs	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	b006      	add	sp, #24
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20000488 	.word	0x20000488
 8003280:	20000464 	.word	0x20000464
 8003284:	20000418 	.word	0x20000418
 8003288:	2000041c 	.word	0x2000041c
 800328c:	20000478 	.word	0x20000478
 8003290:	20000480 	.word	0x20000480
 8003294:	20000468 	.word	0x20000468
 8003298:	20000364 	.word	0x20000364
 800329c:	20000360 	.word	0x20000360
 80032a0:	20000470 	.word	0x20000470
 80032a4:	20000474 	.word	0x20000474

080032a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032ae:	4b22      	ldr	r3, [pc, #136]	; (8003338 <vTaskSwitchContext+0x90>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80032b6:	4b21      	ldr	r3, [pc, #132]	; (800333c <vTaskSwitchContext+0x94>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032bc:	e037      	b.n	800332e <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80032be:	4b1f      	ldr	r3, [pc, #124]	; (800333c <vTaskSwitchContext+0x94>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80032c4:	4b1e      	ldr	r3, [pc, #120]	; (8003340 <vTaskSwitchContext+0x98>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	607b      	str	r3, [r7, #4]
 80032ca:	e007      	b.n	80032dc <vTaskSwitchContext+0x34>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <vTaskSwitchContext+0x2e>
 80032d2:	b672      	cpsid	i
 80032d4:	e7fe      	b.n	80032d4 <vTaskSwitchContext+0x2c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3b01      	subs	r3, #1
 80032da:	607b      	str	r3, [r7, #4]
 80032dc:	4919      	ldr	r1, [pc, #100]	; (8003344 <vTaskSwitchContext+0x9c>)
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	0013      	movs	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	189b      	adds	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	585b      	ldr	r3, [r3, r1]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0ee      	beq.n	80032cc <vTaskSwitchContext+0x24>
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	0013      	movs	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	189b      	adds	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4a12      	ldr	r2, [pc, #72]	; (8003344 <vTaskSwitchContext+0x9c>)
 80032fa:	189b      	adds	r3, r3, r2
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	3308      	adds	r3, #8
 8003310:	429a      	cmp	r2, r3
 8003312:	d104      	bne.n	800331e <vTaskSwitchContext+0x76>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	4b08      	ldr	r3, [pc, #32]	; (8003348 <vTaskSwitchContext+0xa0>)
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <vTaskSwitchContext+0x98>)
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	601a      	str	r2, [r3, #0]
}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	46bd      	mov	sp, r7
 8003332:	b002      	add	sp, #8
 8003334:	bd80      	pop	{r7, pc}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	20000488 	.word	0x20000488
 800333c:	20000474 	.word	0x20000474
 8003340:	20000468 	.word	0x20000468
 8003344:	20000364 	.word	0x20000364
 8003348:	20000360 	.word	0x20000360

0800334c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <vTaskPlaceOnEventList+0x14>
 800335c:	b672      	cpsid	i
 800335e:	e7fe      	b.n	800335e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003360:	4b08      	ldr	r3, [pc, #32]	; (8003384 <vTaskPlaceOnEventList+0x38>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3318      	adds	r3, #24
 8003366:	001a      	movs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	0011      	movs	r1, r2
 800336c:	0018      	movs	r0, r3
 800336e:	f7ff f882 	bl	8002476 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2101      	movs	r1, #1
 8003376:	0018      	movs	r0, r3
 8003378:	f000 fa16 	bl	80037a8 <prvAddCurrentTaskToDelayedList>
}
 800337c:	46c0      	nop			; (mov r8, r8)
 800337e:	46bd      	mov	sp, r7
 8003380:	b002      	add	sp, #8
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20000360 	.word	0x20000360

08003388 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <xTaskRemoveFromEventList+0x1a>
 800339e:	b672      	cpsid	i
 80033a0:	e7fe      	b.n	80033a0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	3318      	adds	r3, #24
 80033a6:	0018      	movs	r0, r3
 80033a8:	f7ff f89b 	bl	80024e2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033ac:	4b1e      	ldr	r3, [pc, #120]	; (8003428 <xTaskRemoveFromEventList+0xa0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d11d      	bne.n	80033f0 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	3304      	adds	r3, #4
 80033b8:	0018      	movs	r0, r3
 80033ba:	f7ff f892 	bl	80024e2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c2:	4b1a      	ldr	r3, [pc, #104]	; (800342c <xTaskRemoveFromEventList+0xa4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d903      	bls.n	80033d2 <xTaskRemoveFromEventList+0x4a>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ce:	4b17      	ldr	r3, [pc, #92]	; (800342c <xTaskRemoveFromEventList+0xa4>)
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d6:	0013      	movs	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	189b      	adds	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4a14      	ldr	r2, [pc, #80]	; (8003430 <xTaskRemoveFromEventList+0xa8>)
 80033e0:	189a      	adds	r2, r3, r2
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	3304      	adds	r3, #4
 80033e6:	0019      	movs	r1, r3
 80033e8:	0010      	movs	r0, r2
 80033ea:	f7ff f822 	bl	8002432 <vListInsertEnd>
 80033ee:	e007      	b.n	8003400 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	3318      	adds	r3, #24
 80033f4:	001a      	movs	r2, r3
 80033f6:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <xTaskRemoveFromEventList+0xac>)
 80033f8:	0011      	movs	r1, r2
 80033fa:	0018      	movs	r0, r3
 80033fc:	f7ff f819 	bl	8002432 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <xTaskRemoveFromEventList+0xb0>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	429a      	cmp	r2, r3
 800340c:	d905      	bls.n	800341a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800340e:	2301      	movs	r3, #1
 8003410:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003412:	4b0a      	ldr	r3, [pc, #40]	; (800343c <xTaskRemoveFromEventList+0xb4>)
 8003414:	2201      	movs	r2, #1
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	e001      	b.n	800341e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800341e:	68fb      	ldr	r3, [r7, #12]
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	b004      	add	sp, #16
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20000488 	.word	0x20000488
 800342c:	20000468 	.word	0x20000468
 8003430:	20000364 	.word	0x20000364
 8003434:	20000420 	.word	0x20000420
 8003438:	20000360 	.word	0x20000360
 800343c:	20000474 	.word	0x20000474

08003440 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <vTaskInternalSetTimeOutState+0x20>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <vTaskInternalSetTimeOutState+0x24>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	605a      	str	r2, [r3, #4]
}
 8003458:	46c0      	nop			; (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	b002      	add	sp, #8
 800345e:	bd80      	pop	{r7, pc}
 8003460:	20000478 	.word	0x20000478
 8003464:	20000464 	.word	0x20000464

08003468 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <xTaskCheckForTimeOut+0x14>
 8003478:	b672      	cpsid	i
 800347a:	e7fe      	b.n	800347a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <xTaskCheckForTimeOut+0x1e>
 8003482:	b672      	cpsid	i
 8003484:	e7fe      	b.n	8003484 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8003486:	f000 fa7b 	bl	8003980 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800348a:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <xTaskCheckForTimeOut+0x98>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3301      	adds	r3, #1
 80034a0:	d102      	bne.n	80034a8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	e024      	b.n	80034f2 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	4b15      	ldr	r3, [pc, #84]	; (8003504 <xTaskCheckForTimeOut+0x9c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d007      	beq.n	80034c4 <xTaskCheckForTimeOut+0x5c>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80034be:	2301      	movs	r3, #1
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	e016      	b.n	80034f2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d20c      	bcs.n	80034e8 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1ad2      	subs	r2, r2, r3
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	0018      	movs	r0, r3
 80034de:	f7ff ffaf 	bl	8003440 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	e004      	b.n	80034f2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80034ee:	2301      	movs	r3, #1
 80034f0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80034f2:	f000 fa57 	bl	80039a4 <vPortExitCritical>

	return xReturn;
 80034f6:	697b      	ldr	r3, [r7, #20]
}
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b006      	add	sp, #24
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20000464 	.word	0x20000464
 8003504:	20000478 	.word	0x20000478

08003508 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800350c:	4b02      	ldr	r3, [pc, #8]	; (8003518 <vTaskMissedYield+0x10>)
 800350e:	2201      	movs	r2, #1
 8003510:	601a      	str	r2, [r3, #0]
}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000474 	.word	0x20000474

0800351c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003524:	f000 f84e 	bl	80035c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003528:	4b03      	ldr	r3, [pc, #12]	; (8003538 <prvIdleTask+0x1c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d9f9      	bls.n	8003524 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003530:	f000 fa16 	bl	8003960 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003534:	e7f6      	b.n	8003524 <prvIdleTask+0x8>
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	20000364 	.word	0x20000364

0800353c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003542:	2300      	movs	r3, #0
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	e00c      	b.n	8003562 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	0013      	movs	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	189b      	adds	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <prvInitialiseTaskLists+0x68>)
 8003554:	189b      	adds	r3, r3, r2
 8003556:	0018      	movs	r0, r3
 8003558:	f7fe ff42 	bl	80023e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3301      	adds	r3, #1
 8003560:	607b      	str	r3, [r7, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b06      	cmp	r3, #6
 8003566:	d9ef      	bls.n	8003548 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003568:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <prvInitialiseTaskLists+0x6c>)
 800356a:	0018      	movs	r0, r3
 800356c:	f7fe ff38 	bl	80023e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003570:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <prvInitialiseTaskLists+0x70>)
 8003572:	0018      	movs	r0, r3
 8003574:	f7fe ff34 	bl	80023e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003578:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <prvInitialiseTaskLists+0x74>)
 800357a:	0018      	movs	r0, r3
 800357c:	f7fe ff30 	bl	80023e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003580:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <prvInitialiseTaskLists+0x78>)
 8003582:	0018      	movs	r0, r3
 8003584:	f7fe ff2c 	bl	80023e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <prvInitialiseTaskLists+0x7c>)
 800358a:	0018      	movs	r0, r3
 800358c:	f7fe ff28 	bl	80023e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003590:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <prvInitialiseTaskLists+0x80>)
 8003592:	4a05      	ldr	r2, [pc, #20]	; (80035a8 <prvInitialiseTaskLists+0x6c>)
 8003594:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <prvInitialiseTaskLists+0x84>)
 8003598:	4a04      	ldr	r2, [pc, #16]	; (80035ac <prvInitialiseTaskLists+0x70>)
 800359a:	601a      	str	r2, [r3, #0]
}
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b002      	add	sp, #8
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20000364 	.word	0x20000364
 80035a8:	200003f0 	.word	0x200003f0
 80035ac:	20000404 	.word	0x20000404
 80035b0:	20000420 	.word	0x20000420
 80035b4:	20000434 	.word	0x20000434
 80035b8:	2000044c 	.word	0x2000044c
 80035bc:	20000418 	.word	0x20000418
 80035c0:	2000041c 	.word	0x2000041c

080035c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035ca:	e01a      	b.n	8003602 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80035cc:	f000 f9d8 	bl	8003980 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80035d0:	4b10      	ldr	r3, [pc, #64]	; (8003614 <prvCheckTasksWaitingTermination+0x50>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3304      	adds	r3, #4
 80035dc:	0018      	movs	r0, r3
 80035de:	f7fe ff80 	bl	80024e2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80035e2:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <prvCheckTasksWaitingTermination+0x54>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	1e5a      	subs	r2, r3, #1
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <prvCheckTasksWaitingTermination+0x54>)
 80035ea:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <prvCheckTasksWaitingTermination+0x58>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	1e5a      	subs	r2, r3, #1
 80035f2:	4b0a      	ldr	r3, [pc, #40]	; (800361c <prvCheckTasksWaitingTermination+0x58>)
 80035f4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80035f6:	f000 f9d5 	bl	80039a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	0018      	movs	r0, r3
 80035fe:	f000 f80f 	bl	8003620 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <prvCheckTasksWaitingTermination+0x58>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1e0      	bne.n	80035cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b002      	add	sp, #8
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20000434 	.word	0x20000434
 8003618:	20000460 	.word	0x20000460
 800361c:	20000448 	.word	0x20000448

08003620 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2251      	movs	r2, #81	; 0x51
 800362c:	5c9b      	ldrb	r3, [r3, r2]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	0018      	movs	r0, r3
 8003638:	f000 fae0 	bl	8003bfc <vPortFree>
				vPortFree( pxTCB );
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	0018      	movs	r0, r3
 8003640:	f000 fadc 	bl	8003bfc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003644:	e010      	b.n	8003668 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2251      	movs	r2, #81	; 0x51
 800364a:	5c9b      	ldrb	r3, [r3, r2]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d104      	bne.n	800365a <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	0018      	movs	r0, r3
 8003654:	f000 fad2 	bl	8003bfc <vPortFree>
	}
 8003658:	e006      	b.n	8003668 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2251      	movs	r2, #81	; 0x51
 800365e:	5c9b      	ldrb	r3, [r3, r2]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d001      	beq.n	8003668 <prvDeleteTCB+0x48>
 8003664:	b672      	cpsid	i
 8003666:	e7fe      	b.n	8003666 <prvDeleteTCB+0x46>
	}
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	46bd      	mov	sp, r7
 800366c:	b002      	add	sp, #8
 800366e:	bd80      	pop	{r7, pc}

08003670 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003676:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <prvResetNextTaskUnblockTime+0x40>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <prvResetNextTaskUnblockTime+0x14>
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <prvResetNextTaskUnblockTime+0x16>
 8003684:	2300      	movs	r3, #0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d004      	beq.n	8003694 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800368a:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <prvResetNextTaskUnblockTime+0x44>)
 800368c:	2201      	movs	r2, #1
 800368e:	4252      	negs	r2, r2
 8003690:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003692:	e008      	b.n	80036a6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <prvResetNextTaskUnblockTime+0x40>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <prvResetNextTaskUnblockTime+0x44>)
 80036a4:	601a      	str	r2, [r3, #0]
}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b002      	add	sp, #8
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	20000418 	.word	0x20000418
 80036b4:	20000480 	.word	0x20000480

080036b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <xTaskGetSchedulerState+0x30>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d102      	bne.n	80036cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80036c6:	2301      	movs	r3, #1
 80036c8:	607b      	str	r3, [r7, #4]
 80036ca:	e008      	b.n	80036de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036cc:	4b07      	ldr	r3, [pc, #28]	; (80036ec <xTaskGetSchedulerState+0x34>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80036d4:	2302      	movs	r3, #2
 80036d6:	607b      	str	r3, [r7, #4]
 80036d8:	e001      	b.n	80036de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80036da:	2300      	movs	r3, #0
 80036dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80036de:	687b      	ldr	r3, [r7, #4]
	}
 80036e0:	0018      	movs	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b002      	add	sp, #8
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	2000046c 	.word	0x2000046c
 80036ec:	20000488 	.word	0x20000488

080036f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d044      	beq.n	8003790 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003706:	4b25      	ldr	r3, [pc, #148]	; (800379c <xTaskPriorityDisinherit+0xac>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <xTaskPriorityDisinherit+0x24>
 8003710:	b672      	cpsid	i
 8003712:	e7fe      	b.n	8003712 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <xTaskPriorityDisinherit+0x30>
 800371c:	b672      	cpsid	i
 800371e:	e7fe      	b.n	800371e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003724:	1e5a      	subs	r2, r3, #1
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	429a      	cmp	r2, r3
 8003734:	d02c      	beq.n	8003790 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373a:	2b00      	cmp	r3, #0
 800373c:	d128      	bne.n	8003790 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	3304      	adds	r3, #4
 8003742:	0018      	movs	r0, r3
 8003744:	f7fe fecd 	bl	80024e2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	2207      	movs	r2, #7
 8003756:	1ad2      	subs	r2, r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003760:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <xTaskPriorityDisinherit+0xb0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d903      	bls.n	8003770 <xTaskPriorityDisinherit+0x80>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <xTaskPriorityDisinherit+0xb0>)
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003774:	0013      	movs	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	189b      	adds	r3, r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4a09      	ldr	r2, [pc, #36]	; (80037a4 <xTaskPriorityDisinherit+0xb4>)
 800377e:	189a      	adds	r2, r3, r2
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	3304      	adds	r3, #4
 8003784:	0019      	movs	r1, r3
 8003786:	0010      	movs	r0, r2
 8003788:	f7fe fe53 	bl	8002432 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800378c:	2301      	movs	r3, #1
 800378e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003790:	68fb      	ldr	r3, [r7, #12]
	}
 8003792:	0018      	movs	r0, r3
 8003794:	46bd      	mov	sp, r7
 8003796:	b004      	add	sp, #16
 8003798:	bd80      	pop	{r7, pc}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	20000360 	.word	0x20000360
 80037a0:	20000468 	.word	0x20000468
 80037a4:	20000364 	.word	0x20000364

080037a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80037b2:	4b21      	ldr	r3, [pc, #132]	; (8003838 <prvAddCurrentTaskToDelayedList+0x90>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037b8:	4b20      	ldr	r3, [pc, #128]	; (800383c <prvAddCurrentTaskToDelayedList+0x94>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3304      	adds	r3, #4
 80037be:	0018      	movs	r0, r3
 80037c0:	f7fe fe8f 	bl	80024e2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3301      	adds	r3, #1
 80037c8:	d10b      	bne.n	80037e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037d0:	4b1a      	ldr	r3, [pc, #104]	; (800383c <prvAddCurrentTaskToDelayedList+0x94>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	1d1a      	adds	r2, r3, #4
 80037d6:	4b1a      	ldr	r3, [pc, #104]	; (8003840 <prvAddCurrentTaskToDelayedList+0x98>)
 80037d8:	0011      	movs	r1, r2
 80037da:	0018      	movs	r0, r3
 80037dc:	f7fe fe29 	bl	8002432 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80037e0:	e026      	b.n	8003830 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	18d3      	adds	r3, r2, r3
 80037e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037ea:	4b14      	ldr	r3, [pc, #80]	; (800383c <prvAddCurrentTaskToDelayedList+0x94>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d209      	bcs.n	800380e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037fa:	4b12      	ldr	r3, [pc, #72]	; (8003844 <prvAddCurrentTaskToDelayedList+0x9c>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4b0f      	ldr	r3, [pc, #60]	; (800383c <prvAddCurrentTaskToDelayedList+0x94>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3304      	adds	r3, #4
 8003804:	0019      	movs	r1, r3
 8003806:	0010      	movs	r0, r2
 8003808:	f7fe fe35 	bl	8002476 <vListInsert>
}
 800380c:	e010      	b.n	8003830 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800380e:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	4b0a      	ldr	r3, [pc, #40]	; (800383c <prvAddCurrentTaskToDelayedList+0x94>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3304      	adds	r3, #4
 8003818:	0019      	movs	r1, r3
 800381a:	0010      	movs	r0, r2
 800381c:	f7fe fe2b 	bl	8002476 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003820:	4b0a      	ldr	r3, [pc, #40]	; (800384c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	429a      	cmp	r2, r3
 8003828:	d202      	bcs.n	8003830 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800382a:	4b08      	ldr	r3, [pc, #32]	; (800384c <prvAddCurrentTaskToDelayedList+0xa4>)
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	601a      	str	r2, [r3, #0]
}
 8003830:	46c0      	nop			; (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	b004      	add	sp, #16
 8003836:	bd80      	pop	{r7, pc}
 8003838:	20000464 	.word	0x20000464
 800383c:	20000360 	.word	0x20000360
 8003840:	2000044c 	.word	0x2000044c
 8003844:	2000041c 	.word	0x2000041c
 8003848:	20000418 	.word	0x20000418
 800384c:	20000480 	.word	0x20000480

08003850 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3b04      	subs	r3, #4
 8003860:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2280      	movs	r2, #128	; 0x80
 8003866:	0452      	lsls	r2, r2, #17
 8003868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	3b04      	subs	r3, #4
 800386e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3b04      	subs	r3, #4
 800387a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800387c:	4a08      	ldr	r2, [pc, #32]	; (80038a0 <pxPortInitialiseStack+0x50>)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3b14      	subs	r3, #20
 8003886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3b20      	subs	r3, #32
 8003892:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003894:	68fb      	ldr	r3, [r7, #12]
}
 8003896:	0018      	movs	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	b004      	add	sp, #16
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	080038a5 	.word	0x080038a5

080038a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038ae:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <prvTaskExitError+0x2c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3301      	adds	r3, #1
 80038b4:	d001      	beq.n	80038ba <prvTaskExitError+0x16>
 80038b6:	b672      	cpsid	i
 80038b8:	e7fe      	b.n	80038b8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80038ba:	b672      	cpsid	i
	while( ulDummy == 0 )
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0fc      	beq.n	80038be <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80038c4:	46c0      	nop			; (mov r8, r8)
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b002      	add	sp, #8
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	2000000c 	.word	0x2000000c

080038d4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80038d8:	46c0      	nop			; (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80038e0:	4a0b      	ldr	r2, [pc, #44]	; (8003910 <pxCurrentTCBConst2>)
 80038e2:	6813      	ldr	r3, [r2, #0]
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	3020      	adds	r0, #32
 80038e8:	f380 8809 	msr	PSP, r0
 80038ec:	2002      	movs	r0, #2
 80038ee:	f380 8814 	msr	CONTROL, r0
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80038f8:	46ae      	mov	lr, r5
 80038fa:	bc08      	pop	{r3}
 80038fc:	bc04      	pop	{r2}
 80038fe:	b662      	cpsie	i
 8003900:	4718      	bx	r3
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	46c0      	nop			; (mov r8, r8)
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	46c0      	nop			; (mov r8, r8)
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	46c0      	nop			; (mov r8, r8)

08003910 <pxCurrentTCBConst2>:
 8003910:	20000360 	.word	0x20000360
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8003914:	46c0      	nop			; (mov r8, r8)
 8003916:	46c0      	nop			; (mov r8, r8)

08003918 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800391c:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <xPortStartScheduler+0x40>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <xPortStartScheduler+0x40>)
 8003922:	21ff      	movs	r1, #255	; 0xff
 8003924:	0409      	lsls	r1, r1, #16
 8003926:	430a      	orrs	r2, r1
 8003928:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <xPortStartScheduler+0x40>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <xPortStartScheduler+0x40>)
 8003930:	21ff      	movs	r1, #255	; 0xff
 8003932:	0609      	lsls	r1, r1, #24
 8003934:	430a      	orrs	r2, r1
 8003936:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8003938:	f000 f898 	bl	8003a6c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800393c:	4b07      	ldr	r3, [pc, #28]	; (800395c <xPortStartScheduler+0x44>)
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8003942:	f7ff ffcd 	bl	80038e0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003946:	f7ff fcaf 	bl	80032a8 <vTaskSwitchContext>
	prvTaskExitError();
 800394a:	f7ff ffab 	bl	80038a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800394e:	2300      	movs	r3, #0
}
 8003950:	0018      	movs	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	e000ed20 	.word	0xe000ed20
 800395c:	2000000c 	.word	0x2000000c

08003960 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <vPortYield+0x1c>)
 8003966:	2280      	movs	r2, #128	; 0x80
 8003968:	0552      	lsls	r2, r2, #21
 800396a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800396c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003970:	f3bf 8f6f 	isb	sy
}
 8003974:	46c0      	nop			; (mov r8, r8)
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	e000ed04 	.word	0xe000ed04

08003980 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003984:	b672      	cpsid	i
    uxCriticalNesting++;
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <vPortEnterCritical+0x20>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <vPortEnterCritical+0x20>)
 800398e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003990:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003994:	f3bf 8f6f 	isb	sy
}
 8003998:	46c0      	nop			; (mov r8, r8)
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	2000000c 	.word	0x2000000c

080039a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80039a8:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <vPortExitCritical+0x2c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <vPortExitCritical+0x10>
 80039b0:	b672      	cpsid	i
 80039b2:	e7fe      	b.n	80039b2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80039b4:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <vPortExitCritical+0x2c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	1e5a      	subs	r2, r3, #1
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <vPortExitCritical+0x2c>)
 80039bc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80039be:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <vPortExitCritical+0x2c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d100      	bne.n	80039c8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80039c6:	b662      	cpsie	i
    }
}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	2000000c 	.word	0x2000000c

080039d4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80039d4:	f3ef 8010 	mrs	r0, PRIMASK
 80039d8:	b672      	cpsid	i
 80039da:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80039dc:	46c0      	nop			; (mov r8, r8)
 80039de:	0018      	movs	r0, r3

080039e0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80039e0:	f380 8810 	msr	PRIMASK, r0
 80039e4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80039e6:	46c0      	nop			; (mov r8, r8)
	...

080039f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80039f0:	f3ef 8009 	mrs	r0, PSP
 80039f4:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <pxCurrentTCBConst>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	3820      	subs	r0, #32
 80039fa:	6010      	str	r0, [r2, #0]
 80039fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80039fe:	4644      	mov	r4, r8
 8003a00:	464d      	mov	r5, r9
 8003a02:	4656      	mov	r6, sl
 8003a04:	465f      	mov	r7, fp
 8003a06:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003a08:	b508      	push	{r3, lr}
 8003a0a:	b672      	cpsid	i
 8003a0c:	f7ff fc4c 	bl	80032a8 <vTaskSwitchContext>
 8003a10:	b662      	cpsie	i
 8003a12:	bc0c      	pop	{r2, r3}
 8003a14:	6811      	ldr	r1, [r2, #0]
 8003a16:	6808      	ldr	r0, [r1, #0]
 8003a18:	3010      	adds	r0, #16
 8003a1a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003a1c:	46a0      	mov	r8, r4
 8003a1e:	46a9      	mov	r9, r5
 8003a20:	46b2      	mov	sl, r6
 8003a22:	46bb      	mov	fp, r7
 8003a24:	f380 8809 	msr	PSP, r0
 8003a28:	3820      	subs	r0, #32
 8003a2a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003a2c:	4718      	bx	r3
 8003a2e:	46c0      	nop			; (mov r8, r8)

08003a30 <pxCurrentTCBConst>:
 8003a30:	20000360 	.word	0x20000360
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	46c0      	nop			; (mov r8, r8)

08003a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a3e:	f7ff ffc9 	bl	80039d4 <ulSetInterruptMaskFromISR>
 8003a42:	0003      	movs	r3, r0
 8003a44:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003a46:	f7ff fb7b 	bl	8003140 <xTaskIncrementTick>
 8003a4a:	1e03      	subs	r3, r0, #0
 8003a4c:	d003      	beq.n	8003a56 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <SysTick_Handler+0x30>)
 8003a50:	2280      	movs	r2, #128	; 0x80
 8003a52:	0552      	lsls	r2, r2, #21
 8003a54:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f7ff ffc1 	bl	80039e0 <vClearInterruptMaskFromISR>
}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b002      	add	sp, #8
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	e000ed04 	.word	0xe000ed04

08003a6c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003a70:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <prvSetupTimerInterrupt+0x34>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003a76:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <prvSetupTimerInterrupt+0x38>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <prvSetupTimerInterrupt+0x3c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	22fa      	movs	r2, #250	; 0xfa
 8003a82:	0091      	lsls	r1, r2, #2
 8003a84:	0018      	movs	r0, r3
 8003a86:	f7fc fb3f 	bl	8000108 <__udivsi3>
 8003a8a:	0003      	movs	r3, r0
 8003a8c:	001a      	movs	r2, r3
 8003a8e:	4b07      	ldr	r3, [pc, #28]	; (8003aac <prvSetupTimerInterrupt+0x40>)
 8003a90:	3a01      	subs	r2, #1
 8003a92:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003a94:	4b02      	ldr	r3, [pc, #8]	; (8003aa0 <prvSetupTimerInterrupt+0x34>)
 8003a96:	2207      	movs	r2, #7
 8003a98:	601a      	str	r2, [r3, #0]
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	e000e010 	.word	0xe000e010
 8003aa4:	e000e018 	.word	0xe000e018
 8003aa8:	20000000 	.word	0x20000000
 8003aac:	e000e014 	.word	0xe000e014

08003ab0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8003abc:	f7ff faa8 	bl	8003010 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ac0:	4b49      	ldr	r3, [pc, #292]	; (8003be8 <pvPortMalloc+0x138>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ac8:	f000 f8e0 	bl	8003c8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003acc:	4b47      	ldr	r3, [pc, #284]	; (8003bec <pvPortMalloc+0x13c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d000      	beq.n	8003ad8 <pvPortMalloc+0x28>
 8003ad6:	e079      	b.n	8003bcc <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d012      	beq.n	8003b04 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8003ade:	2208      	movs	r2, #8
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	189b      	adds	r3, r3, r2
 8003ae4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2207      	movs	r2, #7
 8003aea:	4013      	ands	r3, r2
 8003aec:	d00a      	beq.n	8003b04 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2207      	movs	r2, #7
 8003af2:	4393      	bics	r3, r2
 8003af4:	3308      	adds	r3, #8
 8003af6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2207      	movs	r2, #7
 8003afc:	4013      	ands	r3, r2
 8003afe:	d001      	beq.n	8003b04 <pvPortMalloc+0x54>
 8003b00:	b672      	cpsid	i
 8003b02:	e7fe      	b.n	8003b02 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d060      	beq.n	8003bcc <pvPortMalloc+0x11c>
 8003b0a:	4b39      	ldr	r3, [pc, #228]	; (8003bf0 <pvPortMalloc+0x140>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d85b      	bhi.n	8003bcc <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003b14:	4b37      	ldr	r3, [pc, #220]	; (8003bf4 <pvPortMalloc+0x144>)
 8003b16:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8003b18:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <pvPortMalloc+0x144>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b1e:	e004      	b.n	8003b2a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d903      	bls.n	8003b3c <pvPortMalloc+0x8c>
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1f1      	bne.n	8003b20 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003b3c:	4b2a      	ldr	r3, [pc, #168]	; (8003be8 <pvPortMalloc+0x138>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d042      	beq.n	8003bcc <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2208      	movs	r2, #8
 8003b4c:	189b      	adds	r3, r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	1ad2      	subs	r2, r2, r3
 8003b60:	2308      	movs	r3, #8
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d916      	bls.n	8003b96 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	18d3      	adds	r3, r2, r3
 8003b6e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2207      	movs	r2, #7
 8003b74:	4013      	ands	r3, r2
 8003b76:	d001      	beq.n	8003b7c <pvPortMalloc+0xcc>
 8003b78:	b672      	cpsid	i
 8003b7a:	e7fe      	b.n	8003b7a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	1ad2      	subs	r2, r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	0018      	movs	r0, r3
 8003b92:	f000 f8db 	bl	8003d4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b96:	4b16      	ldr	r3, [pc, #88]	; (8003bf0 <pvPortMalloc+0x140>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	1ad2      	subs	r2, r2, r3
 8003ba0:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <pvPortMalloc+0x140>)
 8003ba2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ba4:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <pvPortMalloc+0x140>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <pvPortMalloc+0x148>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d203      	bcs.n	8003bb8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003bb0:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <pvPortMalloc+0x140>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <pvPortMalloc+0x148>)
 8003bb6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <pvPortMalloc+0x13c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003bcc:	f7ff fa2c 	bl	8003028 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2207      	movs	r2, #7
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d001      	beq.n	8003bdc <pvPortMalloc+0x12c>
 8003bd8:	b672      	cpsid	i
 8003bda:	e7fe      	b.n	8003bda <pvPortMalloc+0x12a>
	return pvReturn;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
}
 8003bde:	0018      	movs	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b006      	add	sp, #24
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	20001094 	.word	0x20001094
 8003bec:	200010a0 	.word	0x200010a0
 8003bf0:	20001098 	.word	0x20001098
 8003bf4:	2000108c 	.word	0x2000108c
 8003bf8:	2000109c 	.word	0x2000109c

08003bfc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d035      	beq.n	8003c7a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003c0e:	2308      	movs	r3, #8
 8003c10:	425b      	negs	r3, r3
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	18d3      	adds	r3, r2, r3
 8003c16:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	4b18      	ldr	r3, [pc, #96]	; (8003c84 <vPortFree+0x88>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4013      	ands	r3, r2
 8003c26:	d101      	bne.n	8003c2c <vPortFree+0x30>
 8003c28:	b672      	cpsid	i
 8003c2a:	e7fe      	b.n	8003c2a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <vPortFree+0x3c>
 8003c34:	b672      	cpsid	i
 8003c36:	e7fe      	b.n	8003c36 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <vPortFree+0x88>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4013      	ands	r3, r2
 8003c42:	d01a      	beq.n	8003c7a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d116      	bne.n	8003c7a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <vPortFree+0x88>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	43db      	mvns	r3, r3
 8003c56:	401a      	ands	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003c5c:	f7ff f9d8 	bl	8003010 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <vPortFree+0x8c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	18d2      	adds	r2, r2, r3
 8003c6a:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <vPortFree+0x8c>)
 8003c6c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	0018      	movs	r0, r3
 8003c72:	f000 f86b 	bl	8003d4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003c76:	f7ff f9d7 	bl	8003028 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b004      	add	sp, #16
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	200010a0 	.word	0x200010a0
 8003c88:	20001098 	.word	0x20001098

08003c8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003c92:	23c0      	movs	r3, #192	; 0xc0
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003c98:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <prvHeapInit+0xa8>)
 8003c9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2207      	movs	r2, #7
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d00c      	beq.n	8003cbe <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	3307      	adds	r3, #7
 8003ca8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2207      	movs	r2, #7
 8003cae:	4393      	bics	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	1ad2      	subs	r2, r2, r3
 8003cb8:	4b1e      	ldr	r3, [pc, #120]	; (8003d34 <prvHeapInit+0xa8>)
 8003cba:	18d3      	adds	r3, r2, r3
 8003cbc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003cc2:	4b1d      	ldr	r3, [pc, #116]	; (8003d38 <prvHeapInit+0xac>)
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <prvHeapInit+0xac>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	18d3      	adds	r3, r2, r3
 8003cd4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003cd6:	2208      	movs	r2, #8
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2207      	movs	r2, #7
 8003ce2:	4393      	bics	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <prvHeapInit+0xb0>)
 8003cea:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8003cec:	4b13      	ldr	r3, [pc, #76]	; (8003d3c <prvHeapInit+0xb0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003cf4:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <prvHeapInit+0xb0>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	1ad2      	subs	r2, r2, r3
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <prvHeapInit+0xb0>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <prvHeapInit+0xb4>)
 8003d18:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <prvHeapInit+0xb8>)
 8003d20:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d22:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <prvHeapInit+0xbc>)
 8003d24:	2280      	movs	r2, #128	; 0x80
 8003d26:	0612      	lsls	r2, r2, #24
 8003d28:	601a      	str	r2, [r3, #0]
}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b004      	add	sp, #16
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	2000048c 	.word	0x2000048c
 8003d38:	2000108c 	.word	0x2000108c
 8003d3c:	20001094 	.word	0x20001094
 8003d40:	2000109c 	.word	0x2000109c
 8003d44:	20001098 	.word	0x20001098
 8003d48:	200010a0 	.word	0x200010a0

08003d4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d54:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <prvInsertBlockIntoFreeList+0xa8>)
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	e002      	b.n	8003d60 <prvInsertBlockIntoFreeList+0x14>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d8f7      	bhi.n	8003d5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	18d3      	adds	r3, r2, r3
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d108      	bne.n	8003d8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	18d2      	adds	r2, r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	18d2      	adds	r2, r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d118      	bne.n	8003dd4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4b14      	ldr	r3, [pc, #80]	; (8003df8 <prvInsertBlockIntoFreeList+0xac>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d00d      	beq.n	8003dca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	18d2      	adds	r2, r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	e008      	b.n	8003ddc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003dca:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <prvInsertBlockIntoFreeList+0xac>)
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	e003      	b.n	8003ddc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d002      	beq.n	8003dea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b004      	add	sp, #16
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	2000108c 	.word	0x2000108c
 8003df8:	20001094 	.word	0x20001094

08003dfc <memset>:
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	1882      	adds	r2, r0, r2
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d100      	bne.n	8003e06 <memset+0xa>
 8003e04:	4770      	bx	lr
 8003e06:	7019      	strb	r1, [r3, #0]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	e7f9      	b.n	8003e00 <memset+0x4>

08003e0c <__libc_init_array>:
 8003e0c:	b570      	push	{r4, r5, r6, lr}
 8003e0e:	2600      	movs	r6, #0
 8003e10:	4c0c      	ldr	r4, [pc, #48]	; (8003e44 <__libc_init_array+0x38>)
 8003e12:	4d0d      	ldr	r5, [pc, #52]	; (8003e48 <__libc_init_array+0x3c>)
 8003e14:	1b64      	subs	r4, r4, r5
 8003e16:	10a4      	asrs	r4, r4, #2
 8003e18:	42a6      	cmp	r6, r4
 8003e1a:	d109      	bne.n	8003e30 <__libc_init_array+0x24>
 8003e1c:	2600      	movs	r6, #0
 8003e1e:	f000 f823 	bl	8003e68 <_init>
 8003e22:	4c0a      	ldr	r4, [pc, #40]	; (8003e4c <__libc_init_array+0x40>)
 8003e24:	4d0a      	ldr	r5, [pc, #40]	; (8003e50 <__libc_init_array+0x44>)
 8003e26:	1b64      	subs	r4, r4, r5
 8003e28:	10a4      	asrs	r4, r4, #2
 8003e2a:	42a6      	cmp	r6, r4
 8003e2c:	d105      	bne.n	8003e3a <__libc_init_array+0x2e>
 8003e2e:	bd70      	pop	{r4, r5, r6, pc}
 8003e30:	00b3      	lsls	r3, r6, #2
 8003e32:	58eb      	ldr	r3, [r5, r3]
 8003e34:	4798      	blx	r3
 8003e36:	3601      	adds	r6, #1
 8003e38:	e7ee      	b.n	8003e18 <__libc_init_array+0xc>
 8003e3a:	00b3      	lsls	r3, r6, #2
 8003e3c:	58eb      	ldr	r3, [r5, r3]
 8003e3e:	4798      	blx	r3
 8003e40:	3601      	adds	r6, #1
 8003e42:	e7f2      	b.n	8003e2a <__libc_init_array+0x1e>
 8003e44:	08003f4c 	.word	0x08003f4c
 8003e48:	08003f4c 	.word	0x08003f4c
 8003e4c:	08003f50 	.word	0x08003f50
 8003e50:	08003f4c 	.word	0x08003f4c

08003e54 <memcpy>:
 8003e54:	2300      	movs	r3, #0
 8003e56:	b510      	push	{r4, lr}
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d100      	bne.n	8003e5e <memcpy+0xa>
 8003e5c:	bd10      	pop	{r4, pc}
 8003e5e:	5ccc      	ldrb	r4, [r1, r3]
 8003e60:	54c4      	strb	r4, [r0, r3]
 8003e62:	3301      	adds	r3, #1
 8003e64:	e7f8      	b.n	8003e58 <memcpy+0x4>
	...

08003e68 <_init>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6e:	bc08      	pop	{r3}
 8003e70:	469e      	mov	lr, r3
 8003e72:	4770      	bx	lr

08003e74 <_fini>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7a:	bc08      	pop	{r3}
 8003e7c:	469e      	mov	lr, r3
 8003e7e:	4770      	bx	lr
