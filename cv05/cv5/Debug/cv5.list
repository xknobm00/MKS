
cv5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a48  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08003b08  08003b08  00013b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d7c  08003d7c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003d7c  08003d7c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d7c  08003d7c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d80  08003d80  00013d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000068  08003dec  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08003dec  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000802f  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000178d  00000000  00000000  00028102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f8  00000000  00000000  00029890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000551  00000000  00000000  00029f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001050b  00000000  00000000  0002a4d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009711  00000000  00000000  0003a9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005e906  00000000  00000000  000440f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000021d0  00000000  00000000  000a29fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000a4bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003af0 	.word	0x08003af0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003af0 	.word	0x08003af0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <uart_process_command>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void uart_process_command(char *cmd)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	char *token;
	token = strtok(cmd, " ");
 800023c:	4a51      	ldr	r2, [pc, #324]	; (8000384 <uart_process_command+0x150>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	0011      	movs	r1, r2
 8000242:	0018      	movs	r0, r3
 8000244:	f002 fdce 	bl	8002de4 <strtok>
 8000248:	0003      	movs	r3, r0
 800024a:	60fb      	str	r3, [r7, #12]

	if (strcasecmp(token, "HELLO") == 0) {
 800024c:	4a4e      	ldr	r2, [pc, #312]	; (8000388 <uart_process_command+0x154>)
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	0011      	movs	r1, r2
 8000252:	0018      	movs	r0, r3
 8000254:	f002 fdac 	bl	8002db0 <strcasecmp>
 8000258:	1e03      	subs	r3, r0, #0
 800025a:	d104      	bne.n	8000266 <uart_process_command+0x32>
		printf("Komunikace OK\n");
 800025c:	4b4b      	ldr	r3, [pc, #300]	; (800038c <uart_process_command+0x158>)
 800025e:	0018      	movs	r0, r3
 8000260:	f002 fca2 	bl	8002ba8 <puts>
	else if (strcasecmp(token, "STATUS") == 0) {
		printf("LED1: %3s;", HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin) ? "ON": "OFF");
		printf("LED2: %3s\n", HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin) ? "ON": "OFF");
		}

}
 8000264:	e08a      	b.n	800037c <uart_process_command+0x148>
	else if (strcasecmp(token, "LED1") == 0) {
 8000266:	4a4a      	ldr	r2, [pc, #296]	; (8000390 <uart_process_command+0x15c>)
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	0011      	movs	r1, r2
 800026c:	0018      	movs	r0, r3
 800026e:	f002 fd9f 	bl	8002db0 <strcasecmp>
 8000272:	1e03      	subs	r3, r0, #0
 8000274:	d12a      	bne.n	80002cc <uart_process_command+0x98>
		token = strtok(NULL, " ");
 8000276:	4b43      	ldr	r3, [pc, #268]	; (8000384 <uart_process_command+0x150>)
 8000278:	0019      	movs	r1, r3
 800027a:	2000      	movs	r0, #0
 800027c:	f002 fdb2 	bl	8002de4 <strtok>
 8000280:	0003      	movs	r3, r0
 8000282:	60fb      	str	r3, [r7, #12]
		if (strcasecmp(token, "ON") == 0) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,1);
 8000284:	4a43      	ldr	r2, [pc, #268]	; (8000394 <uart_process_command+0x160>)
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	0011      	movs	r1, r2
 800028a:	0018      	movs	r0, r3
 800028c:	f002 fd90 	bl	8002db0 <strcasecmp>
 8000290:	1e03      	subs	r3, r0, #0
 8000292:	d107      	bne.n	80002a4 <uart_process_command+0x70>
 8000294:	2390      	movs	r3, #144	; 0x90
 8000296:	05db      	lsls	r3, r3, #23
 8000298:	2201      	movs	r2, #1
 800029a:	2110      	movs	r1, #16
 800029c:	0018      	movs	r0, r3
 800029e:	f001 f846 	bl	800132e <HAL_GPIO_WritePin>
 80002a2:	e00e      	b.n	80002c2 <uart_process_command+0x8e>
		else if (strcasecmp(token, "OFF") == 0) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
 80002a4:	4a3c      	ldr	r2, [pc, #240]	; (8000398 <uart_process_command+0x164>)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	0011      	movs	r1, r2
 80002aa:	0018      	movs	r0, r3
 80002ac:	f002 fd80 	bl	8002db0 <strcasecmp>
 80002b0:	1e03      	subs	r3, r0, #0
 80002b2:	d106      	bne.n	80002c2 <uart_process_command+0x8e>
 80002b4:	2390      	movs	r3, #144	; 0x90
 80002b6:	05db      	lsls	r3, r3, #23
 80002b8:	2200      	movs	r2, #0
 80002ba:	2110      	movs	r1, #16
 80002bc:	0018      	movs	r0, r3
 80002be:	f001 f836 	bl	800132e <HAL_GPIO_WritePin>
		printf("OK\n");
 80002c2:	4b36      	ldr	r3, [pc, #216]	; (800039c <uart_process_command+0x168>)
 80002c4:	0018      	movs	r0, r3
 80002c6:	f002 fc6f 	bl	8002ba8 <puts>
}
 80002ca:	e057      	b.n	800037c <uart_process_command+0x148>
	else if (strcasecmp(token, "LED2") == 0) {
 80002cc:	4a34      	ldr	r2, [pc, #208]	; (80003a0 <uart_process_command+0x16c>)
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	0011      	movs	r1, r2
 80002d2:	0018      	movs	r0, r3
 80002d4:	f002 fd6c 	bl	8002db0 <strcasecmp>
 80002d8:	1e03      	subs	r3, r0, #0
 80002da:	d128      	bne.n	800032e <uart_process_command+0xfa>
		token = strtok(NULL, " ");
 80002dc:	4b29      	ldr	r3, [pc, #164]	; (8000384 <uart_process_command+0x150>)
 80002de:	0019      	movs	r1, r3
 80002e0:	2000      	movs	r0, #0
 80002e2:	f002 fd7f 	bl	8002de4 <strtok>
 80002e6:	0003      	movs	r3, r0
 80002e8:	60fb      	str	r3, [r7, #12]
		if (strcasecmp(token, "ON") == 0) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,1);
 80002ea:	4a2a      	ldr	r2, [pc, #168]	; (8000394 <uart_process_command+0x160>)
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	0011      	movs	r1, r2
 80002f0:	0018      	movs	r0, r3
 80002f2:	f002 fd5d 	bl	8002db0 <strcasecmp>
 80002f6:	1e03      	subs	r3, r0, #0
 80002f8:	d106      	bne.n	8000308 <uart_process_command+0xd4>
 80002fa:	4b2a      	ldr	r3, [pc, #168]	; (80003a4 <uart_process_command+0x170>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	2101      	movs	r1, #1
 8000300:	0018      	movs	r0, r3
 8000302:	f001 f814 	bl	800132e <HAL_GPIO_WritePin>
 8000306:	e00d      	b.n	8000324 <uart_process_command+0xf0>
		else if (strcasecmp(token, "OFF") == 0) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
 8000308:	4a23      	ldr	r2, [pc, #140]	; (8000398 <uart_process_command+0x164>)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	0011      	movs	r1, r2
 800030e:	0018      	movs	r0, r3
 8000310:	f002 fd4e 	bl	8002db0 <strcasecmp>
 8000314:	1e03      	subs	r3, r0, #0
 8000316:	d105      	bne.n	8000324 <uart_process_command+0xf0>
 8000318:	4b22      	ldr	r3, [pc, #136]	; (80003a4 <uart_process_command+0x170>)
 800031a:	2200      	movs	r2, #0
 800031c:	2101      	movs	r1, #1
 800031e:	0018      	movs	r0, r3
 8000320:	f001 f805 	bl	800132e <HAL_GPIO_WritePin>
		printf("OK\n");
 8000324:	4b1d      	ldr	r3, [pc, #116]	; (800039c <uart_process_command+0x168>)
 8000326:	0018      	movs	r0, r3
 8000328:	f002 fc3e 	bl	8002ba8 <puts>
}
 800032c:	e026      	b.n	800037c <uart_process_command+0x148>
	else if (strcasecmp(token, "STATUS") == 0) {
 800032e:	4a1e      	ldr	r2, [pc, #120]	; (80003a8 <uart_process_command+0x174>)
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	0011      	movs	r1, r2
 8000334:	0018      	movs	r0, r3
 8000336:	f002 fd3b 	bl	8002db0 <strcasecmp>
 800033a:	1e03      	subs	r3, r0, #0
 800033c:	d11e      	bne.n	800037c <uart_process_command+0x148>
		printf("LED1: %3s;", HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin) ? "ON": "OFF");
 800033e:	2390      	movs	r3, #144	; 0x90
 8000340:	05db      	lsls	r3, r3, #23
 8000342:	2110      	movs	r1, #16
 8000344:	0018      	movs	r0, r3
 8000346:	f000 ffd5 	bl	80012f4 <HAL_GPIO_ReadPin>
 800034a:	1e03      	subs	r3, r0, #0
 800034c:	d001      	beq.n	8000352 <uart_process_command+0x11e>
 800034e:	4b11      	ldr	r3, [pc, #68]	; (8000394 <uart_process_command+0x160>)
 8000350:	e000      	b.n	8000354 <uart_process_command+0x120>
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <uart_process_command+0x164>)
 8000354:	4a15      	ldr	r2, [pc, #84]	; (80003ac <uart_process_command+0x178>)
 8000356:	0019      	movs	r1, r3
 8000358:	0010      	movs	r0, r2
 800035a:	f002 fbbf 	bl	8002adc <iprintf>
		printf("LED2: %3s\n", HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin) ? "ON": "OFF");
 800035e:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <uart_process_command+0x170>)
 8000360:	2101      	movs	r1, #1
 8000362:	0018      	movs	r0, r3
 8000364:	f000 ffc6 	bl	80012f4 <HAL_GPIO_ReadPin>
 8000368:	1e03      	subs	r3, r0, #0
 800036a:	d001      	beq.n	8000370 <uart_process_command+0x13c>
 800036c:	4b09      	ldr	r3, [pc, #36]	; (8000394 <uart_process_command+0x160>)
 800036e:	e000      	b.n	8000372 <uart_process_command+0x13e>
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <uart_process_command+0x164>)
 8000372:	4a0f      	ldr	r2, [pc, #60]	; (80003b0 <uart_process_command+0x17c>)
 8000374:	0019      	movs	r1, r3
 8000376:	0010      	movs	r0, r2
 8000378:	f002 fbb0 	bl	8002adc <iprintf>
}
 800037c:	46c0      	nop			; (mov r8, r8)
 800037e:	46bd      	mov	sp, r7
 8000380:	b004      	add	sp, #16
 8000382:	bd80      	pop	{r7, pc}
 8000384:	08003b08 	.word	0x08003b08
 8000388:	08003b0c 	.word	0x08003b0c
 800038c:	08003b14 	.word	0x08003b14
 8000390:	08003b24 	.word	0x08003b24
 8000394:	08003b2c 	.word	0x08003b2c
 8000398:	08003b30 	.word	0x08003b30
 800039c:	08003b34 	.word	0x08003b34
 80003a0:	08003b38 	.word	0x08003b38
 80003a4:	48000400 	.word	0x48000400
 80003a8:	08003b40 	.word	0x08003b40
 80003ac:	08003b48 	.word	0x08003b48
 80003b0:	08003b54 	.word	0x08003b54

080003b4 <_write>:


int _write(int file, char const *buf, int n)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	60f8      	str	r0, [r7, #12]
 80003bc:	60b9      	str	r1, [r7, #8]
 80003be:	607a      	str	r2, [r7, #4]
 /* stdout redirection to UART2 */
 HAL_UART_Transmit(&huart2, (uint8_t*)(buf), n, HAL_MAX_DELAY);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	b29a      	uxth	r2, r3
 80003c4:	2301      	movs	r3, #1
 80003c6:	425b      	negs	r3, r3
 80003c8:	68b9      	ldr	r1, [r7, #8]
 80003ca:	4804      	ldr	r0, [pc, #16]	; (80003dc <_write+0x28>)
 80003cc:	f001 fc8c 	bl	8001ce8 <HAL_UART_Transmit>
 return n;
 80003d0:	687b      	ldr	r3, [r7, #4]
}
 80003d2:	0018      	movs	r0, r3
 80003d4:	46bd      	mov	sp, r7
 80003d6:	b004      	add	sp, #16
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	46c0      	nop			; (mov r8, r8)
 80003dc:	20000084 	.word	0x20000084

080003e0 <uart_byte_available>:


static void uart_byte_available(uint8_t c)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	0002      	movs	r2, r0
 80003e8:	1dfb      	adds	r3, r7, #7
 80003ea:	701a      	strb	r2, [r3, #0]
	 static uint16_t cnt;
	 static char data[CMD_BUFFER_LEN];

	 if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 126) data[cnt++] = c;
 80003ec:	4b19      	ldr	r3, [pc, #100]	; (8000454 <uart_byte_available+0x74>)
 80003ee:	881b      	ldrh	r3, [r3, #0]
 80003f0:	2bff      	cmp	r3, #255	; 0xff
 80003f2:	d812      	bhi.n	800041a <uart_byte_available+0x3a>
 80003f4:	1dfb      	adds	r3, r7, #7
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b1f      	cmp	r3, #31
 80003fa:	d90e      	bls.n	800041a <uart_byte_available+0x3a>
 80003fc:	1dfb      	adds	r3, r7, #7
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b7e      	cmp	r3, #126	; 0x7e
 8000402:	d80a      	bhi.n	800041a <uart_byte_available+0x3a>
 8000404:	4b13      	ldr	r3, [pc, #76]	; (8000454 <uart_byte_available+0x74>)
 8000406:	881b      	ldrh	r3, [r3, #0]
 8000408:	1c5a      	adds	r2, r3, #1
 800040a:	b291      	uxth	r1, r2
 800040c:	4a11      	ldr	r2, [pc, #68]	; (8000454 <uart_byte_available+0x74>)
 800040e:	8011      	strh	r1, [r2, #0]
 8000410:	0019      	movs	r1, r3
 8000412:	4b11      	ldr	r3, [pc, #68]	; (8000458 <uart_byte_available+0x78>)
 8000414:	1dfa      	adds	r2, r7, #7
 8000416:	7812      	ldrb	r2, [r2, #0]
 8000418:	545a      	strb	r2, [r3, r1]
	 if ((c == '\n' || c == '\r') && cnt > 0) {
 800041a:	1dfb      	adds	r3, r7, #7
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b0a      	cmp	r3, #10
 8000420:	d003      	beq.n	800042a <uart_byte_available+0x4a>
 8000422:	1dfb      	adds	r3, r7, #7
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b0d      	cmp	r3, #13
 8000428:	d110      	bne.n	800044c <uart_byte_available+0x6c>
 800042a:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <uart_byte_available+0x74>)
 800042c:	881b      	ldrh	r3, [r3, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d00c      	beq.n	800044c <uart_byte_available+0x6c>
	 data[cnt] = '\0';
 8000432:	4b08      	ldr	r3, [pc, #32]	; (8000454 <uart_byte_available+0x74>)
 8000434:	881b      	ldrh	r3, [r3, #0]
 8000436:	001a      	movs	r2, r3
 8000438:	4b07      	ldr	r3, [pc, #28]	; (8000458 <uart_byte_available+0x78>)
 800043a:	2100      	movs	r1, #0
 800043c:	5499      	strb	r1, [r3, r2]
	 uart_process_command(data);
 800043e:	4b06      	ldr	r3, [pc, #24]	; (8000458 <uart_byte_available+0x78>)
 8000440:	0018      	movs	r0, r3
 8000442:	f7ff fef7 	bl	8000234 <uart_process_command>
	 cnt = 0;
 8000446:	4b03      	ldr	r3, [pc, #12]	; (8000454 <uart_byte_available+0x74>)
 8000448:	2200      	movs	r2, #0
 800044a:	801a      	strh	r2, [r3, #0]
	 }
}
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}
 8000454:	2000018e 	.word	0x2000018e
 8000458:	20000190 	.word	0x20000190

0800045c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000462:	f000 fafd 	bl	8000a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000466:	f000 f83b 	bl	80004e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800046a:	f000 f8d1 	bl	8000610 <MX_GPIO_Init>
  MX_DMA_Init();
 800046e:	f000 f8b1 	bl	80005d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000472:	f000 f87f 	bl	8000574 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 8000476:	4916      	ldr	r1, [pc, #88]	; (80004d0 <main+0x74>)
 8000478:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <main+0x78>)
 800047a:	2240      	movs	r2, #64	; 0x40
 800047c:	0018      	movs	r0, r3
 800047e:	f001 fcdc 	bl	8001e3a <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 8000482:	e019      	b.n	80004b8 <main+0x5c>
	   uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 8000484:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <main+0x7c>)
 8000486:	881b      	ldrh	r3, [r3, #0]
 8000488:	b29b      	uxth	r3, r3
 800048a:	0019      	movs	r1, r3
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	4a10      	ldr	r2, [pc, #64]	; (80004d0 <main+0x74>)
 8000490:	5c52      	ldrb	r2, [r2, r1]
 8000492:	701a      	strb	r2, [r3, #0]
	   if (++uart_rx_read_ptr >= RX_BUFFER_LEN) uart_rx_read_ptr = 0; // increase read pointer
 8000494:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <main+0x7c>)
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	b29b      	uxth	r3, r3
 800049a:	3301      	adds	r3, #1
 800049c:	b29b      	uxth	r3, r3
 800049e:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <main+0x7c>)
 80004a0:	1c19      	adds	r1, r3, #0
 80004a2:	8011      	strh	r1, [r2, #0]
 80004a4:	2b3f      	cmp	r3, #63	; 0x3f
 80004a6:	d902      	bls.n	80004ae <main+0x52>
 80004a8:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <main+0x7c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	801a      	strh	r2, [r3, #0]
	   uart_byte_available(b); // process every received byte with the RX state machine
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	0018      	movs	r0, r3
 80004b4:	f7ff ff94 	bl	80003e0 <uart_byte_available>
	  while (uart_rx_read_ptr != uart_rx_write_ptr) {
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <main+0x7c>)
 80004ba:	881b      	ldrh	r3, [r3, #0]
 80004bc:	b29b      	uxth	r3, r3
 80004be:	0019      	movs	r1, r3
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <main+0x80>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	2240      	movs	r2, #64	; 0x40
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d1da      	bne.n	8000484 <main+0x28>
 80004ce:	e7f3      	b.n	80004b8 <main+0x5c>
 80004d0:	2000014c 	.word	0x2000014c
 80004d4:	20000084 	.word	0x20000084
 80004d8:	2000018c 	.word	0x2000018c
 80004dc:	20000108 	.word	0x20000108

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b091      	sub	sp, #68	; 0x44
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	2410      	movs	r4, #16
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	0018      	movs	r0, r3
 80004ec:	2330      	movs	r3, #48	; 0x30
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f002 fc55 	bl	8002da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f6:	003b      	movs	r3, r7
 80004f8:	0018      	movs	r0, r3
 80004fa:	2310      	movs	r3, #16
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f002 fc4e 	bl	8002da0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000504:	0021      	movs	r1, r4
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2202      	movs	r2, #2
 800050a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2201      	movs	r2, #1
 8000510:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2210      	movs	r2, #16
 8000516:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2202      	movs	r2, #2
 800051c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2200      	movs	r2, #0
 8000522:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	22a0      	movs	r2, #160	; 0xa0
 8000528:	0392      	lsls	r2, r2, #14
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2200      	movs	r2, #0
 8000530:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000532:	187b      	adds	r3, r7, r1
 8000534:	0018      	movs	r0, r3
 8000536:	f000 ff17 	bl	8001368 <HAL_RCC_OscConfig>
 800053a:	1e03      	subs	r3, r0, #0
 800053c:	d001      	beq.n	8000542 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800053e:	f000 f8f9 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000542:	003b      	movs	r3, r7
 8000544:	2207      	movs	r2, #7
 8000546:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000548:	003b      	movs	r3, r7
 800054a:	2202      	movs	r2, #2
 800054c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054e:	003b      	movs	r3, r7
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000554:	003b      	movs	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800055a:	003b      	movs	r3, r7
 800055c:	2101      	movs	r1, #1
 800055e:	0018      	movs	r0, r3
 8000560:	f001 fa1c 	bl	800199c <HAL_RCC_ClockConfig>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000568:	f000 f8e4 	bl	8000734 <Error_Handler>
  }
}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b011      	add	sp, #68	; 0x44
 8000572:	bd90      	pop	{r4, r7, pc}

08000574 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_USART2_UART_Init+0x58>)
 800057a:	4a15      	ldr	r2, [pc, #84]	; (80005d0 <MX_USART2_UART_Init+0x5c>)
 800057c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <MX_USART2_UART_Init+0x58>)
 8000580:	2296      	movs	r2, #150	; 0x96
 8000582:	0212      	lsls	r2, r2, #8
 8000584:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_USART2_UART_Init+0x58>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_USART2_UART_Init+0x58>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <MX_USART2_UART_Init+0x58>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_USART2_UART_Init+0x58>)
 800059a:	220c      	movs	r2, #12
 800059c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <MX_USART2_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_USART2_UART_Init+0x58>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005aa:	4b08      	ldr	r3, [pc, #32]	; (80005cc <MX_USART2_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_USART2_UART_Init+0x58>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005b6:	4b05      	ldr	r3, [pc, #20]	; (80005cc <MX_USART2_UART_Init+0x58>)
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 fb41 	bl	8001c40 <HAL_UART_Init>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005c2:	f000 f8b7 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000084 	.word	0x20000084
 80005d0:	40004400 	.word	0x40004400

080005d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_DMA_Init+0x38>)
 80005dc:	695a      	ldr	r2, [r3, #20]
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_DMA_Init+0x38>)
 80005e0:	2101      	movs	r1, #1
 80005e2:	430a      	orrs	r2, r1
 80005e4:	615a      	str	r2, [r3, #20]
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_DMA_Init+0x38>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	2201      	movs	r2, #1
 80005ec:	4013      	ands	r3, r2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	200b      	movs	r0, #11
 80005f8:	f000 fb42 	bl	8000c80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80005fc:	200b      	movs	r0, #11
 80005fe:	f000 fb54 	bl	8000caa <HAL_NVIC_EnableIRQ>

}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b002      	add	sp, #8
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	40021000 	.word	0x40021000

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b08b      	sub	sp, #44	; 0x2c
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	2414      	movs	r4, #20
 8000618:	193b      	adds	r3, r7, r4
 800061a:	0018      	movs	r0, r3
 800061c:	2314      	movs	r3, #20
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f002 fbbd 	bl	8002da0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000626:	4b40      	ldr	r3, [pc, #256]	; (8000728 <MX_GPIO_Init+0x118>)
 8000628:	695a      	ldr	r2, [r3, #20]
 800062a:	4b3f      	ldr	r3, [pc, #252]	; (8000728 <MX_GPIO_Init+0x118>)
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	0309      	lsls	r1, r1, #12
 8000630:	430a      	orrs	r2, r1
 8000632:	615a      	str	r2, [r3, #20]
 8000634:	4b3c      	ldr	r3, [pc, #240]	; (8000728 <MX_GPIO_Init+0x118>)
 8000636:	695a      	ldr	r2, [r3, #20]
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	031b      	lsls	r3, r3, #12
 800063c:	4013      	ands	r3, r2
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000642:	4b39      	ldr	r3, [pc, #228]	; (8000728 <MX_GPIO_Init+0x118>)
 8000644:	695a      	ldr	r2, [r3, #20]
 8000646:	4b38      	ldr	r3, [pc, #224]	; (8000728 <MX_GPIO_Init+0x118>)
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	03c9      	lsls	r1, r1, #15
 800064c:	430a      	orrs	r2, r1
 800064e:	615a      	str	r2, [r3, #20]
 8000650:	4b35      	ldr	r3, [pc, #212]	; (8000728 <MX_GPIO_Init+0x118>)
 8000652:	695a      	ldr	r2, [r3, #20]
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	03db      	lsls	r3, r3, #15
 8000658:	4013      	ands	r3, r2
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	4b32      	ldr	r3, [pc, #200]	; (8000728 <MX_GPIO_Init+0x118>)
 8000660:	695a      	ldr	r2, [r3, #20]
 8000662:	4b31      	ldr	r3, [pc, #196]	; (8000728 <MX_GPIO_Init+0x118>)
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	0289      	lsls	r1, r1, #10
 8000668:	430a      	orrs	r2, r1
 800066a:	615a      	str	r2, [r3, #20]
 800066c:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <MX_GPIO_Init+0x118>)
 800066e:	695a      	ldr	r2, [r3, #20]
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	029b      	lsls	r3, r3, #10
 8000674:	4013      	ands	r3, r2
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <MX_GPIO_Init+0x118>)
 800067c:	695a      	ldr	r2, [r3, #20]
 800067e:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <MX_GPIO_Init+0x118>)
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	02c9      	lsls	r1, r1, #11
 8000684:	430a      	orrs	r2, r1
 8000686:	615a      	str	r2, [r3, #20]
 8000688:	4b27      	ldr	r3, [pc, #156]	; (8000728 <MX_GPIO_Init+0x118>)
 800068a:	695a      	ldr	r2, [r3, #20]
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	02db      	lsls	r3, r3, #11
 8000690:	4013      	ands	r3, r2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000696:	2390      	movs	r3, #144	; 0x90
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	2200      	movs	r2, #0
 800069c:	2130      	movs	r1, #48	; 0x30
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 fe45 	bl	800132e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80006a4:	4b21      	ldr	r3, [pc, #132]	; (800072c <MX_GPIO_Init+0x11c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	2101      	movs	r1, #1
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 fe3f 	bl	800132e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	2280      	movs	r2, #128	; 0x80
 80006b4:	0192      	lsls	r2, r2, #6
 80006b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2284      	movs	r2, #132	; 0x84
 80006bc:	0392      	lsls	r2, r2, #14
 80006be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	4a19      	ldr	r2, [pc, #100]	; (8000730 <MX_GPIO_Init+0x120>)
 80006ca:	0019      	movs	r1, r3
 80006cc:	0010      	movs	r0, r2
 80006ce:	f000 fca1 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LD2_Pin;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2230      	movs	r2, #48	; 0x30
 80006d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2201      	movs	r2, #1
 80006dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ea:	193a      	adds	r2, r7, r4
 80006ec:	2390      	movs	r3, #144	; 0x90
 80006ee:	05db      	lsls	r3, r3, #23
 80006f0:	0011      	movs	r1, r2
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 fc8e 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80006f8:	0021      	movs	r1, r4
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2201      	movs	r2, #1
 80006fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2201      	movs	r2, #1
 8000704:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000712:	187b      	adds	r3, r7, r1
 8000714:	4a05      	ldr	r2, [pc, #20]	; (800072c <MX_GPIO_Init+0x11c>)
 8000716:	0019      	movs	r1, r3
 8000718:	0010      	movs	r0, r2
 800071a:	f000 fc7b 	bl	8001014 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b00b      	add	sp, #44	; 0x2c
 8000724:	bd90      	pop	{r4, r7, pc}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	40021000 	.word	0x40021000
 800072c:	48000400 	.word	0x48000400
 8000730:	48000800 	.word	0x48000800

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	e7fe      	b.n	800073c <Error_Handler+0x8>
	...

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <HAL_MspInit+0x44>)
 8000748:	699a      	ldr	r2, [r3, #24]
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <HAL_MspInit+0x44>)
 800074c:	2101      	movs	r1, #1
 800074e:	430a      	orrs	r2, r1
 8000750:	619a      	str	r2, [r3, #24]
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <HAL_MspInit+0x44>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	2201      	movs	r2, #1
 8000758:	4013      	ands	r3, r2
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_MspInit+0x44>)
 8000760:	69da      	ldr	r2, [r3, #28]
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <HAL_MspInit+0x44>)
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	0549      	lsls	r1, r1, #21
 8000768:	430a      	orrs	r2, r1
 800076a:	61da      	str	r2, [r3, #28]
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <HAL_MspInit+0x44>)
 800076e:	69da      	ldr	r2, [r3, #28]
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	055b      	lsls	r3, r3, #21
 8000774:	4013      	ands	r3, r2
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	b002      	add	sp, #8
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	40021000 	.word	0x40021000

08000788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b08b      	sub	sp, #44	; 0x2c
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	2414      	movs	r4, #20
 8000792:	193b      	adds	r3, r7, r4
 8000794:	0018      	movs	r0, r3
 8000796:	2314      	movs	r3, #20
 8000798:	001a      	movs	r2, r3
 800079a:	2100      	movs	r1, #0
 800079c:	f002 fb00 	bl	8002da0 <memset>
  if(huart->Instance==USART2)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a2f      	ldr	r2, [pc, #188]	; (8000864 <HAL_UART_MspInit+0xdc>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d158      	bne.n	800085c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007aa:	4b2f      	ldr	r3, [pc, #188]	; (8000868 <HAL_UART_MspInit+0xe0>)
 80007ac:	69da      	ldr	r2, [r3, #28]
 80007ae:	4b2e      	ldr	r3, [pc, #184]	; (8000868 <HAL_UART_MspInit+0xe0>)
 80007b0:	2180      	movs	r1, #128	; 0x80
 80007b2:	0289      	lsls	r1, r1, #10
 80007b4:	430a      	orrs	r2, r1
 80007b6:	61da      	str	r2, [r3, #28]
 80007b8:	4b2b      	ldr	r3, [pc, #172]	; (8000868 <HAL_UART_MspInit+0xe0>)
 80007ba:	69da      	ldr	r2, [r3, #28]
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	029b      	lsls	r3, r3, #10
 80007c0:	4013      	ands	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b28      	ldr	r3, [pc, #160]	; (8000868 <HAL_UART_MspInit+0xe0>)
 80007c8:	695a      	ldr	r2, [r3, #20]
 80007ca:	4b27      	ldr	r3, [pc, #156]	; (8000868 <HAL_UART_MspInit+0xe0>)
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	0289      	lsls	r1, r1, #10
 80007d0:	430a      	orrs	r2, r1
 80007d2:	615a      	str	r2, [r3, #20]
 80007d4:	4b24      	ldr	r3, [pc, #144]	; (8000868 <HAL_UART_MspInit+0xe0>)
 80007d6:	695a      	ldr	r2, [r3, #20]
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	029b      	lsls	r3, r3, #10
 80007dc:	4013      	ands	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007e2:	0021      	movs	r1, r4
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	220c      	movs	r2, #12
 80007e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2202      	movs	r2, #2
 80007ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2201      	movs	r2, #1
 8000800:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	187a      	adds	r2, r7, r1
 8000804:	2390      	movs	r3, #144	; 0x90
 8000806:	05db      	lsls	r3, r3, #23
 8000808:	0011      	movs	r1, r2
 800080a:	0018      	movs	r0, r3
 800080c:	f000 fc02 	bl	8001014 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <HAL_UART_MspInit+0xe4>)
 8000812:	4a17      	ldr	r2, [pc, #92]	; (8000870 <HAL_UART_MspInit+0xe8>)
 8000814:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <HAL_UART_MspInit+0xe4>)
 8000818:	2200      	movs	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <HAL_UART_MspInit+0xe4>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_UART_MspInit+0xe4>)
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <HAL_UART_MspInit+0xe4>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <HAL_UART_MspInit+0xe4>)
 8000830:	2200      	movs	r2, #0
 8000832:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <HAL_UART_MspInit+0xe4>)
 8000836:	2220      	movs	r2, #32
 8000838:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <HAL_UART_MspInit+0xe4>)
 800083c:	2200      	movs	r2, #0
 800083e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <HAL_UART_MspInit+0xe4>)
 8000842:	0018      	movs	r0, r3
 8000844:	f000 fa4e 	bl	8000ce4 <HAL_DMA_Init>
 8000848:	1e03      	subs	r3, r0, #0
 800084a:	d001      	beq.n	8000850 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 800084c:	f7ff ff72 	bl	8000734 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a06      	ldr	r2, [pc, #24]	; (800086c <HAL_UART_MspInit+0xe4>)
 8000854:	671a      	str	r2, [r3, #112]	; 0x70
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <HAL_UART_MspInit+0xe4>)
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	b00b      	add	sp, #44	; 0x2c
 8000862:	bd90      	pop	{r4, r7, pc}
 8000864:	40004400 	.word	0x40004400
 8000868:	40021000 	.word	0x40021000
 800086c:	20000108 	.word	0x20000108
 8000870:	40020058 	.word	0x40020058

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <NMI_Handler+0x4>

0800087a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <HardFault_Handler+0x4>

08000880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000898:	f000 f92a 	bl	8000af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <DMA1_Channel4_5_IRQHandler+0x14>)
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 fac8 	bl	8000e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	20000108 	.word	0x20000108

080008bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  return 1;
 80008c0:	2301      	movs	r3, #1
}
 80008c2:	0018      	movs	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <_kill>:

int _kill(int pid, int sig)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80008d2:	f002 fb39 	bl	8002f48 <__errno>
 80008d6:	0003      	movs	r3, r0
 80008d8:	2216      	movs	r2, #22
 80008da:	601a      	str	r2, [r3, #0]
  return -1;
 80008dc:	2301      	movs	r3, #1
 80008de:	425b      	negs	r3, r3
}
 80008e0:	0018      	movs	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b002      	add	sp, #8
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <_exit>:

void _exit (int status)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80008f0:	2301      	movs	r3, #1
 80008f2:	425a      	negs	r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	0011      	movs	r1, r2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff ffe5 	bl	80008c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80008fe:	e7fe      	b.n	80008fe <_exit+0x16>

08000900 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	e00a      	b.n	8000928 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000912:	e000      	b.n	8000916 <_read+0x16>
 8000914:	bf00      	nop
 8000916:	0001      	movs	r1, r0
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	60ba      	str	r2, [r7, #8]
 800091e:	b2ca      	uxtb	r2, r1
 8000920:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	3301      	adds	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697a      	ldr	r2, [r7, #20]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	429a      	cmp	r2, r3
 800092e:	dbf0      	blt.n	8000912 <_read+0x12>
  }

  return len;
 8000930:	687b      	ldr	r3, [r7, #4]
}
 8000932:	0018      	movs	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	b006      	add	sp, #24
 8000938:	bd80      	pop	{r7, pc}

0800093a <_close>:
  }
  return len;
}

int _close(int file)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000942:	2301      	movs	r3, #1
 8000944:	425b      	negs	r3, r3
}
 8000946:	0018      	movs	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	b002      	add	sp, #8
 800094c:	bd80      	pop	{r7, pc}

0800094e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	0192      	lsls	r2, r2, #6
 800095e:	605a      	str	r2, [r3, #4]
  return 0;
 8000960:	2300      	movs	r3, #0
}
 8000962:	0018      	movs	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	b002      	add	sp, #8
 8000968:	bd80      	pop	{r7, pc}

0800096a <_isatty>:

int _isatty(int file)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000972:	2301      	movs	r3, #1
}
 8000974:	0018      	movs	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	b002      	add	sp, #8
 800097a:	bd80      	pop	{r7, pc}

0800097c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000988:	2300      	movs	r3, #0
}
 800098a:	0018      	movs	r0, r3
 800098c:	46bd      	mov	sp, r7
 800098e:	b004      	add	sp, #16
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800099c:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <_sbrk+0x5c>)
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <_sbrk+0x60>)
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d102      	bne.n	80009b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <_sbrk+0x64>)
 80009b2:	4a12      	ldr	r2, [pc, #72]	; (80009fc <_sbrk+0x68>)
 80009b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <_sbrk+0x64>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	18d3      	adds	r3, r2, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d207      	bcs.n	80009d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c4:	f002 fac0 	bl	8002f48 <__errno>
 80009c8:	0003      	movs	r3, r0
 80009ca:	220c      	movs	r2, #12
 80009cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	425b      	negs	r3, r3
 80009d2:	e009      	b.n	80009e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <_sbrk+0x64>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	18d2      	adds	r2, r2, r3
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <_sbrk+0x64>)
 80009e4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009e6:	68fb      	ldr	r3, [r7, #12]
}
 80009e8:	0018      	movs	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b006      	add	sp, #24
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20002000 	.word	0x20002000
 80009f4:	00000400 	.word	0x00000400
 80009f8:	20000290 	.word	0x20000290
 80009fc:	200003e8 	.word	0x200003e8

08000a00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a12:	490e      	ldr	r1, [pc, #56]	; (8000a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a14:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <LoopForever+0xe>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a28:	4c0b      	ldr	r4, [pc, #44]	; (8000a58 <LoopForever+0x16>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a36:	f7ff ffe3 	bl	8000a00 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a3a:	f002 fa8b 	bl	8002f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a3e:	f7ff fd0d 	bl	800045c <main>

08000a42 <LoopForever>:

LoopForever:
    b LoopForever
 8000a42:	e7fe      	b.n	8000a42 <LoopForever>
  ldr   r0, =_estack
 8000a44:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a50:	08003d84 	.word	0x08003d84
  ldr r2, =_sbss
 8000a54:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a58:	200003e4 	.word	0x200003e4

08000a5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC1_IRQHandler>
	...

08000a60 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <HAL_Init+0x24>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_Init+0x24>)
 8000a6a:	2110      	movs	r1, #16
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a70:	2000      	movs	r0, #0
 8000a72:	f000 f809 	bl	8000a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a76:	f7ff fe63 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
}
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	40022000 	.word	0x40022000

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <HAL_InitTick+0x5c>)
 8000a92:	681c      	ldr	r4, [r3, #0]
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <HAL_InitTick+0x60>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	0019      	movs	r1, r3
 8000a9a:	23fa      	movs	r3, #250	; 0xfa
 8000a9c:	0098      	lsls	r0, r3, #2
 8000a9e:	f7ff fb3d 	bl	800011c <__udivsi3>
 8000aa2:	0003      	movs	r3, r0
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	0020      	movs	r0, r4
 8000aa8:	f7ff fb38 	bl	800011c <__udivsi3>
 8000aac:	0003      	movs	r3, r0
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 f90b 	bl	8000cca <HAL_SYSTICK_Config>
 8000ab4:	1e03      	subs	r3, r0, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e00f      	b.n	8000adc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	d80b      	bhi.n	8000ada <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	425b      	negs	r3, r3
 8000ac8:	2200      	movs	r2, #0
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 f8d8 	bl	8000c80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_InitTick+0x64>)
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	0018      	movs	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b003      	add	sp, #12
 8000ae2:	bd90      	pop	{r4, r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000004 	.word	0x20000004

08000af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_IncTick+0x1c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	001a      	movs	r2, r3
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_IncTick+0x20>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	18d2      	adds	r2, r2, r3
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <HAL_IncTick+0x20>)
 8000b02:	601a      	str	r2, [r3, #0]
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000294 	.word	0x20000294

08000b14 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b02      	ldr	r3, [pc, #8]	; (8000b24 <HAL_GetTick+0x10>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	20000294 	.word	0x20000294

08000b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	0002      	movs	r2, r0
 8000b30:	1dfb      	adds	r3, r7, #7
 8000b32:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b34:	1dfb      	adds	r3, r7, #7
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b7f      	cmp	r3, #127	; 0x7f
 8000b3a:	d809      	bhi.n	8000b50 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	001a      	movs	r2, r3
 8000b42:	231f      	movs	r3, #31
 8000b44:	401a      	ands	r2, r3
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <__NVIC_EnableIRQ+0x30>)
 8000b48:	2101      	movs	r1, #1
 8000b4a:	4091      	lsls	r1, r2
 8000b4c:	000a      	movs	r2, r1
 8000b4e:	601a      	str	r2, [r3, #0]
  }
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	e000e100 	.word	0xe000e100

08000b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	0002      	movs	r2, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b70:	d828      	bhi.n	8000bc4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b72:	4a2f      	ldr	r2, [pc, #188]	; (8000c30 <__NVIC_SetPriority+0xd4>)
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	33c0      	adds	r3, #192	; 0xc0
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	589b      	ldr	r3, [r3, r2]
 8000b82:	1dfa      	adds	r2, r7, #7
 8000b84:	7812      	ldrb	r2, [r2, #0]
 8000b86:	0011      	movs	r1, r2
 8000b88:	2203      	movs	r2, #3
 8000b8a:	400a      	ands	r2, r1
 8000b8c:	00d2      	lsls	r2, r2, #3
 8000b8e:	21ff      	movs	r1, #255	; 0xff
 8000b90:	4091      	lsls	r1, r2
 8000b92:	000a      	movs	r2, r1
 8000b94:	43d2      	mvns	r2, r2
 8000b96:	401a      	ands	r2, r3
 8000b98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	019b      	lsls	r3, r3, #6
 8000b9e:	22ff      	movs	r2, #255	; 0xff
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	2303      	movs	r3, #3
 8000baa:	4003      	ands	r3, r0
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb0:	481f      	ldr	r0, [pc, #124]	; (8000c30 <__NVIC_SetPriority+0xd4>)
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b25b      	sxtb	r3, r3
 8000bb8:	089b      	lsrs	r3, r3, #2
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	33c0      	adds	r3, #192	; 0xc0
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bc2:	e031      	b.n	8000c28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	; (8000c34 <__NVIC_SetPriority+0xd8>)
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	0019      	movs	r1, r3
 8000bcc:	230f      	movs	r3, #15
 8000bce:	400b      	ands	r3, r1
 8000bd0:	3b08      	subs	r3, #8
 8000bd2:	089b      	lsrs	r3, r3, #2
 8000bd4:	3306      	adds	r3, #6
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	18d3      	adds	r3, r2, r3
 8000bda:	3304      	adds	r3, #4
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	1dfa      	adds	r2, r7, #7
 8000be0:	7812      	ldrb	r2, [r2, #0]
 8000be2:	0011      	movs	r1, r2
 8000be4:	2203      	movs	r2, #3
 8000be6:	400a      	ands	r2, r1
 8000be8:	00d2      	lsls	r2, r2, #3
 8000bea:	21ff      	movs	r1, #255	; 0xff
 8000bec:	4091      	lsls	r1, r2
 8000bee:	000a      	movs	r2, r1
 8000bf0:	43d2      	mvns	r2, r2
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	019b      	lsls	r3, r3, #6
 8000bfa:	22ff      	movs	r2, #255	; 0xff
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	0018      	movs	r0, r3
 8000c04:	2303      	movs	r3, #3
 8000c06:	4003      	ands	r3, r0
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c0c:	4809      	ldr	r0, [pc, #36]	; (8000c34 <__NVIC_SetPriority+0xd8>)
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	001c      	movs	r4, r3
 8000c14:	230f      	movs	r3, #15
 8000c16:	4023      	ands	r3, r4
 8000c18:	3b08      	subs	r3, #8
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	3306      	adds	r3, #6
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	18c3      	adds	r3, r0, r3
 8000c24:	3304      	adds	r3, #4
 8000c26:	601a      	str	r2, [r3, #0]
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b003      	add	sp, #12
 8000c2e:	bd90      	pop	{r4, r7, pc}
 8000c30:	e000e100 	.word	0xe000e100
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	1e5a      	subs	r2, r3, #1
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	045b      	lsls	r3, r3, #17
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d301      	bcc.n	8000c50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e010      	b.n	8000c72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <SysTick_Config+0x44>)
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	3a01      	subs	r2, #1
 8000c56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c58:	2301      	movs	r3, #1
 8000c5a:	425b      	negs	r3, r3
 8000c5c:	2103      	movs	r1, #3
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f7ff ff7c 	bl	8000b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <SysTick_Config+0x44>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <SysTick_Config+0x44>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	0018      	movs	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b002      	add	sp, #8
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	1c02      	adds	r2, r0, #0
 8000c90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b25b      	sxtb	r3, r3
 8000c9a:	0011      	movs	r1, r2
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff ff5d 	bl	8000b5c <__NVIC_SetPriority>
}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b004      	add	sp, #16
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	0002      	movs	r2, r0
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b25b      	sxtb	r3, r3
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff ff33 	bl	8000b28 <__NVIC_EnableIRQ>
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b002      	add	sp, #8
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f7ff ffaf 	bl	8000c38 <SysTick_Config>
 8000cda:	0003      	movs	r3, r0
}
 8000cdc:	0018      	movs	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b002      	add	sp, #8
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e036      	b.n	8000d68 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2221      	movs	r2, #33	; 0x21
 8000cfe:	2102      	movs	r1, #2
 8000d00:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <HAL_DMA_Init+0x8c>)
 8000d0e:	4013      	ands	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68fa      	ldr	r2, [r7, #12]
 8000d46:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 f946 	bl	8000fdc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2221      	movs	r2, #33	; 0x21
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2220      	movs	r2, #32
 8000d62:	2100      	movs	r1, #0
 8000d64:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
}  
 8000d68:	0018      	movs	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b004      	add	sp, #16
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	ffffc00f 	.word	0xffffc00f

08000d74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
 8000d80:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000d82:	2317      	movs	r3, #23
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	2220      	movs	r2, #32
 8000d8e:	5c9b      	ldrb	r3, [r3, r2]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d101      	bne.n	8000d98 <HAL_DMA_Start_IT+0x24>
 8000d94:	2302      	movs	r3, #2
 8000d96:	e04f      	b.n	8000e38 <HAL_DMA_Start_IT+0xc4>
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2220      	movs	r2, #32
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2221      	movs	r2, #33	; 0x21
 8000da4:	5c9b      	ldrb	r3, [r3, r2]
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d13a      	bne.n	8000e22 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2221      	movs	r2, #33	; 0x21
 8000db0:	2102      	movs	r1, #2
 8000db2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2200      	movs	r2, #0
 8000db8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	438a      	bics	r2, r1
 8000dc8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	68b9      	ldr	r1, [r7, #8]
 8000dd0:	68f8      	ldr	r0, [r7, #12]
 8000dd2:	f000 f8d7 	bl	8000f84 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d008      	beq.n	8000df0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	210e      	movs	r1, #14
 8000dea:	430a      	orrs	r2, r1
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	e00f      	b.n	8000e10 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	210a      	movs	r1, #10
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2104      	movs	r1, #4
 8000e0c:	438a      	bics	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	e007      	b.n	8000e32 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2220      	movs	r2, #32
 8000e26:	2100      	movs	r1, #0
 8000e28:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000e2a:	2317      	movs	r3, #23
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	2202      	movs	r2, #2
 8000e30:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000e32:	2317      	movs	r3, #23
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	781b      	ldrb	r3, [r3, #0]
} 
 8000e38:	0018      	movs	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b006      	add	sp, #24
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	2204      	movs	r2, #4
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	0013      	movs	r3, r2
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	4013      	ands	r3, r2
 8000e66:	d024      	beq.n	8000eb2 <HAL_DMA_IRQHandler+0x72>
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	2204      	movs	r2, #4
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d020      	beq.n	8000eb2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2220      	movs	r2, #32
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d107      	bne.n	8000e8c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2104      	movs	r1, #4
 8000e88:	438a      	bics	r2, r1
 8000e8a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e94:	2104      	movs	r1, #4
 8000e96:	4091      	lsls	r1, r2
 8000e98:	000a      	movs	r2, r1
 8000e9a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d100      	bne.n	8000ea6 <HAL_DMA_IRQHandler+0x66>
 8000ea4:	e06a      	b.n	8000f7c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	0010      	movs	r0, r2
 8000eae:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000eb0:	e064      	b.n	8000f7c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	409a      	lsls	r2, r3
 8000eba:	0013      	movs	r3, r2
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	d02b      	beq.n	8000f1a <HAL_DMA_IRQHandler+0xda>
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	d027      	beq.n	8000f1a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2220      	movs	r2, #32
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d10b      	bne.n	8000eee <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	210a      	movs	r1, #10
 8000ee2:	438a      	bics	r2, r1
 8000ee4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2221      	movs	r2, #33	; 0x21
 8000eea:	2101      	movs	r1, #1
 8000eec:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	4091      	lsls	r1, r2
 8000efa:	000a      	movs	r2, r1
 8000efc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2220      	movs	r2, #32
 8000f02:	2100      	movs	r1, #0
 8000f04:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d036      	beq.n	8000f7c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	0010      	movs	r0, r2
 8000f16:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000f18:	e030      	b.n	8000f7c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	2208      	movs	r2, #8
 8000f20:	409a      	lsls	r2, r3
 8000f22:	0013      	movs	r3, r2
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	4013      	ands	r3, r2
 8000f28:	d028      	beq.n	8000f7c <HAL_DMA_IRQHandler+0x13c>
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d024      	beq.n	8000f7c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	210e      	movs	r1, #14
 8000f3e:	438a      	bics	r2, r1
 8000f40:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	000a      	movs	r2, r1
 8000f50:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2221      	movs	r2, #33	; 0x21
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2220      	movs	r2, #32
 8000f64:	2100      	movs	r1, #0
 8000f66:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	0010      	movs	r0, r2
 8000f78:	4798      	blx	r3
    }
   }
}  
 8000f7a:	e7ff      	b.n	8000f7c <HAL_DMA_IRQHandler+0x13c>
 8000f7c:	46c0      	nop			; (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b004      	add	sp, #16
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	000a      	movs	r2, r1
 8000fa0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b10      	cmp	r3, #16
 8000fb0:	d108      	bne.n	8000fc4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fc2:	e007      	b.n	8000fd4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68ba      	ldr	r2, [r7, #8]
 8000fca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	60da      	str	r2, [r3, #12]
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b004      	add	sp, #16
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <DMA_CalcBaseAndBitshift+0x30>)
 8000fea:	4694      	mov	ip, r2
 8000fec:	4463      	add	r3, ip
 8000fee:	2114      	movs	r1, #20
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f7ff f893 	bl	800011c <__udivsi3>
 8000ff6:	0003      	movs	r3, r0
 8000ff8:	009a      	lsls	r2, r3, #2
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a03      	ldr	r2, [pc, #12]	; (8001010 <DMA_CalcBaseAndBitshift+0x34>)
 8001002:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}
 800100c:	bffdfff8 	.word	0xbffdfff8
 8001010:	40020000 	.word	0x40020000

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001022:	e14f      	b.n	80012c4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2101      	movs	r1, #1
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	4091      	lsls	r1, r2
 800102e:	000a      	movs	r2, r1
 8001030:	4013      	ands	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d100      	bne.n	800103c <HAL_GPIO_Init+0x28>
 800103a:	e140      	b.n	80012be <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2203      	movs	r2, #3
 8001042:	4013      	ands	r3, r2
 8001044:	2b01      	cmp	r3, #1
 8001046:	d005      	beq.n	8001054 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2203      	movs	r2, #3
 800104e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001050:	2b02      	cmp	r3, #2
 8001052:	d130      	bne.n	80010b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	409a      	lsls	r2, r3
 8001062:	0013      	movs	r3, r2
 8001064:	43da      	mvns	r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	409a      	lsls	r2, r3
 8001076:	0013      	movs	r3, r2
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800108a:	2201      	movs	r2, #1
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
 8001090:	0013      	movs	r3, r2
 8001092:	43da      	mvns	r2, r3
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	091b      	lsrs	r3, r3, #4
 80010a0:	2201      	movs	r2, #1
 80010a2:	401a      	ands	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	409a      	lsls	r2, r3
 80010a8:	0013      	movs	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2203      	movs	r2, #3
 80010bc:	4013      	ands	r3, r2
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d017      	beq.n	80010f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	409a      	lsls	r2, r3
 80010d0:	0013      	movs	r3, r2
 80010d2:	43da      	mvns	r2, r3
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	409a      	lsls	r2, r3
 80010e4:	0013      	movs	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2203      	movs	r2, #3
 80010f8:	4013      	ands	r3, r2
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d123      	bne.n	8001146 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	08da      	lsrs	r2, r3, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3208      	adds	r2, #8
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	58d3      	ldr	r3, [r2, r3]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	2207      	movs	r2, #7
 8001110:	4013      	ands	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	220f      	movs	r2, #15
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	43da      	mvns	r2, r3
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	691a      	ldr	r2, [r3, #16]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	2107      	movs	r1, #7
 800112a:	400b      	ands	r3, r1
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	0092      	lsls	r2, r2, #2
 8001142:	6939      	ldr	r1, [r7, #16]
 8001144:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	43da      	mvns	r2, r3
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2203      	movs	r2, #3
 8001164:	401a      	ands	r2, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	409a      	lsls	r2, r3
 800116c:	0013      	movs	r3, r2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	23c0      	movs	r3, #192	; 0xc0
 8001180:	029b      	lsls	r3, r3, #10
 8001182:	4013      	ands	r3, r2
 8001184:	d100      	bne.n	8001188 <HAL_GPIO_Init+0x174>
 8001186:	e09a      	b.n	80012be <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001188:	4b54      	ldr	r3, [pc, #336]	; (80012dc <HAL_GPIO_Init+0x2c8>)
 800118a:	699a      	ldr	r2, [r3, #24]
 800118c:	4b53      	ldr	r3, [pc, #332]	; (80012dc <HAL_GPIO_Init+0x2c8>)
 800118e:	2101      	movs	r1, #1
 8001190:	430a      	orrs	r2, r1
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	4b51      	ldr	r3, [pc, #324]	; (80012dc <HAL_GPIO_Init+0x2c8>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	2201      	movs	r2, #1
 800119a:	4013      	ands	r3, r2
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011a0:	4a4f      	ldr	r2, [pc, #316]	; (80012e0 <HAL_GPIO_Init+0x2cc>)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	589b      	ldr	r3, [r3, r2]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	2203      	movs	r2, #3
 80011b2:	4013      	ands	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	409a      	lsls	r2, r3
 80011ba:	0013      	movs	r3, r2
 80011bc:	43da      	mvns	r2, r3
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	2390      	movs	r3, #144	; 0x90
 80011c8:	05db      	lsls	r3, r3, #23
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d013      	beq.n	80011f6 <HAL_GPIO_Init+0x1e2>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a44      	ldr	r2, [pc, #272]	; (80012e4 <HAL_GPIO_Init+0x2d0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d00d      	beq.n	80011f2 <HAL_GPIO_Init+0x1de>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a43      	ldr	r2, [pc, #268]	; (80012e8 <HAL_GPIO_Init+0x2d4>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d007      	beq.n	80011ee <HAL_GPIO_Init+0x1da>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a42      	ldr	r2, [pc, #264]	; (80012ec <HAL_GPIO_Init+0x2d8>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d101      	bne.n	80011ea <HAL_GPIO_Init+0x1d6>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x1e4>
 80011ea:	2305      	movs	r3, #5
 80011ec:	e004      	b.n	80011f8 <HAL_GPIO_Init+0x1e4>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e002      	b.n	80011f8 <HAL_GPIO_Init+0x1e4>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_GPIO_Init+0x1e4>
 80011f6:	2300      	movs	r3, #0
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	2103      	movs	r1, #3
 80011fc:	400a      	ands	r2, r1
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	4093      	lsls	r3, r2
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001208:	4935      	ldr	r1, [pc, #212]	; (80012e0 <HAL_GPIO_Init+0x2cc>)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001216:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <HAL_GPIO_Init+0x2dc>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43da      	mvns	r2, r3
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	025b      	lsls	r3, r3, #9
 800122e:	4013      	ands	r3, r2
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <HAL_GPIO_Init+0x2dc>)
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001240:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <HAL_GPIO_Init+0x2dc>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	43da      	mvns	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	029b      	lsls	r3, r3, #10
 8001258:	4013      	ands	r3, r2
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <HAL_GPIO_Init+0x2dc>)
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <HAL_GPIO_Init+0x2dc>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	43da      	mvns	r2, r3
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	035b      	lsls	r3, r3, #13
 8001282:	4013      	ands	r3, r2
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <HAL_GPIO_Init+0x2dc>)
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <HAL_GPIO_Init+0x2dc>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	43da      	mvns	r2, r3
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	2380      	movs	r3, #128	; 0x80
 80012aa:	039b      	lsls	r3, r3, #14
 80012ac:	4013      	ands	r3, r2
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <HAL_GPIO_Init+0x2dc>)
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	3301      	adds	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	40da      	lsrs	r2, r3
 80012cc:	1e13      	subs	r3, r2, #0
 80012ce:	d000      	beq.n	80012d2 <HAL_GPIO_Init+0x2be>
 80012d0:	e6a8      	b.n	8001024 <HAL_GPIO_Init+0x10>
  } 
}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b006      	add	sp, #24
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010000 	.word	0x40010000
 80012e4:	48000400 	.word	0x48000400
 80012e8:	48000800 	.word	0x48000800
 80012ec:	48000c00 	.word	0x48000c00
 80012f0:	40010400 	.word	0x40010400

080012f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	000a      	movs	r2, r1
 80012fe:	1cbb      	adds	r3, r7, #2
 8001300:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	1cba      	adds	r2, r7, #2
 8001308:	8812      	ldrh	r2, [r2, #0]
 800130a:	4013      	ands	r3, r2
 800130c:	d004      	beq.n	8001318 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800130e:	230f      	movs	r3, #15
 8001310:	18fb      	adds	r3, r7, r3
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	e003      	b.n	8001320 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001318:	230f      	movs	r3, #15
 800131a:	18fb      	adds	r3, r7, r3
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001320:	230f      	movs	r3, #15
 8001322:	18fb      	adds	r3, r7, r3
 8001324:	781b      	ldrb	r3, [r3, #0]
  }
 8001326:	0018      	movs	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	b004      	add	sp, #16
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	0008      	movs	r0, r1
 8001338:	0011      	movs	r1, r2
 800133a:	1cbb      	adds	r3, r7, #2
 800133c:	1c02      	adds	r2, r0, #0
 800133e:	801a      	strh	r2, [r3, #0]
 8001340:	1c7b      	adds	r3, r7, #1
 8001342:	1c0a      	adds	r2, r1, #0
 8001344:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001346:	1c7b      	adds	r3, r7, #1
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d004      	beq.n	8001358 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800134e:	1cbb      	adds	r3, r7, #2
 8001350:	881a      	ldrh	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001356:	e003      	b.n	8001360 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001358:	1cbb      	adds	r3, r7, #2
 800135a:	881a      	ldrh	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b002      	add	sp, #8
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e301      	b.n	800197e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2201      	movs	r2, #1
 8001380:	4013      	ands	r3, r2
 8001382:	d100      	bne.n	8001386 <HAL_RCC_OscConfig+0x1e>
 8001384:	e08d      	b.n	80014a2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001386:	4bc3      	ldr	r3, [pc, #780]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	220c      	movs	r2, #12
 800138c:	4013      	ands	r3, r2
 800138e:	2b04      	cmp	r3, #4
 8001390:	d00e      	beq.n	80013b0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001392:	4bc0      	ldr	r3, [pc, #768]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	220c      	movs	r2, #12
 8001398:	4013      	ands	r3, r2
 800139a:	2b08      	cmp	r3, #8
 800139c:	d116      	bne.n	80013cc <HAL_RCC_OscConfig+0x64>
 800139e:	4bbd      	ldr	r3, [pc, #756]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	025b      	lsls	r3, r3, #9
 80013a6:	401a      	ands	r2, r3
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	025b      	lsls	r3, r3, #9
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d10d      	bne.n	80013cc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	4bb8      	ldr	r3, [pc, #736]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	029b      	lsls	r3, r3, #10
 80013b8:	4013      	ands	r3, r2
 80013ba:	d100      	bne.n	80013be <HAL_RCC_OscConfig+0x56>
 80013bc:	e070      	b.n	80014a0 <HAL_RCC_OscConfig+0x138>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d000      	beq.n	80013c8 <HAL_RCC_OscConfig+0x60>
 80013c6:	e06b      	b.n	80014a0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e2d8      	b.n	800197e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d107      	bne.n	80013e4 <HAL_RCC_OscConfig+0x7c>
 80013d4:	4baf      	ldr	r3, [pc, #700]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4bae      	ldr	r3, [pc, #696]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 80013da:	2180      	movs	r1, #128	; 0x80
 80013dc:	0249      	lsls	r1, r1, #9
 80013de:	430a      	orrs	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e02f      	b.n	8001444 <HAL_RCC_OscConfig+0xdc>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10c      	bne.n	8001406 <HAL_RCC_OscConfig+0x9e>
 80013ec:	4ba9      	ldr	r3, [pc, #676]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4ba8      	ldr	r3, [pc, #672]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 80013f2:	49a9      	ldr	r1, [pc, #676]	; (8001698 <HAL_RCC_OscConfig+0x330>)
 80013f4:	400a      	ands	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	4ba6      	ldr	r3, [pc, #664]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4ba5      	ldr	r3, [pc, #660]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 80013fe:	49a7      	ldr	r1, [pc, #668]	; (800169c <HAL_RCC_OscConfig+0x334>)
 8001400:	400a      	ands	r2, r1
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	e01e      	b.n	8001444 <HAL_RCC_OscConfig+0xdc>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b05      	cmp	r3, #5
 800140c:	d10e      	bne.n	800142c <HAL_RCC_OscConfig+0xc4>
 800140e:	4ba1      	ldr	r3, [pc, #644]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4ba0      	ldr	r3, [pc, #640]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 8001414:	2180      	movs	r1, #128	; 0x80
 8001416:	02c9      	lsls	r1, r1, #11
 8001418:	430a      	orrs	r2, r1
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	4b9d      	ldr	r3, [pc, #628]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b9c      	ldr	r3, [pc, #624]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 8001422:	2180      	movs	r1, #128	; 0x80
 8001424:	0249      	lsls	r1, r1, #9
 8001426:	430a      	orrs	r2, r1
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e00b      	b.n	8001444 <HAL_RCC_OscConfig+0xdc>
 800142c:	4b99      	ldr	r3, [pc, #612]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b98      	ldr	r3, [pc, #608]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 8001432:	4999      	ldr	r1, [pc, #612]	; (8001698 <HAL_RCC_OscConfig+0x330>)
 8001434:	400a      	ands	r2, r1
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	4b96      	ldr	r3, [pc, #600]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b95      	ldr	r3, [pc, #596]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 800143e:	4997      	ldr	r1, [pc, #604]	; (800169c <HAL_RCC_OscConfig+0x334>)
 8001440:	400a      	ands	r2, r1
 8001442:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d014      	beq.n	8001476 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fb62 	bl	8000b14 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001456:	f7ff fb5d 	bl	8000b14 <HAL_GetTick>
 800145a:	0002      	movs	r2, r0
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b64      	cmp	r3, #100	; 0x64
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e28a      	b.n	800197e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001468:	4b8a      	ldr	r3, [pc, #552]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	029b      	lsls	r3, r3, #10
 8001470:	4013      	ands	r3, r2
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0xee>
 8001474:	e015      	b.n	80014a2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff fb4d 	bl	8000b14 <HAL_GetTick>
 800147a:	0003      	movs	r3, r0
 800147c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001480:	f7ff fb48 	bl	8000b14 <HAL_GetTick>
 8001484:	0002      	movs	r2, r0
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b64      	cmp	r3, #100	; 0x64
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e275      	b.n	800197e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001492:	4b80      	ldr	r3, [pc, #512]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	029b      	lsls	r3, r3, #10
 800149a:	4013      	ands	r3, r2
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x118>
 800149e:	e000      	b.n	80014a2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2202      	movs	r2, #2
 80014a8:	4013      	ands	r3, r2
 80014aa:	d100      	bne.n	80014ae <HAL_RCC_OscConfig+0x146>
 80014ac:	e069      	b.n	8001582 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014ae:	4b79      	ldr	r3, [pc, #484]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	220c      	movs	r2, #12
 80014b4:	4013      	ands	r3, r2
 80014b6:	d00b      	beq.n	80014d0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014b8:	4b76      	ldr	r3, [pc, #472]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	220c      	movs	r2, #12
 80014be:	4013      	ands	r3, r2
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d11c      	bne.n	80014fe <HAL_RCC_OscConfig+0x196>
 80014c4:	4b73      	ldr	r3, [pc, #460]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	025b      	lsls	r3, r3, #9
 80014cc:	4013      	ands	r3, r2
 80014ce:	d116      	bne.n	80014fe <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d0:	4b70      	ldr	r3, [pc, #448]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2202      	movs	r2, #2
 80014d6:	4013      	ands	r3, r2
 80014d8:	d005      	beq.n	80014e6 <HAL_RCC_OscConfig+0x17e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d001      	beq.n	80014e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e24b      	b.n	800197e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e6:	4b6b      	ldr	r3, [pc, #428]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	22f8      	movs	r2, #248	; 0xf8
 80014ec:	4393      	bics	r3, r2
 80014ee:	0019      	movs	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	00da      	lsls	r2, r3, #3
 80014f6:	4b67      	ldr	r3, [pc, #412]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 80014f8:	430a      	orrs	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fc:	e041      	b.n	8001582 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d024      	beq.n	8001550 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001506:	4b63      	ldr	r3, [pc, #396]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	4b62      	ldr	r3, [pc, #392]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 800150c:	2101      	movs	r1, #1
 800150e:	430a      	orrs	r2, r1
 8001510:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff faff 	bl	8000b14 <HAL_GetTick>
 8001516:	0003      	movs	r3, r0
 8001518:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151c:	f7ff fafa 	bl	8000b14 <HAL_GetTick>
 8001520:	0002      	movs	r2, r0
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e227      	b.n	800197e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152e:	4b59      	ldr	r3, [pc, #356]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2202      	movs	r2, #2
 8001534:	4013      	ands	r3, r2
 8001536:	d0f1      	beq.n	800151c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	4b56      	ldr	r3, [pc, #344]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	22f8      	movs	r2, #248	; 0xf8
 800153e:	4393      	bics	r3, r2
 8001540:	0019      	movs	r1, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	00da      	lsls	r2, r3, #3
 8001548:	4b52      	ldr	r3, [pc, #328]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 800154a:	430a      	orrs	r2, r1
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	e018      	b.n	8001582 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001550:	4b50      	ldr	r3, [pc, #320]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b4f      	ldr	r3, [pc, #316]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 8001556:	2101      	movs	r1, #1
 8001558:	438a      	bics	r2, r1
 800155a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fada 	bl	8000b14 <HAL_GetTick>
 8001560:	0003      	movs	r3, r0
 8001562:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001566:	f7ff fad5 	bl	8000b14 <HAL_GetTick>
 800156a:	0002      	movs	r2, r0
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e202      	b.n	800197e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001578:	4b46      	ldr	r3, [pc, #280]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2202      	movs	r2, #2
 800157e:	4013      	ands	r3, r2
 8001580:	d1f1      	bne.n	8001566 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2208      	movs	r2, #8
 8001588:	4013      	ands	r3, r2
 800158a:	d036      	beq.n	80015fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d019      	beq.n	80015c8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001594:	4b3f      	ldr	r3, [pc, #252]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 8001596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001598:	4b3e      	ldr	r3, [pc, #248]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 800159a:	2101      	movs	r1, #1
 800159c:	430a      	orrs	r2, r1
 800159e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a0:	f7ff fab8 	bl	8000b14 <HAL_GetTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015aa:	f7ff fab3 	bl	8000b14 <HAL_GetTick>
 80015ae:	0002      	movs	r2, r0
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e1e0      	b.n	800197e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015bc:	4b35      	ldr	r3, [pc, #212]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	2202      	movs	r2, #2
 80015c2:	4013      	ands	r3, r2
 80015c4:	d0f1      	beq.n	80015aa <HAL_RCC_OscConfig+0x242>
 80015c6:	e018      	b.n	80015fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c8:	4b32      	ldr	r3, [pc, #200]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 80015ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015cc:	4b31      	ldr	r3, [pc, #196]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 80015ce:	2101      	movs	r1, #1
 80015d0:	438a      	bics	r2, r1
 80015d2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d4:	f7ff fa9e 	bl	8000b14 <HAL_GetTick>
 80015d8:	0003      	movs	r3, r0
 80015da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015de:	f7ff fa99 	bl	8000b14 <HAL_GetTick>
 80015e2:	0002      	movs	r2, r0
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e1c6      	b.n	800197e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f0:	4b28      	ldr	r3, [pc, #160]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	2202      	movs	r2, #2
 80015f6:	4013      	ands	r3, r2
 80015f8:	d1f1      	bne.n	80015de <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2204      	movs	r2, #4
 8001600:	4013      	ands	r3, r2
 8001602:	d100      	bne.n	8001606 <HAL_RCC_OscConfig+0x29e>
 8001604:	e0b4      	b.n	8001770 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001606:	201f      	movs	r0, #31
 8001608:	183b      	adds	r3, r7, r0
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800160e:	4b21      	ldr	r3, [pc, #132]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 8001610:	69da      	ldr	r2, [r3, #28]
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	055b      	lsls	r3, r3, #21
 8001616:	4013      	ands	r3, r2
 8001618:	d110      	bne.n	800163c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 800161c:	69da      	ldr	r2, [r3, #28]
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 8001620:	2180      	movs	r1, #128	; 0x80
 8001622:	0549      	lsls	r1, r1, #21
 8001624:	430a      	orrs	r2, r1
 8001626:	61da      	str	r2, [r3, #28]
 8001628:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 800162a:	69da      	ldr	r2, [r3, #28]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	055b      	lsls	r3, r3, #21
 8001630:	4013      	ands	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001636:	183b      	adds	r3, r7, r0
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <HAL_RCC_OscConfig+0x338>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4013      	ands	r3, r2
 8001646:	d11a      	bne.n	800167e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_RCC_OscConfig+0x338>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <HAL_RCC_OscConfig+0x338>)
 800164e:	2180      	movs	r1, #128	; 0x80
 8001650:	0049      	lsls	r1, r1, #1
 8001652:	430a      	orrs	r2, r1
 8001654:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001656:	f7ff fa5d 	bl	8000b14 <HAL_GetTick>
 800165a:	0003      	movs	r3, r0
 800165c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001660:	f7ff fa58 	bl	8000b14 <HAL_GetTick>
 8001664:	0002      	movs	r2, r0
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e185      	b.n	800197e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <HAL_RCC_OscConfig+0x338>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4013      	ands	r3, r2
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d10e      	bne.n	80016a4 <HAL_RCC_OscConfig+0x33c>
 8001686:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 8001688:	6a1a      	ldr	r2, [r3, #32]
 800168a:	4b02      	ldr	r3, [pc, #8]	; (8001694 <HAL_RCC_OscConfig+0x32c>)
 800168c:	2101      	movs	r1, #1
 800168e:	430a      	orrs	r2, r1
 8001690:	621a      	str	r2, [r3, #32]
 8001692:	e035      	b.n	8001700 <HAL_RCC_OscConfig+0x398>
 8001694:	40021000 	.word	0x40021000
 8001698:	fffeffff 	.word	0xfffeffff
 800169c:	fffbffff 	.word	0xfffbffff
 80016a0:	40007000 	.word	0x40007000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10c      	bne.n	80016c6 <HAL_RCC_OscConfig+0x35e>
 80016ac:	4bb6      	ldr	r3, [pc, #728]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80016ae:	6a1a      	ldr	r2, [r3, #32]
 80016b0:	4bb5      	ldr	r3, [pc, #724]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80016b2:	2101      	movs	r1, #1
 80016b4:	438a      	bics	r2, r1
 80016b6:	621a      	str	r2, [r3, #32]
 80016b8:	4bb3      	ldr	r3, [pc, #716]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80016ba:	6a1a      	ldr	r2, [r3, #32]
 80016bc:	4bb2      	ldr	r3, [pc, #712]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80016be:	2104      	movs	r1, #4
 80016c0:	438a      	bics	r2, r1
 80016c2:	621a      	str	r2, [r3, #32]
 80016c4:	e01c      	b.n	8001700 <HAL_RCC_OscConfig+0x398>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b05      	cmp	r3, #5
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x380>
 80016ce:	4bae      	ldr	r3, [pc, #696]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80016d0:	6a1a      	ldr	r2, [r3, #32]
 80016d2:	4bad      	ldr	r3, [pc, #692]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80016d4:	2104      	movs	r1, #4
 80016d6:	430a      	orrs	r2, r1
 80016d8:	621a      	str	r2, [r3, #32]
 80016da:	4bab      	ldr	r3, [pc, #684]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80016dc:	6a1a      	ldr	r2, [r3, #32]
 80016de:	4baa      	ldr	r3, [pc, #680]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80016e0:	2101      	movs	r1, #1
 80016e2:	430a      	orrs	r2, r1
 80016e4:	621a      	str	r2, [r3, #32]
 80016e6:	e00b      	b.n	8001700 <HAL_RCC_OscConfig+0x398>
 80016e8:	4ba7      	ldr	r3, [pc, #668]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80016ea:	6a1a      	ldr	r2, [r3, #32]
 80016ec:	4ba6      	ldr	r3, [pc, #664]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80016ee:	2101      	movs	r1, #1
 80016f0:	438a      	bics	r2, r1
 80016f2:	621a      	str	r2, [r3, #32]
 80016f4:	4ba4      	ldr	r3, [pc, #656]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80016f6:	6a1a      	ldr	r2, [r3, #32]
 80016f8:	4ba3      	ldr	r3, [pc, #652]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80016fa:	2104      	movs	r1, #4
 80016fc:	438a      	bics	r2, r1
 80016fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d014      	beq.n	8001732 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001708:	f7ff fa04 	bl	8000b14 <HAL_GetTick>
 800170c:	0003      	movs	r3, r0
 800170e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001710:	e009      	b.n	8001726 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001712:	f7ff f9ff 	bl	8000b14 <HAL_GetTick>
 8001716:	0002      	movs	r2, r0
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	4a9b      	ldr	r2, [pc, #620]	; (800198c <HAL_RCC_OscConfig+0x624>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e12b      	b.n	800197e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001726:	4b98      	ldr	r3, [pc, #608]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	2202      	movs	r2, #2
 800172c:	4013      	ands	r3, r2
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x3aa>
 8001730:	e013      	b.n	800175a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001732:	f7ff f9ef 	bl	8000b14 <HAL_GetTick>
 8001736:	0003      	movs	r3, r0
 8001738:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800173a:	e009      	b.n	8001750 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800173c:	f7ff f9ea 	bl	8000b14 <HAL_GetTick>
 8001740:	0002      	movs	r2, r0
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	4a91      	ldr	r2, [pc, #580]	; (800198c <HAL_RCC_OscConfig+0x624>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e116      	b.n	800197e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001750:	4b8d      	ldr	r3, [pc, #564]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	2202      	movs	r2, #2
 8001756:	4013      	ands	r3, r2
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800175a:	231f      	movs	r3, #31
 800175c:	18fb      	adds	r3, r7, r3
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d105      	bne.n	8001770 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001764:	4b88      	ldr	r3, [pc, #544]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 8001766:	69da      	ldr	r2, [r3, #28]
 8001768:	4b87      	ldr	r3, [pc, #540]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 800176a:	4989      	ldr	r1, [pc, #548]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 800176c:	400a      	ands	r2, r1
 800176e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2210      	movs	r2, #16
 8001776:	4013      	ands	r3, r2
 8001778:	d063      	beq.n	8001842 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d12a      	bne.n	80017d8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001782:	4b81      	ldr	r3, [pc, #516]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 8001784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001786:	4b80      	ldr	r3, [pc, #512]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 8001788:	2104      	movs	r1, #4
 800178a:	430a      	orrs	r2, r1
 800178c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800178e:	4b7e      	ldr	r3, [pc, #504]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 8001790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001792:	4b7d      	ldr	r3, [pc, #500]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 8001794:	2101      	movs	r1, #1
 8001796:	430a      	orrs	r2, r1
 8001798:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179a:	f7ff f9bb 	bl	8000b14 <HAL_GetTick>
 800179e:	0003      	movs	r3, r0
 80017a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017a4:	f7ff f9b6 	bl	8000b14 <HAL_GetTick>
 80017a8:	0002      	movs	r2, r0
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e0e3      	b.n	800197e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017b6:	4b74      	ldr	r3, [pc, #464]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80017b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ba:	2202      	movs	r2, #2
 80017bc:	4013      	ands	r3, r2
 80017be:	d0f1      	beq.n	80017a4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017c0:	4b71      	ldr	r3, [pc, #452]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80017c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c4:	22f8      	movs	r2, #248	; 0xf8
 80017c6:	4393      	bics	r3, r2
 80017c8:	0019      	movs	r1, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	00da      	lsls	r2, r3, #3
 80017d0:	4b6d      	ldr	r3, [pc, #436]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80017d2:	430a      	orrs	r2, r1
 80017d4:	635a      	str	r2, [r3, #52]	; 0x34
 80017d6:	e034      	b.n	8001842 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	3305      	adds	r3, #5
 80017de:	d111      	bne.n	8001804 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80017e0:	4b69      	ldr	r3, [pc, #420]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80017e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017e4:	4b68      	ldr	r3, [pc, #416]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80017e6:	2104      	movs	r1, #4
 80017e8:	438a      	bics	r2, r1
 80017ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017ec:	4b66      	ldr	r3, [pc, #408]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80017ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f0:	22f8      	movs	r2, #248	; 0xf8
 80017f2:	4393      	bics	r3, r2
 80017f4:	0019      	movs	r1, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	00da      	lsls	r2, r3, #3
 80017fc:	4b62      	ldr	r3, [pc, #392]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80017fe:	430a      	orrs	r2, r1
 8001800:	635a      	str	r2, [r3, #52]	; 0x34
 8001802:	e01e      	b.n	8001842 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001804:	4b60      	ldr	r3, [pc, #384]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 8001806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001808:	4b5f      	ldr	r3, [pc, #380]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 800180a:	2104      	movs	r1, #4
 800180c:	430a      	orrs	r2, r1
 800180e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001810:	4b5d      	ldr	r3, [pc, #372]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 8001812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001814:	4b5c      	ldr	r3, [pc, #368]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 8001816:	2101      	movs	r1, #1
 8001818:	438a      	bics	r2, r1
 800181a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181c:	f7ff f97a 	bl	8000b14 <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001826:	f7ff f975 	bl	8000b14 <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e0a2      	b.n	800197e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001838:	4b53      	ldr	r3, [pc, #332]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 800183a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183c:	2202      	movs	r2, #2
 800183e:	4013      	ands	r3, r2
 8001840:	d1f1      	bne.n	8001826 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d100      	bne.n	800184c <HAL_RCC_OscConfig+0x4e4>
 800184a:	e097      	b.n	800197c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800184c:	4b4e      	ldr	r3, [pc, #312]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	220c      	movs	r2, #12
 8001852:	4013      	ands	r3, r2
 8001854:	2b08      	cmp	r3, #8
 8001856:	d100      	bne.n	800185a <HAL_RCC_OscConfig+0x4f2>
 8001858:	e06b      	b.n	8001932 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d14c      	bne.n	80018fc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001862:	4b49      	ldr	r3, [pc, #292]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b48      	ldr	r3, [pc, #288]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 8001868:	494a      	ldr	r1, [pc, #296]	; (8001994 <HAL_RCC_OscConfig+0x62c>)
 800186a:	400a      	ands	r2, r1
 800186c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f7ff f951 	bl	8000b14 <HAL_GetTick>
 8001872:	0003      	movs	r3, r0
 8001874:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff f94c 	bl	8000b14 <HAL_GetTick>
 800187c:	0002      	movs	r2, r0
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e079      	b.n	800197e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188a:	4b3f      	ldr	r3, [pc, #252]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	049b      	lsls	r3, r3, #18
 8001892:	4013      	ands	r3, r2
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001896:	4b3c      	ldr	r3, [pc, #240]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 8001898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189a:	220f      	movs	r2, #15
 800189c:	4393      	bics	r3, r2
 800189e:	0019      	movs	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a4:	4b38      	ldr	r3, [pc, #224]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80018a6:	430a      	orrs	r2, r1
 80018a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80018aa:	4b37      	ldr	r3, [pc, #220]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	4a3a      	ldr	r2, [pc, #232]	; (8001998 <HAL_RCC_OscConfig+0x630>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	0019      	movs	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	431a      	orrs	r2, r3
 80018be:	4b32      	ldr	r3, [pc, #200]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80018c0:	430a      	orrs	r2, r1
 80018c2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c4:	4b30      	ldr	r3, [pc, #192]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b2f      	ldr	r3, [pc, #188]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	0449      	lsls	r1, r1, #17
 80018ce:	430a      	orrs	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff f91f 	bl	8000b14 <HAL_GetTick>
 80018d6:	0003      	movs	r3, r0
 80018d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff f91a 	bl	8000b14 <HAL_GetTick>
 80018e0:	0002      	movs	r2, r0
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e047      	b.n	800197e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ee:	4b26      	ldr	r3, [pc, #152]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	049b      	lsls	r3, r3, #18
 80018f6:	4013      	ands	r3, r2
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x574>
 80018fa:	e03f      	b.n	800197c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fc:	4b22      	ldr	r3, [pc, #136]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b21      	ldr	r3, [pc, #132]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 8001902:	4924      	ldr	r1, [pc, #144]	; (8001994 <HAL_RCC_OscConfig+0x62c>)
 8001904:	400a      	ands	r2, r1
 8001906:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff f904 	bl	8000b14 <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001912:	f7ff f8ff 	bl	8000b14 <HAL_GetTick>
 8001916:	0002      	movs	r2, r0
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e02c      	b.n	800197e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001924:	4b18      	ldr	r3, [pc, #96]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	049b      	lsls	r3, r3, #18
 800192c:	4013      	ands	r3, r2
 800192e:	d1f0      	bne.n	8001912 <HAL_RCC_OscConfig+0x5aa>
 8001930:	e024      	b.n	800197c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d101      	bne.n	800193e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e01f      	b.n	800197e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <HAL_RCC_OscConfig+0x620>)
 8001946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001948:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	025b      	lsls	r3, r3, #9
 8001950:	401a      	ands	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	429a      	cmp	r2, r3
 8001958:	d10e      	bne.n	8001978 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	220f      	movs	r2, #15
 800195e:	401a      	ands	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001964:	429a      	cmp	r2, r3
 8001966:	d107      	bne.n	8001978 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	23f0      	movs	r3, #240	; 0xf0
 800196c:	039b      	lsls	r3, r3, #14
 800196e:	401a      	ands	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	0018      	movs	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	b008      	add	sp, #32
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	40021000 	.word	0x40021000
 800198c:	00001388 	.word	0x00001388
 8001990:	efffffff 	.word	0xefffffff
 8001994:	feffffff 	.word	0xfeffffff
 8001998:	ffc2ffff 	.word	0xffc2ffff

0800199c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0b3      	b.n	8001b18 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b0:	4b5b      	ldr	r3, [pc, #364]	; (8001b20 <HAL_RCC_ClockConfig+0x184>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2201      	movs	r2, #1
 80019b6:	4013      	ands	r3, r2
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d911      	bls.n	80019e2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b58      	ldr	r3, [pc, #352]	; (8001b20 <HAL_RCC_ClockConfig+0x184>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2201      	movs	r2, #1
 80019c4:	4393      	bics	r3, r2
 80019c6:	0019      	movs	r1, r3
 80019c8:	4b55      	ldr	r3, [pc, #340]	; (8001b20 <HAL_RCC_ClockConfig+0x184>)
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d0:	4b53      	ldr	r3, [pc, #332]	; (8001b20 <HAL_RCC_ClockConfig+0x184>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2201      	movs	r2, #1
 80019d6:	4013      	ands	r3, r2
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d001      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e09a      	b.n	8001b18 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2202      	movs	r2, #2
 80019e8:	4013      	ands	r3, r2
 80019ea:	d015      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2204      	movs	r2, #4
 80019f2:	4013      	ands	r3, r2
 80019f4:	d006      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019f6:	4b4b      	ldr	r3, [pc, #300]	; (8001b24 <HAL_RCC_ClockConfig+0x188>)
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	4b4a      	ldr	r3, [pc, #296]	; (8001b24 <HAL_RCC_ClockConfig+0x188>)
 80019fc:	21e0      	movs	r1, #224	; 0xe0
 80019fe:	00c9      	lsls	r1, r1, #3
 8001a00:	430a      	orrs	r2, r1
 8001a02:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a04:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <HAL_RCC_ClockConfig+0x188>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	22f0      	movs	r2, #240	; 0xf0
 8001a0a:	4393      	bics	r3, r2
 8001a0c:	0019      	movs	r1, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	4b44      	ldr	r3, [pc, #272]	; (8001b24 <HAL_RCC_ClockConfig+0x188>)
 8001a14:	430a      	orrs	r2, r1
 8001a16:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d040      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2a:	4b3e      	ldr	r3, [pc, #248]	; (8001b24 <HAL_RCC_ClockConfig+0x188>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	029b      	lsls	r3, r3, #10
 8001a32:	4013      	ands	r3, r2
 8001a34:	d114      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e06e      	b.n	8001b18 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a42:	4b38      	ldr	r3, [pc, #224]	; (8001b24 <HAL_RCC_ClockConfig+0x188>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	049b      	lsls	r3, r3, #18
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d108      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e062      	b.n	8001b18 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a52:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <HAL_RCC_ClockConfig+0x188>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2202      	movs	r2, #2
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e05b      	b.n	8001b18 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a60:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <HAL_RCC_ClockConfig+0x188>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2203      	movs	r2, #3
 8001a66:	4393      	bics	r3, r2
 8001a68:	0019      	movs	r1, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <HAL_RCC_ClockConfig+0x188>)
 8001a70:	430a      	orrs	r2, r1
 8001a72:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a74:	f7ff f84e 	bl	8000b14 <HAL_GetTick>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7c:	e009      	b.n	8001a92 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7e:	f7ff f849 	bl	8000b14 <HAL_GetTick>
 8001a82:	0002      	movs	r2, r0
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	4a27      	ldr	r2, [pc, #156]	; (8001b28 <HAL_RCC_ClockConfig+0x18c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e042      	b.n	8001b18 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <HAL_RCC_ClockConfig+0x188>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	220c      	movs	r2, #12
 8001a98:	401a      	ands	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d1ec      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <HAL_RCC_ClockConfig+0x184>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4013      	ands	r3, r2
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d211      	bcs.n	8001ad6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_RCC_ClockConfig+0x184>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	4393      	bics	r3, r2
 8001aba:	0019      	movs	r1, r3
 8001abc:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <HAL_RCC_ClockConfig+0x184>)
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac4:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <HAL_RCC_ClockConfig+0x184>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4013      	ands	r3, r2
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d001      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e020      	b.n	8001b18 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2204      	movs	r2, #4
 8001adc:	4013      	ands	r3, r2
 8001ade:	d009      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae0:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_RCC_ClockConfig+0x188>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4a11      	ldr	r2, [pc, #68]	; (8001b2c <HAL_RCC_ClockConfig+0x190>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	0019      	movs	r1, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_RCC_ClockConfig+0x188>)
 8001af0:	430a      	orrs	r2, r1
 8001af2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001af4:	f000 f820 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8001af8:	0001      	movs	r1, r0
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_RCC_ClockConfig+0x188>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	091b      	lsrs	r3, r3, #4
 8001b00:	220f      	movs	r2, #15
 8001b02:	4013      	ands	r3, r2
 8001b04:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <HAL_RCC_ClockConfig+0x194>)
 8001b06:	5cd3      	ldrb	r3, [r2, r3]
 8001b08:	000a      	movs	r2, r1
 8001b0a:	40da      	lsrs	r2, r3
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_RCC_ClockConfig+0x198>)
 8001b0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7fe ffb9 	bl	8000a88 <HAL_InitTick>
  
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	0018      	movs	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b004      	add	sp, #16
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40022000 	.word	0x40022000
 8001b24:	40021000 	.word	0x40021000
 8001b28:	00001388 	.word	0x00001388
 8001b2c:	fffff8ff 	.word	0xfffff8ff
 8001b30:	08003b80 	.word	0x08003b80
 8001b34:	20000000 	.word	0x20000000

08001b38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b08f      	sub	sp, #60	; 0x3c
 8001b3c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001b3e:	2314      	movs	r3, #20
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	4a2b      	ldr	r2, [pc, #172]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b44:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b46:	c313      	stmia	r3!, {r0, r1, r4}
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4a29      	ldr	r2, [pc, #164]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b50:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b52:	c313      	stmia	r3!, {r0, r1, r4}
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b60:	2300      	movs	r3, #0
 8001b62:	637b      	str	r3, [r7, #52]	; 0x34
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001b6c:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b74:	220c      	movs	r2, #12
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d002      	beq.n	8001b82 <HAL_RCC_GetSysClockFreq+0x4a>
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d003      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x50>
 8001b80:	e02d      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b84:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b86:	e02d      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8a:	0c9b      	lsrs	r3, r3, #18
 8001b8c:	220f      	movs	r2, #15
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2214      	movs	r2, #20
 8001b92:	18ba      	adds	r2, r7, r2
 8001b94:	5cd3      	ldrb	r3, [r2, r3]
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	1d3a      	adds	r2, r7, #4
 8001ba2:	5cd3      	ldrb	r3, [r2, r3]
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	025b      	lsls	r3, r3, #9
 8001bac:	4013      	ands	r3, r2
 8001bae:	d009      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bb2:	4812      	ldr	r0, [pc, #72]	; (8001bfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001bb4:	f7fe fab2 	bl	800011c <__udivsi3>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	001a      	movs	r2, r3
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	4353      	muls	r3, r2
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8001bc2:	e009      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001bc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bc6:	000a      	movs	r2, r1
 8001bc8:	0152      	lsls	r2, r2, #5
 8001bca:	1a52      	subs	r2, r2, r1
 8001bcc:	0193      	lsls	r3, r2, #6
 8001bce:	1a9b      	subs	r3, r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	185b      	adds	r3, r3, r1
 8001bd4:	021b      	lsls	r3, r3, #8
 8001bd6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bda:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bdc:	e002      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bde:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001be0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001be2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001be6:	0018      	movs	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b00f      	add	sp, #60	; 0x3c
 8001bec:	bd90      	pop	{r4, r7, pc}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	08003b60 	.word	0x08003b60
 8001bf4:	08003b70 	.word	0x08003b70
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	007a1200 	.word	0x007a1200

08001c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c04:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	0018      	movs	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	20000000 	.word	0x20000000

08001c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c18:	f7ff fff2 	bl	8001c00 <HAL_RCC_GetHCLKFreq>
 8001c1c:	0001      	movs	r1, r0
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	0a1b      	lsrs	r3, r3, #8
 8001c24:	2207      	movs	r2, #7
 8001c26:	4013      	ands	r3, r2
 8001c28:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c2a:	5cd3      	ldrb	r3, [r2, r3]
 8001c2c:	40d9      	lsrs	r1, r3
 8001c2e:	000b      	movs	r3, r1
}    
 8001c30:	0018      	movs	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	08003b90 	.word	0x08003b90

08001c40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e044      	b.n	8001cdc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d107      	bne.n	8001c6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2274      	movs	r2, #116	; 0x74
 8001c5e:	2100      	movs	r1, #0
 8001c60:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	0018      	movs	r0, r3
 8001c66:	f7fe fd8f 	bl	8000788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2224      	movs	r2, #36	; 0x24
 8001c6e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	438a      	bics	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	0018      	movs	r0, r3
 8001c84:	f000 f95e 	bl	8001f44 <UART_SetConfig>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e024      	b.n	8001cdc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f000 fa91 	bl	80021c4 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	490d      	ldr	r1, [pc, #52]	; (8001ce4 <HAL_UART_Init+0xa4>)
 8001cae:	400a      	ands	r2, r1
 8001cb0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2108      	movs	r1, #8
 8001cbe:	438a      	bics	r2, r1
 8001cc0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f000 fb29 	bl	800232c <UART_CheckIdleState>
 8001cda:	0003      	movs	r3, r0
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b002      	add	sp, #8
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	fffff7ff 	.word	0xfffff7ff

08001ce8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	1dbb      	adds	r3, r7, #6
 8001cf6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	d000      	beq.n	8001d02 <HAL_UART_Transmit+0x1a>
 8001d00:	e096      	b.n	8001e30 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_UART_Transmit+0x28>
 8001d08:	1dbb      	adds	r3, r7, #6
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e08e      	b.n	8001e32 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	015b      	lsls	r3, r3, #5
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d109      	bne.n	8001d34 <HAL_UART_Transmit+0x4c>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d105      	bne.n	8001d34 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d001      	beq.n	8001d34 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e07e      	b.n	8001e32 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2274      	movs	r2, #116	; 0x74
 8001d38:	5c9b      	ldrb	r3, [r3, r2]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_UART_Transmit+0x5a>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e077      	b.n	8001e32 <HAL_UART_Transmit+0x14a>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2274      	movs	r2, #116	; 0x74
 8001d46:	2101      	movs	r1, #1
 8001d48:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	2100      	movs	r1, #0
 8001d50:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2221      	movs	r2, #33	; 0x21
 8001d56:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d58:	f7fe fedc 	bl	8000b14 <HAL_GetTick>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1dba      	adds	r2, r7, #6
 8001d64:	2150      	movs	r1, #80	; 0x50
 8001d66:	8812      	ldrh	r2, [r2, #0]
 8001d68:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1dba      	adds	r2, r7, #6
 8001d6e:	2152      	movs	r1, #82	; 0x52
 8001d70:	8812      	ldrh	r2, [r2, #0]
 8001d72:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	015b      	lsls	r3, r3, #5
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d108      	bne.n	8001d92 <HAL_UART_Transmit+0xaa>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d104      	bne.n	8001d92 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	61bb      	str	r3, [r7, #24]
 8001d90:	e003      	b.n	8001d9a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2274      	movs	r2, #116	; 0x74
 8001d9e:	2100      	movs	r1, #0
 8001da0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001da2:	e02d      	b.n	8001e00 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	0013      	movs	r3, r2
 8001dae:	2200      	movs	r2, #0
 8001db0:	2180      	movs	r1, #128	; 0x80
 8001db2:	f000 fb03 	bl	80023bc <UART_WaitOnFlagUntilTimeout>
 8001db6:	1e03      	subs	r3, r0, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e039      	b.n	8001e32 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10b      	bne.n	8001ddc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	881a      	ldrh	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	05d2      	lsls	r2, r2, #23
 8001dce:	0dd2      	lsrs	r2, r2, #23
 8001dd0:	b292      	uxth	r2, r2
 8001dd2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	e008      	b.n	8001dee <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	781a      	ldrb	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	b292      	uxth	r2, r2
 8001de6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	3301      	adds	r3, #1
 8001dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2252      	movs	r2, #82	; 0x52
 8001df2:	5a9b      	ldrh	r3, [r3, r2]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	3b01      	subs	r3, #1
 8001df8:	b299      	uxth	r1, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2252      	movs	r2, #82	; 0x52
 8001dfe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2252      	movs	r2, #82	; 0x52
 8001e04:	5a9b      	ldrh	r3, [r3, r2]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1cb      	bne.n	8001da4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	0013      	movs	r3, r2
 8001e16:	2200      	movs	r2, #0
 8001e18:	2140      	movs	r1, #64	; 0x40
 8001e1a:	f000 facf 	bl	80023bc <UART_WaitOnFlagUntilTimeout>
 8001e1e:	1e03      	subs	r3, r0, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e005      	b.n	8001e32 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	e000      	b.n	8001e32 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001e30:	2302      	movs	r3, #2
  }
}
 8001e32:	0018      	movs	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b008      	add	sp, #32
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b088      	sub	sp, #32
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	1dbb      	adds	r3, r7, #6
 8001e46:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d150      	bne.n	8001ef2 <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_UART_Receive_DMA+0x24>
 8001e56:	1dbb      	adds	r3, r7, #6
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e048      	b.n	8001ef4 <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	015b      	lsls	r3, r3, #5
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d109      	bne.n	8001e82 <HAL_UART_Receive_DMA+0x48>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d105      	bne.n	8001e82 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d001      	beq.n	8001e82 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e038      	b.n	8001ef4 <HAL_UART_Receive_DMA+0xba>
      }
    }

    __HAL_LOCK(huart);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2274      	movs	r2, #116	; 0x74
 8001e86:	5c9b      	ldrb	r3, [r3, r2]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_UART_Receive_DMA+0x56>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e031      	b.n	8001ef4 <HAL_UART_Receive_DMA+0xba>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2274      	movs	r2, #116	; 0x74
 8001e94:	2101      	movs	r1, #1
 8001e96:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	041b      	lsls	r3, r3, #16
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d019      	beq.n	8001ee0 <HAL_UART_Receive_DMA+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001eac:	f3ef 8310 	mrs	r3, PRIMASK
 8001eb0:	613b      	str	r3, [r7, #16]
  return(result);
 8001eb2:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f383 8810 	msr	PRIMASK, r3
}
 8001ec0:	46c0      	nop			; (mov r8, r8)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2180      	movs	r1, #128	; 0x80
 8001ece:	04c9      	lsls	r1, r1, #19
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	f383 8810 	msr	PRIMASK, r3
}
 8001ede:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001ee0:	1dbb      	adds	r3, r7, #6
 8001ee2:	881a      	ldrh	r2, [r3, #0]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f000 fb2b 	bl	8002544 <UART_Start_Receive_DMA>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	e000      	b.n	8001ef4 <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8001ef2:	2302      	movs	r3, #2
  }
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b008      	add	sp, #32
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8001f04:	46c0      	nop			; (mov r8, r8)
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b002      	add	sp, #8
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b002      	add	sp, #8
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b002      	add	sp, #8
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	000a      	movs	r2, r1
 8001f36:	1cbb      	adds	r3, r7, #2
 8001f38:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b002      	add	sp, #8
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f4c:	231e      	movs	r3, #30
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a8d      	ldr	r2, [pc, #564]	; (80021a8 <UART_SetConfig+0x264>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4a88      	ldr	r2, [pc, #544]	; (80021ac <UART_SetConfig+0x268>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	4a7f      	ldr	r2, [pc, #508]	; (80021b0 <UART_SetConfig+0x26c>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	0019      	movs	r1, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a7b      	ldr	r2, [pc, #492]	; (80021b4 <UART_SetConfig+0x270>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d127      	bne.n	800201a <UART_SetConfig+0xd6>
 8001fca:	4b7b      	ldr	r3, [pc, #492]	; (80021b8 <UART_SetConfig+0x274>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	2203      	movs	r2, #3
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d00d      	beq.n	8001ff2 <UART_SetConfig+0xae>
 8001fd6:	d81b      	bhi.n	8002010 <UART_SetConfig+0xcc>
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d014      	beq.n	8002006 <UART_SetConfig+0xc2>
 8001fdc:	d818      	bhi.n	8002010 <UART_SetConfig+0xcc>
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d002      	beq.n	8001fe8 <UART_SetConfig+0xa4>
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d00a      	beq.n	8001ffc <UART_SetConfig+0xb8>
 8001fe6:	e013      	b.n	8002010 <UART_SetConfig+0xcc>
 8001fe8:	231f      	movs	r3, #31
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
 8001ff0:	e021      	b.n	8002036 <UART_SetConfig+0xf2>
 8001ff2:	231f      	movs	r3, #31
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	701a      	strb	r2, [r3, #0]
 8001ffa:	e01c      	b.n	8002036 <UART_SetConfig+0xf2>
 8001ffc:	231f      	movs	r3, #31
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	2204      	movs	r2, #4
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	e017      	b.n	8002036 <UART_SetConfig+0xf2>
 8002006:	231f      	movs	r3, #31
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	2208      	movs	r2, #8
 800200c:	701a      	strb	r2, [r3, #0]
 800200e:	e012      	b.n	8002036 <UART_SetConfig+0xf2>
 8002010:	231f      	movs	r3, #31
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	2210      	movs	r2, #16
 8002016:	701a      	strb	r2, [r3, #0]
 8002018:	e00d      	b.n	8002036 <UART_SetConfig+0xf2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a67      	ldr	r2, [pc, #412]	; (80021bc <UART_SetConfig+0x278>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d104      	bne.n	800202e <UART_SetConfig+0xea>
 8002024:	231f      	movs	r3, #31
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	e003      	b.n	8002036 <UART_SetConfig+0xf2>
 800202e:	231f      	movs	r3, #31
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	2210      	movs	r2, #16
 8002034:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69da      	ldr	r2, [r3, #28]
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	429a      	cmp	r2, r3
 8002040:	d15d      	bne.n	80020fe <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002042:	231f      	movs	r3, #31
 8002044:	18fb      	adds	r3, r7, r3
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b08      	cmp	r3, #8
 800204a:	d015      	beq.n	8002078 <UART_SetConfig+0x134>
 800204c:	dc18      	bgt.n	8002080 <UART_SetConfig+0x13c>
 800204e:	2b04      	cmp	r3, #4
 8002050:	d00d      	beq.n	800206e <UART_SetConfig+0x12a>
 8002052:	dc15      	bgt.n	8002080 <UART_SetConfig+0x13c>
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <UART_SetConfig+0x11a>
 8002058:	2b02      	cmp	r3, #2
 800205a:	d005      	beq.n	8002068 <UART_SetConfig+0x124>
 800205c:	e010      	b.n	8002080 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800205e:	f7ff fdd9 	bl	8001c14 <HAL_RCC_GetPCLK1Freq>
 8002062:	0003      	movs	r3, r0
 8002064:	61bb      	str	r3, [r7, #24]
        break;
 8002066:	e012      	b.n	800208e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002068:	4b55      	ldr	r3, [pc, #340]	; (80021c0 <UART_SetConfig+0x27c>)
 800206a:	61bb      	str	r3, [r7, #24]
        break;
 800206c:	e00f      	b.n	800208e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800206e:	f7ff fd63 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8002072:	0003      	movs	r3, r0
 8002074:	61bb      	str	r3, [r7, #24]
        break;
 8002076:	e00a      	b.n	800208e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	61bb      	str	r3, [r7, #24]
        break;
 800207e:	e006      	b.n	800208e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002084:	231e      	movs	r3, #30
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	2201      	movs	r2, #1
 800208a:	701a      	strb	r2, [r3, #0]
        break;
 800208c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d100      	bne.n	8002096 <UART_SetConfig+0x152>
 8002094:	e07b      	b.n	800218e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	005a      	lsls	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	085b      	lsrs	r3, r3, #1
 80020a0:	18d2      	adds	r2, r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	0019      	movs	r1, r3
 80020a8:	0010      	movs	r0, r2
 80020aa:	f7fe f837 	bl	800011c <__udivsi3>
 80020ae:	0003      	movs	r3, r0
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	2b0f      	cmp	r3, #15
 80020b8:	d91c      	bls.n	80020f4 <UART_SetConfig+0x1b0>
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	025b      	lsls	r3, r3, #9
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d217      	bcs.n	80020f4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	200e      	movs	r0, #14
 80020ca:	183b      	adds	r3, r7, r0
 80020cc:	210f      	movs	r1, #15
 80020ce:	438a      	bics	r2, r1
 80020d0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	085b      	lsrs	r3, r3, #1
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	2207      	movs	r2, #7
 80020da:	4013      	ands	r3, r2
 80020dc:	b299      	uxth	r1, r3
 80020de:	183b      	adds	r3, r7, r0
 80020e0:	183a      	adds	r2, r7, r0
 80020e2:	8812      	ldrh	r2, [r2, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	183a      	adds	r2, r7, r0
 80020ee:	8812      	ldrh	r2, [r2, #0]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	e04c      	b.n	800218e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80020f4:	231e      	movs	r3, #30
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
 80020fc:	e047      	b.n	800218e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80020fe:	231f      	movs	r3, #31
 8002100:	18fb      	adds	r3, r7, r3
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b08      	cmp	r3, #8
 8002106:	d015      	beq.n	8002134 <UART_SetConfig+0x1f0>
 8002108:	dc18      	bgt.n	800213c <UART_SetConfig+0x1f8>
 800210a:	2b04      	cmp	r3, #4
 800210c:	d00d      	beq.n	800212a <UART_SetConfig+0x1e6>
 800210e:	dc15      	bgt.n	800213c <UART_SetConfig+0x1f8>
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <UART_SetConfig+0x1d6>
 8002114:	2b02      	cmp	r3, #2
 8002116:	d005      	beq.n	8002124 <UART_SetConfig+0x1e0>
 8002118:	e010      	b.n	800213c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800211a:	f7ff fd7b 	bl	8001c14 <HAL_RCC_GetPCLK1Freq>
 800211e:	0003      	movs	r3, r0
 8002120:	61bb      	str	r3, [r7, #24]
        break;
 8002122:	e012      	b.n	800214a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002124:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <UART_SetConfig+0x27c>)
 8002126:	61bb      	str	r3, [r7, #24]
        break;
 8002128:	e00f      	b.n	800214a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800212a:	f7ff fd05 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 800212e:	0003      	movs	r3, r0
 8002130:	61bb      	str	r3, [r7, #24]
        break;
 8002132:	e00a      	b.n	800214a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	61bb      	str	r3, [r7, #24]
        break;
 800213a:	e006      	b.n	800214a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002140:	231e      	movs	r3, #30
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	2201      	movs	r2, #1
 8002146:	701a      	strb	r2, [r3, #0]
        break;
 8002148:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01e      	beq.n	800218e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	085a      	lsrs	r2, r3, #1
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	18d2      	adds	r2, r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	0019      	movs	r1, r3
 8002160:	0010      	movs	r0, r2
 8002162:	f7fd ffdb 	bl	800011c <__udivsi3>
 8002166:	0003      	movs	r3, r0
 8002168:	b29b      	uxth	r3, r3
 800216a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b0f      	cmp	r3, #15
 8002170:	d909      	bls.n	8002186 <UART_SetConfig+0x242>
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	025b      	lsls	r3, r3, #9
 8002178:	429a      	cmp	r2, r3
 800217a:	d204      	bcs.n	8002186 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	60da      	str	r2, [r3, #12]
 8002184:	e003      	b.n	800218e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002186:	231e      	movs	r3, #30
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800219a:	231e      	movs	r3, #30
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	781b      	ldrb	r3, [r3, #0]
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b008      	add	sp, #32
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	ffff69f3 	.word	0xffff69f3
 80021ac:	ffffcfff 	.word	0xffffcfff
 80021b0:	fffff4ff 	.word	0xfffff4ff
 80021b4:	40013800 	.word	0x40013800
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40004400 	.word	0x40004400
 80021c0:	007a1200 	.word	0x007a1200

080021c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	2201      	movs	r2, #1
 80021d2:	4013      	ands	r3, r2
 80021d4:	d00b      	beq.n	80021ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	4a4a      	ldr	r2, [pc, #296]	; (8002308 <UART_AdvFeatureConfig+0x144>)
 80021de:	4013      	ands	r3, r2
 80021e0:	0019      	movs	r1, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	2202      	movs	r2, #2
 80021f4:	4013      	ands	r3, r2
 80021f6:	d00b      	beq.n	8002210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4a43      	ldr	r2, [pc, #268]	; (800230c <UART_AdvFeatureConfig+0x148>)
 8002200:	4013      	ands	r3, r2
 8002202:	0019      	movs	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	2204      	movs	r2, #4
 8002216:	4013      	ands	r3, r2
 8002218:	d00b      	beq.n	8002232 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4a3b      	ldr	r2, [pc, #236]	; (8002310 <UART_AdvFeatureConfig+0x14c>)
 8002222:	4013      	ands	r3, r2
 8002224:	0019      	movs	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	2208      	movs	r2, #8
 8002238:	4013      	ands	r3, r2
 800223a:	d00b      	beq.n	8002254 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4a34      	ldr	r2, [pc, #208]	; (8002314 <UART_AdvFeatureConfig+0x150>)
 8002244:	4013      	ands	r3, r2
 8002246:	0019      	movs	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	2210      	movs	r2, #16
 800225a:	4013      	ands	r3, r2
 800225c:	d00b      	beq.n	8002276 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4a2c      	ldr	r2, [pc, #176]	; (8002318 <UART_AdvFeatureConfig+0x154>)
 8002266:	4013      	ands	r3, r2
 8002268:	0019      	movs	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	2220      	movs	r2, #32
 800227c:	4013      	ands	r3, r2
 800227e:	d00b      	beq.n	8002298 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	4a25      	ldr	r2, [pc, #148]	; (800231c <UART_AdvFeatureConfig+0x158>)
 8002288:	4013      	ands	r3, r2
 800228a:	0019      	movs	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	2240      	movs	r2, #64	; 0x40
 800229e:	4013      	ands	r3, r2
 80022a0:	d01d      	beq.n	80022de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4a1d      	ldr	r2, [pc, #116]	; (8002320 <UART_AdvFeatureConfig+0x15c>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	0019      	movs	r1, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	035b      	lsls	r3, r3, #13
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d10b      	bne.n	80022de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	4a15      	ldr	r2, [pc, #84]	; (8002324 <UART_AdvFeatureConfig+0x160>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	0019      	movs	r1, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	2280      	movs	r2, #128	; 0x80
 80022e4:	4013      	ands	r3, r2
 80022e6:	d00b      	beq.n	8002300 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <UART_AdvFeatureConfig+0x164>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	605a      	str	r2, [r3, #4]
  }
}
 8002300:	46c0      	nop			; (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b002      	add	sp, #8
 8002306:	bd80      	pop	{r7, pc}
 8002308:	fffdffff 	.word	0xfffdffff
 800230c:	fffeffff 	.word	0xfffeffff
 8002310:	fffbffff 	.word	0xfffbffff
 8002314:	ffff7fff 	.word	0xffff7fff
 8002318:	ffffefff 	.word	0xffffefff
 800231c:	ffffdfff 	.word	0xffffdfff
 8002320:	ffefffff 	.word	0xffefffff
 8002324:	ff9fffff 	.word	0xff9fffff
 8002328:	fff7ffff 	.word	0xfff7ffff

0800232c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af02      	add	r7, sp, #8
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2280      	movs	r2, #128	; 0x80
 8002338:	2100      	movs	r1, #0
 800233a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800233c:	f7fe fbea 	bl	8000b14 <HAL_GetTick>
 8002340:	0003      	movs	r3, r0
 8002342:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2208      	movs	r2, #8
 800234c:	4013      	ands	r3, r2
 800234e:	2b08      	cmp	r3, #8
 8002350:	d10c      	bne.n	800236c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2280      	movs	r2, #128	; 0x80
 8002356:	0391      	lsls	r1, r2, #14
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	4a17      	ldr	r2, [pc, #92]	; (80023b8 <UART_CheckIdleState+0x8c>)
 800235c:	9200      	str	r2, [sp, #0]
 800235e:	2200      	movs	r2, #0
 8002360:	f000 f82c 	bl	80023bc <UART_WaitOnFlagUntilTimeout>
 8002364:	1e03      	subs	r3, r0, #0
 8002366:	d001      	beq.n	800236c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e021      	b.n	80023b0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2204      	movs	r2, #4
 8002374:	4013      	ands	r3, r2
 8002376:	2b04      	cmp	r3, #4
 8002378:	d10c      	bne.n	8002394 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2280      	movs	r2, #128	; 0x80
 800237e:	03d1      	lsls	r1, r2, #15
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	4a0d      	ldr	r2, [pc, #52]	; (80023b8 <UART_CheckIdleState+0x8c>)
 8002384:	9200      	str	r2, [sp, #0]
 8002386:	2200      	movs	r2, #0
 8002388:	f000 f818 	bl	80023bc <UART_WaitOnFlagUntilTimeout>
 800238c:	1e03      	subs	r3, r0, #0
 800238e:	d001      	beq.n	8002394 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e00d      	b.n	80023b0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2220      	movs	r2, #32
 8002398:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2220      	movs	r2, #32
 800239e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2274      	movs	r2, #116	; 0x74
 80023aa:	2100      	movs	r1, #0
 80023ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b004      	add	sp, #16
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	01ffffff 	.word	0x01ffffff

080023bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b094      	sub	sp, #80	; 0x50
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	1dfb      	adds	r3, r7, #7
 80023ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023cc:	e0a3      	b.n	8002516 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023d0:	3301      	adds	r3, #1
 80023d2:	d100      	bne.n	80023d6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80023d4:	e09f      	b.n	8002516 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d6:	f7fe fb9d 	bl	8000b14 <HAL_GetTick>
 80023da:	0002      	movs	r2, r0
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d302      	bcc.n	80023ec <UART_WaitOnFlagUntilTimeout+0x30>
 80023e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d13d      	bne.n	8002468 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ec:	f3ef 8310 	mrs	r3, PRIMASK
 80023f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80023f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023f4:	647b      	str	r3, [r7, #68]	; 0x44
 80023f6:	2301      	movs	r3, #1
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fc:	f383 8810 	msr	PRIMASK, r3
}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	494c      	ldr	r1, [pc, #304]	; (8002540 <UART_WaitOnFlagUntilTimeout+0x184>)
 800240e:	400a      	ands	r2, r1
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002414:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002418:	f383 8810 	msr	PRIMASK, r3
}
 800241c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800241e:	f3ef 8310 	mrs	r3, PRIMASK
 8002422:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002426:	643b      	str	r3, [r7, #64]	; 0x40
 8002428:	2301      	movs	r3, #1
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242e:	f383 8810 	msr	PRIMASK, r3
}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2101      	movs	r1, #1
 8002440:	438a      	bics	r2, r1
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002446:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800244a:	f383 8810 	msr	PRIMASK, r3
}
 800244e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2220      	movs	r2, #32
 800245a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2274      	movs	r2, #116	; 0x74
 8002460:	2100      	movs	r1, #0
 8002462:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e067      	b.n	8002538 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2204      	movs	r2, #4
 8002470:	4013      	ands	r3, r2
 8002472:	d050      	beq.n	8002516 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	69da      	ldr	r2, [r3, #28]
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	401a      	ands	r2, r3
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	429a      	cmp	r2, r3
 8002486:	d146      	bne.n	8002516 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2280      	movs	r2, #128	; 0x80
 800248e:	0112      	lsls	r2, r2, #4
 8002490:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002492:	f3ef 8310 	mrs	r3, PRIMASK
 8002496:	613b      	str	r3, [r7, #16]
  return(result);
 8002498:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800249a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800249c:	2301      	movs	r3, #1
 800249e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f383 8810 	msr	PRIMASK, r3
}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4923      	ldr	r1, [pc, #140]	; (8002540 <UART_WaitOnFlagUntilTimeout+0x184>)
 80024b4:	400a      	ands	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	f383 8810 	msr	PRIMASK, r3
}
 80024c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024c4:	f3ef 8310 	mrs	r3, PRIMASK
 80024c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80024ca:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80024ce:	2301      	movs	r3, #1
 80024d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	f383 8810 	msr	PRIMASK, r3
}
 80024d8:	46c0      	nop			; (mov r8, r8)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2101      	movs	r1, #1
 80024e6:	438a      	bics	r2, r1
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	f383 8810 	msr	PRIMASK, r3
}
 80024f4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2220      	movs	r2, #32
 80024fa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2280      	movs	r2, #128	; 0x80
 8002506:	2120      	movs	r1, #32
 8002508:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2274      	movs	r2, #116	; 0x74
 800250e:	2100      	movs	r1, #0
 8002510:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e010      	b.n	8002538 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	4013      	ands	r3, r2
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	425a      	negs	r2, r3
 8002526:	4153      	adcs	r3, r2
 8002528:	b2db      	uxtb	r3, r3
 800252a:	001a      	movs	r2, r3
 800252c:	1dfb      	adds	r3, r7, #7
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d100      	bne.n	8002536 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002534:	e74b      	b.n	80023ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	b014      	add	sp, #80	; 0x50
 800253e:	bd80      	pop	{r7, pc}
 8002540:	fffffe5f 	.word	0xfffffe5f

08002544 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b090      	sub	sp, #64	; 0x40
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	1dbb      	adds	r3, r7, #6
 8002550:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1dba      	adds	r2, r7, #6
 800255c:	2158      	movs	r1, #88	; 0x58
 800255e:	8812      	ldrh	r2, [r2, #0]
 8002560:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2280      	movs	r2, #128	; 0x80
 8002566:	2100      	movs	r1, #0
 8002568:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2222      	movs	r2, #34	; 0x22
 800256e:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	2b00      	cmp	r3, #0
 8002576:	d02b      	beq.n	80025d0 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257c:	4a3f      	ldr	r2, [pc, #252]	; (800267c <UART_Start_Receive_DMA+0x138>)
 800257e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002584:	4a3e      	ldr	r2, [pc, #248]	; (8002680 <UART_Start_Receive_DMA+0x13c>)
 8002586:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258c:	4a3d      	ldr	r2, [pc, #244]	; (8002684 <UART_Start_Receive_DMA+0x140>)
 800258e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002594:	2200      	movs	r2, #0
 8002596:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3324      	adds	r3, #36	; 0x24
 80025a2:	0019      	movs	r1, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	001a      	movs	r2, r3
 80025aa:	1dbb      	adds	r3, r7, #6
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	f7fe fbe1 	bl	8000d74 <HAL_DMA_Start_IT>
 80025b2:	1e03      	subs	r3, r0, #0
 80025b4:	d00c      	beq.n	80025d0 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2280      	movs	r2, #128	; 0x80
 80025ba:	2110      	movs	r1, #16
 80025bc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2274      	movs	r2, #116	; 0x74
 80025c2:	2100      	movs	r1, #0
 80025c4:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2220      	movs	r2, #32
 80025ca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e050      	b.n	8002672 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2274      	movs	r2, #116	; 0x74
 80025d4:	2100      	movs	r1, #0
 80025d6:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025d8:	f3ef 8310 	mrs	r3, PRIMASK
 80025dc:	613b      	str	r3, [r7, #16]
  return(result);
 80025de:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025e2:	2301      	movs	r3, #1
 80025e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f383 8810 	msr	PRIMASK, r3
}
 80025ec:	46c0      	nop			; (mov r8, r8)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2180      	movs	r1, #128	; 0x80
 80025fa:	0049      	lsls	r1, r1, #1
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002602:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	f383 8810 	msr	PRIMASK, r3
}
 800260a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800260c:	f3ef 8310 	mrs	r3, PRIMASK
 8002610:	61fb      	str	r3, [r7, #28]
  return(result);
 8002612:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002614:	63bb      	str	r3, [r7, #56]	; 0x38
 8002616:	2301      	movs	r3, #1
 8002618:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	f383 8810 	msr	PRIMASK, r3
}
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2101      	movs	r1, #1
 800262e:	430a      	orrs	r2, r1
 8002630:	609a      	str	r2, [r3, #8]
 8002632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	f383 8810 	msr	PRIMASK, r3
}
 800263c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800263e:	f3ef 8310 	mrs	r3, PRIMASK
 8002642:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002644:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002646:	637b      	str	r3, [r7, #52]	; 0x34
 8002648:	2301      	movs	r3, #1
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264e:	f383 8810 	msr	PRIMASK, r3
}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2140      	movs	r1, #64	; 0x40
 8002660:	430a      	orrs	r2, r1
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002666:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	f383 8810 	msr	PRIMASK, r3
}
 800266e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	0018      	movs	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	b010      	add	sp, #64	; 0x40
 8002678:	bd80      	pop	{r7, pc}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	08002795 	.word	0x08002795
 8002680:	080028b9 	.word	0x080028b9
 8002684:	080028f5 	.word	0x080028f5

08002688 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002690:	f3ef 8310 	mrs	r3, PRIMASK
 8002694:	60bb      	str	r3, [r7, #8]
  return(result);
 8002696:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	2301      	movs	r3, #1
 800269c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f383 8810 	msr	PRIMASK, r3
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	21c0      	movs	r1, #192	; 0xc0
 80026b2:	438a      	bics	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	f383 8810 	msr	PRIMASK, r3
}
 80026c0:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2220      	movs	r2, #32
 80026c6:	679a      	str	r2, [r3, #120]	; 0x78
}
 80026c8:	46c0      	nop			; (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b006      	add	sp, #24
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08e      	sub	sp, #56	; 0x38
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026d8:	f3ef 8310 	mrs	r3, PRIMASK
 80026dc:	617b      	str	r3, [r7, #20]
  return(result);
 80026de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
 80026e2:	2301      	movs	r3, #1
 80026e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f383 8810 	msr	PRIMASK, r3
}
 80026ec:	46c0      	nop			; (mov r8, r8)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4925      	ldr	r1, [pc, #148]	; (8002790 <UART_EndRxTransfer+0xc0>)
 80026fa:	400a      	ands	r2, r1
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002700:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	f383 8810 	msr	PRIMASK, r3
}
 8002708:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800270a:	f3ef 8310 	mrs	r3, PRIMASK
 800270e:	623b      	str	r3, [r7, #32]
  return(result);
 8002710:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002712:	633b      	str	r3, [r7, #48]	; 0x30
 8002714:	2301      	movs	r3, #1
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	f383 8810 	msr	PRIMASK, r3
}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2101      	movs	r1, #1
 800272c:	438a      	bics	r2, r1
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002732:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002736:	f383 8810 	msr	PRIMASK, r3
}
 800273a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002740:	2b01      	cmp	r3, #1
 8002742:	d118      	bne.n	8002776 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002744:	f3ef 8310 	mrs	r3, PRIMASK
 8002748:	60bb      	str	r3, [r7, #8]
  return(result);
 800274a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800274e:	2301      	movs	r3, #1
 8002750:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f383 8810 	msr	PRIMASK, r3
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2110      	movs	r1, #16
 8002766:	438a      	bics	r2, r1
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f383 8810 	msr	PRIMASK, r3
}
 8002774:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2220      	movs	r2, #32
 800277a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002788:	46c0      	nop			; (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	b00e      	add	sp, #56	; 0x38
 800278e:	bd80      	pop	{r7, pc}
 8002790:	fffffedf 	.word	0xfffffedf

08002794 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b094      	sub	sp, #80	; 0x50
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b20      	cmp	r3, #32
 80027a8:	d06e      	beq.n	8002888 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 80027aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ac:	225a      	movs	r2, #90	; 0x5a
 80027ae:	2100      	movs	r1, #0
 80027b0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027b2:	f3ef 8310 	mrs	r3, PRIMASK
 80027b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80027b8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80027bc:	2301      	movs	r3, #1
 80027be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f383 8810 	msr	PRIMASK, r3
}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4938      	ldr	r1, [pc, #224]	; (80028b4 <UART_DMAReceiveCplt+0x120>)
 80027d4:	400a      	ands	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	f383 8810 	msr	PRIMASK, r3
}
 80027e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027e4:	f3ef 8310 	mrs	r3, PRIMASK
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ec:	647b      	str	r3, [r7, #68]	; 0x44
 80027ee:	2301      	movs	r3, #1
 80027f0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f4:	f383 8810 	msr	PRIMASK, r3
}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	438a      	bics	r2, r1
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002810:	f383 8810 	msr	PRIMASK, r3
}
 8002814:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002816:	f3ef 8310 	mrs	r3, PRIMASK
 800281a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800281c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800281e:	643b      	str	r3, [r7, #64]	; 0x40
 8002820:	2301      	movs	r3, #1
 8002822:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002826:	f383 8810 	msr	PRIMASK, r3
}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2140      	movs	r1, #64	; 0x40
 8002838:	438a      	bics	r2, r1
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800283e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002842:	f383 8810 	msr	PRIMASK, r3
}
 8002846:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284a:	2220      	movs	r2, #32
 800284c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800284e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002852:	2b01      	cmp	r3, #1
 8002854:	d118      	bne.n	8002888 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002856:	f3ef 8310 	mrs	r3, PRIMASK
 800285a:	60fb      	str	r3, [r7, #12]
  return(result);
 800285c:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800285e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002860:	2301      	movs	r3, #1
 8002862:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f383 8810 	msr	PRIMASK, r3
}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2110      	movs	r1, #16
 8002878:	438a      	bics	r2, r1
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800287e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f383 8810 	msr	PRIMASK, r3
}
 8002886:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800288a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288c:	2b01      	cmp	r3, #1
 800288e:	d108      	bne.n	80028a2 <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002892:	2258      	movs	r2, #88	; 0x58
 8002894:	5a9a      	ldrh	r2, [r3, r2]
 8002896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002898:	0011      	movs	r1, r2
 800289a:	0018      	movs	r0, r3
 800289c:	f7ff fb46 	bl	8001f2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80028a0:	e003      	b.n	80028aa <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 80028a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a4:	0018      	movs	r0, r3
 80028a6:	f7ff fb29 	bl	8001efc <HAL_UART_RxCpltCallback>
}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b014      	add	sp, #80	; 0x50
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	fffffeff 	.word	0xfffffeff

080028b8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d10a      	bne.n	80028e4 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2258      	movs	r2, #88	; 0x58
 80028d2:	5a9b      	ldrh	r3, [r3, r2]
 80028d4:	085b      	lsrs	r3, r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	0011      	movs	r1, r2
 80028dc:	0018      	movs	r0, r3
 80028de:	f7ff fb25 	bl	8001f2c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80028e2:	e003      	b.n	80028ec <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	0018      	movs	r0, r3
 80028e8:	f7ff fb10 	bl	8001f0c <HAL_UART_RxHalfCpltCallback>
}
 80028ec:	46c0      	nop			; (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b004      	add	sp, #16
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002906:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800290c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2280      	movs	r2, #128	; 0x80
 8002916:	4013      	ands	r3, r2
 8002918:	2b80      	cmp	r3, #128	; 0x80
 800291a:	d10a      	bne.n	8002932 <UART_DMAError+0x3e>
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	2b21      	cmp	r3, #33	; 0x21
 8002920:	d107      	bne.n	8002932 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2252      	movs	r2, #82	; 0x52
 8002926:	2100      	movs	r1, #0
 8002928:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	0018      	movs	r0, r3
 800292e:	f7ff feab 	bl	8002688 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2240      	movs	r2, #64	; 0x40
 800293a:	4013      	ands	r3, r2
 800293c:	2b40      	cmp	r3, #64	; 0x40
 800293e:	d10a      	bne.n	8002956 <UART_DMAError+0x62>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b22      	cmp	r3, #34	; 0x22
 8002944:	d107      	bne.n	8002956 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	225a      	movs	r2, #90	; 0x5a
 800294a:	2100      	movs	r1, #0
 800294c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	0018      	movs	r0, r3
 8002952:	f7ff febd 	bl	80026d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2280      	movs	r2, #128	; 0x80
 800295a:	589b      	ldr	r3, [r3, r2]
 800295c:	2210      	movs	r2, #16
 800295e:	431a      	orrs	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2180      	movs	r1, #128	; 0x80
 8002964:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	0018      	movs	r0, r3
 800296a:	f7ff fad7 	bl	8001f1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	46bd      	mov	sp, r7
 8002972:	b006      	add	sp, #24
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <std>:
 8002978:	2300      	movs	r3, #0
 800297a:	b510      	push	{r4, lr}
 800297c:	0004      	movs	r4, r0
 800297e:	6003      	str	r3, [r0, #0]
 8002980:	6043      	str	r3, [r0, #4]
 8002982:	6083      	str	r3, [r0, #8]
 8002984:	8181      	strh	r1, [r0, #12]
 8002986:	6643      	str	r3, [r0, #100]	; 0x64
 8002988:	0019      	movs	r1, r3
 800298a:	81c2      	strh	r2, [r0, #14]
 800298c:	6103      	str	r3, [r0, #16]
 800298e:	6143      	str	r3, [r0, #20]
 8002990:	6183      	str	r3, [r0, #24]
 8002992:	2208      	movs	r2, #8
 8002994:	305c      	adds	r0, #92	; 0x5c
 8002996:	f000 fa03 	bl	8002da0 <memset>
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <std+0x38>)
 800299c:	6224      	str	r4, [r4, #32]
 800299e:	6263      	str	r3, [r4, #36]	; 0x24
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <std+0x3c>)
 80029a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80029a4:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <std+0x40>)
 80029a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <std+0x44>)
 80029aa:	6323      	str	r3, [r4, #48]	; 0x30
 80029ac:	bd10      	pop	{r4, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	08002bbd 	.word	0x08002bbd
 80029b4:	08002be5 	.word	0x08002be5
 80029b8:	08002c1d 	.word	0x08002c1d
 80029bc:	08002c49 	.word	0x08002c49

080029c0 <stdio_exit_handler>:
 80029c0:	b510      	push	{r4, lr}
 80029c2:	4a03      	ldr	r2, [pc, #12]	; (80029d0 <stdio_exit_handler+0x10>)
 80029c4:	4903      	ldr	r1, [pc, #12]	; (80029d4 <stdio_exit_handler+0x14>)
 80029c6:	4804      	ldr	r0, [pc, #16]	; (80029d8 <stdio_exit_handler+0x18>)
 80029c8:	f000 f86c 	bl	8002aa4 <_fwalk_sglue>
 80029cc:	bd10      	pop	{r4, pc}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	2000000c 	.word	0x2000000c
 80029d4:	08003889 	.word	0x08003889
 80029d8:	20000018 	.word	0x20000018

080029dc <cleanup_stdio>:
 80029dc:	6841      	ldr	r1, [r0, #4]
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <cleanup_stdio+0x30>)
 80029e0:	b510      	push	{r4, lr}
 80029e2:	0004      	movs	r4, r0
 80029e4:	4299      	cmp	r1, r3
 80029e6:	d001      	beq.n	80029ec <cleanup_stdio+0x10>
 80029e8:	f000 ff4e 	bl	8003888 <_fflush_r>
 80029ec:	68a1      	ldr	r1, [r4, #8]
 80029ee:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <cleanup_stdio+0x34>)
 80029f0:	4299      	cmp	r1, r3
 80029f2:	d002      	beq.n	80029fa <cleanup_stdio+0x1e>
 80029f4:	0020      	movs	r0, r4
 80029f6:	f000 ff47 	bl	8003888 <_fflush_r>
 80029fa:	68e1      	ldr	r1, [r4, #12]
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <cleanup_stdio+0x38>)
 80029fe:	4299      	cmp	r1, r3
 8002a00:	d002      	beq.n	8002a08 <cleanup_stdio+0x2c>
 8002a02:	0020      	movs	r0, r4
 8002a04:	f000 ff40 	bl	8003888 <_fflush_r>
 8002a08:	bd10      	pop	{r4, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	20000298 	.word	0x20000298
 8002a10:	20000300 	.word	0x20000300
 8002a14:	20000368 	.word	0x20000368

08002a18 <global_stdio_init.part.0>:
 8002a18:	b510      	push	{r4, lr}
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <global_stdio_init.part.0+0x28>)
 8002a1c:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <global_stdio_init.part.0+0x2c>)
 8002a1e:	2104      	movs	r1, #4
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	4809      	ldr	r0, [pc, #36]	; (8002a48 <global_stdio_init.part.0+0x30>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	f7ff ffa7 	bl	8002978 <std>
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	2109      	movs	r1, #9
 8002a2e:	4807      	ldr	r0, [pc, #28]	; (8002a4c <global_stdio_init.part.0+0x34>)
 8002a30:	f7ff ffa2 	bl	8002978 <std>
 8002a34:	2202      	movs	r2, #2
 8002a36:	2112      	movs	r1, #18
 8002a38:	4805      	ldr	r0, [pc, #20]	; (8002a50 <global_stdio_init.part.0+0x38>)
 8002a3a:	f7ff ff9d 	bl	8002978 <std>
 8002a3e:	bd10      	pop	{r4, pc}
 8002a40:	200003d0 	.word	0x200003d0
 8002a44:	080029c1 	.word	0x080029c1
 8002a48:	20000298 	.word	0x20000298
 8002a4c:	20000300 	.word	0x20000300
 8002a50:	20000368 	.word	0x20000368

08002a54 <__sfp_lock_acquire>:
 8002a54:	b510      	push	{r4, lr}
 8002a56:	4802      	ldr	r0, [pc, #8]	; (8002a60 <__sfp_lock_acquire+0xc>)
 8002a58:	f000 faa0 	bl	8002f9c <__retarget_lock_acquire_recursive>
 8002a5c:	bd10      	pop	{r4, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	200003d9 	.word	0x200003d9

08002a64 <__sfp_lock_release>:
 8002a64:	b510      	push	{r4, lr}
 8002a66:	4802      	ldr	r0, [pc, #8]	; (8002a70 <__sfp_lock_release+0xc>)
 8002a68:	f000 fa99 	bl	8002f9e <__retarget_lock_release_recursive>
 8002a6c:	bd10      	pop	{r4, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	200003d9 	.word	0x200003d9

08002a74 <__sinit>:
 8002a74:	b510      	push	{r4, lr}
 8002a76:	0004      	movs	r4, r0
 8002a78:	f7ff ffec 	bl	8002a54 <__sfp_lock_acquire>
 8002a7c:	6a23      	ldr	r3, [r4, #32]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <__sinit+0x14>
 8002a82:	f7ff ffef 	bl	8002a64 <__sfp_lock_release>
 8002a86:	bd10      	pop	{r4, pc}
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <__sinit+0x28>)
 8002a8a:	6223      	str	r3, [r4, #32]
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <__sinit+0x2c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f6      	bne.n	8002a82 <__sinit+0xe>
 8002a94:	f7ff ffc0 	bl	8002a18 <global_stdio_init.part.0>
 8002a98:	e7f3      	b.n	8002a82 <__sinit+0xe>
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	080029dd 	.word	0x080029dd
 8002aa0:	200003d0 	.word	0x200003d0

08002aa4 <_fwalk_sglue>:
 8002aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002aa6:	0014      	movs	r4, r2
 8002aa8:	2600      	movs	r6, #0
 8002aaa:	9000      	str	r0, [sp, #0]
 8002aac:	9101      	str	r1, [sp, #4]
 8002aae:	68a5      	ldr	r5, [r4, #8]
 8002ab0:	6867      	ldr	r7, [r4, #4]
 8002ab2:	3f01      	subs	r7, #1
 8002ab4:	d504      	bpl.n	8002ac0 <_fwalk_sglue+0x1c>
 8002ab6:	6824      	ldr	r4, [r4, #0]
 8002ab8:	2c00      	cmp	r4, #0
 8002aba:	d1f8      	bne.n	8002aae <_fwalk_sglue+0xa>
 8002abc:	0030      	movs	r0, r6
 8002abe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ac0:	89ab      	ldrh	r3, [r5, #12]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d908      	bls.n	8002ad8 <_fwalk_sglue+0x34>
 8002ac6:	220e      	movs	r2, #14
 8002ac8:	5eab      	ldrsh	r3, [r5, r2]
 8002aca:	3301      	adds	r3, #1
 8002acc:	d004      	beq.n	8002ad8 <_fwalk_sglue+0x34>
 8002ace:	0029      	movs	r1, r5
 8002ad0:	9800      	ldr	r0, [sp, #0]
 8002ad2:	9b01      	ldr	r3, [sp, #4]
 8002ad4:	4798      	blx	r3
 8002ad6:	4306      	orrs	r6, r0
 8002ad8:	3568      	adds	r5, #104	; 0x68
 8002ada:	e7ea      	b.n	8002ab2 <_fwalk_sglue+0xe>

08002adc <iprintf>:
 8002adc:	b40f      	push	{r0, r1, r2, r3}
 8002ade:	b507      	push	{r0, r1, r2, lr}
 8002ae0:	4905      	ldr	r1, [pc, #20]	; (8002af8 <iprintf+0x1c>)
 8002ae2:	ab04      	add	r3, sp, #16
 8002ae4:	6808      	ldr	r0, [r1, #0]
 8002ae6:	cb04      	ldmia	r3!, {r2}
 8002ae8:	6881      	ldr	r1, [r0, #8]
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	f000 fba6 	bl	800323c <_vfiprintf_r>
 8002af0:	b003      	add	sp, #12
 8002af2:	bc08      	pop	{r3}
 8002af4:	b004      	add	sp, #16
 8002af6:	4718      	bx	r3
 8002af8:	20000064 	.word	0x20000064

08002afc <_puts_r>:
 8002afc:	6a03      	ldr	r3, [r0, #32]
 8002afe:	b570      	push	{r4, r5, r6, lr}
 8002b00:	0005      	movs	r5, r0
 8002b02:	000e      	movs	r6, r1
 8002b04:	6884      	ldr	r4, [r0, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <_puts_r+0x12>
 8002b0a:	f7ff ffb3 	bl	8002a74 <__sinit>
 8002b0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b10:	07db      	lsls	r3, r3, #31
 8002b12:	d405      	bmi.n	8002b20 <_puts_r+0x24>
 8002b14:	89a3      	ldrh	r3, [r4, #12]
 8002b16:	059b      	lsls	r3, r3, #22
 8002b18:	d402      	bmi.n	8002b20 <_puts_r+0x24>
 8002b1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b1c:	f000 fa3e 	bl	8002f9c <__retarget_lock_acquire_recursive>
 8002b20:	89a3      	ldrh	r3, [r4, #12]
 8002b22:	071b      	lsls	r3, r3, #28
 8002b24:	d502      	bpl.n	8002b2c <_puts_r+0x30>
 8002b26:	6923      	ldr	r3, [r4, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d11f      	bne.n	8002b6c <_puts_r+0x70>
 8002b2c:	0021      	movs	r1, r4
 8002b2e:	0028      	movs	r0, r5
 8002b30:	f000 f8d2 	bl	8002cd8 <__swsetup_r>
 8002b34:	2800      	cmp	r0, #0
 8002b36:	d019      	beq.n	8002b6c <_puts_r+0x70>
 8002b38:	2501      	movs	r5, #1
 8002b3a:	426d      	negs	r5, r5
 8002b3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b3e:	07db      	lsls	r3, r3, #31
 8002b40:	d405      	bmi.n	8002b4e <_puts_r+0x52>
 8002b42:	89a3      	ldrh	r3, [r4, #12]
 8002b44:	059b      	lsls	r3, r3, #22
 8002b46:	d402      	bmi.n	8002b4e <_puts_r+0x52>
 8002b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b4a:	f000 fa28 	bl	8002f9e <__retarget_lock_release_recursive>
 8002b4e:	0028      	movs	r0, r5
 8002b50:	bd70      	pop	{r4, r5, r6, pc}
 8002b52:	3601      	adds	r6, #1
 8002b54:	60a3      	str	r3, [r4, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	da04      	bge.n	8002b64 <_puts_r+0x68>
 8002b5a:	69a2      	ldr	r2, [r4, #24]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	dc16      	bgt.n	8002b8e <_puts_r+0x92>
 8002b60:	290a      	cmp	r1, #10
 8002b62:	d014      	beq.n	8002b8e <_puts_r+0x92>
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	6022      	str	r2, [r4, #0]
 8002b6a:	7019      	strb	r1, [r3, #0]
 8002b6c:	68a3      	ldr	r3, [r4, #8]
 8002b6e:	7831      	ldrb	r1, [r6, #0]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	2900      	cmp	r1, #0
 8002b74:	d1ed      	bne.n	8002b52 <_puts_r+0x56>
 8002b76:	60a3      	str	r3, [r4, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	da0f      	bge.n	8002b9c <_puts_r+0xa0>
 8002b7c:	0028      	movs	r0, r5
 8002b7e:	0022      	movs	r2, r4
 8002b80:	310a      	adds	r1, #10
 8002b82:	f000 f867 	bl	8002c54 <__swbuf_r>
 8002b86:	250a      	movs	r5, #10
 8002b88:	3001      	adds	r0, #1
 8002b8a:	d1d7      	bne.n	8002b3c <_puts_r+0x40>
 8002b8c:	e7d4      	b.n	8002b38 <_puts_r+0x3c>
 8002b8e:	0022      	movs	r2, r4
 8002b90:	0028      	movs	r0, r5
 8002b92:	f000 f85f 	bl	8002c54 <__swbuf_r>
 8002b96:	3001      	adds	r0, #1
 8002b98:	d1e8      	bne.n	8002b6c <_puts_r+0x70>
 8002b9a:	e7cd      	b.n	8002b38 <_puts_r+0x3c>
 8002b9c:	250a      	movs	r5, #10
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	6022      	str	r2, [r4, #0]
 8002ba4:	701d      	strb	r5, [r3, #0]
 8002ba6:	e7c9      	b.n	8002b3c <_puts_r+0x40>

08002ba8 <puts>:
 8002ba8:	b510      	push	{r4, lr}
 8002baa:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <puts+0x10>)
 8002bac:	0001      	movs	r1, r0
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	f7ff ffa4 	bl	8002afc <_puts_r>
 8002bb4:	bd10      	pop	{r4, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	20000064 	.word	0x20000064

08002bbc <__sread>:
 8002bbc:	b570      	push	{r4, r5, r6, lr}
 8002bbe:	000c      	movs	r4, r1
 8002bc0:	250e      	movs	r5, #14
 8002bc2:	5f49      	ldrsh	r1, [r1, r5]
 8002bc4:	f000 f998 	bl	8002ef8 <_read_r>
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	db03      	blt.n	8002bd4 <__sread+0x18>
 8002bcc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002bce:	181b      	adds	r3, r3, r0
 8002bd0:	6563      	str	r3, [r4, #84]	; 0x54
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}
 8002bd4:	89a3      	ldrh	r3, [r4, #12]
 8002bd6:	4a02      	ldr	r2, [pc, #8]	; (8002be0 <__sread+0x24>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	81a3      	strh	r3, [r4, #12]
 8002bdc:	e7f9      	b.n	8002bd2 <__sread+0x16>
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	ffffefff 	.word	0xffffefff

08002be4 <__swrite>:
 8002be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be6:	001f      	movs	r7, r3
 8002be8:	898b      	ldrh	r3, [r1, #12]
 8002bea:	0005      	movs	r5, r0
 8002bec:	000c      	movs	r4, r1
 8002bee:	0016      	movs	r6, r2
 8002bf0:	05db      	lsls	r3, r3, #23
 8002bf2:	d505      	bpl.n	8002c00 <__swrite+0x1c>
 8002bf4:	230e      	movs	r3, #14
 8002bf6:	5ec9      	ldrsh	r1, [r1, r3]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	f000 f968 	bl	8002ed0 <_lseek_r>
 8002c00:	89a3      	ldrh	r3, [r4, #12]
 8002c02:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <__swrite+0x34>)
 8002c04:	0028      	movs	r0, r5
 8002c06:	4013      	ands	r3, r2
 8002c08:	81a3      	strh	r3, [r4, #12]
 8002c0a:	0032      	movs	r2, r6
 8002c0c:	230e      	movs	r3, #14
 8002c0e:	5ee1      	ldrsh	r1, [r4, r3]
 8002c10:	003b      	movs	r3, r7
 8002c12:	f000 f985 	bl	8002f20 <_write_r>
 8002c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c18:	ffffefff 	.word	0xffffefff

08002c1c <__sseek>:
 8002c1c:	b570      	push	{r4, r5, r6, lr}
 8002c1e:	000c      	movs	r4, r1
 8002c20:	250e      	movs	r5, #14
 8002c22:	5f49      	ldrsh	r1, [r1, r5]
 8002c24:	f000 f954 	bl	8002ed0 <_lseek_r>
 8002c28:	89a3      	ldrh	r3, [r4, #12]
 8002c2a:	1c42      	adds	r2, r0, #1
 8002c2c:	d103      	bne.n	8002c36 <__sseek+0x1a>
 8002c2e:	4a05      	ldr	r2, [pc, #20]	; (8002c44 <__sseek+0x28>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	81a3      	strh	r3, [r4, #12]
 8002c34:	bd70      	pop	{r4, r5, r6, pc}
 8002c36:	2280      	movs	r2, #128	; 0x80
 8002c38:	0152      	lsls	r2, r2, #5
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	81a3      	strh	r3, [r4, #12]
 8002c3e:	6560      	str	r0, [r4, #84]	; 0x54
 8002c40:	e7f8      	b.n	8002c34 <__sseek+0x18>
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	ffffefff 	.word	0xffffefff

08002c48 <__sclose>:
 8002c48:	b510      	push	{r4, lr}
 8002c4a:	230e      	movs	r3, #14
 8002c4c:	5ec9      	ldrsh	r1, [r1, r3]
 8002c4e:	f000 f92d 	bl	8002eac <_close_r>
 8002c52:	bd10      	pop	{r4, pc}

08002c54 <__swbuf_r>:
 8002c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c56:	0006      	movs	r6, r0
 8002c58:	000d      	movs	r5, r1
 8002c5a:	0014      	movs	r4, r2
 8002c5c:	2800      	cmp	r0, #0
 8002c5e:	d004      	beq.n	8002c6a <__swbuf_r+0x16>
 8002c60:	6a03      	ldr	r3, [r0, #32]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <__swbuf_r+0x16>
 8002c66:	f7ff ff05 	bl	8002a74 <__sinit>
 8002c6a:	69a3      	ldr	r3, [r4, #24]
 8002c6c:	60a3      	str	r3, [r4, #8]
 8002c6e:	89a3      	ldrh	r3, [r4, #12]
 8002c70:	071b      	lsls	r3, r3, #28
 8002c72:	d528      	bpl.n	8002cc6 <__swbuf_r+0x72>
 8002c74:	6923      	ldr	r3, [r4, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d025      	beq.n	8002cc6 <__swbuf_r+0x72>
 8002c7a:	6923      	ldr	r3, [r4, #16]
 8002c7c:	6820      	ldr	r0, [r4, #0]
 8002c7e:	b2ef      	uxtb	r7, r5
 8002c80:	1ac0      	subs	r0, r0, r3
 8002c82:	6963      	ldr	r3, [r4, #20]
 8002c84:	b2ed      	uxtb	r5, r5
 8002c86:	4283      	cmp	r3, r0
 8002c88:	dc05      	bgt.n	8002c96 <__swbuf_r+0x42>
 8002c8a:	0021      	movs	r1, r4
 8002c8c:	0030      	movs	r0, r6
 8002c8e:	f000 fdfb 	bl	8003888 <_fflush_r>
 8002c92:	2800      	cmp	r0, #0
 8002c94:	d11d      	bne.n	8002cd2 <__swbuf_r+0x7e>
 8002c96:	68a3      	ldr	r3, [r4, #8]
 8002c98:	3001      	adds	r0, #1
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	60a3      	str	r3, [r4, #8]
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	6022      	str	r2, [r4, #0]
 8002ca4:	701f      	strb	r7, [r3, #0]
 8002ca6:	6963      	ldr	r3, [r4, #20]
 8002ca8:	4283      	cmp	r3, r0
 8002caa:	d004      	beq.n	8002cb6 <__swbuf_r+0x62>
 8002cac:	89a3      	ldrh	r3, [r4, #12]
 8002cae:	07db      	lsls	r3, r3, #31
 8002cb0:	d507      	bpl.n	8002cc2 <__swbuf_r+0x6e>
 8002cb2:	2d0a      	cmp	r5, #10
 8002cb4:	d105      	bne.n	8002cc2 <__swbuf_r+0x6e>
 8002cb6:	0021      	movs	r1, r4
 8002cb8:	0030      	movs	r0, r6
 8002cba:	f000 fde5 	bl	8003888 <_fflush_r>
 8002cbe:	2800      	cmp	r0, #0
 8002cc0:	d107      	bne.n	8002cd2 <__swbuf_r+0x7e>
 8002cc2:	0028      	movs	r0, r5
 8002cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cc6:	0021      	movs	r1, r4
 8002cc8:	0030      	movs	r0, r6
 8002cca:	f000 f805 	bl	8002cd8 <__swsetup_r>
 8002cce:	2800      	cmp	r0, #0
 8002cd0:	d0d3      	beq.n	8002c7a <__swbuf_r+0x26>
 8002cd2:	2501      	movs	r5, #1
 8002cd4:	426d      	negs	r5, r5
 8002cd6:	e7f4      	b.n	8002cc2 <__swbuf_r+0x6e>

08002cd8 <__swsetup_r>:
 8002cd8:	4b30      	ldr	r3, [pc, #192]	; (8002d9c <__swsetup_r+0xc4>)
 8002cda:	b570      	push	{r4, r5, r6, lr}
 8002cdc:	0005      	movs	r5, r0
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	000c      	movs	r4, r1
 8002ce2:	2800      	cmp	r0, #0
 8002ce4:	d004      	beq.n	8002cf0 <__swsetup_r+0x18>
 8002ce6:	6a03      	ldr	r3, [r0, #32]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <__swsetup_r+0x18>
 8002cec:	f7ff fec2 	bl	8002a74 <__sinit>
 8002cf0:	230c      	movs	r3, #12
 8002cf2:	5ee2      	ldrsh	r2, [r4, r3]
 8002cf4:	b293      	uxth	r3, r2
 8002cf6:	0711      	lsls	r1, r2, #28
 8002cf8:	d423      	bmi.n	8002d42 <__swsetup_r+0x6a>
 8002cfa:	06d9      	lsls	r1, r3, #27
 8002cfc:	d407      	bmi.n	8002d0e <__swsetup_r+0x36>
 8002cfe:	2309      	movs	r3, #9
 8002d00:	2001      	movs	r0, #1
 8002d02:	602b      	str	r3, [r5, #0]
 8002d04:	3337      	adds	r3, #55	; 0x37
 8002d06:	4313      	orrs	r3, r2
 8002d08:	81a3      	strh	r3, [r4, #12]
 8002d0a:	4240      	negs	r0, r0
 8002d0c:	bd70      	pop	{r4, r5, r6, pc}
 8002d0e:	075b      	lsls	r3, r3, #29
 8002d10:	d513      	bpl.n	8002d3a <__swsetup_r+0x62>
 8002d12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d14:	2900      	cmp	r1, #0
 8002d16:	d008      	beq.n	8002d2a <__swsetup_r+0x52>
 8002d18:	0023      	movs	r3, r4
 8002d1a:	3344      	adds	r3, #68	; 0x44
 8002d1c:	4299      	cmp	r1, r3
 8002d1e:	d002      	beq.n	8002d26 <__swsetup_r+0x4e>
 8002d20:	0028      	movs	r0, r5
 8002d22:	f000 f95b 	bl	8002fdc <_free_r>
 8002d26:	2300      	movs	r3, #0
 8002d28:	6363      	str	r3, [r4, #52]	; 0x34
 8002d2a:	2224      	movs	r2, #36	; 0x24
 8002d2c:	89a3      	ldrh	r3, [r4, #12]
 8002d2e:	4393      	bics	r3, r2
 8002d30:	81a3      	strh	r3, [r4, #12]
 8002d32:	2300      	movs	r3, #0
 8002d34:	6063      	str	r3, [r4, #4]
 8002d36:	6923      	ldr	r3, [r4, #16]
 8002d38:	6023      	str	r3, [r4, #0]
 8002d3a:	2308      	movs	r3, #8
 8002d3c:	89a2      	ldrh	r2, [r4, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	81a3      	strh	r3, [r4, #12]
 8002d42:	6923      	ldr	r3, [r4, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10b      	bne.n	8002d60 <__swsetup_r+0x88>
 8002d48:	21a0      	movs	r1, #160	; 0xa0
 8002d4a:	2280      	movs	r2, #128	; 0x80
 8002d4c:	89a3      	ldrh	r3, [r4, #12]
 8002d4e:	0089      	lsls	r1, r1, #2
 8002d50:	0092      	lsls	r2, r2, #2
 8002d52:	400b      	ands	r3, r1
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d003      	beq.n	8002d60 <__swsetup_r+0x88>
 8002d58:	0021      	movs	r1, r4
 8002d5a:	0028      	movs	r0, r5
 8002d5c:	f000 fdf8 	bl	8003950 <__smakebuf_r>
 8002d60:	220c      	movs	r2, #12
 8002d62:	5ea3      	ldrsh	r3, [r4, r2]
 8002d64:	2001      	movs	r0, #1
 8002d66:	001a      	movs	r2, r3
 8002d68:	b299      	uxth	r1, r3
 8002d6a:	4002      	ands	r2, r0
 8002d6c:	4203      	tst	r3, r0
 8002d6e:	d00f      	beq.n	8002d90 <__swsetup_r+0xb8>
 8002d70:	2200      	movs	r2, #0
 8002d72:	60a2      	str	r2, [r4, #8]
 8002d74:	6962      	ldr	r2, [r4, #20]
 8002d76:	4252      	negs	r2, r2
 8002d78:	61a2      	str	r2, [r4, #24]
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	6922      	ldr	r2, [r4, #16]
 8002d7e:	4282      	cmp	r2, r0
 8002d80:	d1c4      	bne.n	8002d0c <__swsetup_r+0x34>
 8002d82:	0609      	lsls	r1, r1, #24
 8002d84:	d5c2      	bpl.n	8002d0c <__swsetup_r+0x34>
 8002d86:	2240      	movs	r2, #64	; 0x40
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	81a3      	strh	r3, [r4, #12]
 8002d8c:	3801      	subs	r0, #1
 8002d8e:	e7bd      	b.n	8002d0c <__swsetup_r+0x34>
 8002d90:	0788      	lsls	r0, r1, #30
 8002d92:	d400      	bmi.n	8002d96 <__swsetup_r+0xbe>
 8002d94:	6962      	ldr	r2, [r4, #20]
 8002d96:	60a2      	str	r2, [r4, #8]
 8002d98:	e7ef      	b.n	8002d7a <__swsetup_r+0xa2>
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	20000064 	.word	0x20000064

08002da0 <memset>:
 8002da0:	0003      	movs	r3, r0
 8002da2:	1882      	adds	r2, r0, r2
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d100      	bne.n	8002daa <memset+0xa>
 8002da8:	4770      	bx	lr
 8002daa:	7019      	strb	r1, [r3, #0]
 8002dac:	3301      	adds	r3, #1
 8002dae:	e7f9      	b.n	8002da4 <memset+0x4>

08002db0 <strcasecmp>:
 8002db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002db2:	0005      	movs	r5, r0
 8002db4:	2400      	movs	r4, #0
 8002db6:	2703      	movs	r7, #3
 8002db8:	4e09      	ldr	r6, [pc, #36]	; (8002de0 <strcasecmp+0x30>)
 8002dba:	5d2a      	ldrb	r2, [r5, r4]
 8002dbc:	5cb3      	ldrb	r3, [r6, r2]
 8002dbe:	403b      	ands	r3, r7
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d100      	bne.n	8002dc6 <strcasecmp+0x16>
 8002dc4:	3220      	adds	r2, #32
 8002dc6:	5d0b      	ldrb	r3, [r1, r4]
 8002dc8:	5cf0      	ldrb	r0, [r6, r3]
 8002dca:	4038      	ands	r0, r7
 8002dcc:	2801      	cmp	r0, #1
 8002dce:	d100      	bne.n	8002dd2 <strcasecmp+0x22>
 8002dd0:	3320      	adds	r3, #32
 8002dd2:	1ad0      	subs	r0, r2, r3
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d102      	bne.n	8002dde <strcasecmp+0x2e>
 8002dd8:	3401      	adds	r4, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1ed      	bne.n	8002dba <strcasecmp+0xa>
 8002dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002de0:	08003c46 	.word	0x08003c46

08002de4 <strtok>:
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <strtok+0x5c>)
 8002de8:	0005      	movs	r5, r0
 8002dea:	681f      	ldr	r7, [r3, #0]
 8002dec:	000e      	movs	r6, r1
 8002dee:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8002df0:	2c00      	cmp	r4, #0
 8002df2:	d11d      	bne.n	8002e30 <strtok+0x4c>
 8002df4:	2050      	movs	r0, #80	; 0x50
 8002df6:	f000 f93b 	bl	8003070 <malloc>
 8002dfa:	1e02      	subs	r2, r0, #0
 8002dfc:	6478      	str	r0, [r7, #68]	; 0x44
 8002dfe:	d104      	bne.n	8002e0a <strtok+0x26>
 8002e00:	215b      	movs	r1, #91	; 0x5b
 8002e02:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <strtok+0x60>)
 8002e04:	4810      	ldr	r0, [pc, #64]	; (8002e48 <strtok+0x64>)
 8002e06:	f000 f8cb 	bl	8002fa0 <__assert_func>
 8002e0a:	6004      	str	r4, [r0, #0]
 8002e0c:	6044      	str	r4, [r0, #4]
 8002e0e:	6084      	str	r4, [r0, #8]
 8002e10:	60c4      	str	r4, [r0, #12]
 8002e12:	6104      	str	r4, [r0, #16]
 8002e14:	6144      	str	r4, [r0, #20]
 8002e16:	6184      	str	r4, [r0, #24]
 8002e18:	6284      	str	r4, [r0, #40]	; 0x28
 8002e1a:	62c4      	str	r4, [r0, #44]	; 0x2c
 8002e1c:	6304      	str	r4, [r0, #48]	; 0x30
 8002e1e:	6344      	str	r4, [r0, #52]	; 0x34
 8002e20:	6384      	str	r4, [r0, #56]	; 0x38
 8002e22:	63c4      	str	r4, [r0, #60]	; 0x3c
 8002e24:	6404      	str	r4, [r0, #64]	; 0x40
 8002e26:	6444      	str	r4, [r0, #68]	; 0x44
 8002e28:	6484      	str	r4, [r0, #72]	; 0x48
 8002e2a:	64c4      	str	r4, [r0, #76]	; 0x4c
 8002e2c:	7704      	strb	r4, [r0, #28]
 8002e2e:	6244      	str	r4, [r0, #36]	; 0x24
 8002e30:	0031      	movs	r1, r6
 8002e32:	0028      	movs	r0, r5
 8002e34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e36:	2301      	movs	r3, #1
 8002e38:	f000 f808 	bl	8002e4c <__strtok_r>
 8002e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	20000064 	.word	0x20000064
 8002e44:	08003b98 	.word	0x08003b98
 8002e48:	08003baf 	.word	0x08003baf

08002e4c <__strtok_r>:
 8002e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	d102      	bne.n	8002e58 <__strtok_r+0xc>
 8002e52:	6810      	ldr	r0, [r2, #0]
 8002e54:	2800      	cmp	r0, #0
 8002e56:	d013      	beq.n	8002e80 <__strtok_r+0x34>
 8002e58:	0004      	movs	r4, r0
 8002e5a:	0020      	movs	r0, r4
 8002e5c:	000e      	movs	r6, r1
 8002e5e:	7805      	ldrb	r5, [r0, #0]
 8002e60:	3401      	adds	r4, #1
 8002e62:	7837      	ldrb	r7, [r6, #0]
 8002e64:	2f00      	cmp	r7, #0
 8002e66:	d104      	bne.n	8002e72 <__strtok_r+0x26>
 8002e68:	2d00      	cmp	r5, #0
 8002e6a:	d10f      	bne.n	8002e8c <__strtok_r+0x40>
 8002e6c:	0028      	movs	r0, r5
 8002e6e:	6015      	str	r5, [r2, #0]
 8002e70:	e006      	b.n	8002e80 <__strtok_r+0x34>
 8002e72:	3601      	adds	r6, #1
 8002e74:	42bd      	cmp	r5, r7
 8002e76:	d1f4      	bne.n	8002e62 <__strtok_r+0x16>
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1ee      	bne.n	8002e5a <__strtok_r+0xe>
 8002e7c:	6014      	str	r4, [r2, #0]
 8002e7e:	7003      	strb	r3, [r0, #0]
 8002e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e82:	002f      	movs	r7, r5
 8002e84:	e00f      	b.n	8002ea6 <__strtok_r+0x5a>
 8002e86:	3301      	adds	r3, #1
 8002e88:	2e00      	cmp	r6, #0
 8002e8a:	d104      	bne.n	8002e96 <__strtok_r+0x4a>
 8002e8c:	0023      	movs	r3, r4
 8002e8e:	3401      	adds	r4, #1
 8002e90:	781d      	ldrb	r5, [r3, #0]
 8002e92:	0027      	movs	r7, r4
 8002e94:	000b      	movs	r3, r1
 8002e96:	781e      	ldrb	r6, [r3, #0]
 8002e98:	42b5      	cmp	r5, r6
 8002e9a:	d1f4      	bne.n	8002e86 <__strtok_r+0x3a>
 8002e9c:	2d00      	cmp	r5, #0
 8002e9e:	d0f0      	beq.n	8002e82 <__strtok_r+0x36>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	3c01      	subs	r4, #1
 8002ea4:	7023      	strb	r3, [r4, #0]
 8002ea6:	6017      	str	r7, [r2, #0]
 8002ea8:	e7ea      	b.n	8002e80 <__strtok_r+0x34>
	...

08002eac <_close_r>:
 8002eac:	2300      	movs	r3, #0
 8002eae:	b570      	push	{r4, r5, r6, lr}
 8002eb0:	4d06      	ldr	r5, [pc, #24]	; (8002ecc <_close_r+0x20>)
 8002eb2:	0004      	movs	r4, r0
 8002eb4:	0008      	movs	r0, r1
 8002eb6:	602b      	str	r3, [r5, #0]
 8002eb8:	f7fd fd3f 	bl	800093a <_close>
 8002ebc:	1c43      	adds	r3, r0, #1
 8002ebe:	d103      	bne.n	8002ec8 <_close_r+0x1c>
 8002ec0:	682b      	ldr	r3, [r5, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d000      	beq.n	8002ec8 <_close_r+0x1c>
 8002ec6:	6023      	str	r3, [r4, #0]
 8002ec8:	bd70      	pop	{r4, r5, r6, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	200003d4 	.word	0x200003d4

08002ed0 <_lseek_r>:
 8002ed0:	b570      	push	{r4, r5, r6, lr}
 8002ed2:	0004      	movs	r4, r0
 8002ed4:	0008      	movs	r0, r1
 8002ed6:	0011      	movs	r1, r2
 8002ed8:	001a      	movs	r2, r3
 8002eda:	2300      	movs	r3, #0
 8002edc:	4d05      	ldr	r5, [pc, #20]	; (8002ef4 <_lseek_r+0x24>)
 8002ede:	602b      	str	r3, [r5, #0]
 8002ee0:	f7fd fd4c 	bl	800097c <_lseek>
 8002ee4:	1c43      	adds	r3, r0, #1
 8002ee6:	d103      	bne.n	8002ef0 <_lseek_r+0x20>
 8002ee8:	682b      	ldr	r3, [r5, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d000      	beq.n	8002ef0 <_lseek_r+0x20>
 8002eee:	6023      	str	r3, [r4, #0]
 8002ef0:	bd70      	pop	{r4, r5, r6, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	200003d4 	.word	0x200003d4

08002ef8 <_read_r>:
 8002ef8:	b570      	push	{r4, r5, r6, lr}
 8002efa:	0004      	movs	r4, r0
 8002efc:	0008      	movs	r0, r1
 8002efe:	0011      	movs	r1, r2
 8002f00:	001a      	movs	r2, r3
 8002f02:	2300      	movs	r3, #0
 8002f04:	4d05      	ldr	r5, [pc, #20]	; (8002f1c <_read_r+0x24>)
 8002f06:	602b      	str	r3, [r5, #0]
 8002f08:	f7fd fcfa 	bl	8000900 <_read>
 8002f0c:	1c43      	adds	r3, r0, #1
 8002f0e:	d103      	bne.n	8002f18 <_read_r+0x20>
 8002f10:	682b      	ldr	r3, [r5, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d000      	beq.n	8002f18 <_read_r+0x20>
 8002f16:	6023      	str	r3, [r4, #0]
 8002f18:	bd70      	pop	{r4, r5, r6, pc}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	200003d4 	.word	0x200003d4

08002f20 <_write_r>:
 8002f20:	b570      	push	{r4, r5, r6, lr}
 8002f22:	0004      	movs	r4, r0
 8002f24:	0008      	movs	r0, r1
 8002f26:	0011      	movs	r1, r2
 8002f28:	001a      	movs	r2, r3
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	4d05      	ldr	r5, [pc, #20]	; (8002f44 <_write_r+0x24>)
 8002f2e:	602b      	str	r3, [r5, #0]
 8002f30:	f7fd fa40 	bl	80003b4 <_write>
 8002f34:	1c43      	adds	r3, r0, #1
 8002f36:	d103      	bne.n	8002f40 <_write_r+0x20>
 8002f38:	682b      	ldr	r3, [r5, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d000      	beq.n	8002f40 <_write_r+0x20>
 8002f3e:	6023      	str	r3, [r4, #0]
 8002f40:	bd70      	pop	{r4, r5, r6, pc}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	200003d4 	.word	0x200003d4

08002f48 <__errno>:
 8002f48:	4b01      	ldr	r3, [pc, #4]	; (8002f50 <__errno+0x8>)
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	4770      	bx	lr
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	20000064 	.word	0x20000064

08002f54 <__libc_init_array>:
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	2600      	movs	r6, #0
 8002f58:	4c0c      	ldr	r4, [pc, #48]	; (8002f8c <__libc_init_array+0x38>)
 8002f5a:	4d0d      	ldr	r5, [pc, #52]	; (8002f90 <__libc_init_array+0x3c>)
 8002f5c:	1b64      	subs	r4, r4, r5
 8002f5e:	10a4      	asrs	r4, r4, #2
 8002f60:	42a6      	cmp	r6, r4
 8002f62:	d109      	bne.n	8002f78 <__libc_init_array+0x24>
 8002f64:	2600      	movs	r6, #0
 8002f66:	f000 fdc3 	bl	8003af0 <_init>
 8002f6a:	4c0a      	ldr	r4, [pc, #40]	; (8002f94 <__libc_init_array+0x40>)
 8002f6c:	4d0a      	ldr	r5, [pc, #40]	; (8002f98 <__libc_init_array+0x44>)
 8002f6e:	1b64      	subs	r4, r4, r5
 8002f70:	10a4      	asrs	r4, r4, #2
 8002f72:	42a6      	cmp	r6, r4
 8002f74:	d105      	bne.n	8002f82 <__libc_init_array+0x2e>
 8002f76:	bd70      	pop	{r4, r5, r6, pc}
 8002f78:	00b3      	lsls	r3, r6, #2
 8002f7a:	58eb      	ldr	r3, [r5, r3]
 8002f7c:	4798      	blx	r3
 8002f7e:	3601      	adds	r6, #1
 8002f80:	e7ee      	b.n	8002f60 <__libc_init_array+0xc>
 8002f82:	00b3      	lsls	r3, r6, #2
 8002f84:	58eb      	ldr	r3, [r5, r3]
 8002f86:	4798      	blx	r3
 8002f88:	3601      	adds	r6, #1
 8002f8a:	e7f2      	b.n	8002f72 <__libc_init_array+0x1e>
 8002f8c:	08003d7c 	.word	0x08003d7c
 8002f90:	08003d7c 	.word	0x08003d7c
 8002f94:	08003d80 	.word	0x08003d80
 8002f98:	08003d7c 	.word	0x08003d7c

08002f9c <__retarget_lock_acquire_recursive>:
 8002f9c:	4770      	bx	lr

08002f9e <__retarget_lock_release_recursive>:
 8002f9e:	4770      	bx	lr

08002fa0 <__assert_func>:
 8002fa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002fa2:	0014      	movs	r4, r2
 8002fa4:	001a      	movs	r2, r3
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <__assert_func+0x2c>)
 8002fa8:	0005      	movs	r5, r0
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	000e      	movs	r6, r1
 8002fae:	68d8      	ldr	r0, [r3, #12]
 8002fb0:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <__assert_func+0x30>)
 8002fb2:	2c00      	cmp	r4, #0
 8002fb4:	d101      	bne.n	8002fba <__assert_func+0x1a>
 8002fb6:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <__assert_func+0x34>)
 8002fb8:	001c      	movs	r4, r3
 8002fba:	4907      	ldr	r1, [pc, #28]	; (8002fd8 <__assert_func+0x38>)
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	9402      	str	r4, [sp, #8]
 8002fc0:	002b      	movs	r3, r5
 8002fc2:	9600      	str	r6, [sp, #0]
 8002fc4:	f000 fc8c 	bl	80038e0 <fiprintf>
 8002fc8:	f000 fd41 	bl	8003a4e <abort>
 8002fcc:	20000064 	.word	0x20000064
 8002fd0:	08003c09 	.word	0x08003c09
 8002fd4:	08003c44 	.word	0x08003c44
 8002fd8:	08003c16 	.word	0x08003c16

08002fdc <_free_r>:
 8002fdc:	b570      	push	{r4, r5, r6, lr}
 8002fde:	0005      	movs	r5, r0
 8002fe0:	2900      	cmp	r1, #0
 8002fe2:	d010      	beq.n	8003006 <_free_r+0x2a>
 8002fe4:	1f0c      	subs	r4, r1, #4
 8002fe6:	6823      	ldr	r3, [r4, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	da00      	bge.n	8002fee <_free_r+0x12>
 8002fec:	18e4      	adds	r4, r4, r3
 8002fee:	0028      	movs	r0, r5
 8002ff0:	f000 f8ec 	bl	80031cc <__malloc_lock>
 8002ff4:	4a1d      	ldr	r2, [pc, #116]	; (800306c <_free_r+0x90>)
 8002ff6:	6813      	ldr	r3, [r2, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d105      	bne.n	8003008 <_free_r+0x2c>
 8002ffc:	6063      	str	r3, [r4, #4]
 8002ffe:	6014      	str	r4, [r2, #0]
 8003000:	0028      	movs	r0, r5
 8003002:	f000 f8eb 	bl	80031dc <__malloc_unlock>
 8003006:	bd70      	pop	{r4, r5, r6, pc}
 8003008:	42a3      	cmp	r3, r4
 800300a:	d908      	bls.n	800301e <_free_r+0x42>
 800300c:	6820      	ldr	r0, [r4, #0]
 800300e:	1821      	adds	r1, r4, r0
 8003010:	428b      	cmp	r3, r1
 8003012:	d1f3      	bne.n	8002ffc <_free_r+0x20>
 8003014:	6819      	ldr	r1, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	1809      	adds	r1, r1, r0
 800301a:	6021      	str	r1, [r4, #0]
 800301c:	e7ee      	b.n	8002ffc <_free_r+0x20>
 800301e:	001a      	movs	r2, r3
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <_free_r+0x4e>
 8003026:	42a3      	cmp	r3, r4
 8003028:	d9f9      	bls.n	800301e <_free_r+0x42>
 800302a:	6811      	ldr	r1, [r2, #0]
 800302c:	1850      	adds	r0, r2, r1
 800302e:	42a0      	cmp	r0, r4
 8003030:	d10b      	bne.n	800304a <_free_r+0x6e>
 8003032:	6820      	ldr	r0, [r4, #0]
 8003034:	1809      	adds	r1, r1, r0
 8003036:	1850      	adds	r0, r2, r1
 8003038:	6011      	str	r1, [r2, #0]
 800303a:	4283      	cmp	r3, r0
 800303c:	d1e0      	bne.n	8003000 <_free_r+0x24>
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	1841      	adds	r1, r0, r1
 8003044:	6011      	str	r1, [r2, #0]
 8003046:	6053      	str	r3, [r2, #4]
 8003048:	e7da      	b.n	8003000 <_free_r+0x24>
 800304a:	42a0      	cmp	r0, r4
 800304c:	d902      	bls.n	8003054 <_free_r+0x78>
 800304e:	230c      	movs	r3, #12
 8003050:	602b      	str	r3, [r5, #0]
 8003052:	e7d5      	b.n	8003000 <_free_r+0x24>
 8003054:	6820      	ldr	r0, [r4, #0]
 8003056:	1821      	adds	r1, r4, r0
 8003058:	428b      	cmp	r3, r1
 800305a:	d103      	bne.n	8003064 <_free_r+0x88>
 800305c:	6819      	ldr	r1, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	1809      	adds	r1, r1, r0
 8003062:	6021      	str	r1, [r4, #0]
 8003064:	6063      	str	r3, [r4, #4]
 8003066:	6054      	str	r4, [r2, #4]
 8003068:	e7ca      	b.n	8003000 <_free_r+0x24>
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	200003dc 	.word	0x200003dc

08003070 <malloc>:
 8003070:	b510      	push	{r4, lr}
 8003072:	4b03      	ldr	r3, [pc, #12]	; (8003080 <malloc+0x10>)
 8003074:	0001      	movs	r1, r0
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	f000 f826 	bl	80030c8 <_malloc_r>
 800307c:	bd10      	pop	{r4, pc}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	20000064 	.word	0x20000064

08003084 <sbrk_aligned>:
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	4e0f      	ldr	r6, [pc, #60]	; (80030c4 <sbrk_aligned+0x40>)
 8003088:	000d      	movs	r5, r1
 800308a:	6831      	ldr	r1, [r6, #0]
 800308c:	0004      	movs	r4, r0
 800308e:	2900      	cmp	r1, #0
 8003090:	d102      	bne.n	8003098 <sbrk_aligned+0x14>
 8003092:	f000 fcbf 	bl	8003a14 <_sbrk_r>
 8003096:	6030      	str	r0, [r6, #0]
 8003098:	0029      	movs	r1, r5
 800309a:	0020      	movs	r0, r4
 800309c:	f000 fcba 	bl	8003a14 <_sbrk_r>
 80030a0:	1c43      	adds	r3, r0, #1
 80030a2:	d00a      	beq.n	80030ba <sbrk_aligned+0x36>
 80030a4:	2303      	movs	r3, #3
 80030a6:	1cc5      	adds	r5, r0, #3
 80030a8:	439d      	bics	r5, r3
 80030aa:	42a8      	cmp	r0, r5
 80030ac:	d007      	beq.n	80030be <sbrk_aligned+0x3a>
 80030ae:	1a29      	subs	r1, r5, r0
 80030b0:	0020      	movs	r0, r4
 80030b2:	f000 fcaf 	bl	8003a14 <_sbrk_r>
 80030b6:	3001      	adds	r0, #1
 80030b8:	d101      	bne.n	80030be <sbrk_aligned+0x3a>
 80030ba:	2501      	movs	r5, #1
 80030bc:	426d      	negs	r5, r5
 80030be:	0028      	movs	r0, r5
 80030c0:	bd70      	pop	{r4, r5, r6, pc}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	200003e0 	.word	0x200003e0

080030c8 <_malloc_r>:
 80030c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030ca:	2203      	movs	r2, #3
 80030cc:	1ccb      	adds	r3, r1, #3
 80030ce:	4393      	bics	r3, r2
 80030d0:	3308      	adds	r3, #8
 80030d2:	0006      	movs	r6, r0
 80030d4:	001f      	movs	r7, r3
 80030d6:	2b0c      	cmp	r3, #12
 80030d8:	d238      	bcs.n	800314c <_malloc_r+0x84>
 80030da:	270c      	movs	r7, #12
 80030dc:	42b9      	cmp	r1, r7
 80030de:	d837      	bhi.n	8003150 <_malloc_r+0x88>
 80030e0:	0030      	movs	r0, r6
 80030e2:	f000 f873 	bl	80031cc <__malloc_lock>
 80030e6:	4b38      	ldr	r3, [pc, #224]	; (80031c8 <_malloc_r+0x100>)
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	001c      	movs	r4, r3
 80030ee:	2c00      	cmp	r4, #0
 80030f0:	d133      	bne.n	800315a <_malloc_r+0x92>
 80030f2:	0039      	movs	r1, r7
 80030f4:	0030      	movs	r0, r6
 80030f6:	f7ff ffc5 	bl	8003084 <sbrk_aligned>
 80030fa:	0004      	movs	r4, r0
 80030fc:	1c43      	adds	r3, r0, #1
 80030fe:	d15e      	bne.n	80031be <_malloc_r+0xf6>
 8003100:	9b00      	ldr	r3, [sp, #0]
 8003102:	681c      	ldr	r4, [r3, #0]
 8003104:	0025      	movs	r5, r4
 8003106:	2d00      	cmp	r5, #0
 8003108:	d14e      	bne.n	80031a8 <_malloc_r+0xe0>
 800310a:	2c00      	cmp	r4, #0
 800310c:	d051      	beq.n	80031b2 <_malloc_r+0xea>
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	0029      	movs	r1, r5
 8003112:	18e3      	adds	r3, r4, r3
 8003114:	0030      	movs	r0, r6
 8003116:	9301      	str	r3, [sp, #4]
 8003118:	f000 fc7c 	bl	8003a14 <_sbrk_r>
 800311c:	9b01      	ldr	r3, [sp, #4]
 800311e:	4283      	cmp	r3, r0
 8003120:	d147      	bne.n	80031b2 <_malloc_r+0xea>
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	0030      	movs	r0, r6
 8003126:	1aff      	subs	r7, r7, r3
 8003128:	0039      	movs	r1, r7
 800312a:	f7ff ffab 	bl	8003084 <sbrk_aligned>
 800312e:	3001      	adds	r0, #1
 8003130:	d03f      	beq.n	80031b2 <_malloc_r+0xea>
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	19db      	adds	r3, r3, r7
 8003136:	6023      	str	r3, [r4, #0]
 8003138:	9b00      	ldr	r3, [sp, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d040      	beq.n	80031c2 <_malloc_r+0xfa>
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	42a2      	cmp	r2, r4
 8003144:	d133      	bne.n	80031ae <_malloc_r+0xe6>
 8003146:	2200      	movs	r2, #0
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	e014      	b.n	8003176 <_malloc_r+0xae>
 800314c:	2b00      	cmp	r3, #0
 800314e:	dac5      	bge.n	80030dc <_malloc_r+0x14>
 8003150:	230c      	movs	r3, #12
 8003152:	2500      	movs	r5, #0
 8003154:	6033      	str	r3, [r6, #0]
 8003156:	0028      	movs	r0, r5
 8003158:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800315a:	6821      	ldr	r1, [r4, #0]
 800315c:	1bc9      	subs	r1, r1, r7
 800315e:	d420      	bmi.n	80031a2 <_malloc_r+0xda>
 8003160:	290b      	cmp	r1, #11
 8003162:	d918      	bls.n	8003196 <_malloc_r+0xce>
 8003164:	19e2      	adds	r2, r4, r7
 8003166:	6027      	str	r7, [r4, #0]
 8003168:	42a3      	cmp	r3, r4
 800316a:	d112      	bne.n	8003192 <_malloc_r+0xca>
 800316c:	9b00      	ldr	r3, [sp, #0]
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	6863      	ldr	r3, [r4, #4]
 8003172:	6011      	str	r1, [r2, #0]
 8003174:	6053      	str	r3, [r2, #4]
 8003176:	0030      	movs	r0, r6
 8003178:	0025      	movs	r5, r4
 800317a:	f000 f82f 	bl	80031dc <__malloc_unlock>
 800317e:	2207      	movs	r2, #7
 8003180:	350b      	adds	r5, #11
 8003182:	1d23      	adds	r3, r4, #4
 8003184:	4395      	bics	r5, r2
 8003186:	1aea      	subs	r2, r5, r3
 8003188:	429d      	cmp	r5, r3
 800318a:	d0e4      	beq.n	8003156 <_malloc_r+0x8e>
 800318c:	1b5b      	subs	r3, r3, r5
 800318e:	50a3      	str	r3, [r4, r2]
 8003190:	e7e1      	b.n	8003156 <_malloc_r+0x8e>
 8003192:	605a      	str	r2, [r3, #4]
 8003194:	e7ec      	b.n	8003170 <_malloc_r+0xa8>
 8003196:	6862      	ldr	r2, [r4, #4]
 8003198:	42a3      	cmp	r3, r4
 800319a:	d1d5      	bne.n	8003148 <_malloc_r+0x80>
 800319c:	9b00      	ldr	r3, [sp, #0]
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	e7e9      	b.n	8003176 <_malloc_r+0xae>
 80031a2:	0023      	movs	r3, r4
 80031a4:	6864      	ldr	r4, [r4, #4]
 80031a6:	e7a2      	b.n	80030ee <_malloc_r+0x26>
 80031a8:	002c      	movs	r4, r5
 80031aa:	686d      	ldr	r5, [r5, #4]
 80031ac:	e7ab      	b.n	8003106 <_malloc_r+0x3e>
 80031ae:	0013      	movs	r3, r2
 80031b0:	e7c4      	b.n	800313c <_malloc_r+0x74>
 80031b2:	230c      	movs	r3, #12
 80031b4:	0030      	movs	r0, r6
 80031b6:	6033      	str	r3, [r6, #0]
 80031b8:	f000 f810 	bl	80031dc <__malloc_unlock>
 80031bc:	e7cb      	b.n	8003156 <_malloc_r+0x8e>
 80031be:	6027      	str	r7, [r4, #0]
 80031c0:	e7d9      	b.n	8003176 <_malloc_r+0xae>
 80031c2:	605b      	str	r3, [r3, #4]
 80031c4:	deff      	udf	#255	; 0xff
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	200003dc 	.word	0x200003dc

080031cc <__malloc_lock>:
 80031cc:	b510      	push	{r4, lr}
 80031ce:	4802      	ldr	r0, [pc, #8]	; (80031d8 <__malloc_lock+0xc>)
 80031d0:	f7ff fee4 	bl	8002f9c <__retarget_lock_acquire_recursive>
 80031d4:	bd10      	pop	{r4, pc}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	200003d8 	.word	0x200003d8

080031dc <__malloc_unlock>:
 80031dc:	b510      	push	{r4, lr}
 80031de:	4802      	ldr	r0, [pc, #8]	; (80031e8 <__malloc_unlock+0xc>)
 80031e0:	f7ff fedd 	bl	8002f9e <__retarget_lock_release_recursive>
 80031e4:	bd10      	pop	{r4, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	200003d8 	.word	0x200003d8

080031ec <__sfputc_r>:
 80031ec:	6893      	ldr	r3, [r2, #8]
 80031ee:	b510      	push	{r4, lr}
 80031f0:	3b01      	subs	r3, #1
 80031f2:	6093      	str	r3, [r2, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	da04      	bge.n	8003202 <__sfputc_r+0x16>
 80031f8:	6994      	ldr	r4, [r2, #24]
 80031fa:	42a3      	cmp	r3, r4
 80031fc:	db07      	blt.n	800320e <__sfputc_r+0x22>
 80031fe:	290a      	cmp	r1, #10
 8003200:	d005      	beq.n	800320e <__sfputc_r+0x22>
 8003202:	6813      	ldr	r3, [r2, #0]
 8003204:	1c58      	adds	r0, r3, #1
 8003206:	6010      	str	r0, [r2, #0]
 8003208:	7019      	strb	r1, [r3, #0]
 800320a:	0008      	movs	r0, r1
 800320c:	bd10      	pop	{r4, pc}
 800320e:	f7ff fd21 	bl	8002c54 <__swbuf_r>
 8003212:	0001      	movs	r1, r0
 8003214:	e7f9      	b.n	800320a <__sfputc_r+0x1e>

08003216 <__sfputs_r>:
 8003216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003218:	0006      	movs	r6, r0
 800321a:	000f      	movs	r7, r1
 800321c:	0014      	movs	r4, r2
 800321e:	18d5      	adds	r5, r2, r3
 8003220:	42ac      	cmp	r4, r5
 8003222:	d101      	bne.n	8003228 <__sfputs_r+0x12>
 8003224:	2000      	movs	r0, #0
 8003226:	e007      	b.n	8003238 <__sfputs_r+0x22>
 8003228:	7821      	ldrb	r1, [r4, #0]
 800322a:	003a      	movs	r2, r7
 800322c:	0030      	movs	r0, r6
 800322e:	f7ff ffdd 	bl	80031ec <__sfputc_r>
 8003232:	3401      	adds	r4, #1
 8003234:	1c43      	adds	r3, r0, #1
 8003236:	d1f3      	bne.n	8003220 <__sfputs_r+0xa>
 8003238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800323c <_vfiprintf_r>:
 800323c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800323e:	b0a1      	sub	sp, #132	; 0x84
 8003240:	000f      	movs	r7, r1
 8003242:	0015      	movs	r5, r2
 8003244:	001e      	movs	r6, r3
 8003246:	9003      	str	r0, [sp, #12]
 8003248:	2800      	cmp	r0, #0
 800324a:	d004      	beq.n	8003256 <_vfiprintf_r+0x1a>
 800324c:	6a03      	ldr	r3, [r0, #32]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <_vfiprintf_r+0x1a>
 8003252:	f7ff fc0f 	bl	8002a74 <__sinit>
 8003256:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003258:	07db      	lsls	r3, r3, #31
 800325a:	d405      	bmi.n	8003268 <_vfiprintf_r+0x2c>
 800325c:	89bb      	ldrh	r3, [r7, #12]
 800325e:	059b      	lsls	r3, r3, #22
 8003260:	d402      	bmi.n	8003268 <_vfiprintf_r+0x2c>
 8003262:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003264:	f7ff fe9a 	bl	8002f9c <__retarget_lock_acquire_recursive>
 8003268:	89bb      	ldrh	r3, [r7, #12]
 800326a:	071b      	lsls	r3, r3, #28
 800326c:	d502      	bpl.n	8003274 <_vfiprintf_r+0x38>
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d113      	bne.n	800329c <_vfiprintf_r+0x60>
 8003274:	0039      	movs	r1, r7
 8003276:	9803      	ldr	r0, [sp, #12]
 8003278:	f7ff fd2e 	bl	8002cd8 <__swsetup_r>
 800327c:	2800      	cmp	r0, #0
 800327e:	d00d      	beq.n	800329c <_vfiprintf_r+0x60>
 8003280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003282:	07db      	lsls	r3, r3, #31
 8003284:	d503      	bpl.n	800328e <_vfiprintf_r+0x52>
 8003286:	2001      	movs	r0, #1
 8003288:	4240      	negs	r0, r0
 800328a:	b021      	add	sp, #132	; 0x84
 800328c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800328e:	89bb      	ldrh	r3, [r7, #12]
 8003290:	059b      	lsls	r3, r3, #22
 8003292:	d4f8      	bmi.n	8003286 <_vfiprintf_r+0x4a>
 8003294:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003296:	f7ff fe82 	bl	8002f9e <__retarget_lock_release_recursive>
 800329a:	e7f4      	b.n	8003286 <_vfiprintf_r+0x4a>
 800329c:	2300      	movs	r3, #0
 800329e:	ac08      	add	r4, sp, #32
 80032a0:	6163      	str	r3, [r4, #20]
 80032a2:	3320      	adds	r3, #32
 80032a4:	7663      	strb	r3, [r4, #25]
 80032a6:	3310      	adds	r3, #16
 80032a8:	76a3      	strb	r3, [r4, #26]
 80032aa:	9607      	str	r6, [sp, #28]
 80032ac:	002e      	movs	r6, r5
 80032ae:	7833      	ldrb	r3, [r6, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <_vfiprintf_r+0x7c>
 80032b4:	2b25      	cmp	r3, #37	; 0x25
 80032b6:	d148      	bne.n	800334a <_vfiprintf_r+0x10e>
 80032b8:	1b73      	subs	r3, r6, r5
 80032ba:	9305      	str	r3, [sp, #20]
 80032bc:	42ae      	cmp	r6, r5
 80032be:	d00b      	beq.n	80032d8 <_vfiprintf_r+0x9c>
 80032c0:	002a      	movs	r2, r5
 80032c2:	0039      	movs	r1, r7
 80032c4:	9803      	ldr	r0, [sp, #12]
 80032c6:	f7ff ffa6 	bl	8003216 <__sfputs_r>
 80032ca:	3001      	adds	r0, #1
 80032cc:	d100      	bne.n	80032d0 <_vfiprintf_r+0x94>
 80032ce:	e0af      	b.n	8003430 <_vfiprintf_r+0x1f4>
 80032d0:	6963      	ldr	r3, [r4, #20]
 80032d2:	9a05      	ldr	r2, [sp, #20]
 80032d4:	189b      	adds	r3, r3, r2
 80032d6:	6163      	str	r3, [r4, #20]
 80032d8:	7833      	ldrb	r3, [r6, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d100      	bne.n	80032e0 <_vfiprintf_r+0xa4>
 80032de:	e0a7      	b.n	8003430 <_vfiprintf_r+0x1f4>
 80032e0:	2201      	movs	r2, #1
 80032e2:	2300      	movs	r3, #0
 80032e4:	4252      	negs	r2, r2
 80032e6:	6062      	str	r2, [r4, #4]
 80032e8:	a904      	add	r1, sp, #16
 80032ea:	3254      	adds	r2, #84	; 0x54
 80032ec:	1852      	adds	r2, r2, r1
 80032ee:	1c75      	adds	r5, r6, #1
 80032f0:	6023      	str	r3, [r4, #0]
 80032f2:	60e3      	str	r3, [r4, #12]
 80032f4:	60a3      	str	r3, [r4, #8]
 80032f6:	7013      	strb	r3, [r2, #0]
 80032f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80032fa:	4b59      	ldr	r3, [pc, #356]	; (8003460 <_vfiprintf_r+0x224>)
 80032fc:	2205      	movs	r2, #5
 80032fe:	0018      	movs	r0, r3
 8003300:	7829      	ldrb	r1, [r5, #0]
 8003302:	9305      	str	r3, [sp, #20]
 8003304:	f000 fb98 	bl	8003a38 <memchr>
 8003308:	1c6e      	adds	r6, r5, #1
 800330a:	2800      	cmp	r0, #0
 800330c:	d11f      	bne.n	800334e <_vfiprintf_r+0x112>
 800330e:	6822      	ldr	r2, [r4, #0]
 8003310:	06d3      	lsls	r3, r2, #27
 8003312:	d504      	bpl.n	800331e <_vfiprintf_r+0xe2>
 8003314:	2353      	movs	r3, #83	; 0x53
 8003316:	a904      	add	r1, sp, #16
 8003318:	185b      	adds	r3, r3, r1
 800331a:	2120      	movs	r1, #32
 800331c:	7019      	strb	r1, [r3, #0]
 800331e:	0713      	lsls	r3, r2, #28
 8003320:	d504      	bpl.n	800332c <_vfiprintf_r+0xf0>
 8003322:	2353      	movs	r3, #83	; 0x53
 8003324:	a904      	add	r1, sp, #16
 8003326:	185b      	adds	r3, r3, r1
 8003328:	212b      	movs	r1, #43	; 0x2b
 800332a:	7019      	strb	r1, [r3, #0]
 800332c:	782b      	ldrb	r3, [r5, #0]
 800332e:	2b2a      	cmp	r3, #42	; 0x2a
 8003330:	d016      	beq.n	8003360 <_vfiprintf_r+0x124>
 8003332:	002e      	movs	r6, r5
 8003334:	2100      	movs	r1, #0
 8003336:	200a      	movs	r0, #10
 8003338:	68e3      	ldr	r3, [r4, #12]
 800333a:	7832      	ldrb	r2, [r6, #0]
 800333c:	1c75      	adds	r5, r6, #1
 800333e:	3a30      	subs	r2, #48	; 0x30
 8003340:	2a09      	cmp	r2, #9
 8003342:	d94e      	bls.n	80033e2 <_vfiprintf_r+0x1a6>
 8003344:	2900      	cmp	r1, #0
 8003346:	d111      	bne.n	800336c <_vfiprintf_r+0x130>
 8003348:	e017      	b.n	800337a <_vfiprintf_r+0x13e>
 800334a:	3601      	adds	r6, #1
 800334c:	e7af      	b.n	80032ae <_vfiprintf_r+0x72>
 800334e:	9b05      	ldr	r3, [sp, #20]
 8003350:	6822      	ldr	r2, [r4, #0]
 8003352:	1ac0      	subs	r0, r0, r3
 8003354:	2301      	movs	r3, #1
 8003356:	4083      	lsls	r3, r0
 8003358:	4313      	orrs	r3, r2
 800335a:	0035      	movs	r5, r6
 800335c:	6023      	str	r3, [r4, #0]
 800335e:	e7cc      	b.n	80032fa <_vfiprintf_r+0xbe>
 8003360:	9b07      	ldr	r3, [sp, #28]
 8003362:	1d19      	adds	r1, r3, #4
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	9107      	str	r1, [sp, #28]
 8003368:	2b00      	cmp	r3, #0
 800336a:	db01      	blt.n	8003370 <_vfiprintf_r+0x134>
 800336c:	930b      	str	r3, [sp, #44]	; 0x2c
 800336e:	e004      	b.n	800337a <_vfiprintf_r+0x13e>
 8003370:	425b      	negs	r3, r3
 8003372:	60e3      	str	r3, [r4, #12]
 8003374:	2302      	movs	r3, #2
 8003376:	4313      	orrs	r3, r2
 8003378:	6023      	str	r3, [r4, #0]
 800337a:	7833      	ldrb	r3, [r6, #0]
 800337c:	2b2e      	cmp	r3, #46	; 0x2e
 800337e:	d10a      	bne.n	8003396 <_vfiprintf_r+0x15a>
 8003380:	7873      	ldrb	r3, [r6, #1]
 8003382:	2b2a      	cmp	r3, #42	; 0x2a
 8003384:	d135      	bne.n	80033f2 <_vfiprintf_r+0x1b6>
 8003386:	9b07      	ldr	r3, [sp, #28]
 8003388:	3602      	adds	r6, #2
 800338a:	1d1a      	adds	r2, r3, #4
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	9207      	str	r2, [sp, #28]
 8003390:	2b00      	cmp	r3, #0
 8003392:	db2b      	blt.n	80033ec <_vfiprintf_r+0x1b0>
 8003394:	9309      	str	r3, [sp, #36]	; 0x24
 8003396:	4d33      	ldr	r5, [pc, #204]	; (8003464 <_vfiprintf_r+0x228>)
 8003398:	2203      	movs	r2, #3
 800339a:	0028      	movs	r0, r5
 800339c:	7831      	ldrb	r1, [r6, #0]
 800339e:	f000 fb4b 	bl	8003a38 <memchr>
 80033a2:	2800      	cmp	r0, #0
 80033a4:	d006      	beq.n	80033b4 <_vfiprintf_r+0x178>
 80033a6:	2340      	movs	r3, #64	; 0x40
 80033a8:	1b40      	subs	r0, r0, r5
 80033aa:	4083      	lsls	r3, r0
 80033ac:	6822      	ldr	r2, [r4, #0]
 80033ae:	3601      	adds	r6, #1
 80033b0:	4313      	orrs	r3, r2
 80033b2:	6023      	str	r3, [r4, #0]
 80033b4:	7831      	ldrb	r1, [r6, #0]
 80033b6:	2206      	movs	r2, #6
 80033b8:	482b      	ldr	r0, [pc, #172]	; (8003468 <_vfiprintf_r+0x22c>)
 80033ba:	1c75      	adds	r5, r6, #1
 80033bc:	7621      	strb	r1, [r4, #24]
 80033be:	f000 fb3b 	bl	8003a38 <memchr>
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d043      	beq.n	800344e <_vfiprintf_r+0x212>
 80033c6:	4b29      	ldr	r3, [pc, #164]	; (800346c <_vfiprintf_r+0x230>)
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d125      	bne.n	8003418 <_vfiprintf_r+0x1dc>
 80033cc:	2207      	movs	r2, #7
 80033ce:	9b07      	ldr	r3, [sp, #28]
 80033d0:	3307      	adds	r3, #7
 80033d2:	4393      	bics	r3, r2
 80033d4:	3308      	adds	r3, #8
 80033d6:	9307      	str	r3, [sp, #28]
 80033d8:	6963      	ldr	r3, [r4, #20]
 80033da:	9a04      	ldr	r2, [sp, #16]
 80033dc:	189b      	adds	r3, r3, r2
 80033de:	6163      	str	r3, [r4, #20]
 80033e0:	e764      	b.n	80032ac <_vfiprintf_r+0x70>
 80033e2:	4343      	muls	r3, r0
 80033e4:	002e      	movs	r6, r5
 80033e6:	2101      	movs	r1, #1
 80033e8:	189b      	adds	r3, r3, r2
 80033ea:	e7a6      	b.n	800333a <_vfiprintf_r+0xfe>
 80033ec:	2301      	movs	r3, #1
 80033ee:	425b      	negs	r3, r3
 80033f0:	e7d0      	b.n	8003394 <_vfiprintf_r+0x158>
 80033f2:	2300      	movs	r3, #0
 80033f4:	200a      	movs	r0, #10
 80033f6:	001a      	movs	r2, r3
 80033f8:	3601      	adds	r6, #1
 80033fa:	6063      	str	r3, [r4, #4]
 80033fc:	7831      	ldrb	r1, [r6, #0]
 80033fe:	1c75      	adds	r5, r6, #1
 8003400:	3930      	subs	r1, #48	; 0x30
 8003402:	2909      	cmp	r1, #9
 8003404:	d903      	bls.n	800340e <_vfiprintf_r+0x1d2>
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0c5      	beq.n	8003396 <_vfiprintf_r+0x15a>
 800340a:	9209      	str	r2, [sp, #36]	; 0x24
 800340c:	e7c3      	b.n	8003396 <_vfiprintf_r+0x15a>
 800340e:	4342      	muls	r2, r0
 8003410:	002e      	movs	r6, r5
 8003412:	2301      	movs	r3, #1
 8003414:	1852      	adds	r2, r2, r1
 8003416:	e7f1      	b.n	80033fc <_vfiprintf_r+0x1c0>
 8003418:	aa07      	add	r2, sp, #28
 800341a:	9200      	str	r2, [sp, #0]
 800341c:	0021      	movs	r1, r4
 800341e:	003a      	movs	r2, r7
 8003420:	4b13      	ldr	r3, [pc, #76]	; (8003470 <_vfiprintf_r+0x234>)
 8003422:	9803      	ldr	r0, [sp, #12]
 8003424:	e000      	b.n	8003428 <_vfiprintf_r+0x1ec>
 8003426:	bf00      	nop
 8003428:	9004      	str	r0, [sp, #16]
 800342a:	9b04      	ldr	r3, [sp, #16]
 800342c:	3301      	adds	r3, #1
 800342e:	d1d3      	bne.n	80033d8 <_vfiprintf_r+0x19c>
 8003430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003432:	07db      	lsls	r3, r3, #31
 8003434:	d405      	bmi.n	8003442 <_vfiprintf_r+0x206>
 8003436:	89bb      	ldrh	r3, [r7, #12]
 8003438:	059b      	lsls	r3, r3, #22
 800343a:	d402      	bmi.n	8003442 <_vfiprintf_r+0x206>
 800343c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800343e:	f7ff fdae 	bl	8002f9e <__retarget_lock_release_recursive>
 8003442:	89bb      	ldrh	r3, [r7, #12]
 8003444:	065b      	lsls	r3, r3, #25
 8003446:	d500      	bpl.n	800344a <_vfiprintf_r+0x20e>
 8003448:	e71d      	b.n	8003286 <_vfiprintf_r+0x4a>
 800344a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800344c:	e71d      	b.n	800328a <_vfiprintf_r+0x4e>
 800344e:	aa07      	add	r2, sp, #28
 8003450:	9200      	str	r2, [sp, #0]
 8003452:	0021      	movs	r1, r4
 8003454:	003a      	movs	r2, r7
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <_vfiprintf_r+0x234>)
 8003458:	9803      	ldr	r0, [sp, #12]
 800345a:	f000 f87b 	bl	8003554 <_printf_i>
 800345e:	e7e3      	b.n	8003428 <_vfiprintf_r+0x1ec>
 8003460:	08003d46 	.word	0x08003d46
 8003464:	08003d4c 	.word	0x08003d4c
 8003468:	08003d50 	.word	0x08003d50
 800346c:	00000000 	.word	0x00000000
 8003470:	08003217 	.word	0x08003217

08003474 <_printf_common>:
 8003474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003476:	0016      	movs	r6, r2
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	688a      	ldr	r2, [r1, #8]
 800347c:	690b      	ldr	r3, [r1, #16]
 800347e:	000c      	movs	r4, r1
 8003480:	9000      	str	r0, [sp, #0]
 8003482:	4293      	cmp	r3, r2
 8003484:	da00      	bge.n	8003488 <_printf_common+0x14>
 8003486:	0013      	movs	r3, r2
 8003488:	0022      	movs	r2, r4
 800348a:	6033      	str	r3, [r6, #0]
 800348c:	3243      	adds	r2, #67	; 0x43
 800348e:	7812      	ldrb	r2, [r2, #0]
 8003490:	2a00      	cmp	r2, #0
 8003492:	d001      	beq.n	8003498 <_printf_common+0x24>
 8003494:	3301      	adds	r3, #1
 8003496:	6033      	str	r3, [r6, #0]
 8003498:	6823      	ldr	r3, [r4, #0]
 800349a:	069b      	lsls	r3, r3, #26
 800349c:	d502      	bpl.n	80034a4 <_printf_common+0x30>
 800349e:	6833      	ldr	r3, [r6, #0]
 80034a0:	3302      	adds	r3, #2
 80034a2:	6033      	str	r3, [r6, #0]
 80034a4:	6822      	ldr	r2, [r4, #0]
 80034a6:	2306      	movs	r3, #6
 80034a8:	0015      	movs	r5, r2
 80034aa:	401d      	ands	r5, r3
 80034ac:	421a      	tst	r2, r3
 80034ae:	d027      	beq.n	8003500 <_printf_common+0x8c>
 80034b0:	0023      	movs	r3, r4
 80034b2:	3343      	adds	r3, #67	; 0x43
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	1e5a      	subs	r2, r3, #1
 80034b8:	4193      	sbcs	r3, r2
 80034ba:	6822      	ldr	r2, [r4, #0]
 80034bc:	0692      	lsls	r2, r2, #26
 80034be:	d430      	bmi.n	8003522 <_printf_common+0xae>
 80034c0:	0022      	movs	r2, r4
 80034c2:	9901      	ldr	r1, [sp, #4]
 80034c4:	9800      	ldr	r0, [sp, #0]
 80034c6:	9d08      	ldr	r5, [sp, #32]
 80034c8:	3243      	adds	r2, #67	; 0x43
 80034ca:	47a8      	blx	r5
 80034cc:	3001      	adds	r0, #1
 80034ce:	d025      	beq.n	800351c <_printf_common+0xa8>
 80034d0:	2206      	movs	r2, #6
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	2500      	movs	r5, #0
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d105      	bne.n	80034e8 <_printf_common+0x74>
 80034dc:	6833      	ldr	r3, [r6, #0]
 80034de:	68e5      	ldr	r5, [r4, #12]
 80034e0:	1aed      	subs	r5, r5, r3
 80034e2:	43eb      	mvns	r3, r5
 80034e4:	17db      	asrs	r3, r3, #31
 80034e6:	401d      	ands	r5, r3
 80034e8:	68a3      	ldr	r3, [r4, #8]
 80034ea:	6922      	ldr	r2, [r4, #16]
 80034ec:	4293      	cmp	r3, r2
 80034ee:	dd01      	ble.n	80034f4 <_printf_common+0x80>
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	18ed      	adds	r5, r5, r3
 80034f4:	2600      	movs	r6, #0
 80034f6:	42b5      	cmp	r5, r6
 80034f8:	d120      	bne.n	800353c <_printf_common+0xc8>
 80034fa:	2000      	movs	r0, #0
 80034fc:	e010      	b.n	8003520 <_printf_common+0xac>
 80034fe:	3501      	adds	r5, #1
 8003500:	68e3      	ldr	r3, [r4, #12]
 8003502:	6832      	ldr	r2, [r6, #0]
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	42ab      	cmp	r3, r5
 8003508:	ddd2      	ble.n	80034b0 <_printf_common+0x3c>
 800350a:	0022      	movs	r2, r4
 800350c:	2301      	movs	r3, #1
 800350e:	9901      	ldr	r1, [sp, #4]
 8003510:	9800      	ldr	r0, [sp, #0]
 8003512:	9f08      	ldr	r7, [sp, #32]
 8003514:	3219      	adds	r2, #25
 8003516:	47b8      	blx	r7
 8003518:	3001      	adds	r0, #1
 800351a:	d1f0      	bne.n	80034fe <_printf_common+0x8a>
 800351c:	2001      	movs	r0, #1
 800351e:	4240      	negs	r0, r0
 8003520:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003522:	2030      	movs	r0, #48	; 0x30
 8003524:	18e1      	adds	r1, r4, r3
 8003526:	3143      	adds	r1, #67	; 0x43
 8003528:	7008      	strb	r0, [r1, #0]
 800352a:	0021      	movs	r1, r4
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	3145      	adds	r1, #69	; 0x45
 8003530:	7809      	ldrb	r1, [r1, #0]
 8003532:	18a2      	adds	r2, r4, r2
 8003534:	3243      	adds	r2, #67	; 0x43
 8003536:	3302      	adds	r3, #2
 8003538:	7011      	strb	r1, [r2, #0]
 800353a:	e7c1      	b.n	80034c0 <_printf_common+0x4c>
 800353c:	0022      	movs	r2, r4
 800353e:	2301      	movs	r3, #1
 8003540:	9901      	ldr	r1, [sp, #4]
 8003542:	9800      	ldr	r0, [sp, #0]
 8003544:	9f08      	ldr	r7, [sp, #32]
 8003546:	321a      	adds	r2, #26
 8003548:	47b8      	blx	r7
 800354a:	3001      	adds	r0, #1
 800354c:	d0e6      	beq.n	800351c <_printf_common+0xa8>
 800354e:	3601      	adds	r6, #1
 8003550:	e7d1      	b.n	80034f6 <_printf_common+0x82>
	...

08003554 <_printf_i>:
 8003554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003556:	b08b      	sub	sp, #44	; 0x2c
 8003558:	9206      	str	r2, [sp, #24]
 800355a:	000a      	movs	r2, r1
 800355c:	3243      	adds	r2, #67	; 0x43
 800355e:	9307      	str	r3, [sp, #28]
 8003560:	9005      	str	r0, [sp, #20]
 8003562:	9204      	str	r2, [sp, #16]
 8003564:	7e0a      	ldrb	r2, [r1, #24]
 8003566:	000c      	movs	r4, r1
 8003568:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800356a:	2a78      	cmp	r2, #120	; 0x78
 800356c:	d809      	bhi.n	8003582 <_printf_i+0x2e>
 800356e:	2a62      	cmp	r2, #98	; 0x62
 8003570:	d80b      	bhi.n	800358a <_printf_i+0x36>
 8003572:	2a00      	cmp	r2, #0
 8003574:	d100      	bne.n	8003578 <_printf_i+0x24>
 8003576:	e0be      	b.n	80036f6 <_printf_i+0x1a2>
 8003578:	497c      	ldr	r1, [pc, #496]	; (800376c <_printf_i+0x218>)
 800357a:	9103      	str	r1, [sp, #12]
 800357c:	2a58      	cmp	r2, #88	; 0x58
 800357e:	d100      	bne.n	8003582 <_printf_i+0x2e>
 8003580:	e093      	b.n	80036aa <_printf_i+0x156>
 8003582:	0026      	movs	r6, r4
 8003584:	3642      	adds	r6, #66	; 0x42
 8003586:	7032      	strb	r2, [r6, #0]
 8003588:	e022      	b.n	80035d0 <_printf_i+0x7c>
 800358a:	0010      	movs	r0, r2
 800358c:	3863      	subs	r0, #99	; 0x63
 800358e:	2815      	cmp	r0, #21
 8003590:	d8f7      	bhi.n	8003582 <_printf_i+0x2e>
 8003592:	f7fc fdb9 	bl	8000108 <__gnu_thumb1_case_shi>
 8003596:	0016      	.short	0x0016
 8003598:	fff6001f 	.word	0xfff6001f
 800359c:	fff6fff6 	.word	0xfff6fff6
 80035a0:	001ffff6 	.word	0x001ffff6
 80035a4:	fff6fff6 	.word	0xfff6fff6
 80035a8:	fff6fff6 	.word	0xfff6fff6
 80035ac:	003600a3 	.word	0x003600a3
 80035b0:	fff60083 	.word	0xfff60083
 80035b4:	00b4fff6 	.word	0x00b4fff6
 80035b8:	0036fff6 	.word	0x0036fff6
 80035bc:	fff6fff6 	.word	0xfff6fff6
 80035c0:	0087      	.short	0x0087
 80035c2:	0026      	movs	r6, r4
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	3642      	adds	r6, #66	; 0x42
 80035c8:	1d11      	adds	r1, r2, #4
 80035ca:	6019      	str	r1, [r3, #0]
 80035cc:	6813      	ldr	r3, [r2, #0]
 80035ce:	7033      	strb	r3, [r6, #0]
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0a2      	b.n	800371a <_printf_i+0x1c6>
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	6809      	ldr	r1, [r1, #0]
 80035d8:	1d02      	adds	r2, r0, #4
 80035da:	060d      	lsls	r5, r1, #24
 80035dc:	d50b      	bpl.n	80035f6 <_printf_i+0xa2>
 80035de:	6805      	ldr	r5, [r0, #0]
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	2d00      	cmp	r5, #0
 80035e4:	da03      	bge.n	80035ee <_printf_i+0x9a>
 80035e6:	232d      	movs	r3, #45	; 0x2d
 80035e8:	9a04      	ldr	r2, [sp, #16]
 80035ea:	426d      	negs	r5, r5
 80035ec:	7013      	strb	r3, [r2, #0]
 80035ee:	4b5f      	ldr	r3, [pc, #380]	; (800376c <_printf_i+0x218>)
 80035f0:	270a      	movs	r7, #10
 80035f2:	9303      	str	r3, [sp, #12]
 80035f4:	e01b      	b.n	800362e <_printf_i+0xda>
 80035f6:	6805      	ldr	r5, [r0, #0]
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	0649      	lsls	r1, r1, #25
 80035fc:	d5f1      	bpl.n	80035e2 <_printf_i+0x8e>
 80035fe:	b22d      	sxth	r5, r5
 8003600:	e7ef      	b.n	80035e2 <_printf_i+0x8e>
 8003602:	680d      	ldr	r5, [r1, #0]
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	1d08      	adds	r0, r1, #4
 8003608:	6018      	str	r0, [r3, #0]
 800360a:	062e      	lsls	r6, r5, #24
 800360c:	d501      	bpl.n	8003612 <_printf_i+0xbe>
 800360e:	680d      	ldr	r5, [r1, #0]
 8003610:	e003      	b.n	800361a <_printf_i+0xc6>
 8003612:	066d      	lsls	r5, r5, #25
 8003614:	d5fb      	bpl.n	800360e <_printf_i+0xba>
 8003616:	680d      	ldr	r5, [r1, #0]
 8003618:	b2ad      	uxth	r5, r5
 800361a:	4b54      	ldr	r3, [pc, #336]	; (800376c <_printf_i+0x218>)
 800361c:	2708      	movs	r7, #8
 800361e:	9303      	str	r3, [sp, #12]
 8003620:	2a6f      	cmp	r2, #111	; 0x6f
 8003622:	d000      	beq.n	8003626 <_printf_i+0xd2>
 8003624:	3702      	adds	r7, #2
 8003626:	0023      	movs	r3, r4
 8003628:	2200      	movs	r2, #0
 800362a:	3343      	adds	r3, #67	; 0x43
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	6863      	ldr	r3, [r4, #4]
 8003630:	60a3      	str	r3, [r4, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	db03      	blt.n	800363e <_printf_i+0xea>
 8003636:	2104      	movs	r1, #4
 8003638:	6822      	ldr	r2, [r4, #0]
 800363a:	438a      	bics	r2, r1
 800363c:	6022      	str	r2, [r4, #0]
 800363e:	2d00      	cmp	r5, #0
 8003640:	d102      	bne.n	8003648 <_printf_i+0xf4>
 8003642:	9e04      	ldr	r6, [sp, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00c      	beq.n	8003662 <_printf_i+0x10e>
 8003648:	9e04      	ldr	r6, [sp, #16]
 800364a:	0028      	movs	r0, r5
 800364c:	0039      	movs	r1, r7
 800364e:	f7fc fdeb 	bl	8000228 <__aeabi_uidivmod>
 8003652:	9b03      	ldr	r3, [sp, #12]
 8003654:	3e01      	subs	r6, #1
 8003656:	5c5b      	ldrb	r3, [r3, r1]
 8003658:	7033      	strb	r3, [r6, #0]
 800365a:	002b      	movs	r3, r5
 800365c:	0005      	movs	r5, r0
 800365e:	429f      	cmp	r7, r3
 8003660:	d9f3      	bls.n	800364a <_printf_i+0xf6>
 8003662:	2f08      	cmp	r7, #8
 8003664:	d109      	bne.n	800367a <_printf_i+0x126>
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	07db      	lsls	r3, r3, #31
 800366a:	d506      	bpl.n	800367a <_printf_i+0x126>
 800366c:	6862      	ldr	r2, [r4, #4]
 800366e:	6923      	ldr	r3, [r4, #16]
 8003670:	429a      	cmp	r2, r3
 8003672:	dc02      	bgt.n	800367a <_printf_i+0x126>
 8003674:	2330      	movs	r3, #48	; 0x30
 8003676:	3e01      	subs	r6, #1
 8003678:	7033      	strb	r3, [r6, #0]
 800367a:	9b04      	ldr	r3, [sp, #16]
 800367c:	1b9b      	subs	r3, r3, r6
 800367e:	6123      	str	r3, [r4, #16]
 8003680:	9b07      	ldr	r3, [sp, #28]
 8003682:	0021      	movs	r1, r4
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	9805      	ldr	r0, [sp, #20]
 8003688:	9b06      	ldr	r3, [sp, #24]
 800368a:	aa09      	add	r2, sp, #36	; 0x24
 800368c:	f7ff fef2 	bl	8003474 <_printf_common>
 8003690:	3001      	adds	r0, #1
 8003692:	d147      	bne.n	8003724 <_printf_i+0x1d0>
 8003694:	2001      	movs	r0, #1
 8003696:	4240      	negs	r0, r0
 8003698:	b00b      	add	sp, #44	; 0x2c
 800369a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800369c:	2220      	movs	r2, #32
 800369e:	6809      	ldr	r1, [r1, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	6022      	str	r2, [r4, #0]
 80036a4:	2278      	movs	r2, #120	; 0x78
 80036a6:	4932      	ldr	r1, [pc, #200]	; (8003770 <_printf_i+0x21c>)
 80036a8:	9103      	str	r1, [sp, #12]
 80036aa:	0021      	movs	r1, r4
 80036ac:	3145      	adds	r1, #69	; 0x45
 80036ae:	700a      	strb	r2, [r1, #0]
 80036b0:	6819      	ldr	r1, [r3, #0]
 80036b2:	6822      	ldr	r2, [r4, #0]
 80036b4:	c920      	ldmia	r1!, {r5}
 80036b6:	0610      	lsls	r0, r2, #24
 80036b8:	d402      	bmi.n	80036c0 <_printf_i+0x16c>
 80036ba:	0650      	lsls	r0, r2, #25
 80036bc:	d500      	bpl.n	80036c0 <_printf_i+0x16c>
 80036be:	b2ad      	uxth	r5, r5
 80036c0:	6019      	str	r1, [r3, #0]
 80036c2:	07d3      	lsls	r3, r2, #31
 80036c4:	d502      	bpl.n	80036cc <_printf_i+0x178>
 80036c6:	2320      	movs	r3, #32
 80036c8:	4313      	orrs	r3, r2
 80036ca:	6023      	str	r3, [r4, #0]
 80036cc:	2710      	movs	r7, #16
 80036ce:	2d00      	cmp	r5, #0
 80036d0:	d1a9      	bne.n	8003626 <_printf_i+0xd2>
 80036d2:	2220      	movs	r2, #32
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	4393      	bics	r3, r2
 80036d8:	6023      	str	r3, [r4, #0]
 80036da:	e7a4      	b.n	8003626 <_printf_i+0xd2>
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	680d      	ldr	r5, [r1, #0]
 80036e0:	1d10      	adds	r0, r2, #4
 80036e2:	6949      	ldr	r1, [r1, #20]
 80036e4:	6018      	str	r0, [r3, #0]
 80036e6:	6813      	ldr	r3, [r2, #0]
 80036e8:	062e      	lsls	r6, r5, #24
 80036ea:	d501      	bpl.n	80036f0 <_printf_i+0x19c>
 80036ec:	6019      	str	r1, [r3, #0]
 80036ee:	e002      	b.n	80036f6 <_printf_i+0x1a2>
 80036f0:	066d      	lsls	r5, r5, #25
 80036f2:	d5fb      	bpl.n	80036ec <_printf_i+0x198>
 80036f4:	8019      	strh	r1, [r3, #0]
 80036f6:	2300      	movs	r3, #0
 80036f8:	9e04      	ldr	r6, [sp, #16]
 80036fa:	6123      	str	r3, [r4, #16]
 80036fc:	e7c0      	b.n	8003680 <_printf_i+0x12c>
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	1d11      	adds	r1, r2, #4
 8003702:	6019      	str	r1, [r3, #0]
 8003704:	6816      	ldr	r6, [r2, #0]
 8003706:	2100      	movs	r1, #0
 8003708:	0030      	movs	r0, r6
 800370a:	6862      	ldr	r2, [r4, #4]
 800370c:	f000 f994 	bl	8003a38 <memchr>
 8003710:	2800      	cmp	r0, #0
 8003712:	d001      	beq.n	8003718 <_printf_i+0x1c4>
 8003714:	1b80      	subs	r0, r0, r6
 8003716:	6060      	str	r0, [r4, #4]
 8003718:	6863      	ldr	r3, [r4, #4]
 800371a:	6123      	str	r3, [r4, #16]
 800371c:	2300      	movs	r3, #0
 800371e:	9a04      	ldr	r2, [sp, #16]
 8003720:	7013      	strb	r3, [r2, #0]
 8003722:	e7ad      	b.n	8003680 <_printf_i+0x12c>
 8003724:	0032      	movs	r2, r6
 8003726:	6923      	ldr	r3, [r4, #16]
 8003728:	9906      	ldr	r1, [sp, #24]
 800372a:	9805      	ldr	r0, [sp, #20]
 800372c:	9d07      	ldr	r5, [sp, #28]
 800372e:	47a8      	blx	r5
 8003730:	3001      	adds	r0, #1
 8003732:	d0af      	beq.n	8003694 <_printf_i+0x140>
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	079b      	lsls	r3, r3, #30
 8003738:	d415      	bmi.n	8003766 <_printf_i+0x212>
 800373a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800373c:	68e0      	ldr	r0, [r4, #12]
 800373e:	4298      	cmp	r0, r3
 8003740:	daaa      	bge.n	8003698 <_printf_i+0x144>
 8003742:	0018      	movs	r0, r3
 8003744:	e7a8      	b.n	8003698 <_printf_i+0x144>
 8003746:	0022      	movs	r2, r4
 8003748:	2301      	movs	r3, #1
 800374a:	9906      	ldr	r1, [sp, #24]
 800374c:	9805      	ldr	r0, [sp, #20]
 800374e:	9e07      	ldr	r6, [sp, #28]
 8003750:	3219      	adds	r2, #25
 8003752:	47b0      	blx	r6
 8003754:	3001      	adds	r0, #1
 8003756:	d09d      	beq.n	8003694 <_printf_i+0x140>
 8003758:	3501      	adds	r5, #1
 800375a:	68e3      	ldr	r3, [r4, #12]
 800375c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	42ab      	cmp	r3, r5
 8003762:	dcf0      	bgt.n	8003746 <_printf_i+0x1f2>
 8003764:	e7e9      	b.n	800373a <_printf_i+0x1e6>
 8003766:	2500      	movs	r5, #0
 8003768:	e7f7      	b.n	800375a <_printf_i+0x206>
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	08003d57 	.word	0x08003d57
 8003770:	08003d68 	.word	0x08003d68

08003774 <__sflush_r>:
 8003774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003776:	898b      	ldrh	r3, [r1, #12]
 8003778:	0005      	movs	r5, r0
 800377a:	000c      	movs	r4, r1
 800377c:	071a      	lsls	r2, r3, #28
 800377e:	d45c      	bmi.n	800383a <__sflush_r+0xc6>
 8003780:	684a      	ldr	r2, [r1, #4]
 8003782:	2a00      	cmp	r2, #0
 8003784:	dc04      	bgt.n	8003790 <__sflush_r+0x1c>
 8003786:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003788:	2a00      	cmp	r2, #0
 800378a:	dc01      	bgt.n	8003790 <__sflush_r+0x1c>
 800378c:	2000      	movs	r0, #0
 800378e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003790:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003792:	2f00      	cmp	r7, #0
 8003794:	d0fa      	beq.n	800378c <__sflush_r+0x18>
 8003796:	2200      	movs	r2, #0
 8003798:	2080      	movs	r0, #128	; 0x80
 800379a:	682e      	ldr	r6, [r5, #0]
 800379c:	602a      	str	r2, [r5, #0]
 800379e:	001a      	movs	r2, r3
 80037a0:	0140      	lsls	r0, r0, #5
 80037a2:	6a21      	ldr	r1, [r4, #32]
 80037a4:	4002      	ands	r2, r0
 80037a6:	4203      	tst	r3, r0
 80037a8:	d034      	beq.n	8003814 <__sflush_r+0xa0>
 80037aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037ac:	89a3      	ldrh	r3, [r4, #12]
 80037ae:	075b      	lsls	r3, r3, #29
 80037b0:	d506      	bpl.n	80037c0 <__sflush_r+0x4c>
 80037b2:	6863      	ldr	r3, [r4, #4]
 80037b4:	1ac0      	subs	r0, r0, r3
 80037b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <__sflush_r+0x4c>
 80037bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037be:	1ac0      	subs	r0, r0, r3
 80037c0:	0002      	movs	r2, r0
 80037c2:	2300      	movs	r3, #0
 80037c4:	0028      	movs	r0, r5
 80037c6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80037c8:	6a21      	ldr	r1, [r4, #32]
 80037ca:	47b8      	blx	r7
 80037cc:	89a2      	ldrh	r2, [r4, #12]
 80037ce:	1c43      	adds	r3, r0, #1
 80037d0:	d106      	bne.n	80037e0 <__sflush_r+0x6c>
 80037d2:	6829      	ldr	r1, [r5, #0]
 80037d4:	291d      	cmp	r1, #29
 80037d6:	d82c      	bhi.n	8003832 <__sflush_r+0xbe>
 80037d8:	4b2a      	ldr	r3, [pc, #168]	; (8003884 <__sflush_r+0x110>)
 80037da:	410b      	asrs	r3, r1
 80037dc:	07db      	lsls	r3, r3, #31
 80037de:	d428      	bmi.n	8003832 <__sflush_r+0xbe>
 80037e0:	2300      	movs	r3, #0
 80037e2:	6063      	str	r3, [r4, #4]
 80037e4:	6923      	ldr	r3, [r4, #16]
 80037e6:	6023      	str	r3, [r4, #0]
 80037e8:	04d2      	lsls	r2, r2, #19
 80037ea:	d505      	bpl.n	80037f8 <__sflush_r+0x84>
 80037ec:	1c43      	adds	r3, r0, #1
 80037ee:	d102      	bne.n	80037f6 <__sflush_r+0x82>
 80037f0:	682b      	ldr	r3, [r5, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d100      	bne.n	80037f8 <__sflush_r+0x84>
 80037f6:	6560      	str	r0, [r4, #84]	; 0x54
 80037f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037fa:	602e      	str	r6, [r5, #0]
 80037fc:	2900      	cmp	r1, #0
 80037fe:	d0c5      	beq.n	800378c <__sflush_r+0x18>
 8003800:	0023      	movs	r3, r4
 8003802:	3344      	adds	r3, #68	; 0x44
 8003804:	4299      	cmp	r1, r3
 8003806:	d002      	beq.n	800380e <__sflush_r+0x9a>
 8003808:	0028      	movs	r0, r5
 800380a:	f7ff fbe7 	bl	8002fdc <_free_r>
 800380e:	2000      	movs	r0, #0
 8003810:	6360      	str	r0, [r4, #52]	; 0x34
 8003812:	e7bc      	b.n	800378e <__sflush_r+0x1a>
 8003814:	2301      	movs	r3, #1
 8003816:	0028      	movs	r0, r5
 8003818:	47b8      	blx	r7
 800381a:	1c43      	adds	r3, r0, #1
 800381c:	d1c6      	bne.n	80037ac <__sflush_r+0x38>
 800381e:	682b      	ldr	r3, [r5, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0c3      	beq.n	80037ac <__sflush_r+0x38>
 8003824:	2b1d      	cmp	r3, #29
 8003826:	d001      	beq.n	800382c <__sflush_r+0xb8>
 8003828:	2b16      	cmp	r3, #22
 800382a:	d101      	bne.n	8003830 <__sflush_r+0xbc>
 800382c:	602e      	str	r6, [r5, #0]
 800382e:	e7ad      	b.n	800378c <__sflush_r+0x18>
 8003830:	89a2      	ldrh	r2, [r4, #12]
 8003832:	2340      	movs	r3, #64	; 0x40
 8003834:	4313      	orrs	r3, r2
 8003836:	81a3      	strh	r3, [r4, #12]
 8003838:	e7a9      	b.n	800378e <__sflush_r+0x1a>
 800383a:	690e      	ldr	r6, [r1, #16]
 800383c:	2e00      	cmp	r6, #0
 800383e:	d0a5      	beq.n	800378c <__sflush_r+0x18>
 8003840:	680f      	ldr	r7, [r1, #0]
 8003842:	600e      	str	r6, [r1, #0]
 8003844:	1bba      	subs	r2, r7, r6
 8003846:	9201      	str	r2, [sp, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	079b      	lsls	r3, r3, #30
 800384c:	d100      	bne.n	8003850 <__sflush_r+0xdc>
 800384e:	694a      	ldr	r2, [r1, #20]
 8003850:	60a2      	str	r2, [r4, #8]
 8003852:	9b01      	ldr	r3, [sp, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	dd99      	ble.n	800378c <__sflush_r+0x18>
 8003858:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800385a:	0032      	movs	r2, r6
 800385c:	001f      	movs	r7, r3
 800385e:	0028      	movs	r0, r5
 8003860:	9b01      	ldr	r3, [sp, #4]
 8003862:	6a21      	ldr	r1, [r4, #32]
 8003864:	47b8      	blx	r7
 8003866:	2800      	cmp	r0, #0
 8003868:	dc06      	bgt.n	8003878 <__sflush_r+0x104>
 800386a:	2340      	movs	r3, #64	; 0x40
 800386c:	2001      	movs	r0, #1
 800386e:	89a2      	ldrh	r2, [r4, #12]
 8003870:	4240      	negs	r0, r0
 8003872:	4313      	orrs	r3, r2
 8003874:	81a3      	strh	r3, [r4, #12]
 8003876:	e78a      	b.n	800378e <__sflush_r+0x1a>
 8003878:	9b01      	ldr	r3, [sp, #4]
 800387a:	1836      	adds	r6, r6, r0
 800387c:	1a1b      	subs	r3, r3, r0
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	e7e7      	b.n	8003852 <__sflush_r+0xde>
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	dfbffffe 	.word	0xdfbffffe

08003888 <_fflush_r>:
 8003888:	690b      	ldr	r3, [r1, #16]
 800388a:	b570      	push	{r4, r5, r6, lr}
 800388c:	0005      	movs	r5, r0
 800388e:	000c      	movs	r4, r1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d102      	bne.n	800389a <_fflush_r+0x12>
 8003894:	2500      	movs	r5, #0
 8003896:	0028      	movs	r0, r5
 8003898:	bd70      	pop	{r4, r5, r6, pc}
 800389a:	2800      	cmp	r0, #0
 800389c:	d004      	beq.n	80038a8 <_fflush_r+0x20>
 800389e:	6a03      	ldr	r3, [r0, #32]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <_fflush_r+0x20>
 80038a4:	f7ff f8e6 	bl	8002a74 <__sinit>
 80038a8:	220c      	movs	r2, #12
 80038aa:	5ea3      	ldrsh	r3, [r4, r2]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f1      	beq.n	8003894 <_fflush_r+0xc>
 80038b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80038b2:	07d2      	lsls	r2, r2, #31
 80038b4:	d404      	bmi.n	80038c0 <_fflush_r+0x38>
 80038b6:	059b      	lsls	r3, r3, #22
 80038b8:	d402      	bmi.n	80038c0 <_fflush_r+0x38>
 80038ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038bc:	f7ff fb6e 	bl	8002f9c <__retarget_lock_acquire_recursive>
 80038c0:	0028      	movs	r0, r5
 80038c2:	0021      	movs	r1, r4
 80038c4:	f7ff ff56 	bl	8003774 <__sflush_r>
 80038c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038ca:	0005      	movs	r5, r0
 80038cc:	07db      	lsls	r3, r3, #31
 80038ce:	d4e2      	bmi.n	8003896 <_fflush_r+0xe>
 80038d0:	89a3      	ldrh	r3, [r4, #12]
 80038d2:	059b      	lsls	r3, r3, #22
 80038d4:	d4df      	bmi.n	8003896 <_fflush_r+0xe>
 80038d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038d8:	f7ff fb61 	bl	8002f9e <__retarget_lock_release_recursive>
 80038dc:	e7db      	b.n	8003896 <_fflush_r+0xe>
	...

080038e0 <fiprintf>:
 80038e0:	b40e      	push	{r1, r2, r3}
 80038e2:	b517      	push	{r0, r1, r2, r4, lr}
 80038e4:	4c05      	ldr	r4, [pc, #20]	; (80038fc <fiprintf+0x1c>)
 80038e6:	ab05      	add	r3, sp, #20
 80038e8:	cb04      	ldmia	r3!, {r2}
 80038ea:	0001      	movs	r1, r0
 80038ec:	6820      	ldr	r0, [r4, #0]
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	f7ff fca4 	bl	800323c <_vfiprintf_r>
 80038f4:	bc1e      	pop	{r1, r2, r3, r4}
 80038f6:	bc08      	pop	{r3}
 80038f8:	b003      	add	sp, #12
 80038fa:	4718      	bx	r3
 80038fc:	20000064 	.word	0x20000064

08003900 <__swhatbuf_r>:
 8003900:	b570      	push	{r4, r5, r6, lr}
 8003902:	000e      	movs	r6, r1
 8003904:	001d      	movs	r5, r3
 8003906:	230e      	movs	r3, #14
 8003908:	5ec9      	ldrsh	r1, [r1, r3]
 800390a:	0014      	movs	r4, r2
 800390c:	b096      	sub	sp, #88	; 0x58
 800390e:	2900      	cmp	r1, #0
 8003910:	da0c      	bge.n	800392c <__swhatbuf_r+0x2c>
 8003912:	89b2      	ldrh	r2, [r6, #12]
 8003914:	2380      	movs	r3, #128	; 0x80
 8003916:	0011      	movs	r1, r2
 8003918:	4019      	ands	r1, r3
 800391a:	421a      	tst	r2, r3
 800391c:	d013      	beq.n	8003946 <__swhatbuf_r+0x46>
 800391e:	2100      	movs	r1, #0
 8003920:	3b40      	subs	r3, #64	; 0x40
 8003922:	2000      	movs	r0, #0
 8003924:	6029      	str	r1, [r5, #0]
 8003926:	6023      	str	r3, [r4, #0]
 8003928:	b016      	add	sp, #88	; 0x58
 800392a:	bd70      	pop	{r4, r5, r6, pc}
 800392c:	466a      	mov	r2, sp
 800392e:	f000 f84d 	bl	80039cc <_fstat_r>
 8003932:	2800      	cmp	r0, #0
 8003934:	dbed      	blt.n	8003912 <__swhatbuf_r+0x12>
 8003936:	23f0      	movs	r3, #240	; 0xf0
 8003938:	9901      	ldr	r1, [sp, #4]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	4019      	ands	r1, r3
 800393e:	4b03      	ldr	r3, [pc, #12]	; (800394c <__swhatbuf_r+0x4c>)
 8003940:	18c9      	adds	r1, r1, r3
 8003942:	424b      	negs	r3, r1
 8003944:	4159      	adcs	r1, r3
 8003946:	2380      	movs	r3, #128	; 0x80
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	e7ea      	b.n	8003922 <__swhatbuf_r+0x22>
 800394c:	ffffe000 	.word	0xffffe000

08003950 <__smakebuf_r>:
 8003950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003952:	2602      	movs	r6, #2
 8003954:	898b      	ldrh	r3, [r1, #12]
 8003956:	0005      	movs	r5, r0
 8003958:	000c      	movs	r4, r1
 800395a:	4233      	tst	r3, r6
 800395c:	d006      	beq.n	800396c <__smakebuf_r+0x1c>
 800395e:	0023      	movs	r3, r4
 8003960:	3347      	adds	r3, #71	; 0x47
 8003962:	6023      	str	r3, [r4, #0]
 8003964:	6123      	str	r3, [r4, #16]
 8003966:	2301      	movs	r3, #1
 8003968:	6163      	str	r3, [r4, #20]
 800396a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800396c:	466a      	mov	r2, sp
 800396e:	ab01      	add	r3, sp, #4
 8003970:	f7ff ffc6 	bl	8003900 <__swhatbuf_r>
 8003974:	9900      	ldr	r1, [sp, #0]
 8003976:	0007      	movs	r7, r0
 8003978:	0028      	movs	r0, r5
 800397a:	f7ff fba5 	bl	80030c8 <_malloc_r>
 800397e:	2800      	cmp	r0, #0
 8003980:	d108      	bne.n	8003994 <__smakebuf_r+0x44>
 8003982:	220c      	movs	r2, #12
 8003984:	5ea3      	ldrsh	r3, [r4, r2]
 8003986:	059a      	lsls	r2, r3, #22
 8003988:	d4ef      	bmi.n	800396a <__smakebuf_r+0x1a>
 800398a:	2203      	movs	r2, #3
 800398c:	4393      	bics	r3, r2
 800398e:	431e      	orrs	r6, r3
 8003990:	81a6      	strh	r6, [r4, #12]
 8003992:	e7e4      	b.n	800395e <__smakebuf_r+0xe>
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	89a2      	ldrh	r2, [r4, #12]
 8003998:	6020      	str	r0, [r4, #0]
 800399a:	4313      	orrs	r3, r2
 800399c:	81a3      	strh	r3, [r4, #12]
 800399e:	9b00      	ldr	r3, [sp, #0]
 80039a0:	6120      	str	r0, [r4, #16]
 80039a2:	6163      	str	r3, [r4, #20]
 80039a4:	9b01      	ldr	r3, [sp, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00c      	beq.n	80039c4 <__smakebuf_r+0x74>
 80039aa:	0028      	movs	r0, r5
 80039ac:	230e      	movs	r3, #14
 80039ae:	5ee1      	ldrsh	r1, [r4, r3]
 80039b0:	f000 f81e 	bl	80039f0 <_isatty_r>
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d005      	beq.n	80039c4 <__smakebuf_r+0x74>
 80039b8:	2303      	movs	r3, #3
 80039ba:	89a2      	ldrh	r2, [r4, #12]
 80039bc:	439a      	bics	r2, r3
 80039be:	3b02      	subs	r3, #2
 80039c0:	4313      	orrs	r3, r2
 80039c2:	81a3      	strh	r3, [r4, #12]
 80039c4:	89a3      	ldrh	r3, [r4, #12]
 80039c6:	433b      	orrs	r3, r7
 80039c8:	81a3      	strh	r3, [r4, #12]
 80039ca:	e7ce      	b.n	800396a <__smakebuf_r+0x1a>

080039cc <_fstat_r>:
 80039cc:	2300      	movs	r3, #0
 80039ce:	b570      	push	{r4, r5, r6, lr}
 80039d0:	4d06      	ldr	r5, [pc, #24]	; (80039ec <_fstat_r+0x20>)
 80039d2:	0004      	movs	r4, r0
 80039d4:	0008      	movs	r0, r1
 80039d6:	0011      	movs	r1, r2
 80039d8:	602b      	str	r3, [r5, #0]
 80039da:	f7fc ffb8 	bl	800094e <_fstat>
 80039de:	1c43      	adds	r3, r0, #1
 80039e0:	d103      	bne.n	80039ea <_fstat_r+0x1e>
 80039e2:	682b      	ldr	r3, [r5, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d000      	beq.n	80039ea <_fstat_r+0x1e>
 80039e8:	6023      	str	r3, [r4, #0]
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
 80039ec:	200003d4 	.word	0x200003d4

080039f0 <_isatty_r>:
 80039f0:	2300      	movs	r3, #0
 80039f2:	b570      	push	{r4, r5, r6, lr}
 80039f4:	4d06      	ldr	r5, [pc, #24]	; (8003a10 <_isatty_r+0x20>)
 80039f6:	0004      	movs	r4, r0
 80039f8:	0008      	movs	r0, r1
 80039fa:	602b      	str	r3, [r5, #0]
 80039fc:	f7fc ffb5 	bl	800096a <_isatty>
 8003a00:	1c43      	adds	r3, r0, #1
 8003a02:	d103      	bne.n	8003a0c <_isatty_r+0x1c>
 8003a04:	682b      	ldr	r3, [r5, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d000      	beq.n	8003a0c <_isatty_r+0x1c>
 8003a0a:	6023      	str	r3, [r4, #0]
 8003a0c:	bd70      	pop	{r4, r5, r6, pc}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	200003d4 	.word	0x200003d4

08003a14 <_sbrk_r>:
 8003a14:	2300      	movs	r3, #0
 8003a16:	b570      	push	{r4, r5, r6, lr}
 8003a18:	4d06      	ldr	r5, [pc, #24]	; (8003a34 <_sbrk_r+0x20>)
 8003a1a:	0004      	movs	r4, r0
 8003a1c:	0008      	movs	r0, r1
 8003a1e:	602b      	str	r3, [r5, #0]
 8003a20:	f7fc ffb8 	bl	8000994 <_sbrk>
 8003a24:	1c43      	adds	r3, r0, #1
 8003a26:	d103      	bne.n	8003a30 <_sbrk_r+0x1c>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d000      	beq.n	8003a30 <_sbrk_r+0x1c>
 8003a2e:	6023      	str	r3, [r4, #0]
 8003a30:	bd70      	pop	{r4, r5, r6, pc}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	200003d4 	.word	0x200003d4

08003a38 <memchr>:
 8003a38:	b2c9      	uxtb	r1, r1
 8003a3a:	1882      	adds	r2, r0, r2
 8003a3c:	4290      	cmp	r0, r2
 8003a3e:	d101      	bne.n	8003a44 <memchr+0xc>
 8003a40:	2000      	movs	r0, #0
 8003a42:	4770      	bx	lr
 8003a44:	7803      	ldrb	r3, [r0, #0]
 8003a46:	428b      	cmp	r3, r1
 8003a48:	d0fb      	beq.n	8003a42 <memchr+0xa>
 8003a4a:	3001      	adds	r0, #1
 8003a4c:	e7f6      	b.n	8003a3c <memchr+0x4>

08003a4e <abort>:
 8003a4e:	2006      	movs	r0, #6
 8003a50:	b510      	push	{r4, lr}
 8003a52:	f000 f82d 	bl	8003ab0 <raise>
 8003a56:	2001      	movs	r0, #1
 8003a58:	f7fc ff46 	bl	80008e8 <_exit>

08003a5c <_raise_r>:
 8003a5c:	b570      	push	{r4, r5, r6, lr}
 8003a5e:	0004      	movs	r4, r0
 8003a60:	000d      	movs	r5, r1
 8003a62:	291f      	cmp	r1, #31
 8003a64:	d904      	bls.n	8003a70 <_raise_r+0x14>
 8003a66:	2316      	movs	r3, #22
 8003a68:	6003      	str	r3, [r0, #0]
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	4240      	negs	r0, r0
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}
 8003a70:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d004      	beq.n	8003a80 <_raise_r+0x24>
 8003a76:	008a      	lsls	r2, r1, #2
 8003a78:	189b      	adds	r3, r3, r2
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	2a00      	cmp	r2, #0
 8003a7e:	d108      	bne.n	8003a92 <_raise_r+0x36>
 8003a80:	0020      	movs	r0, r4
 8003a82:	f000 f831 	bl	8003ae8 <_getpid_r>
 8003a86:	002a      	movs	r2, r5
 8003a88:	0001      	movs	r1, r0
 8003a8a:	0020      	movs	r0, r4
 8003a8c:	f000 f81a 	bl	8003ac4 <_kill_r>
 8003a90:	e7ed      	b.n	8003a6e <_raise_r+0x12>
 8003a92:	2000      	movs	r0, #0
 8003a94:	2a01      	cmp	r2, #1
 8003a96:	d0ea      	beq.n	8003a6e <_raise_r+0x12>
 8003a98:	1c51      	adds	r1, r2, #1
 8003a9a:	d103      	bne.n	8003aa4 <_raise_r+0x48>
 8003a9c:	2316      	movs	r3, #22
 8003a9e:	3001      	adds	r0, #1
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	e7e4      	b.n	8003a6e <_raise_r+0x12>
 8003aa4:	2400      	movs	r4, #0
 8003aa6:	0028      	movs	r0, r5
 8003aa8:	601c      	str	r4, [r3, #0]
 8003aaa:	4790      	blx	r2
 8003aac:	0020      	movs	r0, r4
 8003aae:	e7de      	b.n	8003a6e <_raise_r+0x12>

08003ab0 <raise>:
 8003ab0:	b510      	push	{r4, lr}
 8003ab2:	4b03      	ldr	r3, [pc, #12]	; (8003ac0 <raise+0x10>)
 8003ab4:	0001      	movs	r1, r0
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	f7ff ffd0 	bl	8003a5c <_raise_r>
 8003abc:	bd10      	pop	{r4, pc}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	20000064 	.word	0x20000064

08003ac4 <_kill_r>:
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	b570      	push	{r4, r5, r6, lr}
 8003ac8:	4d06      	ldr	r5, [pc, #24]	; (8003ae4 <_kill_r+0x20>)
 8003aca:	0004      	movs	r4, r0
 8003acc:	0008      	movs	r0, r1
 8003ace:	0011      	movs	r1, r2
 8003ad0:	602b      	str	r3, [r5, #0]
 8003ad2:	f7fc fef9 	bl	80008c8 <_kill>
 8003ad6:	1c43      	adds	r3, r0, #1
 8003ad8:	d103      	bne.n	8003ae2 <_kill_r+0x1e>
 8003ada:	682b      	ldr	r3, [r5, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d000      	beq.n	8003ae2 <_kill_r+0x1e>
 8003ae0:	6023      	str	r3, [r4, #0]
 8003ae2:	bd70      	pop	{r4, r5, r6, pc}
 8003ae4:	200003d4 	.word	0x200003d4

08003ae8 <_getpid_r>:
 8003ae8:	b510      	push	{r4, lr}
 8003aea:	f7fc fee7 	bl	80008bc <_getpid>
 8003aee:	bd10      	pop	{r4, pc}

08003af0 <_init>:
 8003af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003af6:	bc08      	pop	{r3}
 8003af8:	469e      	mov	lr, r3
 8003afa:	4770      	bx	lr

08003afc <_fini>:
 8003afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b02:	bc08      	pop	{r3}
 8003b04:	469e      	mov	lr, r3
 8003b06:	4770      	bx	lr
