
cv12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019720  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000df04  080198d0  080198d0  000298d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080277d4  080277d4  00040090  2**0
                  CONTENTS
  4 .ARM          00000008  080277d4  080277d4  000377d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080277dc  080277dc  00040090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080277dc  080277dc  000377dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080277e0  080277e0  000377e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080277e4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040090  2**0
                  CONTENTS
 10 .bss          00011050  20000090  20000090  00040090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200110e0  200110e0  00040090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00034f48  00000000  00000000  00040103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000086d1  00000000  00000000  0007504b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000025b0  00000000  00000000  0007d720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001dd1  00000000  00000000  0007fcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037656  00000000  00000000  00081aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003dbd0  00000000  00000000  000b90f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00102453  00000000  00000000  000f6cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a3b4  00000000  00000000  001f911c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  002034d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080198b8 	.word	0x080198b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	080198b8 	.word	0x080198b8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200000ac 	.word	0x200000ac
 80005ec:	2000014c 	.word	0x2000014c

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fef1 	bl	80013dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f821 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f8fd 	bl	80007fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000602:	f000 f8db 	bl	80007bc <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000606:	f000 f8af 	bl	8000768 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800060a:	f000 f883 	bl	8000714 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <main+0x48>)
 8000610:	1d3c      	adds	r4, r7, #4
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f004 febf 	bl	80053a8 <osThreadCreate>
 800062a:	4603      	mov	r3, r0
 800062c:	4a03      	ldr	r2, [pc, #12]	; (800063c <main+0x4c>)
 800062e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000630:	f004 fea3 	bl	800537a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000634:	e7fe      	b.n	8000634 <main+0x44>
 8000636:	bf00      	nop
 8000638:	080198dc 	.word	0x080198dc
 800063c:	20000434 	.word	0x20000434

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f018 fa13 	bl	8018a7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a27      	ldr	r2, [pc, #156]	; (800070c <SystemClock_Config+0xcc>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <SystemClock_Config+0xd0>)
 800068a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b4:	23a8      	movs	r3, #168	; 0xa8
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006bc:	2307      	movs	r3, #7
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 fed1 	bl	800346c <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d0:	f000 f984 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2105      	movs	r1, #5
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 f932 	bl	800395c <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fe:	f000 f96d 	bl	80009dc <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_USART2_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800074c:	f003 fe06 	bl	800435c <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f000 f941 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000034c 	.word	0x2000034c
 8000764:	40004400 	.word	0x40004400

08000768 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_USART3_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 80007a0:	f003 fddc 	bl	800435c <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f917 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000390 	.word	0x20000390
 80007b8:	40004800 	.word	0x40004800

080007bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_DMA_Init+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <MX_DMA_Init+0x3c>)
 80007cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_DMA_Init+0x3c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2105      	movs	r1, #5
 80007e2:	2010      	movs	r0, #16
 80007e4:	f000 ff18 	bl	8001618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80007e8:	2010      	movs	r0, #16
 80007ea:	f000 ff31 	bl	8001650 <HAL_NVIC_EnableIRQ>

}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08c      	sub	sp, #48	; 0x30
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
 8000816:	4b5b      	ldr	r3, [pc, #364]	; (8000984 <MX_GPIO_Init+0x188>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a5a      	ldr	r2, [pc, #360]	; (8000984 <MX_GPIO_Init+0x188>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b58      	ldr	r3, [pc, #352]	; (8000984 <MX_GPIO_Init+0x188>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	4b54      	ldr	r3, [pc, #336]	; (8000984 <MX_GPIO_Init+0x188>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a53      	ldr	r2, [pc, #332]	; (8000984 <MX_GPIO_Init+0x188>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b51      	ldr	r3, [pc, #324]	; (8000984 <MX_GPIO_Init+0x188>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b4d      	ldr	r3, [pc, #308]	; (8000984 <MX_GPIO_Init+0x188>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a4c      	ldr	r2, [pc, #304]	; (8000984 <MX_GPIO_Init+0x188>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b4a      	ldr	r3, [pc, #296]	; (8000984 <MX_GPIO_Init+0x188>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b46      	ldr	r3, [pc, #280]	; (8000984 <MX_GPIO_Init+0x188>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a45      	ldr	r2, [pc, #276]	; (8000984 <MX_GPIO_Init+0x188>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b43      	ldr	r3, [pc, #268]	; (8000984 <MX_GPIO_Init+0x188>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b3f      	ldr	r3, [pc, #252]	; (8000984 <MX_GPIO_Init+0x188>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a3e      	ldr	r2, [pc, #248]	; (8000984 <MX_GPIO_Init+0x188>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b3c      	ldr	r3, [pc, #240]	; (8000984 <MX_GPIO_Init+0x188>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b38      	ldr	r3, [pc, #224]	; (8000984 <MX_GPIO_Init+0x188>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a37      	ldr	r2, [pc, #220]	; (8000984 <MX_GPIO_Init+0x188>)
 80008a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b35      	ldr	r3, [pc, #212]	; (8000984 <MX_GPIO_Init+0x188>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f244 0181 	movw	r1, #16513	; 0x4081
 80008c0:	4831      	ldr	r0, [pc, #196]	; (8000988 <MX_GPIO_Init+0x18c>)
 80008c2:	f002 fdb9 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2140      	movs	r1, #64	; 0x40
 80008ca:	4830      	ldr	r0, [pc, #192]	; (800098c <MX_GPIO_Init+0x190>)
 80008cc:	f002 fdb4 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	482a      	ldr	r0, [pc, #168]	; (8000990 <MX_GPIO_Init+0x194>)
 80008e8:	f002 fbfa 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008ec:	f244 0381 	movw	r3, #16513	; 0x4081
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4820      	ldr	r0, [pc, #128]	; (8000988 <MX_GPIO_Init+0x18c>)
 8000906:	f002 fbeb 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800090a:	2340      	movs	r3, #64	; 0x40
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	481a      	ldr	r0, [pc, #104]	; (800098c <MX_GPIO_Init+0x190>)
 8000922:	f002 fbdd 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000926:	2380      	movs	r3, #128	; 0x80
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4814      	ldr	r0, [pc, #80]	; (800098c <MX_GPIO_Init+0x190>)
 800093a:	f002 fbd1 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800093e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000950:	230a      	movs	r3, #10
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	480e      	ldr	r0, [pc, #56]	; (8000994 <MX_GPIO_Init+0x198>)
 800095c:	f002 fbc0 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4807      	ldr	r0, [pc, #28]	; (8000994 <MX_GPIO_Init+0x198>)
 8000976:	f002 fbb3 	bl	80030e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097a:	bf00      	nop
 800097c:	3730      	adds	r7, #48	; 0x30
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40020400 	.word	0x40020400
 800098c:	40021800 	.word	0x40021800
 8000990:	40020800 	.word	0x40020800
 8000994:	40020000 	.word	0x40020000

08000998 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80009a0:	f003 ff9e 	bl	80048e0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpecho_init();
 80009a4:	f000 fb08 	bl	8000fb8 <tcpecho_init>

  /* Initialize HTTP server */
  httpd_init();
 80009a8:	f00a fdc2 	bl	800b530 <httpd_init>

  telnet_init();
 80009ac:	f000 fb78 	bl	80010a0 <telnet_init>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009b0:	2001      	movs	r0, #1
 80009b2:	f004 fd45 	bl	8005440 <osDelay>
 80009b6:	e7fb      	b.n	80009b0 <StartDefaultTask+0x18>

080009b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d101      	bne.n	80009ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ca:	f000 fd29 	bl	8001420 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40002000 	.word	0x40002000

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <HAL_MspInit+0x54>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a11      	ldr	r2, [pc, #68]	; (8000a3c <HAL_MspInit+0x54>)
 80009f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <HAL_MspInit+0x54>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <HAL_MspInit+0x54>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <HAL_MspInit+0x54>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_MspInit+0x54>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	210f      	movs	r1, #15
 8000a2a:	f06f 0001 	mvn.w	r0, #1
 8000a2e:	f000 fdf3 	bl	8001618 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a59      	ldr	r2, [pc, #356]	; (8000bc4 <HAL_UART_MspInit+0x184>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d179      	bne.n	8000b56 <HAL_UART_MspInit+0x116>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
 8000a66:	4b58      	ldr	r3, [pc, #352]	; (8000bc8 <HAL_UART_MspInit+0x188>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a57      	ldr	r2, [pc, #348]	; (8000bc8 <HAL_UART_MspInit+0x188>)
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b55      	ldr	r3, [pc, #340]	; (8000bc8 <HAL_UART_MspInit+0x188>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	4b51      	ldr	r3, [pc, #324]	; (8000bc8 <HAL_UART_MspInit+0x188>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a50      	ldr	r2, [pc, #320]	; (8000bc8 <HAL_UART_MspInit+0x188>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b4e      	ldr	r3, [pc, #312]	; (8000bc8 <HAL_UART_MspInit+0x188>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b4a      	ldr	r3, [pc, #296]	; (8000bc8 <HAL_UART_MspInit+0x188>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a49      	ldr	r2, [pc, #292]	; (8000bc8 <HAL_UART_MspInit+0x188>)
 8000aa4:	f043 0308 	orr.w	r3, r3, #8
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b47      	ldr	r3, [pc, #284]	; (8000bc8 <HAL_UART_MspInit+0x188>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0308 	and.w	r3, r3, #8
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ab6:	2308      	movs	r3, #8
 8000ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac6:	2307      	movs	r3, #7
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	483e      	ldr	r0, [pc, #248]	; (8000bcc <HAL_UART_MspInit+0x18c>)
 8000ad2:	f002 fb05 	bl	80030e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ad6:	2320      	movs	r3, #32
 8000ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	4837      	ldr	r0, [pc, #220]	; (8000bd0 <HAL_UART_MspInit+0x190>)
 8000af2:	f002 faf5 	bl	80030e0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000af6:	4b37      	ldr	r3, [pc, #220]	; (8000bd4 <HAL_UART_MspInit+0x194>)
 8000af8:	4a37      	ldr	r2, [pc, #220]	; (8000bd8 <HAL_UART_MspInit+0x198>)
 8000afa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000afc:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <HAL_UART_MspInit+0x194>)
 8000afe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b02:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b04:	4b33      	ldr	r3, [pc, #204]	; (8000bd4 <HAL_UART_MspInit+0x194>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0a:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <HAL_UART_MspInit+0x194>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b10:	4b30      	ldr	r3, [pc, #192]	; (8000bd4 <HAL_UART_MspInit+0x194>)
 8000b12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b16:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b18:	4b2e      	ldr	r3, [pc, #184]	; (8000bd4 <HAL_UART_MspInit+0x194>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b1e:	4b2d      	ldr	r3, [pc, #180]	; (8000bd4 <HAL_UART_MspInit+0x194>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000b24:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <HAL_UART_MspInit+0x194>)
 8000b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b2a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b2c:	4b29      	ldr	r3, [pc, #164]	; (8000bd4 <HAL_UART_MspInit+0x194>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b32:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <HAL_UART_MspInit+0x194>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b38:	4826      	ldr	r0, [pc, #152]	; (8000bd4 <HAL_UART_MspInit+0x194>)
 8000b3a:	f000 fd97 	bl	800166c <HAL_DMA_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8000b44:	f7ff ff4a 	bl	80009dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a22      	ldr	r2, [pc, #136]	; (8000bd4 <HAL_UART_MspInit+0x194>)
 8000b4c:	639a      	str	r2, [r3, #56]	; 0x38
 8000b4e:	4a21      	ldr	r2, [pc, #132]	; (8000bd4 <HAL_UART_MspInit+0x194>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b54:	e031      	b.n	8000bba <HAL_UART_MspInit+0x17a>
  else if(huart->Instance==USART3)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a20      	ldr	r2, [pc, #128]	; (8000bdc <HAL_UART_MspInit+0x19c>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d12c      	bne.n	8000bba <HAL_UART_MspInit+0x17a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_UART_MspInit+0x188>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_UART_MspInit+0x188>)
 8000b6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_UART_MspInit+0x188>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_UART_MspInit+0x188>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <HAL_UART_MspInit+0x188>)
 8000b86:	f043 0308 	orr.w	r3, r3, #8
 8000b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_UART_MspInit+0x188>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000baa:	2307      	movs	r3, #7
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <HAL_UART_MspInit+0x190>)
 8000bb6:	f002 fa93 	bl	80030e0 <HAL_GPIO_Init>
}
 8000bba:	bf00      	nop
 8000bbc:	3730      	adds	r7, #48	; 0x30
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40004400 	.word	0x40004400
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	40020c00 	.word	0x40020c00
 8000bd4:	200003d4 	.word	0x200003d4
 8000bd8:	40026088 	.word	0x40026088
 8000bdc:	40004800 	.word	0x40004800

08000be0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08e      	sub	sp, #56	; 0x38
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	4b33      	ldr	r3, [pc, #204]	; (8000cc4 <HAL_InitTick+0xe4>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	4a32      	ldr	r2, [pc, #200]	; (8000cc4 <HAL_InitTick+0xe4>)
 8000bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000c00:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <HAL_InitTick+0xe4>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c0c:	f107 0210 	add.w	r2, r7, #16
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4611      	mov	r1, r2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f003 f8c0 	bl	8003d9c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c1c:	6a3b      	ldr	r3, [r7, #32]
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d103      	bne.n	8000c2e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c26:	f003 f891 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 8000c2a:	6378      	str	r0, [r7, #52]	; 0x34
 8000c2c:	e004      	b.n	8000c38 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c2e:	f003 f88d 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 8000c32:	4603      	mov	r3, r0
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c3a:	4a23      	ldr	r2, [pc, #140]	; (8000cc8 <HAL_InitTick+0xe8>)
 8000c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c40:	0c9b      	lsrs	r3, r3, #18
 8000c42:	3b01      	subs	r3, #1
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <HAL_InitTick+0xec>)
 8000c48:	4a21      	ldr	r2, [pc, #132]	; (8000cd0 <HAL_InitTick+0xf0>)
 8000c4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <HAL_InitTick+0xec>)
 8000c4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c52:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000c54:	4a1d      	ldr	r2, [pc, #116]	; (8000ccc <HAL_InitTick+0xec>)
 8000c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c58:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <HAL_InitTick+0xec>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <HAL_InitTick+0xec>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c66:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <HAL_InitTick+0xec>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000c6c:	4817      	ldr	r0, [pc, #92]	; (8000ccc <HAL_InitTick+0xec>)
 8000c6e:	f003 f8c7 	bl	8003e00 <HAL_TIM_Base_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d11b      	bne.n	8000cb8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000c80:	4812      	ldr	r0, [pc, #72]	; (8000ccc <HAL_InitTick+0xec>)
 8000c82:	f003 f917 	bl	8003eb4 <HAL_TIM_Base_Start_IT>
 8000c86:	4603      	mov	r3, r0
 8000c88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d111      	bne.n	8000cb8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000c94:	202d      	movs	r0, #45	; 0x2d
 8000c96:	f000 fcdb 	bl	8001650 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d808      	bhi.n	8000cb2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	202d      	movs	r0, #45	; 0x2d
 8000ca6:	f000 fcb7 	bl	8001618 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000caa:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <HAL_InitTick+0xf4>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6013      	str	r3, [r2, #0]
 8000cb0:	e002      	b.n	8000cb8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3738      	adds	r7, #56	; 0x38
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	431bde83 	.word	0x431bde83
 8000ccc:	20000438 	.word	0x20000438
 8000cd0:	40002000 	.word	0x40002000
 8000cd4:	20000004 	.word	0x20000004

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <NMI_Handler+0x4>

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <DMA1_Stream5_IRQHandler+0x10>)
 8000d0a:	f000 fd5d 	bl	80017c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200003d4 	.word	0x200003d4

08000d18 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000d1e:	f003 f939 	bl	8003f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000438 	.word	0x20000438

08000d2c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <ETH_IRQHandler+0x10>)
 8000d32:	f001 faff 	bl	8002334 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20004fa0 	.word	0x20004fa0

08000d40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return 1;
 8000d44:	2301      	movs	r3, #1
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <_kill>:

int _kill(int pid, int sig)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <_kill+0x20>)
 8000d5c:	2216      	movs	r2, #22
 8000d5e:	601a      	str	r2, [r3, #0]
  return -1;
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	200110d0 	.word	0x200110d0

08000d74 <_exit>:

void _exit (int status)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff ffe5 	bl	8000d50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d86:	e7fe      	b.n	8000d86 <_exit+0x12>

08000d88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	e00a      	b.n	8000db0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d9a:	f3af 8000 	nop.w
 8000d9e:	4601      	mov	r1, r0
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	60ba      	str	r2, [r7, #8]
 8000da6:	b2ca      	uxtb	r2, r1
 8000da8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697a      	ldr	r2, [r7, #20]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	dbf0      	blt.n	8000d9a <_read+0x12>
  }

  return len;
 8000db8:	687b      	ldr	r3, [r7, #4]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	60f8      	str	r0, [r7, #12]
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	e009      	b.n	8000de8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	1c5a      	adds	r2, r3, #1
 8000dd8:	60ba      	str	r2, [r7, #8]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3301      	adds	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dbf1      	blt.n	8000dd4 <_write+0x12>
  }
  return len;
 8000df0:	687b      	ldr	r3, [r7, #4]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <_close>:

int _close(int file)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e22:	605a      	str	r2, [r3, #4]
  return 0;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <_isatty>:

int _isatty(int file)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e6c:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <_sbrk+0x5c>)
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <_sbrk+0x60>)
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <_sbrk+0x64>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <_sbrk+0x68>)
 8000e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d205      	bcs.n	8000ea0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e94:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <_sbrk+0x6c>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	e009      	b.n	8000eb4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <_sbrk+0x64>)
 8000eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	371c      	adds	r7, #28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	20030000 	.word	0x20030000
 8000ec4:	00000400 	.word	0x00000400
 8000ec8:	20000480 	.word	0x20000480
 8000ecc:	200110e0 	.word	0x200110e0
 8000ed0:	200110d0 	.word	0x200110d0

08000ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <SystemInit+0x20>)
 8000eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <SystemInit+0x20>)
 8000ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2100      	movs	r1, #0
 8000f04:	2010      	movs	r0, #16
 8000f06:	f007 fa27 	bl	8008358 <netconn_new_with_proto_and_callback>
 8000f0a:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d04e      	beq.n	8000fb0 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000f12:	2207      	movs	r2, #7
 8000f14:	2100      	movs	r1, #0
 8000f16:	69f8      	ldr	r0, [r7, #28]
 8000f18:	f007 fad8 	bl	80084cc <netconn_bind>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000f20:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d13f      	bne.n	8000fa8 <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000f28:	21ff      	movs	r1, #255	; 0xff
 8000f2a:	69f8      	ldr	r0, [r7, #28]
 8000f2c:	f007 fb06 	bl	800853c <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	69f8      	ldr	r0, [r7, #28]
 8000f38:	f007 fb2c 	bl	8008594 <netconn_accept>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000f40:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1f3      	bne.n	8000f30 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000f48:	e01b      	b.n	8000f82 <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	f107 020a 	add.w	r2, r7, #10
 8000f50:	f107 010c 	add.w	r1, r7, #12
 8000f54:	4618      	mov	r0, r3
 8000f56:	f009 fabf 	bl	800a4d8 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	68f9      	ldr	r1, [r7, #12]
 8000f5e:	897b      	ldrh	r3, [r7, #10]
 8000f60:	461a      	mov	r2, r3
 8000f62:	2300      	movs	r3, #0
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2301      	movs	r3, #1
 8000f68:	f007 fd96 	bl	8008a98 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f009 fafc 	bl	800a56c <netbuf_next>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	dae7      	bge.n	8000f4a <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f009 fa8b 	bl	800a498 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f107 0210 	add.w	r2, r7, #16
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f007 fd0a 	bl	80089a4 <netconn_recv>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0d9      	beq.n	8000f4a <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f007 fe7f 	bl	8008c9c <netconn_close>
          netconn_delete(newconn);
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f007 fa77 	bl	8008494 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000fa6:	e7c3      	b.n	8000f30 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f007 fa72 	bl	8008494 <netconn_delete>
    }
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4903      	ldr	r1, [pc, #12]	; (8000fd8 <tcpecho_init+0x20>)
 8000fca:	4804      	ldr	r0, [pc, #16]	; (8000fdc <tcpecho_init+0x24>)
 8000fcc:	f017 fbbe 	bl	801874c <sys_thread_new>
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	08000ef9 	.word	0x08000ef9
 8000fdc:	080198f8 	.word	0x080198f8

08000fe0 <telnet_thread>:



/*-----------------------------------------------------------------------------------*/
static void telnet_thread(void *arg)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	2010      	movs	r0, #16
 8000fee:	f007 f9b3 	bl	8008358 <netconn_new_with_proto_and_callback>
 8000ff2:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d04e      	beq.n	8001098 <telnet_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 23);
 8000ffa:	2217      	movs	r2, #23
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	69f8      	ldr	r0, [r7, #28]
 8001000:	f007 fa64 	bl	80084cc <netconn_bind>
 8001004:	4603      	mov	r3, r0
 8001006:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8001008:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d13f      	bne.n	8001090 <telnet_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8001010:	21ff      	movs	r1, #255	; 0xff
 8001012:	69f8      	ldr	r0, [r7, #28]
 8001014:	f007 fa92 	bl	800853c <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	69f8      	ldr	r0, [r7, #28]
 8001020:	f007 fab8 	bl	8008594 <netconn_accept>
 8001024:	4603      	mov	r3, r0
 8001026:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8001028:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1f3      	bne.n	8001018 <telnet_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8001030:	e01b      	b.n	800106a <telnet_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	f107 020a 	add.w	r2, r7, #10
 8001038:	f107 010c 	add.w	r1, r7, #12
 800103c:	4618      	mov	r0, r3
 800103e:	f009 fa4b 	bl	800a4d8 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8001042:	6978      	ldr	r0, [r7, #20]
 8001044:	68f9      	ldr	r1, [r7, #12]
 8001046:	897b      	ldrh	r3, [r7, #10]
 8001048:	461a      	mov	r2, r3
 800104a:	2300      	movs	r3, #0
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	f007 fd22 	bl	8008a98 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4618      	mov	r0, r3
 8001058:	f009 fa88 	bl	800a56c <netbuf_next>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	dae7      	bge.n	8001032 <telnet_thread+0x52>
          
            netbuf_delete(buf);
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4618      	mov	r0, r3
 8001066:	f009 fa17 	bl	800a498 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f107 0210 	add.w	r2, r7, #16
 8001070:	4611      	mov	r1, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f007 fc96 	bl	80089a4 <netconn_recv>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0d9      	beq.n	8001032 <telnet_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	4618      	mov	r0, r3
 8001082:	f007 fe0b 	bl	8008c9c <netconn_close>
          netconn_delete(newconn);
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	4618      	mov	r0, r3
 800108a:	f007 fa03 	bl	8008494 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 800108e:	e7c3      	b.n	8001018 <telnet_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	4618      	mov	r0, r3
 8001094:	f007 f9fe 	bl	8008494 <netconn_delete>
    }
  }
}
 8001098:	bf00      	nop
 800109a:	3720      	adds	r7, #32
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <telnet_init>:
/*-----------------------------------------------------------------------------------*/

void telnet_init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af02      	add	r7, sp, #8
  sys_thread_new("telnet_thread", telnet_thread, NULL, DEFAULT_THREAD_STACKSIZE, telnet_THREAD_PRIO);
 80010a6:	2304      	movs	r3, #4
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ae:	2200      	movs	r2, #0
 80010b0:	4903      	ldr	r1, [pc, #12]	; (80010c0 <telnet_init+0x20>)
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <telnet_init+0x24>)
 80010b4:	f017 fb4a 	bl	801874c <sys_thread_new>
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	08000fe1 	.word	0x08000fe1
 80010c4:	08019908 	.word	0x08019908

080010c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001100 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010cc:	480d      	ldr	r0, [pc, #52]	; (8001104 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ce:	490e      	ldr	r1, [pc, #56]	; (8001108 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d0:	4a0e      	ldr	r2, [pc, #56]	; (800110c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e2:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010e4:	4c0b      	ldr	r4, [pc, #44]	; (8001114 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010f2:	f7ff feef 	bl	8000ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f6:	f017 fd83 	bl	8018c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fa:	f7ff fa79 	bl	80005f0 <main>
  bx  lr    
 80010fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001100:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001108:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800110c:	080277e4 	.word	0x080277e4
  ldr r2, =_sbss
 8001110:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001114:	200110e0 	.word	0x200110e0

08001118 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC_IRQHandler>

0800111a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00b      	beq.n	8001142 <LAN8742_RegisterBusIO+0x28>
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d007      	beq.n	8001142 <LAN8742_RegisterBusIO+0x28>
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <LAN8742_RegisterBusIO+0x28>
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d102      	bne.n	8001148 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e014      	b.n	8001172 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d17c      	bne.n	8001298 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d002      	beq.n	80011ac <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2220      	movs	r2, #32
 80011b0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	e01c      	b.n	80011f2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	f107 0208 	add.w	r2, r7, #8
 80011c0:	2112      	movs	r1, #18
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	4798      	blx	r3
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	da03      	bge.n	80011d4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80011cc:	f06f 0304 	mvn.w	r3, #4
 80011d0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80011d2:	e00b      	b.n	80011ec <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	f003 031f 	and.w	r3, r3, #31
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d105      	bne.n	80011ec <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
         break;
 80011ea:	e005      	b.n	80011f8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	3301      	adds	r3, #1
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	2b1f      	cmp	r3, #31
 80011f6:	d9df      	bls.n	80011b8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b1f      	cmp	r3, #31
 80011fe:	d902      	bls.n	8001206 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001200:	f06f 0302 	mvn.w	r3, #2
 8001204:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d145      	bne.n	8001298 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6810      	ldr	r0, [r2, #0]
 8001214:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001218:	2100      	movs	r1, #0
 800121a:	4798      	blx	r3
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	db37      	blt.n	8001292 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6810      	ldr	r0, [r2, #0]
 800122a:	f107 0208 	add.w	r2, r7, #8
 800122e:	2100      	movs	r1, #0
 8001230:	4798      	blx	r3
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	db28      	blt.n	800128a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4798      	blx	r3
 800123e:	4603      	mov	r3, r0
 8001240:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001242:	e01c      	b.n	800127e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4798      	blx	r3
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001256:	d80e      	bhi.n	8001276 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	6810      	ldr	r0, [r2, #0]
 8001260:	f107 0208 	add.w	r2, r7, #8
 8001264:	2100      	movs	r1, #0
 8001266:	4798      	blx	r3
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	da07      	bge.n	800127e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800126e:	f06f 0304 	mvn.w	r3, #4
 8001272:	613b      	str	r3, [r7, #16]
                 break;
 8001274:	e010      	b.n	8001298 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001276:	f06f 0301 	mvn.w	r3, #1
 800127a:	613b      	str	r3, [r7, #16]
               break;
 800127c:	e00c      	b.n	8001298 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1dd      	bne.n	8001244 <LAN8742_Init+0xc6>
 8001288:	e006      	b.n	8001298 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800128a:	f06f 0304 	mvn.w	r3, #4
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	e002      	b.n	8001298 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001292:	f06f 0303 	mvn.w	r3, #3
 8001296:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d112      	bne.n	80012c4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	4798      	blx	r3
 80012a4:	4603      	mov	r3, r0
 80012a6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80012a8:	bf00      	nop
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	4798      	blx	r3
 80012b0:	4603      	mov	r3, r0
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012bc:	d9f5      	bls.n	80012aa <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80012c4:	693b      	ldr	r3, [r7, #16]
 }
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6810      	ldr	r0, [r2, #0]
 80012e2:	f107 020c 	add.w	r2, r7, #12
 80012e6:	2101      	movs	r1, #1
 80012e8:	4798      	blx	r3
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	da02      	bge.n	80012f6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012f0:	f06f 0304 	mvn.w	r3, #4
 80012f4:	e06e      	b.n	80013d4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	6810      	ldr	r0, [r2, #0]
 80012fe:	f107 020c 	add.w	r2, r7, #12
 8001302:	2101      	movs	r1, #1
 8001304:	4798      	blx	r3
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	da02      	bge.n	8001312 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800130c:	f06f 0304 	mvn.w	r3, #4
 8001310:	e060      	b.n	80013d4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800131c:	2301      	movs	r3, #1
 800131e:	e059      	b.n	80013d4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6810      	ldr	r0, [r2, #0]
 8001328:	f107 020c 	add.w	r2, r7, #12
 800132c:	2100      	movs	r1, #0
 800132e:	4798      	blx	r3
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	da02      	bge.n	800133c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001336:	f06f 0304 	mvn.w	r3, #4
 800133a:	e04b      	b.n	80013d4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d11b      	bne.n	800137e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d006      	beq.n	800135e <LAN8742_GetLinkState+0x90>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800135a:	2302      	movs	r3, #2
 800135c:	e03a      	b.n	80013d4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001368:	2303      	movs	r3, #3
 800136a:	e033      	b.n	80013d4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001376:	2304      	movs	r3, #4
 8001378:	e02c      	b.n	80013d4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800137a:	2305      	movs	r3, #5
 800137c:	e02a      	b.n	80013d4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	6810      	ldr	r0, [r2, #0]
 8001386:	f107 020c 	add.w	r2, r7, #12
 800138a:	211f      	movs	r1, #31
 800138c:	4798      	blx	r3
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	da02      	bge.n	800139a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001394:	f06f 0304 	mvn.w	r3, #4
 8001398:	e01c      	b.n	80013d4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80013a4:	2306      	movs	r3, #6
 80013a6:	e015      	b.n	80013d4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f003 031c 	and.w	r3, r3, #28
 80013ae:	2b18      	cmp	r3, #24
 80013b0:	d101      	bne.n	80013b6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80013b2:	2302      	movs	r3, #2
 80013b4:	e00e      	b.n	80013d4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f003 031c 	and.w	r3, r3, #28
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d101      	bne.n	80013c4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e007      	b.n	80013d4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 031c 	and.w	r3, r3, #28
 80013ca:	2b14      	cmp	r3, #20
 80013cc:	d101      	bne.n	80013d2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80013ce:	2304      	movs	r3, #4
 80013d0:	e000      	b.n	80013d4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80013d2:	2305      	movs	r3, #5
    }				
  }
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0d      	ldr	r2, [pc, #52]	; (800141c <HAL_Init+0x40>)
 80013e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_Init+0x40>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_Init+0x40>)
 80013f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_Init+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <HAL_Init+0x40>)
 80013fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001404:	2003      	movs	r0, #3
 8001406:	f000 f8fc 	bl	8001602 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800140a:	200f      	movs	r0, #15
 800140c:	f7ff fbe8 	bl	8000be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001410:	f7ff faea 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023c00 	.word	0x40023c00

08001420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_IncTick+0x20>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_IncTick+0x24>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <HAL_IncTick+0x24>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000008 	.word	0x20000008
 8001444:	20000484 	.word	0x20000484

08001448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_GetTick+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000484 	.word	0x20000484

08001460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff ffee 	bl	8001448 <HAL_GetTick>
 800146c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001478:	d005      	beq.n	8001486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_Delay+0x44>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4413      	add	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001486:	bf00      	nop
 8001488:	f7ff ffde 	bl	8001448 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	429a      	cmp	r2, r3
 8001496:	d8f7      	bhi.n	8001488 <HAL_Delay+0x28>
  {
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000008 	.word	0x20000008

080014a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db0b      	blt.n	8001536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	4907      	ldr	r1, [pc, #28]	; (8001544 <__NVIC_EnableIRQ+0x38>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2001      	movs	r0, #1
 800152e:	fa00 f202 	lsl.w	r2, r0, r2
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000e100 	.word	0xe000e100

08001548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	2b00      	cmp	r3, #0
 800155a:	db0a      	blt.n	8001572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	490c      	ldr	r1, [pc, #48]	; (8001594 <__NVIC_SetPriority+0x4c>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	440b      	add	r3, r1
 800156c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001570:	e00a      	b.n	8001588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4908      	ldr	r1, [pc, #32]	; (8001598 <__NVIC_SetPriority+0x50>)
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	3b04      	subs	r3, #4
 8001580:	0112      	lsls	r2, r2, #4
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	440b      	add	r3, r1
 8001586:	761a      	strb	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f1c3 0307 	rsb	r3, r3, #7
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	bf28      	it	cs
 80015ba:	2304      	movcs	r3, #4
 80015bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3304      	adds	r3, #4
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d902      	bls.n	80015cc <NVIC_EncodePriority+0x30>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3b03      	subs	r3, #3
 80015ca:	e000      	b.n	80015ce <NVIC_EncodePriority+0x32>
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	f04f 32ff 	mov.w	r2, #4294967295
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	401a      	ands	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	43d9      	mvns	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	4313      	orrs	r3, r2
         );
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3724      	adds	r7, #36	; 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ff4c 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800162a:	f7ff ff61 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 800162e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	68b9      	ldr	r1, [r7, #8]
 8001634:	6978      	ldr	r0, [r7, #20]
 8001636:	f7ff ffb1 	bl	800159c <NVIC_EncodePriority>
 800163a:	4602      	mov	r2, r0
 800163c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff80 	bl	8001548 <__NVIC_SetPriority>
}
 8001648:	bf00      	nop
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ff54 	bl	800150c <__NVIC_EnableIRQ>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001678:	f7ff fee6 	bl	8001448 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e099      	b.n	80017bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2202      	movs	r2, #2
 800168c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0201 	bic.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016a8:	e00f      	b.n	80016ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016aa:	f7ff fecd 	bl	8001448 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b05      	cmp	r3, #5
 80016b6:	d908      	bls.n	80016ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2220      	movs	r2, #32
 80016bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2203      	movs	r2, #3
 80016c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e078      	b.n	80017bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1e8      	bne.n	80016aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	4b38      	ldr	r3, [pc, #224]	; (80017c4 <HAL_DMA_Init+0x158>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001702:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800170e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	4313      	orrs	r3, r2
 800171a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	2b04      	cmp	r3, #4
 8001722:	d107      	bne.n	8001734 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172c:	4313      	orrs	r3, r2
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	4313      	orrs	r3, r2
 8001732:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	f023 0307 	bic.w	r3, r3, #7
 800174a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	4313      	orrs	r3, r2
 8001754:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	2b04      	cmp	r3, #4
 800175c:	d117      	bne.n	800178e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	4313      	orrs	r3, r2
 8001766:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00e      	beq.n	800178e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f9e9 	bl	8001b48 <DMA_CheckFifoParam>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2240      	movs	r2, #64	; 0x40
 8001780:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800178a:	2301      	movs	r3, #1
 800178c:	e016      	b.n	80017bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f9a0 	bl	8001adc <DMA_CalcBaseAndBitshift>
 800179c:	4603      	mov	r3, r0
 800179e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a4:	223f      	movs	r2, #63	; 0x3f
 80017a6:	409a      	lsls	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	f010803f 	.word	0xf010803f

080017c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017d4:	4b8e      	ldr	r3, [pc, #568]	; (8001a10 <HAL_DMA_IRQHandler+0x248>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a8e      	ldr	r2, [pc, #568]	; (8001a14 <HAL_DMA_IRQHandler+0x24c>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	0a9b      	lsrs	r3, r3, #10
 80017e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f2:	2208      	movs	r2, #8
 80017f4:	409a      	lsls	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d01a      	beq.n	8001834 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d013      	beq.n	8001834 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0204 	bic.w	r2, r2, #4
 800181a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001820:	2208      	movs	r2, #8
 8001822:	409a      	lsls	r2, r3
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182c:	f043 0201 	orr.w	r2, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001838:	2201      	movs	r2, #1
 800183a:	409a      	lsls	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d012      	beq.n	800186a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00b      	beq.n	800186a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001856:	2201      	movs	r2, #1
 8001858:	409a      	lsls	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001862:	f043 0202 	orr.w	r2, r3, #2
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186e:	2204      	movs	r2, #4
 8001870:	409a      	lsls	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4013      	ands	r3, r2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d012      	beq.n	80018a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00b      	beq.n	80018a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188c:	2204      	movs	r2, #4
 800188e:	409a      	lsls	r2, r3
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001898:	f043 0204 	orr.w	r2, r3, #4
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a4:	2210      	movs	r2, #16
 80018a6:	409a      	lsls	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d043      	beq.n	8001938 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d03c      	beq.n	8001938 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c2:	2210      	movs	r2, #16
 80018c4:	409a      	lsls	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d018      	beq.n	800190a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d108      	bne.n	80018f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d024      	beq.n	8001938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	4798      	blx	r3
 80018f6:	e01f      	b.n	8001938 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01b      	beq.n	8001938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	4798      	blx	r3
 8001908:	e016      	b.n	8001938 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001914:	2b00      	cmp	r3, #0
 8001916:	d107      	bne.n	8001928 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0208 	bic.w	r2, r2, #8
 8001926:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193c:	2220      	movs	r2, #32
 800193e:	409a      	lsls	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 808f 	beq.w	8001a68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0310 	and.w	r3, r3, #16
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 8087 	beq.w	8001a68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195e:	2220      	movs	r2, #32
 8001960:	409a      	lsls	r2, r3
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b05      	cmp	r3, #5
 8001970:	d136      	bne.n	80019e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0216 	bic.w	r2, r2, #22
 8001980:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695a      	ldr	r2, [r3, #20]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001990:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	2b00      	cmp	r3, #0
 8001998:	d103      	bne.n	80019a2 <HAL_DMA_IRQHandler+0x1da>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0208 	bic.w	r2, r2, #8
 80019b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b6:	223f      	movs	r2, #63	; 0x3f
 80019b8:	409a      	lsls	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d07e      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	4798      	blx	r3
        }
        return;
 80019de:	e079      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d01d      	beq.n	8001a2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10d      	bne.n	8001a18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d031      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	4798      	blx	r3
 8001a0c:	e02c      	b.n	8001a68 <HAL_DMA_IRQHandler+0x2a0>
 8001a0e:	bf00      	nop
 8001a10:	20000000 	.word	0x20000000
 8001a14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d023      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	4798      	blx	r3
 8001a28:	e01e      	b.n	8001a68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10f      	bne.n	8001a58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0210 	bic.w	r2, r2, #16
 8001a46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d032      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d022      	beq.n	8001ac2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2205      	movs	r2, #5
 8001a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0201 	bic.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	3301      	adds	r3, #1
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d307      	bcc.n	8001ab0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f2      	bne.n	8001a94 <HAL_DMA_IRQHandler+0x2cc>
 8001aae:	e000      	b.n	8001ab2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ab0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d005      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	4798      	blx	r3
 8001ad2:	e000      	b.n	8001ad6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ad4:	bf00      	nop
    }
  }
}
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	3b10      	subs	r3, #16
 8001aec:	4a14      	ldr	r2, [pc, #80]	; (8001b40 <DMA_CalcBaseAndBitshift+0x64>)
 8001aee:	fba2 2303 	umull	r2, r3, r2, r3
 8001af2:	091b      	lsrs	r3, r3, #4
 8001af4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001af6:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <DMA_CalcBaseAndBitshift+0x68>)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4413      	add	r3, r2
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d909      	bls.n	8001b1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b12:	f023 0303 	bic.w	r3, r3, #3
 8001b16:	1d1a      	adds	r2, r3, #4
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	659a      	str	r2, [r3, #88]	; 0x58
 8001b1c:	e007      	b.n	8001b2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b26:	f023 0303 	bic.w	r3, r3, #3
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	aaaaaaab 	.word	0xaaaaaaab
 8001b44:	0801d464 	.word	0x0801d464

08001b48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d11f      	bne.n	8001ba2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d856      	bhi.n	8001c16 <DMA_CheckFifoParam+0xce>
 8001b68:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <DMA_CheckFifoParam+0x28>)
 8001b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6e:	bf00      	nop
 8001b70:	08001b81 	.word	0x08001b81
 8001b74:	08001b93 	.word	0x08001b93
 8001b78:	08001b81 	.word	0x08001b81
 8001b7c:	08001c17 	.word	0x08001c17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d046      	beq.n	8001c1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b90:	e043      	b.n	8001c1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b9a:	d140      	bne.n	8001c1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ba0:	e03d      	b.n	8001c1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001baa:	d121      	bne.n	8001bf0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d837      	bhi.n	8001c22 <DMA_CheckFifoParam+0xda>
 8001bb2:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <DMA_CheckFifoParam+0x70>)
 8001bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb8:	08001bc9 	.word	0x08001bc9
 8001bbc:	08001bcf 	.word	0x08001bcf
 8001bc0:	08001bc9 	.word	0x08001bc9
 8001bc4:	08001be1 	.word	0x08001be1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
      break;
 8001bcc:	e030      	b.n	8001c30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d025      	beq.n	8001c26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bde:	e022      	b.n	8001c26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001be8:	d11f      	bne.n	8001c2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bee:	e01c      	b.n	8001c2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d903      	bls.n	8001bfe <DMA_CheckFifoParam+0xb6>
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d003      	beq.n	8001c04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bfc:	e018      	b.n	8001c30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	73fb      	strb	r3, [r7, #15]
      break;
 8001c02:	e015      	b.n	8001c30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00e      	beq.n	8001c2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
      break;
 8001c14:	e00b      	b.n	8001c2e <DMA_CheckFifoParam+0xe6>
      break;
 8001c16:	bf00      	nop
 8001c18:	e00a      	b.n	8001c30 <DMA_CheckFifoParam+0xe8>
      break;
 8001c1a:	bf00      	nop
 8001c1c:	e008      	b.n	8001c30 <DMA_CheckFifoParam+0xe8>
      break;
 8001c1e:	bf00      	nop
 8001c20:	e006      	b.n	8001c30 <DMA_CheckFifoParam+0xe8>
      break;
 8001c22:	bf00      	nop
 8001c24:	e004      	b.n	8001c30 <DMA_CheckFifoParam+0xe8>
      break;
 8001c26:	bf00      	nop
 8001c28:	e002      	b.n	8001c30 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c2a:	bf00      	nop
 8001c2c:	e000      	b.n	8001c30 <DMA_CheckFifoParam+0xe8>
      break;
 8001c2e:	bf00      	nop
    }
  } 
  
  return status; 
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop

08001c40 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e06c      	b.n	8001d2c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d106      	bne.n	8001c6a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2223      	movs	r2, #35	; 0x23
 8001c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f003 f939 	bl	8004edc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	4b31      	ldr	r3, [pc, #196]	; (8001d34 <HAL_ETH_Init+0xf4>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a30      	ldr	r2, [pc, #192]	; (8001d34 <HAL_ETH_Init+0xf4>)
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	; (8001d34 <HAL_ETH_Init+0xf4>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c86:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <HAL_ETH_Init+0xf8>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	4a2b      	ldr	r2, [pc, #172]	; (8001d38 <HAL_ETH_Init+0xf8>)
 8001c8c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c90:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <HAL_ETH_Init+0xf8>)
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	4927      	ldr	r1, [pc, #156]	; (8001d38 <HAL_ETH_Init+0xf8>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001ca0:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <HAL_ETH_Init+0xf8>)
 8001ca2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cbc:	f7ff fbc4 	bl	8001448 <HAL_GetTick>
 8001cc0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001cc2:	e011      	b.n	8001ce8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001cc4:	f7ff fbc0 	bl	8001448 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001cd2:	d909      	bls.n	8001ce8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	22e0      	movs	r2, #224	; 0xe0
 8001ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e021      	b.n	8001d2c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1e4      	bne.n	8001cc4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 ff4a 	bl	8002b94 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fff1 	bl	8002ce8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f001 f847 	bl	8002d9a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	461a      	mov	r2, r3
 8001d12:	2100      	movs	r1, #0
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 ffaf 	bl	8002c78 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2210      	movs	r2, #16
 8001d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40013800 	.word	0x40013800

08001d3c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d4a:	2b10      	cmp	r3, #16
 8001d4c:	d17f      	bne.n	8001e4e <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2223      	movs	r2, #35	; 0x23
 8001d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001d6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d7c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d80:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001d94:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f9f8 	bl	8002194 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0208 	orr.w	r2, r2, #8
 8001db2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f7ff fb4f 	bl	8001460 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 0204 	orr.w	r2, r2, #4
 8001dd8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001de2:	2001      	movs	r0, #1
 8001de4:	f7ff fb3c 	bl	8001460 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 fd70 	bl	80028d6 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e0c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	f043 0302 	orr.w	r3, r3, #2
 8001e20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e24:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001e38:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001e3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e40:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2223      	movs	r2, #35	; 0x23
 8001e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e000      	b.n	8001e50 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
  }
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e66:	2b23      	cmp	r3, #35	; 0x23
 8001e68:	d170      	bne.n	8001f4c <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2223      	movs	r2, #35	; 0x23
 8001e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001e84:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8001e88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e8c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ea0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ea4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	f023 0302 	bic.w	r3, r3, #2
 8001eb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ebc:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0204 	bic.w	r2, r2, #4
 8001ecc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f7ff fac2 	bl	8001460 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fcf6 	bl	80028d6 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0208 	bic.w	r2, r2, #8
 8001ef8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f02:	2001      	movs	r0, #1
 8001f04:	f7ff faac 	bl	8001460 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	e00e      	b.n	8001f34 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	3212      	adds	r2, #18
 8001f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f20:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	3301      	adds	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d9ed      	bls.n	8001f16 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2210      	movs	r2, #16
 8001f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e000      	b.n	8001f4e <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
  }
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6c:	f043 0201 	orr.w	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e045      	b.n	8002006 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f80:	2b23      	cmp	r3, #35	; 0x23
 8001f82:	d13f      	bne.n	8002004 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	6839      	ldr	r1, [r7, #0]
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 ff6f 	bl	8002e74 <ETH_Prepare_Tx_Descriptors>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d009      	beq.n	8001fb0 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa2:	f043 0202 	orr.w	r2, r3, #2
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e02a      	b.n	8002006 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001fb0:	f3bf 8f4f 	dsb	sy
}
 8001fb4:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d904      	bls.n	8001fd2 <HAL_ETH_Transmit_IT+0x7c>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	1f1a      	subs	r2, r3, #4
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00d      	beq.n	8002000 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fec:	461a      	mov	r2, r3
 8001fee:	2304      	movs	r3, #4
 8001ff0:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	e000      	b.n	8002006 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
  }
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b088      	sub	sp, #32
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d109      	bne.n	800203a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202c:	f043 0201 	orr.w	r2, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e0a8      	b.n	800218c <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002040:	2b23      	cmp	r3, #35	; 0x23
 8002042:	d001      	beq.n	8002048 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0a1      	b.n	800218c <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69fa      	ldr	r2, [r7, #28]
 8002052:	3212      	adds	r2, #18
 8002054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002058:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800205e:	f1c3 0304 	rsb	r3, r3, #4
 8002062:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002064:	e06a      	b.n	800213c <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206e:	2b00      	cmp	r3, #0
 8002070:	d007      	beq.n	8002082 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	69da      	ldr	r2, [r3, #28]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800208a:	2b00      	cmp	r3, #0
 800208c:	d103      	bne.n	8002096 <HAL_ETH_ReadData+0x88>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002092:	2b00      	cmp	r3, #0
 8002094:	d040      	beq.n	8002118 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d005      	beq.n	80020ae <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00c      	beq.n	80020da <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	0c1b      	lsrs	r3, r3, #16
 80020c6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80020ca:	3b04      	subs	r3, #4
 80020cc:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80020d6:	2301      	movs	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80020f2:	461a      	mov	r2, r3
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f003 f8ca 	bl	8005290 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	441a      	add	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2200      	movs	r2, #0
 8002116:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	3301      	adds	r3, #1
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	2b03      	cmp	r3, #3
 8002122:	d902      	bls.n	800212a <HAL_ETH_ReadData+0x11c>
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	3b04      	subs	r3, #4
 8002128:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	3212      	adds	r2, #18
 8002130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002134:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3301      	adds	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002140:	2b00      	cmp	r3, #0
 8002142:	db06      	blt.n	8002152 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	429a      	cmp	r2, r3
 800214a:	d202      	bcs.n	8002152 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d089      	beq.n	8002066 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	441a      	add	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f814 	bl	8002194 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d108      	bne.n	800218a <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	e000      	b.n	800218c <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
}
 800218c:	4618      	mov	r0, r3
 800218e:	3720      	adds	r7, #32
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80021a0:	2301      	movs	r3, #1
 80021a2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021a8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	3212      	adds	r2, #18
 80021b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ba:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80021bc:	e040      	b.n	8002240 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d112      	bne.n	80021ec <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80021c6:	f107 030c 	add.w	r3, r7, #12
 80021ca:	4618      	mov	r0, r3
 80021cc:	f003 f830 	bl	8005230 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d102      	bne.n	80021dc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	74fb      	strb	r3, [r7, #19]
 80021da:	e007      	b.n	80021ec <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	461a      	mov	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	461a      	mov	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80021ec:	7cfb      	ldrb	r3, [r7, #19]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d026      	beq.n	8002240 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d103      	bne.n	8002202 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	4a1e      	ldr	r2, [pc, #120]	; (8002278 <ETH_UpdateDescriptor+0xe4>)
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	e003      	b.n	800220a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002208:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800220a:	f3bf 8f5f 	dmb	sy
}
 800220e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	3301      	adds	r3, #1
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	2b03      	cmp	r3, #3
 8002226:	d902      	bls.n	800222e <ETH_UpdateDescriptor+0x9a>
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	3b04      	subs	r3, #4
 800222c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69fa      	ldr	r2, [r7, #28]
 8002232:	3212      	adds	r2, #18
 8002234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002238:	617b      	str	r3, [r7, #20]
      desccount--;
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	3b01      	subs	r3, #1
 800223e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <ETH_UpdateDescriptor+0xb8>
 8002246:	7cfb      	ldrb	r3, [r7, #19]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1b8      	bne.n	80021be <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	429a      	cmp	r2, r3
 8002254:	d00c      	beq.n	8002270 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225e:	461a      	mov	r2, r3
 8002260:	2300      	movs	r3, #0
 8002262:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002270:	bf00      	nop
 8002272:	3720      	adds	r7, #32
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	80004600 	.word	0x80004600

0800227c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3318      	adds	r3, #24
 8002288:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002296:	2301      	movs	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800229a:	e03f      	b.n	800231c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 800229c:	2301      	movs	r3, #1
 800229e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	3304      	adds	r3, #4
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	3301      	adds	r3, #1
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80022c4:	7bbb      	ldrb	r3, [r7, #14]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d028      	beq.n	800231c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68d9      	ldr	r1, [r3, #12]
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	440b      	add	r3, r1
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	db1b      	blt.n	8002318 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	3304      	adds	r3, #4
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 f80f 	bl	8005310 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	3304      	adds	r3, #4
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	2200      	movs	r2, #0
 80022fe:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	3301      	adds	r3, #1
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	62da      	str	r2, [r3, #44]	; 0x2c
 8002316:	e001      	b.n	800231c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <HAL_ETH_ReleaseTxPacket+0xac>
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1b9      	bne.n	800229c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234a:	2b40      	cmp	r3, #64	; 0x40
 800234c:	d112      	bne.n	8002374 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235c:	2b40      	cmp	r3, #64	; 0x40
 800235e:	d109      	bne.n	8002374 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002368:	461a      	mov	r2, r3
 800236a:	4b50      	ldr	r3, [pc, #320]	; (80024ac <HAL_ETH_IRQHandler+0x178>)
 800236c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f002 fb18 	bl	80049a4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b01      	cmp	r3, #1
 8002384:	d113      	bne.n	80023ae <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	d10a      	bne.n	80023ae <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a0:	461a      	mov	r2, r3
 80023a2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80023a6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f002 fb0b 	bl	80049c4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023c0:	d14c      	bne.n	800245c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023d4:	d142      	bne.n	800245c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023dc:	f043 0208 	orr.w	r2, r3, #8
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023f8:	d11a      	bne.n	8002430 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002402:	695a      	ldr	r2, [r3, #20]
 8002404:	4b2a      	ldr	r3, [pc, #168]	; (80024b0 <HAL_ETH_IRQHandler+0x17c>)
 8002406:	4013      	ands	r3, r2
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002420:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002424:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	22e0      	movs	r2, #224	; 0xe0
 800242a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800242e:	e012      	b.n	8002456 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	f248 6380 	movw	r3, #34432	; 0x8680
 800243e:	4013      	ands	r3, r2
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800244e:	461a      	mov	r2, r3
 8002450:	f248 6380 	movw	r3, #34432	; 0x8680
 8002454:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f002 fac4 	bl	80049e4 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b08      	cmp	r3, #8
 8002468:	d10e      	bne.n	8002488 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f81c 	bl	80024b8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <HAL_ETH_IRQHandler+0x180>)
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d006      	beq.n	80024a2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <HAL_ETH_IRQHandler+0x180>)
 8002496:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800249a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f815 	bl	80024cc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	00010040 	.word	0x00010040
 80024b0:	007e2000 	.word	0x007e2000
 80024b4:	40013c00 	.word	0x40013c00

080024b8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f003 031c 	and.w	r3, r3, #28
 80024fc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	02db      	lsls	r3, r3, #11
 8002502:	b29b      	uxth	r3, r3
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	4313      	orrs	r3, r2
 8002508:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	019b      	lsls	r3, r3, #6
 800250e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f023 0302 	bic.w	r3, r3, #2
 800251e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002530:	f7fe ff8a 	bl	8001448 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002536:	e00d      	b.n	8002554 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002538:	f7fe ff86 	bl	8001448 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002546:	d301      	bcc.n	800254c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e010      	b.n	800256e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1ec      	bne.n	8002538 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	b29b      	uxth	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f003 031c 	and.w	r3, r3, #28
 8002592:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	02db      	lsls	r3, r3, #11
 8002598:	b29b      	uxth	r3, r3
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4313      	orrs	r3, r2
 800259e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	019b      	lsls	r3, r3, #6
 80025a4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f043 0302 	orr.w	r3, r3, #2
 80025b4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025d0:	f7fe ff3a 	bl	8001448 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025d6:	e00d      	b.n	80025f4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80025d8:	f7fe ff36 	bl	8001448 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e6:	d301      	bcc.n	80025ec <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e009      	b.n	8002600 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1ec      	bne.n	80025d8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0d9      	b.n	80027d0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	bf14      	ite	ne
 800262a:	2301      	movne	r3, #1
 800262c:	2300      	moveq	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf0c      	ite	eq
 8002654:	2301      	moveq	r3, #1
 8002656:	2300      	movne	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf14      	ite	ne
 8002670:	2301      	movne	r3, #1
 8002672:	2300      	moveq	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002686:	2b00      	cmp	r3, #0
 8002688:	bf0c      	ite	eq
 800268a:	2301      	moveq	r3, #1
 800268c:	2300      	movne	r3, #0
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf14      	ite	ne
 80026a4:	2301      	movne	r3, #1
 80026a6:	2300      	moveq	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf0c      	ite	eq
 80026da:	2301      	moveq	r3, #1
 80026dc:	2300      	movne	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270a:	2b00      	cmp	r3, #0
 800270c:	bf14      	ite	ne
 800270e:	2301      	movne	r3, #1
 8002710:	2300      	moveq	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002732:	2b00      	cmp	r3, #0
 8002734:	bf14      	ite	ne
 8002736:	2301      	movne	r3, #1
 8002738:	2300      	moveq	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf14      	ite	ne
 8002750:	2301      	movne	r3, #1
 8002752:	2300      	moveq	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002768:	2b00      	cmp	r3, #0
 800276a:	bf0c      	ite	eq
 800276c:	2301      	moveq	r3, #1
 800276e:	2300      	movne	r3, #0
 8002770:	b2db      	uxtb	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	0c1b      	lsrs	r3, r3, #16
 8002790:	b29a      	uxth	r2, r3
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf14      	ite	ne
 80027a4:	2301      	movne	r3, #1
 80027a6:	2300      	moveq	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf14      	ite	ne
 80027c0:	2301      	movne	r3, #1
 80027c2:	2300      	moveq	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e00b      	b.n	8002808 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f6:	2b10      	cmp	r3, #16
 80027f8:	d105      	bne.n	8002806 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80027fa:	6839      	ldr	r1, [r7, #0]
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f88f 	bl	8002920 <ETH_SetMACConfig>

    return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e000      	b.n	8002808 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
  }
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 031c 	bic.w	r3, r3, #28
 8002826:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002828:	f001 fa84 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 800282c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4a1d      	ldr	r2, [pc, #116]	; (80028a8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d908      	bls.n	8002848 <HAL_ETH_SetMDIOClockRange+0x38>
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	4a1c      	ldr	r2, [pc, #112]	; (80028ac <HAL_ETH_SetMDIOClockRange+0x9c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d804      	bhi.n	8002848 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f043 0308 	orr.w	r3, r3, #8
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	e027      	b.n	8002898 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	4a18      	ldr	r2, [pc, #96]	; (80028ac <HAL_ETH_SetMDIOClockRange+0x9c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d908      	bls.n	8002862 <HAL_ETH_SetMDIOClockRange+0x52>
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4a17      	ldr	r2, [pc, #92]	; (80028b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d204      	bcs.n	8002862 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f043 030c 	orr.w	r3, r3, #12
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	e01a      	b.n	8002898 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d303      	bcc.n	8002872 <HAL_ETH_SetMDIOClockRange+0x62>
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d911      	bls.n	8002896 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	4a0f      	ldr	r2, [pc, #60]	; (80028b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d908      	bls.n	800288c <HAL_ETH_SetMDIOClockRange+0x7c>
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	4a0e      	ldr	r2, [pc, #56]	; (80028b8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d804      	bhi.n	800288c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f043 0304 	orr.w	r3, r3, #4
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	e005      	b.n	8002898 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f043 0310 	orr.w	r3, r3, #16
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	e000      	b.n	8002898 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002896:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	611a      	str	r2, [r3, #16]
}
 80028a0:	bf00      	nop
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	01312cff 	.word	0x01312cff
 80028ac:	02160ebf 	.word	0x02160ebf
 80028b0:	03938700 	.word	0x03938700
 80028b4:	05f5e0ff 	.word	0x05f5e0ff
 80028b8:	08f0d17f 	.word	0x08f0d17f

080028bc <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028f8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002906:	2001      	movs	r0, #1
 8002908:	f7fe fdaa 	bl	8001460 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002916:	6193      	str	r3, [r2, #24]
}
 8002918:	bf00      	nop
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4b51      	ldr	r3, [pc, #324]	; (8002a7c <ETH_SetMACConfig+0x15c>)
 8002936:	4013      	ands	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	7c1b      	ldrb	r3, [r3, #16]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d102      	bne.n	8002948 <ETH_SetMACConfig+0x28>
 8002942:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002946:	e000      	b.n	800294a <ETH_SetMACConfig+0x2a>
 8002948:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	7c5b      	ldrb	r3, [r3, #17]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d102      	bne.n	8002958 <ETH_SetMACConfig+0x38>
 8002952:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002956:	e000      	b.n	800295a <ETH_SetMACConfig+0x3a>
 8002958:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800295a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002960:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	7fdb      	ldrb	r3, [r3, #31]
 8002966:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002968:	431a      	orrs	r2, r3
                        macconf->Speed |
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800296e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	7f92      	ldrb	r2, [r2, #30]
 8002974:	2a00      	cmp	r2, #0
 8002976:	d102      	bne.n	800297e <ETH_SetMACConfig+0x5e>
 8002978:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800297c:	e000      	b.n	8002980 <ETH_SetMACConfig+0x60>
 800297e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002980:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	7f1b      	ldrb	r3, [r3, #28]
 8002986:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002988:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800298e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	791b      	ldrb	r3, [r3, #4]
 8002994:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002996:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800299e:	2a00      	cmp	r2, #0
 80029a0:	d102      	bne.n	80029a8 <ETH_SetMACConfig+0x88>
 80029a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029a6:	e000      	b.n	80029aa <ETH_SetMACConfig+0x8a>
 80029a8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	7bdb      	ldrb	r3, [r3, #15]
 80029b0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029b2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80029b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029c0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80029c2:	4313      	orrs	r3, r2
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029da:	2001      	movs	r0, #1
 80029dc:	f7fe fd40 	bl	8001460 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80029f6:	4013      	ands	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029fe:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002a06:	2a00      	cmp	r2, #0
 8002a08:	d101      	bne.n	8002a0e <ETH_SetMACConfig+0xee>
 8002a0a:	2280      	movs	r2, #128	; 0x80
 8002a0c:	e000      	b.n	8002a10 <ETH_SetMACConfig+0xf0>
 8002a0e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a10:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002a1e:	2a01      	cmp	r2, #1
 8002a20:	d101      	bne.n	8002a26 <ETH_SetMACConfig+0x106>
 8002a22:	2208      	movs	r2, #8
 8002a24:	e000      	b.n	8002a28 <ETH_SetMACConfig+0x108>
 8002a26:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002a28:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002a30:	2a01      	cmp	r2, #1
 8002a32:	d101      	bne.n	8002a38 <ETH_SetMACConfig+0x118>
 8002a34:	2204      	movs	r2, #4
 8002a36:	e000      	b.n	8002a3a <ETH_SetMACConfig+0x11a>
 8002a38:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a3a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002a42:	2a01      	cmp	r2, #1
 8002a44:	d101      	bne.n	8002a4a <ETH_SetMACConfig+0x12a>
 8002a46:	2202      	movs	r2, #2
 8002a48:	e000      	b.n	8002a4c <ETH_SetMACConfig+0x12c>
 8002a4a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a64:	2001      	movs	r0, #1
 8002a66:	f7fe fcfb 	bl	8001460 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	619a      	str	r2, [r3, #24]
}
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	ff20810f 	.word	0xff20810f

08002a80 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4b3d      	ldr	r3, [pc, #244]	; (8002b90 <ETH_SetDMAConfig+0x110>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	7b1b      	ldrb	r3, [r3, #12]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d102      	bne.n	8002aac <ETH_SetDMAConfig+0x2c>
 8002aa6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002aaa:	e000      	b.n	8002aae <ETH_SetDMAConfig+0x2e>
 8002aac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	7b5b      	ldrb	r3, [r3, #13]
 8002ab2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ab4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	7f52      	ldrb	r2, [r2, #29]
 8002aba:	2a00      	cmp	r2, #0
 8002abc:	d102      	bne.n	8002ac4 <ETH_SetDMAConfig+0x44>
 8002abe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ac2:	e000      	b.n	8002ac6 <ETH_SetDMAConfig+0x46>
 8002ac4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ac6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	7b9b      	ldrb	r3, [r3, #14]
 8002acc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002ace:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ad4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	7f1b      	ldrb	r3, [r3, #28]
 8002ada:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002adc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	7f9b      	ldrb	r3, [r3, #30]
 8002ae2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002ae4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002aea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002af2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002af4:	4313      	orrs	r3, r2
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b04:	461a      	mov	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b16:	2001      	movs	r0, #1
 8002b18:	f7fe fca2 	bl	8001460 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b24:	461a      	mov	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	791b      	ldrb	r3, [r3, #4]
 8002b2e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b34:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002b3a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b40:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b48:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002b4a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b52:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b58:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6812      	ldr	r2, [r2, #0]
 8002b5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b66:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b74:	2001      	movs	r0, #1
 8002b76:	f7fe fc73 	bl	8001460 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b82:	461a      	mov	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6013      	str	r3, [r2, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	f8de3f23 	.word	0xf8de3f23

08002b94 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b0a6      	sub	sp, #152	; 0x98
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002be4:	2300      	movs	r3, #0
 8002be6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002bf6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002bfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c00:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff fe86 	bl	8002920 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002c14:	2301      	movs	r3, #1
 8002c16:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002c22:	2301      	movs	r3, #1
 8002c24:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c36:	2300      	movs	r3, #0
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c40:	2301      	movs	r3, #1
 8002c42:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c48:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c4e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c54:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002c56:	2301      	movs	r3, #1
 8002c58:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c64:	f107 0308 	add.w	r3, r7, #8
 8002c68:	4619      	mov	r1, r3
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff ff08 	bl	8002a80 <ETH_SetDMAConfig>
}
 8002c70:	bf00      	nop
 8002c72:	3798      	adds	r7, #152	; 0x98
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3305      	adds	r3, #5
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	3204      	adds	r2, #4
 8002c90:	7812      	ldrb	r2, [r2, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	4b11      	ldr	r3, [pc, #68]	; (8002ce0 <ETH_MACAddressConfig+0x68>)
 8002c9a:	4413      	add	r3, r2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3303      	adds	r3, #3
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	061a      	lsls	r2, r3, #24
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3302      	adds	r3, #2
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	041b      	lsls	r3, r3, #16
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	021b      	lsls	r3, r3, #8
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	7812      	ldrb	r2, [r2, #0]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <ETH_MACAddressConfig+0x6c>)
 8002cca:	4413      	add	r3, r2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	6013      	str	r3, [r2, #0]
}
 8002cd2:	bf00      	nop
 8002cd4:	371c      	adds	r7, #28
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40028040 	.word	0x40028040
 8002ce4:	40028044 	.word	0x40028044

08002ce8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	e03e      	b.n	8002d74 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68d9      	ldr	r1, [r3, #12]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	440b      	add	r3, r1
 8002d06:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2200      	movs	r2, #0
 8002d12:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002d20:	68b9      	ldr	r1, [r7, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	3206      	adds	r2, #6
 8002d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d80c      	bhi.n	8002d58 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68d9      	ldr	r1, [r3, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	440b      	add	r3, r1
 8002d50:	461a      	mov	r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	e004      	b.n	8002d62 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	3301      	adds	r3, #1
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2b03      	cmp	r3, #3
 8002d78:	d9bd      	bls.n	8002cf6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d8c:	611a      	str	r2, [r3, #16]
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b085      	sub	sp, #20
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	e046      	b.n	8002e36 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6919      	ldr	r1, [r3, #16]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	440b      	add	r3, r1
 8002db8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002de4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002dec:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	3212      	adds	r2, #18
 8002e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d80c      	bhi.n	8002e26 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6919      	ldr	r1, [r3, #16]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	440b      	add	r3, r1
 8002e1e:	461a      	mov	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	60da      	str	r2, [r3, #12]
 8002e24:	e004      	b.n	8002e30 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	3301      	adds	r3, #1
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d9b5      	bls.n	8002da8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e66:	60da      	str	r2, [r3, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b08d      	sub	sp, #52	; 0x34
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3318      	adds	r3, #24
 8002e84:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e9e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002eb6:	d007      	beq.n	8002ec8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e103      	b.n	80030d4 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	3301      	adds	r3, #1
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002ee4:	f023 031f 	bic.w	r3, r3, #31
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	6852      	ldr	r2, [r2, #4]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002f52:	f3bf 8f5f 	dmb	sy
}
 8002f56:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002f64:	e084      	b.n	8003070 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d006      	beq.n	8002f86 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	e005      	b.n	8002f92 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f94:	3301      	adds	r3, #1
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d902      	bls.n	8002fa4 <ETH_Prepare_Tx_Descriptors+0x130>
 8002f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa0:	3b04      	subs	r3, #4
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fac:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fc6:	d007      	beq.n	8002fd8 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	3304      	adds	r3, #4
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d029      	beq.n	800302c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fea:	e019      	b.n	8003020 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002fec:	f3bf 8f5f 	dmb	sy
}
 8002ff0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003000:	3301      	adds	r3, #1
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003006:	2b03      	cmp	r3, #3
 8003008:	d902      	bls.n	8003010 <ETH_Prepare_Tx_Descriptors+0x19c>
 800300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300c:	3b04      	subs	r3, #4
 800300e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003018:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800301a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301c:	3301      	adds	r3, #1
 800301e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	429a      	cmp	r2, r3
 8003026:	d3e1      	bcc.n	8002fec <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8003028:	2302      	movs	r3, #2
 800302a:	e053      	b.n	80030d4 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	3301      	adds	r3, #1
 8003030:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800304a:	f023 031f 	bic.w	r3, r3, #31
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	6852      	ldr	r2, [r2, #4]
 8003052:	431a      	orrs	r2, r3
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	3301      	adds	r3, #1
 800305c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800305e:	f3bf 8f5f 	dmb	sy
}
 8003062:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	f47f af76 	bne.w	8002f66 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	e005      	b.n	800309a <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030aa:	6979      	ldr	r1, [r7, #20]
 80030ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ae:	3304      	adds	r3, #4
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ba:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80030bc:	b672      	cpsid	i
}
 80030be:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	4413      	add	r3, r2
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80030ce:	b662      	cpsie	i
}
 80030d0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3734      	adds	r7, #52	; 0x34
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	; 0x24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	e177      	b.n	80033ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030fc:	2201      	movs	r2, #1
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4013      	ands	r3, r2
 800310e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	429a      	cmp	r2, r3
 8003116:	f040 8166 	bne.w	80033e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d005      	beq.n	8003132 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800312e:	2b02      	cmp	r3, #2
 8003130:	d130      	bne.n	8003194 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	2203      	movs	r2, #3
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003168:	2201      	movs	r2, #1
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	091b      	lsrs	r3, r3, #4
 800317e:	f003 0201 	and.w	r2, r3, #1
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	2b03      	cmp	r3, #3
 800319e:	d017      	beq.n	80031d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	2203      	movs	r2, #3
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d123      	bne.n	8003224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	08da      	lsrs	r2, r3, #3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3208      	adds	r2, #8
 80031e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	220f      	movs	r2, #15
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	08da      	lsrs	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3208      	adds	r2, #8
 800321e:	69b9      	ldr	r1, [r7, #24]
 8003220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	2203      	movs	r2, #3
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 0203 	and.w	r2, r3, #3
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80c0 	beq.w	80033e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	4b66      	ldr	r3, [pc, #408]	; (8003404 <HAL_GPIO_Init+0x324>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	4a65      	ldr	r2, [pc, #404]	; (8003404 <HAL_GPIO_Init+0x324>)
 8003270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003274:	6453      	str	r3, [r2, #68]	; 0x44
 8003276:	4b63      	ldr	r3, [pc, #396]	; (8003404 <HAL_GPIO_Init+0x324>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003282:	4a61      	ldr	r2, [pc, #388]	; (8003408 <HAL_GPIO_Init+0x328>)
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	089b      	lsrs	r3, r3, #2
 8003288:	3302      	adds	r3, #2
 800328a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	220f      	movs	r2, #15
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a58      	ldr	r2, [pc, #352]	; (800340c <HAL_GPIO_Init+0x32c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d037      	beq.n	800331e <HAL_GPIO_Init+0x23e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a57      	ldr	r2, [pc, #348]	; (8003410 <HAL_GPIO_Init+0x330>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d031      	beq.n	800331a <HAL_GPIO_Init+0x23a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a56      	ldr	r2, [pc, #344]	; (8003414 <HAL_GPIO_Init+0x334>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d02b      	beq.n	8003316 <HAL_GPIO_Init+0x236>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a55      	ldr	r2, [pc, #340]	; (8003418 <HAL_GPIO_Init+0x338>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d025      	beq.n	8003312 <HAL_GPIO_Init+0x232>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a54      	ldr	r2, [pc, #336]	; (800341c <HAL_GPIO_Init+0x33c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d01f      	beq.n	800330e <HAL_GPIO_Init+0x22e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a53      	ldr	r2, [pc, #332]	; (8003420 <HAL_GPIO_Init+0x340>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d019      	beq.n	800330a <HAL_GPIO_Init+0x22a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a52      	ldr	r2, [pc, #328]	; (8003424 <HAL_GPIO_Init+0x344>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d013      	beq.n	8003306 <HAL_GPIO_Init+0x226>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a51      	ldr	r2, [pc, #324]	; (8003428 <HAL_GPIO_Init+0x348>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00d      	beq.n	8003302 <HAL_GPIO_Init+0x222>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a50      	ldr	r2, [pc, #320]	; (800342c <HAL_GPIO_Init+0x34c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d007      	beq.n	80032fe <HAL_GPIO_Init+0x21e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a4f      	ldr	r2, [pc, #316]	; (8003430 <HAL_GPIO_Init+0x350>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d101      	bne.n	80032fa <HAL_GPIO_Init+0x21a>
 80032f6:	2309      	movs	r3, #9
 80032f8:	e012      	b.n	8003320 <HAL_GPIO_Init+0x240>
 80032fa:	230a      	movs	r3, #10
 80032fc:	e010      	b.n	8003320 <HAL_GPIO_Init+0x240>
 80032fe:	2308      	movs	r3, #8
 8003300:	e00e      	b.n	8003320 <HAL_GPIO_Init+0x240>
 8003302:	2307      	movs	r3, #7
 8003304:	e00c      	b.n	8003320 <HAL_GPIO_Init+0x240>
 8003306:	2306      	movs	r3, #6
 8003308:	e00a      	b.n	8003320 <HAL_GPIO_Init+0x240>
 800330a:	2305      	movs	r3, #5
 800330c:	e008      	b.n	8003320 <HAL_GPIO_Init+0x240>
 800330e:	2304      	movs	r3, #4
 8003310:	e006      	b.n	8003320 <HAL_GPIO_Init+0x240>
 8003312:	2303      	movs	r3, #3
 8003314:	e004      	b.n	8003320 <HAL_GPIO_Init+0x240>
 8003316:	2302      	movs	r3, #2
 8003318:	e002      	b.n	8003320 <HAL_GPIO_Init+0x240>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_GPIO_Init+0x240>
 800331e:	2300      	movs	r3, #0
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	f002 0203 	and.w	r2, r2, #3
 8003326:	0092      	lsls	r2, r2, #2
 8003328:	4093      	lsls	r3, r2
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003330:	4935      	ldr	r1, [pc, #212]	; (8003408 <HAL_GPIO_Init+0x328>)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	089b      	lsrs	r3, r3, #2
 8003336:	3302      	adds	r3, #2
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800333e:	4b3d      	ldr	r3, [pc, #244]	; (8003434 <HAL_GPIO_Init+0x354>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003362:	4a34      	ldr	r2, [pc, #208]	; (8003434 <HAL_GPIO_Init+0x354>)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003368:	4b32      	ldr	r3, [pc, #200]	; (8003434 <HAL_GPIO_Init+0x354>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800338c:	4a29      	ldr	r2, [pc, #164]	; (8003434 <HAL_GPIO_Init+0x354>)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003392:	4b28      	ldr	r3, [pc, #160]	; (8003434 <HAL_GPIO_Init+0x354>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033b6:	4a1f      	ldr	r2, [pc, #124]	; (8003434 <HAL_GPIO_Init+0x354>)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033bc:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <HAL_GPIO_Init+0x354>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e0:	4a14      	ldr	r2, [pc, #80]	; (8003434 <HAL_GPIO_Init+0x354>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3301      	adds	r3, #1
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b0f      	cmp	r3, #15
 80033f0:	f67f ae84 	bls.w	80030fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	3724      	adds	r7, #36	; 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40023800 	.word	0x40023800
 8003408:	40013800 	.word	0x40013800
 800340c:	40020000 	.word	0x40020000
 8003410:	40020400 	.word	0x40020400
 8003414:	40020800 	.word	0x40020800
 8003418:	40020c00 	.word	0x40020c00
 800341c:	40021000 	.word	0x40021000
 8003420:	40021400 	.word	0x40021400
 8003424:	40021800 	.word	0x40021800
 8003428:	40021c00 	.word	0x40021c00
 800342c:	40022000 	.word	0x40022000
 8003430:	40022400 	.word	0x40022400
 8003434:	40013c00 	.word	0x40013c00

08003438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	807b      	strh	r3, [r7, #2]
 8003444:	4613      	mov	r3, r2
 8003446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003448:	787b      	ldrb	r3, [r7, #1]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800344e:	887a      	ldrh	r2, [r7, #2]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003454:	e003      	b.n	800345e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003456:	887b      	ldrh	r3, [r7, #2]
 8003458:	041a      	lsls	r2, r3, #16
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	619a      	str	r2, [r3, #24]
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e267      	b.n	800394e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d075      	beq.n	8003576 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800348a:	4b88      	ldr	r3, [pc, #544]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b04      	cmp	r3, #4
 8003494:	d00c      	beq.n	80034b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003496:	4b85      	ldr	r3, [pc, #532]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d112      	bne.n	80034c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034a2:	4b82      	ldr	r3, [pc, #520]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ae:	d10b      	bne.n	80034c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	4b7e      	ldr	r3, [pc, #504]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d05b      	beq.n	8003574 <HAL_RCC_OscConfig+0x108>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d157      	bne.n	8003574 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e242      	b.n	800394e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d0:	d106      	bne.n	80034e0 <HAL_RCC_OscConfig+0x74>
 80034d2:	4b76      	ldr	r3, [pc, #472]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a75      	ldr	r2, [pc, #468]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 80034d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	e01d      	b.n	800351c <HAL_RCC_OscConfig+0xb0>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034e8:	d10c      	bne.n	8003504 <HAL_RCC_OscConfig+0x98>
 80034ea:	4b70      	ldr	r3, [pc, #448]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a6f      	ldr	r2, [pc, #444]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 80034f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	4b6d      	ldr	r3, [pc, #436]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a6c      	ldr	r2, [pc, #432]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 80034fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	e00b      	b.n	800351c <HAL_RCC_OscConfig+0xb0>
 8003504:	4b69      	ldr	r3, [pc, #420]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a68      	ldr	r2, [pc, #416]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 800350a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	4b66      	ldr	r3, [pc, #408]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a65      	ldr	r2, [pc, #404]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 8003516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800351a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d013      	beq.n	800354c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7fd ff90 	bl	8001448 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800352c:	f7fd ff8c 	bl	8001448 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b64      	cmp	r3, #100	; 0x64
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e207      	b.n	800394e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353e:	4b5b      	ldr	r3, [pc, #364]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0xc0>
 800354a:	e014      	b.n	8003576 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354c:	f7fd ff7c 	bl	8001448 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003554:	f7fd ff78 	bl	8001448 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b64      	cmp	r3, #100	; 0x64
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e1f3      	b.n	800394e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003566:	4b51      	ldr	r3, [pc, #324]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0xe8>
 8003572:	e000      	b.n	8003576 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d063      	beq.n	800364a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003582:	4b4a      	ldr	r3, [pc, #296]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 030c 	and.w	r3, r3, #12
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00b      	beq.n	80035a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800358e:	4b47      	ldr	r3, [pc, #284]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003596:	2b08      	cmp	r3, #8
 8003598:	d11c      	bne.n	80035d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800359a:	4b44      	ldr	r3, [pc, #272]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d116      	bne.n	80035d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035a6:	4b41      	ldr	r3, [pc, #260]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d005      	beq.n	80035be <HAL_RCC_OscConfig+0x152>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d001      	beq.n	80035be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e1c7      	b.n	800394e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035be:	4b3b      	ldr	r3, [pc, #236]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4937      	ldr	r1, [pc, #220]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d2:	e03a      	b.n	800364a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d020      	beq.n	800361e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035dc:	4b34      	ldr	r3, [pc, #208]	; (80036b0 <HAL_RCC_OscConfig+0x244>)
 80035de:	2201      	movs	r2, #1
 80035e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e2:	f7fd ff31 	bl	8001448 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ea:	f7fd ff2d 	bl	8001448 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e1a8      	b.n	800394e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fc:	4b2b      	ldr	r3, [pc, #172]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0f0      	beq.n	80035ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003608:	4b28      	ldr	r3, [pc, #160]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4925      	ldr	r1, [pc, #148]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 8003618:	4313      	orrs	r3, r2
 800361a:	600b      	str	r3, [r1, #0]
 800361c:	e015      	b.n	800364a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800361e:	4b24      	ldr	r3, [pc, #144]	; (80036b0 <HAL_RCC_OscConfig+0x244>)
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fd ff10 	bl	8001448 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800362c:	f7fd ff0c 	bl	8001448 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e187      	b.n	800394e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363e:	4b1b      	ldr	r3, [pc, #108]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d036      	beq.n	80036c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d016      	beq.n	800368c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800365e:	4b15      	ldr	r3, [pc, #84]	; (80036b4 <HAL_RCC_OscConfig+0x248>)
 8003660:	2201      	movs	r2, #1
 8003662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003664:	f7fd fef0 	bl	8001448 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800366c:	f7fd feec 	bl	8001448 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e167      	b.n	800394e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367e:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_OscConfig+0x240>)
 8003680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0x200>
 800368a:	e01b      	b.n	80036c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <HAL_RCC_OscConfig+0x248>)
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003692:	f7fd fed9 	bl	8001448 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003698:	e00e      	b.n	80036b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800369a:	f7fd fed5 	bl	8001448 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d907      	bls.n	80036b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e150      	b.n	800394e <HAL_RCC_OscConfig+0x4e2>
 80036ac:	40023800 	.word	0x40023800
 80036b0:	42470000 	.word	0x42470000
 80036b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b8:	4b88      	ldr	r3, [pc, #544]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 80036ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1ea      	bne.n	800369a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 8097 	beq.w	8003800 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d2:	2300      	movs	r3, #0
 80036d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036d6:	4b81      	ldr	r3, [pc, #516]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10f      	bne.n	8003702 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	4b7d      	ldr	r3, [pc, #500]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	4a7c      	ldr	r2, [pc, #496]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 80036ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f0:	6413      	str	r3, [r2, #64]	; 0x40
 80036f2:	4b7a      	ldr	r3, [pc, #488]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fa:	60bb      	str	r3, [r7, #8]
 80036fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036fe:	2301      	movs	r3, #1
 8003700:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003702:	4b77      	ldr	r3, [pc, #476]	; (80038e0 <HAL_RCC_OscConfig+0x474>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d118      	bne.n	8003740 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800370e:	4b74      	ldr	r3, [pc, #464]	; (80038e0 <HAL_RCC_OscConfig+0x474>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a73      	ldr	r2, [pc, #460]	; (80038e0 <HAL_RCC_OscConfig+0x474>)
 8003714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800371a:	f7fd fe95 	bl	8001448 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003722:	f7fd fe91 	bl	8001448 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e10c      	b.n	800394e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003734:	4b6a      	ldr	r3, [pc, #424]	; (80038e0 <HAL_RCC_OscConfig+0x474>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d106      	bne.n	8003756 <HAL_RCC_OscConfig+0x2ea>
 8003748:	4b64      	ldr	r3, [pc, #400]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 800374a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374c:	4a63      	ldr	r2, [pc, #396]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	6713      	str	r3, [r2, #112]	; 0x70
 8003754:	e01c      	b.n	8003790 <HAL_RCC_OscConfig+0x324>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2b05      	cmp	r3, #5
 800375c:	d10c      	bne.n	8003778 <HAL_RCC_OscConfig+0x30c>
 800375e:	4b5f      	ldr	r3, [pc, #380]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 8003760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003762:	4a5e      	ldr	r2, [pc, #376]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 8003764:	f043 0304 	orr.w	r3, r3, #4
 8003768:	6713      	str	r3, [r2, #112]	; 0x70
 800376a:	4b5c      	ldr	r3, [pc, #368]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 800376c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376e:	4a5b      	ldr	r2, [pc, #364]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	6713      	str	r3, [r2, #112]	; 0x70
 8003776:	e00b      	b.n	8003790 <HAL_RCC_OscConfig+0x324>
 8003778:	4b58      	ldr	r3, [pc, #352]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	4a57      	ldr	r2, [pc, #348]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 800377e:	f023 0301 	bic.w	r3, r3, #1
 8003782:	6713      	str	r3, [r2, #112]	; 0x70
 8003784:	4b55      	ldr	r3, [pc, #340]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 8003786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003788:	4a54      	ldr	r2, [pc, #336]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 800378a:	f023 0304 	bic.w	r3, r3, #4
 800378e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d015      	beq.n	80037c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003798:	f7fd fe56 	bl	8001448 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379e:	e00a      	b.n	80037b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a0:	f7fd fe52 	bl	8001448 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e0cb      	b.n	800394e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b6:	4b49      	ldr	r3, [pc, #292]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0ee      	beq.n	80037a0 <HAL_RCC_OscConfig+0x334>
 80037c2:	e014      	b.n	80037ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c4:	f7fd fe40 	bl	8001448 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ca:	e00a      	b.n	80037e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037cc:	f7fd fe3c 	bl	8001448 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037da:	4293      	cmp	r3, r2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e0b5      	b.n	800394e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e2:	4b3e      	ldr	r3, [pc, #248]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1ee      	bne.n	80037cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d105      	bne.n	8003800 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f4:	4b39      	ldr	r3, [pc, #228]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	4a38      	ldr	r2, [pc, #224]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 80037fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 80a1 	beq.w	800394c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800380a:	4b34      	ldr	r3, [pc, #208]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b08      	cmp	r3, #8
 8003814:	d05c      	beq.n	80038d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d141      	bne.n	80038a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381e:	4b31      	ldr	r3, [pc, #196]	; (80038e4 <HAL_RCC_OscConfig+0x478>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003824:	f7fd fe10 	bl	8001448 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800382c:	f7fd fe0c 	bl	8001448 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e087      	b.n	800394e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383e:	4b27      	ldr	r3, [pc, #156]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69da      	ldr	r2, [r3, #28]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	019b      	lsls	r3, r3, #6
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	085b      	lsrs	r3, r3, #1
 8003862:	3b01      	subs	r3, #1
 8003864:	041b      	lsls	r3, r3, #16
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	061b      	lsls	r3, r3, #24
 800386e:	491b      	ldr	r1, [pc, #108]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 8003870:	4313      	orrs	r3, r2
 8003872:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003874:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <HAL_RCC_OscConfig+0x478>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387a:	f7fd fde5 	bl	8001448 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003882:	f7fd fde1 	bl	8001448 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e05c      	b.n	800394e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003894:	4b11      	ldr	r3, [pc, #68]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x416>
 80038a0:	e054      	b.n	800394c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a2:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <HAL_RCC_OscConfig+0x478>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fd fdce 	bl	8001448 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fd fdca 	bl	8001448 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e045      	b.n	800394e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c2:	4b06      	ldr	r3, [pc, #24]	; (80038dc <HAL_RCC_OscConfig+0x470>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x444>
 80038ce:	e03d      	b.n	800394c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d107      	bne.n	80038e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e038      	b.n	800394e <HAL_RCC_OscConfig+0x4e2>
 80038dc:	40023800 	.word	0x40023800
 80038e0:	40007000 	.word	0x40007000
 80038e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038e8:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <HAL_RCC_OscConfig+0x4ec>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d028      	beq.n	8003948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003900:	429a      	cmp	r2, r3
 8003902:	d121      	bne.n	8003948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d11a      	bne.n	8003948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003918:	4013      	ands	r3, r2
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800391e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003920:	4293      	cmp	r3, r2
 8003922:	d111      	bne.n	8003948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	085b      	lsrs	r3, r3, #1
 8003930:	3b01      	subs	r3, #1
 8003932:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003934:	429a      	cmp	r2, r3
 8003936:	d107      	bne.n	8003948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003942:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40023800 	.word	0x40023800

0800395c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e0cc      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003970:	4b68      	ldr	r3, [pc, #416]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 030f 	and.w	r3, r3, #15
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d90c      	bls.n	8003998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	4b65      	ldr	r3, [pc, #404]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003986:	4b63      	ldr	r3, [pc, #396]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0b8      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d020      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039b0:	4b59      	ldr	r3, [pc, #356]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	4a58      	ldr	r2, [pc, #352]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039c8:	4b53      	ldr	r3, [pc, #332]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	4a52      	ldr	r2, [pc, #328]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d4:	4b50      	ldr	r3, [pc, #320]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	494d      	ldr	r1, [pc, #308]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d044      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d107      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fa:	4b47      	ldr	r3, [pc, #284]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d119      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e07f      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d003      	beq.n	8003a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d107      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1a:	4b3f      	ldr	r3, [pc, #252]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e06f      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2a:	4b3b      	ldr	r3, [pc, #236]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e067      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a3a:	4b37      	ldr	r3, [pc, #220]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f023 0203 	bic.w	r2, r3, #3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4934      	ldr	r1, [pc, #208]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a4c:	f7fd fcfc 	bl	8001448 <HAL_GetTick>
 8003a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a54:	f7fd fcf8 	bl	8001448 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e04f      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6a:	4b2b      	ldr	r3, [pc, #172]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 020c 	and.w	r2, r3, #12
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d1eb      	bne.n	8003a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a7c:	4b25      	ldr	r3, [pc, #148]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d20c      	bcs.n	8003aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a8a:	4b22      	ldr	r3, [pc, #136]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a92:	4b20      	ldr	r3, [pc, #128]	; (8003b14 <HAL_RCC_ClockConfig+0x1b8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e032      	b.n	8003b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab0:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4916      	ldr	r1, [pc, #88]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d009      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ace:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	490e      	ldr	r1, [pc, #56]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ae2:	f000 f821 	bl	8003b28 <HAL_RCC_GetSysClockFreq>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	091b      	lsrs	r3, r3, #4
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	490a      	ldr	r1, [pc, #40]	; (8003b1c <HAL_RCC_ClockConfig+0x1c0>)
 8003af4:	5ccb      	ldrb	r3, [r1, r3]
 8003af6:	fa22 f303 	lsr.w	r3, r2, r3
 8003afa:	4a09      	ldr	r2, [pc, #36]	; (8003b20 <HAL_RCC_ClockConfig+0x1c4>)
 8003afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003afe:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <HAL_RCC_ClockConfig+0x1c8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fd f86c 	bl	8000be0 <HAL_InitTick>

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40023c00 	.word	0x40023c00
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	0801d44c 	.word	0x0801d44c
 8003b20:	20000000 	.word	0x20000000
 8003b24:	20000004 	.word	0x20000004

08003b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b2c:	b094      	sub	sp, #80	; 0x50
 8003b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	647b      	str	r3, [r7, #68]	; 0x44
 8003b34:	2300      	movs	r3, #0
 8003b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b38:	2300      	movs	r3, #0
 8003b3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b40:	4b79      	ldr	r3, [pc, #484]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 030c 	and.w	r3, r3, #12
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d00d      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0x40>
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	f200 80e1 	bhi.w	8003d14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <HAL_RCC_GetSysClockFreq+0x34>
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d003      	beq.n	8003b62 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b5a:	e0db      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b5c:	4b73      	ldr	r3, [pc, #460]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b5e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003b60:	e0db      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b62:	4b73      	ldr	r3, [pc, #460]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b66:	e0d8      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b68:	4b6f      	ldr	r3, [pc, #444]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b70:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b72:	4b6d      	ldr	r3, [pc, #436]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d063      	beq.n	8003c46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b7e:	4b6a      	ldr	r3, [pc, #424]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	099b      	lsrs	r3, r3, #6
 8003b84:	2200      	movs	r2, #0
 8003b86:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b90:	633b      	str	r3, [r7, #48]	; 0x30
 8003b92:	2300      	movs	r3, #0
 8003b94:	637b      	str	r3, [r7, #52]	; 0x34
 8003b96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b9a:	4622      	mov	r2, r4
 8003b9c:	462b      	mov	r3, r5
 8003b9e:	f04f 0000 	mov.w	r0, #0
 8003ba2:	f04f 0100 	mov.w	r1, #0
 8003ba6:	0159      	lsls	r1, r3, #5
 8003ba8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bac:	0150      	lsls	r0, r2, #5
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	1a51      	subs	r1, r2, r1
 8003bb6:	6139      	str	r1, [r7, #16]
 8003bb8:	4629      	mov	r1, r5
 8003bba:	eb63 0301 	sbc.w	r3, r3, r1
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bcc:	4659      	mov	r1, fp
 8003bce:	018b      	lsls	r3, r1, #6
 8003bd0:	4651      	mov	r1, sl
 8003bd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bd6:	4651      	mov	r1, sl
 8003bd8:	018a      	lsls	r2, r1, #6
 8003bda:	4651      	mov	r1, sl
 8003bdc:	ebb2 0801 	subs.w	r8, r2, r1
 8003be0:	4659      	mov	r1, fp
 8003be2:	eb63 0901 	sbc.w	r9, r3, r1
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bfa:	4690      	mov	r8, r2
 8003bfc:	4699      	mov	r9, r3
 8003bfe:	4623      	mov	r3, r4
 8003c00:	eb18 0303 	adds.w	r3, r8, r3
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	462b      	mov	r3, r5
 8003c08:	eb49 0303 	adc.w	r3, r9, r3
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	024b      	lsls	r3, r1, #9
 8003c1e:	4621      	mov	r1, r4
 8003c20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c24:	4621      	mov	r1, r4
 8003c26:	024a      	lsls	r2, r1, #9
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c2e:	2200      	movs	r2, #0
 8003c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c38:	f7fc fb42 	bl	80002c0 <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4613      	mov	r3, r2
 8003c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c44:	e058      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c46:	4b38      	ldr	r3, [pc, #224]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	099b      	lsrs	r3, r3, #6
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	4611      	mov	r1, r2
 8003c52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c56:	623b      	str	r3, [r7, #32]
 8003c58:	2300      	movs	r3, #0
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c60:	4642      	mov	r2, r8
 8003c62:	464b      	mov	r3, r9
 8003c64:	f04f 0000 	mov.w	r0, #0
 8003c68:	f04f 0100 	mov.w	r1, #0
 8003c6c:	0159      	lsls	r1, r3, #5
 8003c6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c72:	0150      	lsls	r0, r2, #5
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4641      	mov	r1, r8
 8003c7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c7e:	4649      	mov	r1, r9
 8003c80:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c98:	ebb2 040a 	subs.w	r4, r2, sl
 8003c9c:	eb63 050b 	sbc.w	r5, r3, fp
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	00eb      	lsls	r3, r5, #3
 8003caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cae:	00e2      	lsls	r2, r4, #3
 8003cb0:	4614      	mov	r4, r2
 8003cb2:	461d      	mov	r5, r3
 8003cb4:	4643      	mov	r3, r8
 8003cb6:	18e3      	adds	r3, r4, r3
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	464b      	mov	r3, r9
 8003cbc:	eb45 0303 	adc.w	r3, r5, r3
 8003cc0:	607b      	str	r3, [r7, #4]
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cce:	4629      	mov	r1, r5
 8003cd0:	028b      	lsls	r3, r1, #10
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cd8:	4621      	mov	r1, r4
 8003cda:	028a      	lsls	r2, r1, #10
 8003cdc:	4610      	mov	r0, r2
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	61fa      	str	r2, [r7, #28]
 8003ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cec:	f7fc fae8 	bl	80002c0 <__aeabi_uldivmod>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	0c1b      	lsrs	r3, r3, #16
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	3301      	adds	r3, #1
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d12:	e002      	b.n	8003d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d14:	4b05      	ldr	r3, [pc, #20]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3750      	adds	r7, #80	; 0x50
 8003d20:	46bd      	mov	sp, r7
 8003d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	00f42400 	.word	0x00f42400
 8003d30:	007a1200 	.word	0x007a1200

08003d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d38:	4b03      	ldr	r3, [pc, #12]	; (8003d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20000000 	.word	0x20000000

08003d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d50:	f7ff fff0 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8003d54:	4602      	mov	r2, r0
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	0a9b      	lsrs	r3, r3, #10
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	4903      	ldr	r1, [pc, #12]	; (8003d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d62:	5ccb      	ldrb	r3, [r1, r3]
 8003d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	0801d45c 	.word	0x0801d45c

08003d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d78:	f7ff ffdc 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	0b5b      	lsrs	r3, r3, #13
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	4903      	ldr	r1, [pc, #12]	; (8003d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d8a:	5ccb      	ldrb	r3, [r1, r3]
 8003d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40023800 	.word	0x40023800
 8003d98:	0801d45c 	.word	0x0801d45c

08003d9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	220f      	movs	r2, #15
 8003daa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003dac:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <HAL_RCC_GetClockConfig+0x5c>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 0203 	and.w	r2, r3, #3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003db8:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <HAL_RCC_GetClockConfig+0x5c>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <HAL_RCC_GetClockConfig+0x5c>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003dd0:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <HAL_RCC_GetClockConfig+0x5c>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	08db      	lsrs	r3, r3, #3
 8003dd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <HAL_RCC_GetClockConfig+0x60>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 020f 	and.w	r2, r3, #15
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	601a      	str	r2, [r3, #0]
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	40023c00 	.word	0x40023c00

08003e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e041      	b.n	8003e96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f839 	bl	8003e9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4610      	mov	r0, r2
 8003e40:	f000 f9d8 	bl	80041f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d001      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e04e      	b.n	8003f6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a23      	ldr	r2, [pc, #140]	; (8003f78 <HAL_TIM_Base_Start_IT+0xc4>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d022      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef6:	d01d      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1f      	ldr	r2, [pc, #124]	; (8003f7c <HAL_TIM_Base_Start_IT+0xc8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d018      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1e      	ldr	r2, [pc, #120]	; (8003f80 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d013      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00e      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d009      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a19      	ldr	r2, [pc, #100]	; (8003f8c <HAL_TIM_Base_Start_IT+0xd8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d004      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a18      	ldr	r2, [pc, #96]	; (8003f90 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d111      	bne.n	8003f58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b06      	cmp	r3, #6
 8003f44:	d010      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0201 	orr.w	r2, r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f56:	e007      	b.n	8003f68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800
 8003f84:	40000c00 	.word	0x40000c00
 8003f88:	40010400 	.word	0x40010400
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	40001800 	.word	0x40001800

08003f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d122      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d11b      	bne.n	8003ff0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f06f 0202 	mvn.w	r2, #2
 8003fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f8ee 	bl	80041b8 <HAL_TIM_IC_CaptureCallback>
 8003fdc:	e005      	b.n	8003fea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f8e0 	bl	80041a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f8f1 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	d122      	bne.n	8004044 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b04      	cmp	r3, #4
 800400a:	d11b      	bne.n	8004044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f06f 0204 	mvn.w	r2, #4
 8004014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2202      	movs	r2, #2
 800401a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f8c4 	bl	80041b8 <HAL_TIM_IC_CaptureCallback>
 8004030:	e005      	b.n	800403e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f8b6 	bl	80041a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f8c7 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b08      	cmp	r3, #8
 8004050:	d122      	bne.n	8004098 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b08      	cmp	r3, #8
 800405e:	d11b      	bne.n	8004098 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f06f 0208 	mvn.w	r2, #8
 8004068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2204      	movs	r2, #4
 800406e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f89a 	bl	80041b8 <HAL_TIM_IC_CaptureCallback>
 8004084:	e005      	b.n	8004092 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f88c 	bl	80041a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f89d 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b10      	cmp	r3, #16
 80040a4:	d122      	bne.n	80040ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f003 0310 	and.w	r3, r3, #16
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d11b      	bne.n	80040ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f06f 0210 	mvn.w	r2, #16
 80040bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2208      	movs	r2, #8
 80040c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f870 	bl	80041b8 <HAL_TIM_IC_CaptureCallback>
 80040d8:	e005      	b.n	80040e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f862 	bl	80041a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f873 	bl	80041cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d10e      	bne.n	8004118 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b01      	cmp	r3, #1
 8004106:	d107      	bne.n	8004118 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0201 	mvn.w	r2, #1
 8004110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7fc fc50 	bl	80009b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004122:	2b80      	cmp	r3, #128	; 0x80
 8004124:	d10e      	bne.n	8004144 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004130:	2b80      	cmp	r3, #128	; 0x80
 8004132:	d107      	bne.n	8004144 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800413c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f902 	bl	8004348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414e:	2b40      	cmp	r3, #64	; 0x40
 8004150:	d10e      	bne.n	8004170 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415c:	2b40      	cmp	r3, #64	; 0x40
 800415e:	d107      	bne.n	8004170 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f838 	bl	80041e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b20      	cmp	r3, #32
 800417c:	d10e      	bne.n	800419c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f003 0320 	and.w	r3, r3, #32
 8004188:	2b20      	cmp	r3, #32
 800418a:	d107      	bne.n	800419c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0220 	mvn.w	r2, #32
 8004194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f8cc 	bl	8004334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800419c:	bf00      	nop
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a40      	ldr	r2, [pc, #256]	; (8004308 <TIM_Base_SetConfig+0x114>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d013      	beq.n	8004234 <TIM_Base_SetConfig+0x40>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004212:	d00f      	beq.n	8004234 <TIM_Base_SetConfig+0x40>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a3d      	ldr	r2, [pc, #244]	; (800430c <TIM_Base_SetConfig+0x118>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00b      	beq.n	8004234 <TIM_Base_SetConfig+0x40>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a3c      	ldr	r2, [pc, #240]	; (8004310 <TIM_Base_SetConfig+0x11c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d007      	beq.n	8004234 <TIM_Base_SetConfig+0x40>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a3b      	ldr	r2, [pc, #236]	; (8004314 <TIM_Base_SetConfig+0x120>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d003      	beq.n	8004234 <TIM_Base_SetConfig+0x40>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a3a      	ldr	r2, [pc, #232]	; (8004318 <TIM_Base_SetConfig+0x124>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d108      	bne.n	8004246 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a2f      	ldr	r2, [pc, #188]	; (8004308 <TIM_Base_SetConfig+0x114>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d02b      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004254:	d027      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a2c      	ldr	r2, [pc, #176]	; (800430c <TIM_Base_SetConfig+0x118>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d023      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a2b      	ldr	r2, [pc, #172]	; (8004310 <TIM_Base_SetConfig+0x11c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d01f      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a2a      	ldr	r2, [pc, #168]	; (8004314 <TIM_Base_SetConfig+0x120>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d01b      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a29      	ldr	r2, [pc, #164]	; (8004318 <TIM_Base_SetConfig+0x124>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d017      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a28      	ldr	r2, [pc, #160]	; (800431c <TIM_Base_SetConfig+0x128>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d013      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a27      	ldr	r2, [pc, #156]	; (8004320 <TIM_Base_SetConfig+0x12c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00f      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a26      	ldr	r2, [pc, #152]	; (8004324 <TIM_Base_SetConfig+0x130>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00b      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a25      	ldr	r2, [pc, #148]	; (8004328 <TIM_Base_SetConfig+0x134>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d007      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a24      	ldr	r2, [pc, #144]	; (800432c <TIM_Base_SetConfig+0x138>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d003      	beq.n	80042a6 <TIM_Base_SetConfig+0xb2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a23      	ldr	r2, [pc, #140]	; (8004330 <TIM_Base_SetConfig+0x13c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d108      	bne.n	80042b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a0a      	ldr	r2, [pc, #40]	; (8004308 <TIM_Base_SetConfig+0x114>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d003      	beq.n	80042ec <TIM_Base_SetConfig+0xf8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a0c      	ldr	r2, [pc, #48]	; (8004318 <TIM_Base_SetConfig+0x124>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d103      	bne.n	80042f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	615a      	str	r2, [r3, #20]
}
 80042fa:	bf00      	nop
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40010000 	.word	0x40010000
 800430c:	40000400 	.word	0x40000400
 8004310:	40000800 	.word	0x40000800
 8004314:	40000c00 	.word	0x40000c00
 8004318:	40010400 	.word	0x40010400
 800431c:	40014000 	.word	0x40014000
 8004320:	40014400 	.word	0x40014400
 8004324:	40014800 	.word	0x40014800
 8004328:	40001800 	.word	0x40001800
 800432c:	40001c00 	.word	0x40001c00
 8004330:	40002000 	.word	0x40002000

08004334 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e03f      	b.n	80043ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fc fb5c 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2224      	movs	r2, #36	; 0x24
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800439e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f829 	bl	80043f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	695a      	ldr	r2, [r3, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2220      	movs	r2, #32
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043fc:	b0c0      	sub	sp, #256	; 0x100
 80043fe:	af00      	add	r7, sp, #0
 8004400:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004414:	68d9      	ldr	r1, [r3, #12]
 8004416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	ea40 0301 	orr.w	r3, r0, r1
 8004420:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	431a      	orrs	r2, r3
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	431a      	orrs	r2, r3
 8004438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004450:	f021 010c 	bic.w	r1, r1, #12
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800445e:	430b      	orrs	r3, r1
 8004460:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800446e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004472:	6999      	ldr	r1, [r3, #24]
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	ea40 0301 	orr.w	r3, r0, r1
 800447e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4b8f      	ldr	r3, [pc, #572]	; (80046c4 <UART_SetConfig+0x2cc>)
 8004488:	429a      	cmp	r2, r3
 800448a:	d005      	beq.n	8004498 <UART_SetConfig+0xa0>
 800448c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	4b8d      	ldr	r3, [pc, #564]	; (80046c8 <UART_SetConfig+0x2d0>)
 8004494:	429a      	cmp	r2, r3
 8004496:	d104      	bne.n	80044a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004498:	f7ff fc6c 	bl	8003d74 <HAL_RCC_GetPCLK2Freq>
 800449c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044a0:	e003      	b.n	80044aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044a2:	f7ff fc53 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 80044a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b4:	f040 810c 	bne.w	80046d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044bc:	2200      	movs	r2, #0
 80044be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044ca:	4622      	mov	r2, r4
 80044cc:	462b      	mov	r3, r5
 80044ce:	1891      	adds	r1, r2, r2
 80044d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80044d2:	415b      	adcs	r3, r3
 80044d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044da:	4621      	mov	r1, r4
 80044dc:	eb12 0801 	adds.w	r8, r2, r1
 80044e0:	4629      	mov	r1, r5
 80044e2:	eb43 0901 	adc.w	r9, r3, r1
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044fa:	4690      	mov	r8, r2
 80044fc:	4699      	mov	r9, r3
 80044fe:	4623      	mov	r3, r4
 8004500:	eb18 0303 	adds.w	r3, r8, r3
 8004504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004508:	462b      	mov	r3, r5
 800450a:	eb49 0303 	adc.w	r3, r9, r3
 800450e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800451e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004522:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004526:	460b      	mov	r3, r1
 8004528:	18db      	adds	r3, r3, r3
 800452a:	653b      	str	r3, [r7, #80]	; 0x50
 800452c:	4613      	mov	r3, r2
 800452e:	eb42 0303 	adc.w	r3, r2, r3
 8004532:	657b      	str	r3, [r7, #84]	; 0x54
 8004534:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004538:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800453c:	f7fb fec0 	bl	80002c0 <__aeabi_uldivmod>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4b61      	ldr	r3, [pc, #388]	; (80046cc <UART_SetConfig+0x2d4>)
 8004546:	fba3 2302 	umull	r2, r3, r3, r2
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	011c      	lsls	r4, r3, #4
 800454e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004552:	2200      	movs	r2, #0
 8004554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004558:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800455c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004560:	4642      	mov	r2, r8
 8004562:	464b      	mov	r3, r9
 8004564:	1891      	adds	r1, r2, r2
 8004566:	64b9      	str	r1, [r7, #72]	; 0x48
 8004568:	415b      	adcs	r3, r3
 800456a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800456c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004570:	4641      	mov	r1, r8
 8004572:	eb12 0a01 	adds.w	sl, r2, r1
 8004576:	4649      	mov	r1, r9
 8004578:	eb43 0b01 	adc.w	fp, r3, r1
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004588:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800458c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004590:	4692      	mov	sl, r2
 8004592:	469b      	mov	fp, r3
 8004594:	4643      	mov	r3, r8
 8004596:	eb1a 0303 	adds.w	r3, sl, r3
 800459a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800459e:	464b      	mov	r3, r9
 80045a0:	eb4b 0303 	adc.w	r3, fp, r3
 80045a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045bc:	460b      	mov	r3, r1
 80045be:	18db      	adds	r3, r3, r3
 80045c0:	643b      	str	r3, [r7, #64]	; 0x40
 80045c2:	4613      	mov	r3, r2
 80045c4:	eb42 0303 	adc.w	r3, r2, r3
 80045c8:	647b      	str	r3, [r7, #68]	; 0x44
 80045ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045d2:	f7fb fe75 	bl	80002c0 <__aeabi_uldivmod>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4611      	mov	r1, r2
 80045dc:	4b3b      	ldr	r3, [pc, #236]	; (80046cc <UART_SetConfig+0x2d4>)
 80045de:	fba3 2301 	umull	r2, r3, r3, r1
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	2264      	movs	r2, #100	; 0x64
 80045e6:	fb02 f303 	mul.w	r3, r2, r3
 80045ea:	1acb      	subs	r3, r1, r3
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045f2:	4b36      	ldr	r3, [pc, #216]	; (80046cc <UART_SetConfig+0x2d4>)
 80045f4:	fba3 2302 	umull	r2, r3, r3, r2
 80045f8:	095b      	lsrs	r3, r3, #5
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004600:	441c      	add	r4, r3
 8004602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004606:	2200      	movs	r2, #0
 8004608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800460c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004610:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004614:	4642      	mov	r2, r8
 8004616:	464b      	mov	r3, r9
 8004618:	1891      	adds	r1, r2, r2
 800461a:	63b9      	str	r1, [r7, #56]	; 0x38
 800461c:	415b      	adcs	r3, r3
 800461e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004620:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004624:	4641      	mov	r1, r8
 8004626:	1851      	adds	r1, r2, r1
 8004628:	6339      	str	r1, [r7, #48]	; 0x30
 800462a:	4649      	mov	r1, r9
 800462c:	414b      	adcs	r3, r1
 800462e:	637b      	str	r3, [r7, #52]	; 0x34
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800463c:	4659      	mov	r1, fp
 800463e:	00cb      	lsls	r3, r1, #3
 8004640:	4651      	mov	r1, sl
 8004642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004646:	4651      	mov	r1, sl
 8004648:	00ca      	lsls	r2, r1, #3
 800464a:	4610      	mov	r0, r2
 800464c:	4619      	mov	r1, r3
 800464e:	4603      	mov	r3, r0
 8004650:	4642      	mov	r2, r8
 8004652:	189b      	adds	r3, r3, r2
 8004654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004658:	464b      	mov	r3, r9
 800465a:	460a      	mov	r2, r1
 800465c:	eb42 0303 	adc.w	r3, r2, r3
 8004660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004670:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004674:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004678:	460b      	mov	r3, r1
 800467a:	18db      	adds	r3, r3, r3
 800467c:	62bb      	str	r3, [r7, #40]	; 0x28
 800467e:	4613      	mov	r3, r2
 8004680:	eb42 0303 	adc.w	r3, r2, r3
 8004684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004686:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800468a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800468e:	f7fb fe17 	bl	80002c0 <__aeabi_uldivmod>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <UART_SetConfig+0x2d4>)
 8004698:	fba3 1302 	umull	r1, r3, r3, r2
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	2164      	movs	r1, #100	; 0x64
 80046a0:	fb01 f303 	mul.w	r3, r1, r3
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	3332      	adds	r3, #50	; 0x32
 80046aa:	4a08      	ldr	r2, [pc, #32]	; (80046cc <UART_SetConfig+0x2d4>)
 80046ac:	fba2 2303 	umull	r2, r3, r2, r3
 80046b0:	095b      	lsrs	r3, r3, #5
 80046b2:	f003 0207 	and.w	r2, r3, #7
 80046b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4422      	add	r2, r4
 80046be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046c0:	e106      	b.n	80048d0 <UART_SetConfig+0x4d8>
 80046c2:	bf00      	nop
 80046c4:	40011000 	.word	0x40011000
 80046c8:	40011400 	.word	0x40011400
 80046cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046d4:	2200      	movs	r2, #0
 80046d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046e2:	4642      	mov	r2, r8
 80046e4:	464b      	mov	r3, r9
 80046e6:	1891      	adds	r1, r2, r2
 80046e8:	6239      	str	r1, [r7, #32]
 80046ea:	415b      	adcs	r3, r3
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
 80046ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046f2:	4641      	mov	r1, r8
 80046f4:	1854      	adds	r4, r2, r1
 80046f6:	4649      	mov	r1, r9
 80046f8:	eb43 0501 	adc.w	r5, r3, r1
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	00eb      	lsls	r3, r5, #3
 8004706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800470a:	00e2      	lsls	r2, r4, #3
 800470c:	4614      	mov	r4, r2
 800470e:	461d      	mov	r5, r3
 8004710:	4643      	mov	r3, r8
 8004712:	18e3      	adds	r3, r4, r3
 8004714:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004718:	464b      	mov	r3, r9
 800471a:	eb45 0303 	adc.w	r3, r5, r3
 800471e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800472e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800473e:	4629      	mov	r1, r5
 8004740:	008b      	lsls	r3, r1, #2
 8004742:	4621      	mov	r1, r4
 8004744:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004748:	4621      	mov	r1, r4
 800474a:	008a      	lsls	r2, r1, #2
 800474c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004750:	f7fb fdb6 	bl	80002c0 <__aeabi_uldivmod>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4b60      	ldr	r3, [pc, #384]	; (80048dc <UART_SetConfig+0x4e4>)
 800475a:	fba3 2302 	umull	r2, r3, r3, r2
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	011c      	lsls	r4, r3, #4
 8004762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004766:	2200      	movs	r2, #0
 8004768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800476c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004770:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004774:	4642      	mov	r2, r8
 8004776:	464b      	mov	r3, r9
 8004778:	1891      	adds	r1, r2, r2
 800477a:	61b9      	str	r1, [r7, #24]
 800477c:	415b      	adcs	r3, r3
 800477e:	61fb      	str	r3, [r7, #28]
 8004780:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004784:	4641      	mov	r1, r8
 8004786:	1851      	adds	r1, r2, r1
 8004788:	6139      	str	r1, [r7, #16]
 800478a:	4649      	mov	r1, r9
 800478c:	414b      	adcs	r3, r1
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800479c:	4659      	mov	r1, fp
 800479e:	00cb      	lsls	r3, r1, #3
 80047a0:	4651      	mov	r1, sl
 80047a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047a6:	4651      	mov	r1, sl
 80047a8:	00ca      	lsls	r2, r1, #3
 80047aa:	4610      	mov	r0, r2
 80047ac:	4619      	mov	r1, r3
 80047ae:	4603      	mov	r3, r0
 80047b0:	4642      	mov	r2, r8
 80047b2:	189b      	adds	r3, r3, r2
 80047b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047b8:	464b      	mov	r3, r9
 80047ba:	460a      	mov	r2, r1
 80047bc:	eb42 0303 	adc.w	r3, r2, r3
 80047c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80047ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047dc:	4649      	mov	r1, r9
 80047de:	008b      	lsls	r3, r1, #2
 80047e0:	4641      	mov	r1, r8
 80047e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047e6:	4641      	mov	r1, r8
 80047e8:	008a      	lsls	r2, r1, #2
 80047ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047ee:	f7fb fd67 	bl	80002c0 <__aeabi_uldivmod>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4611      	mov	r1, r2
 80047f8:	4b38      	ldr	r3, [pc, #224]	; (80048dc <UART_SetConfig+0x4e4>)
 80047fa:	fba3 2301 	umull	r2, r3, r3, r1
 80047fe:	095b      	lsrs	r3, r3, #5
 8004800:	2264      	movs	r2, #100	; 0x64
 8004802:	fb02 f303 	mul.w	r3, r2, r3
 8004806:	1acb      	subs	r3, r1, r3
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	3332      	adds	r3, #50	; 0x32
 800480c:	4a33      	ldr	r2, [pc, #204]	; (80048dc <UART_SetConfig+0x4e4>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004818:	441c      	add	r4, r3
 800481a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800481e:	2200      	movs	r2, #0
 8004820:	673b      	str	r3, [r7, #112]	; 0x70
 8004822:	677a      	str	r2, [r7, #116]	; 0x74
 8004824:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004828:	4642      	mov	r2, r8
 800482a:	464b      	mov	r3, r9
 800482c:	1891      	adds	r1, r2, r2
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	415b      	adcs	r3, r3
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004838:	4641      	mov	r1, r8
 800483a:	1851      	adds	r1, r2, r1
 800483c:	6039      	str	r1, [r7, #0]
 800483e:	4649      	mov	r1, r9
 8004840:	414b      	adcs	r3, r1
 8004842:	607b      	str	r3, [r7, #4]
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004850:	4659      	mov	r1, fp
 8004852:	00cb      	lsls	r3, r1, #3
 8004854:	4651      	mov	r1, sl
 8004856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800485a:	4651      	mov	r1, sl
 800485c:	00ca      	lsls	r2, r1, #3
 800485e:	4610      	mov	r0, r2
 8004860:	4619      	mov	r1, r3
 8004862:	4603      	mov	r3, r0
 8004864:	4642      	mov	r2, r8
 8004866:	189b      	adds	r3, r3, r2
 8004868:	66bb      	str	r3, [r7, #104]	; 0x68
 800486a:	464b      	mov	r3, r9
 800486c:	460a      	mov	r2, r1
 800486e:	eb42 0303 	adc.w	r3, r2, r3
 8004872:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	663b      	str	r3, [r7, #96]	; 0x60
 800487e:	667a      	str	r2, [r7, #100]	; 0x64
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800488c:	4649      	mov	r1, r9
 800488e:	008b      	lsls	r3, r1, #2
 8004890:	4641      	mov	r1, r8
 8004892:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004896:	4641      	mov	r1, r8
 8004898:	008a      	lsls	r2, r1, #2
 800489a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800489e:	f7fb fd0f 	bl	80002c0 <__aeabi_uldivmod>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	4b0d      	ldr	r3, [pc, #52]	; (80048dc <UART_SetConfig+0x4e4>)
 80048a8:	fba3 1302 	umull	r1, r3, r3, r2
 80048ac:	095b      	lsrs	r3, r3, #5
 80048ae:	2164      	movs	r1, #100	; 0x64
 80048b0:	fb01 f303 	mul.w	r3, r1, r3
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	3332      	adds	r3, #50	; 0x32
 80048ba:	4a08      	ldr	r2, [pc, #32]	; (80048dc <UART_SetConfig+0x4e4>)
 80048bc:	fba2 2303 	umull	r2, r3, r2, r3
 80048c0:	095b      	lsrs	r3, r3, #5
 80048c2:	f003 020f 	and.w	r2, r3, #15
 80048c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4422      	add	r2, r4
 80048ce:	609a      	str	r2, [r3, #8]
}
 80048d0:	bf00      	nop
 80048d2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048d6:	46bd      	mov	sp, r7
 80048d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048dc:	51eb851f 	.word	0x51eb851f

080048e0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80048e0:	b5b0      	push	{r4, r5, r7, lr}
 80048e2:	b08c      	sub	sp, #48	; 0x30
 80048e4:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80048e6:	2100      	movs	r1, #0
 80048e8:	2000      	movs	r0, #0
 80048ea:	f005 ffdd 	bl	800a8a8 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80048ee:	4b20      	ldr	r3, [pc, #128]	; (8004970 <MX_LWIP_Init+0x90>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80048f4:	4b1f      	ldr	r3, [pc, #124]	; (8004974 <MX_LWIP_Init+0x94>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80048fa:	4b1f      	ldr	r3, [pc, #124]	; (8004978 <MX_LWIP_Init+0x98>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004900:	4b1e      	ldr	r3, [pc, #120]	; (800497c <MX_LWIP_Init+0x9c>)
 8004902:	9302      	str	r3, [sp, #8]
 8004904:	4b1e      	ldr	r3, [pc, #120]	; (8004980 <MX_LWIP_Init+0xa0>)
 8004906:	9301      	str	r3, [sp, #4]
 8004908:	2300      	movs	r3, #0
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	4b1a      	ldr	r3, [pc, #104]	; (8004978 <MX_LWIP_Init+0x98>)
 800490e:	4a19      	ldr	r2, [pc, #100]	; (8004974 <MX_LWIP_Init+0x94>)
 8004910:	4917      	ldr	r1, [pc, #92]	; (8004970 <MX_LWIP_Init+0x90>)
 8004912:	481c      	ldr	r0, [pc, #112]	; (8004984 <MX_LWIP_Init+0xa4>)
 8004914:	f007 fbe2 	bl	800c0dc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004918:	481a      	ldr	r0, [pc, #104]	; (8004984 <MX_LWIP_Init+0xa4>)
 800491a:	f007 fd99 	bl	800c450 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800491e:	4b19      	ldr	r3, [pc, #100]	; (8004984 <MX_LWIP_Init+0xa4>)
 8004920:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004924:	089b      	lsrs	r3, r3, #2
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004930:	4814      	ldr	r0, [pc, #80]	; (8004984 <MX_LWIP_Init+0xa4>)
 8004932:	f007 fd9d 	bl	800c470 <netif_set_up>
 8004936:	e002      	b.n	800493e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004938:	4812      	ldr	r0, [pc, #72]	; (8004984 <MX_LWIP_Init+0xa4>)
 800493a:	f007 fe05 	bl	800c548 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800493e:	4912      	ldr	r1, [pc, #72]	; (8004988 <MX_LWIP_Init+0xa8>)
 8004940:	4810      	ldr	r0, [pc, #64]	; (8004984 <MX_LWIP_Init+0xa4>)
 8004942:	f007 fe9b 	bl	800c67c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004946:	4b11      	ldr	r3, [pc, #68]	; (800498c <MX_LWIP_Init+0xac>)
 8004948:	1d3c      	adds	r4, r7, #4
 800494a:	461d      	mov	r5, r3
 800494c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800494e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004950:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004954:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004958:	1d3b      	adds	r3, r7, #4
 800495a:	490a      	ldr	r1, [pc, #40]	; (8004984 <MX_LWIP_Init+0xa4>)
 800495c:	4618      	mov	r0, r3
 800495e:	f000 fd23 	bl	80053a8 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004962:	4808      	ldr	r0, [pc, #32]	; (8004984 <MX_LWIP_Init+0xa4>)
 8004964:	f00f ff56 	bl	8014814 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004968:	bf00      	nop
 800496a:	3720      	adds	r7, #32
 800496c:	46bd      	mov	sp, r7
 800496e:	bdb0      	pop	{r4, r5, r7, pc}
 8004970:	200004c0 	.word	0x200004c0
 8004974:	200004c4 	.word	0x200004c4
 8004978:	200004c8 	.word	0x200004c8
 800497c:	0800a7b9 	.word	0x0800a7b9
 8004980:	08004e31 	.word	0x08004e31
 8004984:	20000488 	.word	0x20000488
 8004988:	08004991 	.word	0x08004991
 800498c:	08019920 	.word	0x08019920

08004990 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80049ac:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <HAL_ETH_RxCpltCallback+0x1c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fe75 	bl	80056a0 <osSemaphoreRelease>
}
 80049b6:	bf00      	nop
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20004f98 	.word	0x20004f98

080049c4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80049cc:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <HAL_ETH_TxCpltCallback+0x1c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fe65 	bl	80056a0 <osSemaphoreRelease>
}
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20004f9c 	.word	0x20004f9c

080049e4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7fd ff65 	bl	80028bc <HAL_ETH_GetDMAError>
 80049f2:	4603      	mov	r3, r0
 80049f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f8:	2b80      	cmp	r3, #128	; 0x80
 80049fa:	d104      	bne.n	8004a06 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80049fc:	4b04      	ldr	r3, [pc, #16]	; (8004a10 <HAL_ETH_ErrorCallback+0x2c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fe4d 	bl	80056a0 <osSemaphoreRelease>
  }
}
 8004a06:	bf00      	nop
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20004f98 	.word	0x20004f98

08004a14 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004a14:	b5b0      	push	{r4, r5, r7, lr}
 8004a16:	b0a8      	sub	sp, #160	; 0xa0
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8004a22:	2300      	movs	r3, #0
 8004a24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8004a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a32:	2264      	movs	r2, #100	; 0x64
 8004a34:	2100      	movs	r1, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	f014 f81f 	bl	8018a7a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004a3c:	4b85      	ldr	r3, [pc, #532]	; (8004c54 <low_level_init+0x240>)
 8004a3e:	4a86      	ldr	r2, [pc, #536]	; (8004c58 <low_level_init+0x244>)
 8004a40:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004a42:	2300      	movs	r3, #0
 8004a44:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8004a48:	2380      	movs	r3, #128	; 0x80
 8004a4a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8004a4e:	23e1      	movs	r3, #225	; 0xe1
 8004a50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0xFE;
 8004a54:	23fe      	movs	r3, #254	; 0xfe
 8004a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0xEC;
 8004a5a:	23ec      	movs	r3, #236	; 0xec
 8004a5c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x72;
 8004a60:	2372      	movs	r3, #114	; 0x72
 8004a62:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8004a66:	4a7b      	ldr	r2, [pc, #492]	; (8004c54 <low_level_init+0x240>)
 8004a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a6c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004a6e:	4b79      	ldr	r3, [pc, #484]	; (8004c54 <low_level_init+0x240>)
 8004a70:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004a74:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004a76:	4b77      	ldr	r3, [pc, #476]	; (8004c54 <low_level_init+0x240>)
 8004a78:	4a78      	ldr	r2, [pc, #480]	; (8004c5c <low_level_init+0x248>)
 8004a7a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004a7c:	4b75      	ldr	r3, [pc, #468]	; (8004c54 <low_level_init+0x240>)
 8004a7e:	4a78      	ldr	r2, [pc, #480]	; (8004c60 <low_level_init+0x24c>)
 8004a80:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004a82:	4b74      	ldr	r3, [pc, #464]	; (8004c54 <low_level_init+0x240>)
 8004a84:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004a88:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004a8a:	4872      	ldr	r0, [pc, #456]	; (8004c54 <low_level_init+0x240>)
 8004a8c:	f7fd f8d8 	bl	8001c40 <HAL_ETH_Init>
 8004a90:	4603      	mov	r3, r0
 8004a92:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004a96:	2238      	movs	r2, #56	; 0x38
 8004a98:	2100      	movs	r1, #0
 8004a9a:	4872      	ldr	r0, [pc, #456]	; (8004c64 <low_level_init+0x250>)
 8004a9c:	f013 ffed 	bl	8018a7a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004aa0:	4b70      	ldr	r3, [pc, #448]	; (8004c64 <low_level_init+0x250>)
 8004aa2:	2221      	movs	r2, #33	; 0x21
 8004aa4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004aa6:	4b6f      	ldr	r3, [pc, #444]	; (8004c64 <low_level_init+0x250>)
 8004aa8:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8004aac:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004aae:	4b6d      	ldr	r3, [pc, #436]	; (8004c64 <low_level_init+0x250>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004ab4:	486c      	ldr	r0, [pc, #432]	; (8004c68 <low_level_init+0x254>)
 8004ab6:	f007 f9cb 	bl	800be50 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2206      	movs	r2, #6
 8004abe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004ac2:	4b64      	ldr	r3, [pc, #400]	; (8004c54 <low_level_init+0x240>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	781a      	ldrb	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004ace:	4b61      	ldr	r3, [pc, #388]	; (8004c54 <low_level_init+0x240>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	785a      	ldrb	r2, [r3, #1]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004ada:	4b5e      	ldr	r3, [pc, #376]	; (8004c54 <low_level_init+0x240>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	789a      	ldrb	r2, [r3, #2]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004ae6:	4b5b      	ldr	r3, [pc, #364]	; (8004c54 <low_level_init+0x240>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	78da      	ldrb	r2, [r3, #3]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004af2:	4b58      	ldr	r3, [pc, #352]	; (8004c54 <low_level_init+0x240>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	791a      	ldrb	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004afe:	4b55      	ldr	r3, [pc, #340]	; (8004c54 <low_level_init+0x240>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	795a      	ldrb	r2, [r3, #5]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004b10:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004b18:	f043 030a 	orr.w	r3, r3, #10
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8004b24:	2203      	movs	r2, #3
 8004b26:	2100      	movs	r1, #0
 8004b28:	2001      	movs	r0, #1
 8004b2a:	f001 f89d 	bl	8005c68 <xQueueGenericCreate>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4a4e      	ldr	r2, [pc, #312]	; (8004c6c <low_level_init+0x258>)
 8004b32:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8004b34:	2203      	movs	r2, #3
 8004b36:	2100      	movs	r1, #0
 8004b38:	2001      	movs	r0, #1
 8004b3a:	f001 f895 	bl	8005c68 <xQueueGenericCreate>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4a4b      	ldr	r2, [pc, #300]	; (8004c70 <low_level_init+0x25c>)
 8004b42:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004b44:	4b4b      	ldr	r3, [pc, #300]	; (8004c74 <low_level_init+0x260>)
 8004b46:	f107 0408 	add.w	r4, r7, #8
 8004b4a:	461d      	mov	r5, r3
 8004b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004b58:	f107 0308 	add.w	r3, r7, #8
 8004b5c:	6879      	ldr	r1, [r7, #4]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fc22 	bl	80053a8 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004b64:	4944      	ldr	r1, [pc, #272]	; (8004c78 <low_level_init+0x264>)
 8004b66:	4845      	ldr	r0, [pc, #276]	; (8004c7c <low_level_init+0x268>)
 8004b68:	f7fc fad7 	bl	800111a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004b6c:	4843      	ldr	r0, [pc, #268]	; (8004c7c <low_level_init+0x268>)
 8004b6e:	f7fc fb06 	bl	800117e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004b72:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d165      	bne.n	8004c46 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004b7a:	4840      	ldr	r0, [pc, #256]	; (8004c7c <low_level_init+0x268>)
 8004b7c:	f7fc fba7 	bl	80012ce <LAN8742_GetLinkState>
 8004b80:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004b84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	dc06      	bgt.n	8004b9a <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f007 fd45 	bl	800c61c <netif_set_link_down>
      netif_set_down(netif);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f007 fcd8 	bl	800c548 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004b98:	e057      	b.n	8004c4a <low_level_init+0x236>
      switch (PHYLinkState)
 8004b9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b9e:	3b02      	subs	r3, #2
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d82b      	bhi.n	8004bfc <low_level_init+0x1e8>
 8004ba4:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <low_level_init+0x198>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004bbd 	.word	0x08004bbd
 8004bb0:	08004bcf 	.word	0x08004bcf
 8004bb4:	08004bdf 	.word	0x08004bdf
 8004bb8:	08004bef 	.word	0x08004bef
        duplex = ETH_FULLDUPLEX_MODE;
 8004bbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004bc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004bcc:	e01f      	b.n	8004c0e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004bd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004bdc:	e017      	b.n	8004c0e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004bde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004be2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004be6:	2300      	movs	r3, #0
 8004be8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004bec:	e00f      	b.n	8004c0e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004bfa:	e008      	b.n	8004c0e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004bfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004c04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004c0c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c12:	4619      	mov	r1, r3
 8004c14:	480f      	ldr	r0, [pc, #60]	; (8004c54 <low_level_init+0x240>)
 8004c16:	f7fd fcf7 	bl	8002608 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004c1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c1e:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8004c20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c24:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4809      	ldr	r0, [pc, #36]	; (8004c54 <low_level_init+0x240>)
 8004c2e:	f7fd fdd5 	bl	80027dc <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004c32:	4808      	ldr	r0, [pc, #32]	; (8004c54 <low_level_init+0x240>)
 8004c34:	f7fd f882 	bl	8001d3c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f007 fc19 	bl	800c470 <netif_set_up>
    netif_set_link_up(netif);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f007 fcb4 	bl	800c5ac <netif_set_link_up>
}
 8004c44:	e001      	b.n	8004c4a <low_level_init+0x236>
    Error_Handler();
 8004c46:	f7fb fec9 	bl	80009dc <Error_Handler>
}
 8004c4a:	bf00      	nop
 8004c4c:	37a0      	adds	r7, #160	; 0xa0
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bdb0      	pop	{r4, r5, r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20004fa0 	.word	0x20004fa0
 8004c58:	40028000 	.word	0x40028000
 8004c5c:	20004ef8 	.word	0x20004ef8
 8004c60:	20004e58 	.word	0x20004e58
 8004c64:	20005050 	.word	0x20005050
 8004c68:	0801d46c 	.word	0x0801d46c
 8004c6c:	20004f98 	.word	0x20004f98
 8004c70:	20004f9c 	.word	0x20004f9c
 8004c74:	08019944 	.word	0x08019944
 8004c78:	2000000c 	.word	0x2000000c
 8004c7c:	20005088 	.word	0x20005088

08004c80 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b092      	sub	sp, #72	; 0x48
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004c98:	f107 030c 	add.w	r3, r7, #12
 8004c9c:	2230      	movs	r2, #48	; 0x30
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f013 feea 	bl	8018a7a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004ca6:	f107 030c 	add.w	r3, r7, #12
 8004caa:	2230      	movs	r2, #48	; 0x30
 8004cac:	2100      	movs	r1, #0
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f013 fee3 	bl	8018a7a <memset>

  for(q = p; q != NULL; q = q->next)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	643b      	str	r3, [r7, #64]	; 0x40
 8004cb8:	e045      	b.n	8004d46 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d902      	bls.n	8004cc6 <low_level_output+0x46>
      return ERR_IF;
 8004cc0:	f06f 030b 	mvn.w	r3, #11
 8004cc4:	e065      	b.n	8004d92 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8004cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc8:	6859      	ldr	r1, [r3, #4]
 8004cca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ccc:	4613      	mov	r3, r2
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	3348      	adds	r3, #72	; 0x48
 8004cd6:	443b      	add	r3, r7
 8004cd8:	3b3c      	subs	r3, #60	; 0x3c
 8004cda:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cde:	895b      	ldrh	r3, [r3, #10]
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	3348      	adds	r3, #72	; 0x48
 8004cee:	443b      	add	r3, r7
 8004cf0:	3b38      	subs	r3, #56	; 0x38
 8004cf2:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d011      	beq.n	8004d1e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cfc:	1e5a      	subs	r2, r3, #1
 8004cfe:	f107 000c 	add.w	r0, r7, #12
 8004d02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d04:	460b      	mov	r3, r1
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	440b      	add	r3, r1
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	18c1      	adds	r1, r0, r3
 8004d0e:	4613      	mov	r3, r2
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	4413      	add	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	3348      	adds	r3, #72	; 0x48
 8004d18:	443b      	add	r3, r7
 8004d1a:	3b34      	subs	r3, #52	; 0x34
 8004d1c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d109      	bne.n	8004d3a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004d26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d28:	4613      	mov	r3, r2
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	3348      	adds	r3, #72	; 0x48
 8004d32:	443b      	add	r3, r7
 8004d34:	3b34      	subs	r3, #52	; 0x34
 8004d36:	2200      	movs	r2, #0
 8004d38:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	643b      	str	r3, [r7, #64]	; 0x40
 8004d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1b6      	bne.n	8004cba <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	891b      	ldrh	r3, [r3, #8]
 8004d50:	461a      	mov	r2, r3
 8004d52:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <low_level_output+0x11c>)
 8004d54:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004d56:	4a11      	ldr	r2, [pc, #68]	; (8004d9c <low_level_output+0x11c>)
 8004d58:	f107 030c 	add.w	r3, r7, #12
 8004d5c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004d5e:	4a0f      	ldr	r2, [pc, #60]	; (8004d9c <low_level_output+0x11c>)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004d64:	6838      	ldr	r0, [r7, #0]
 8004d66:	f008 f8dd 	bl	800cf24 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8004d6a:	490c      	ldr	r1, [pc, #48]	; (8004d9c <low_level_output+0x11c>)
 8004d6c:	480c      	ldr	r0, [pc, #48]	; (8004da0 <low_level_output+0x120>)
 8004d6e:	f7fd f8f2 	bl	8001f56 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004d72:	bf00      	nop
 8004d74:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <low_level_output+0x124>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f04f 31ff 	mov.w	r1, #4294967295
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 fc41 	bl	8005604 <osSemaphoreWait>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f5      	bne.n	8004d74 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8004d88:	4805      	ldr	r0, [pc, #20]	; (8004da0 <low_level_output+0x120>)
 8004d8a:	f7fd fa77 	bl	800227c <HAL_ETH_ReleaseTxPacket>

  return errval;
 8004d8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3748      	adds	r7, #72	; 0x48
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20005050 	.word	0x20005050
 8004da0:	20004fa0 	.word	0x20004fa0
 8004da4:	20004f9c 	.word	0x20004f9c

08004da8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004db4:	4b07      	ldr	r3, [pc, #28]	; (8004dd4 <low_level_input+0x2c>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d105      	bne.n	8004dc8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004dbc:	f107 030c 	add.w	r3, r7, #12
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4805      	ldr	r0, [pc, #20]	; (8004dd8 <low_level_input+0x30>)
 8004dc4:	f7fd f923 	bl	800200e <HAL_ETH_ReadData>
  }

  return p;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20004e54 	.word	0x20004e54
 8004dd8:	20004fa0 	.word	0x20004fa0

08004ddc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004dec:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <ethernetif_input+0x50>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f04f 31ff 	mov.w	r1, #4294967295
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fc05 	bl	8005604 <osSemaphoreWait>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1f5      	bne.n	8004dec <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004e00:	68b8      	ldr	r0, [r7, #8]
 8004e02:	f7ff ffd1 	bl	8004da8 <low_level_input>
 8004e06:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	4798      	blx	r3
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f007 ffda 	bl	800cdd8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1ea      	bne.n	8004e00 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004e2a:	e7df      	b.n	8004dec <ethernetif_input+0x10>
 8004e2c:	20004f98 	.word	0x20004f98

08004e30 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <ethernetif_init+0x1c>
 8004e3e:	4b0e      	ldr	r3, [pc, #56]	; (8004e78 <ethernetif_init+0x48>)
 8004e40:	f240 12df 	movw	r2, #479	; 0x1df
 8004e44:	490d      	ldr	r1, [pc, #52]	; (8004e7c <ethernetif_init+0x4c>)
 8004e46:	480e      	ldr	r0, [pc, #56]	; (8004e80 <ethernetif_init+0x50>)
 8004e48:	f013 fdb2 	bl	80189b0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2273      	movs	r2, #115	; 0x73
 8004e50:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2274      	movs	r2, #116	; 0x74
 8004e58:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a09      	ldr	r2, [pc, #36]	; (8004e84 <ethernetif_init+0x54>)
 8004e60:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a08      	ldr	r2, [pc, #32]	; (8004e88 <ethernetif_init+0x58>)
 8004e66:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff fdd3 	bl	8004a14 <low_level_init>

  return ERR_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	08019960 	.word	0x08019960
 8004e7c:	0801997c 	.word	0x0801997c
 8004e80:	0801998c 	.word	0x0801998c
 8004e84:	080166e1 	.word	0x080166e1
 8004e88:	08004c81 	.word	0x08004c81

08004e8c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004e98:	68f9      	ldr	r1, [r7, #12]
 8004e9a:	4809      	ldr	r0, [pc, #36]	; (8004ec0 <pbuf_free_custom+0x34>)
 8004e9c:	f007 f8c8 	bl	800c030 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004ea0:	4b08      	ldr	r3, [pc, #32]	; (8004ec4 <pbuf_free_custom+0x38>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d107      	bne.n	8004eb8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004ea8:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <pbuf_free_custom+0x38>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004eae:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <pbuf_free_custom+0x3c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fbf4 	bl	80056a0 <osSemaphoreRelease>
  }
}
 8004eb8:	bf00      	nop
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	0801d46c 	.word	0x0801d46c
 8004ec4:	20004e54 	.word	0x20004e54
 8004ec8:	20004f98 	.word	0x20004f98

08004ecc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004ed0:	f7fc faba 	bl	8001448 <HAL_GetTick>
 8004ed4:	4603      	mov	r3, r0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08e      	sub	sp, #56	; 0x38
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	609a      	str	r2, [r3, #8]
 8004ef0:	60da      	str	r2, [r3, #12]
 8004ef2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a59      	ldr	r2, [pc, #356]	; (8005060 <HAL_ETH_MspInit+0x184>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	f040 80ac 	bne.w	8005058 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004f00:	2300      	movs	r3, #0
 8004f02:	623b      	str	r3, [r7, #32]
 8004f04:	4b57      	ldr	r3, [pc, #348]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f08:	4a56      	ldr	r2, [pc, #344]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004f0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8004f10:	4b54      	ldr	r3, [pc, #336]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f18:	623b      	str	r3, [r7, #32]
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	61fb      	str	r3, [r7, #28]
 8004f20:	4b50      	ldr	r3, [pc, #320]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f24:	4a4f      	ldr	r2, [pc, #316]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004f26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8004f2c:	4b4d      	ldr	r3, [pc, #308]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	2300      	movs	r3, #0
 8004f3a:	61bb      	str	r3, [r7, #24]
 8004f3c:	4b49      	ldr	r3, [pc, #292]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	4a48      	ldr	r2, [pc, #288]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004f42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f46:	6313      	str	r3, [r2, #48]	; 0x30
 8004f48:	4b46      	ldr	r3, [pc, #280]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f50:	61bb      	str	r3, [r7, #24]
 8004f52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f54:	2300      	movs	r3, #0
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	4b42      	ldr	r3, [pc, #264]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	4a41      	ldr	r2, [pc, #260]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004f5e:	f043 0304 	orr.w	r3, r3, #4
 8004f62:	6313      	str	r3, [r2, #48]	; 0x30
 8004f64:	4b3f      	ldr	r3, [pc, #252]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	617b      	str	r3, [r7, #20]
 8004f6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f70:	2300      	movs	r3, #0
 8004f72:	613b      	str	r3, [r7, #16]
 8004f74:	4b3b      	ldr	r3, [pc, #236]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	4a3a      	ldr	r2, [pc, #232]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004f7a:	f043 0301 	orr.w	r3, r3, #1
 8004f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8004f80:	4b38      	ldr	r3, [pc, #224]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	613b      	str	r3, [r7, #16]
 8004f8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	4b34      	ldr	r3, [pc, #208]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f94:	4a33      	ldr	r2, [pc, #204]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004f96:	f043 0302 	orr.w	r3, r3, #2
 8004f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8004f9c:	4b31      	ldr	r3, [pc, #196]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60bb      	str	r3, [r7, #8]
 8004fac:	4b2d      	ldr	r3, [pc, #180]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb0:	4a2c      	ldr	r2, [pc, #176]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8004fb8:	4b2a      	ldr	r3, [pc, #168]	; (8005064 <HAL_ETH_MspInit+0x188>)
 8004fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc0:	60bb      	str	r3, [r7, #8]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004fc4:	2332      	movs	r3, #50	; 0x32
 8004fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fc8:	2302      	movs	r3, #2
 8004fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004fd4:	230b      	movs	r3, #11
 8004fd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4822      	ldr	r0, [pc, #136]	; (8005068 <HAL_ETH_MspInit+0x18c>)
 8004fe0:	f7fe f87e 	bl	80030e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004fe4:	2386      	movs	r3, #134	; 0x86
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fec:	2300      	movs	r3, #0
 8004fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ff4:	230b      	movs	r3, #11
 8004ff6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	481b      	ldr	r0, [pc, #108]	; (800506c <HAL_ETH_MspInit+0x190>)
 8005000:	f7fe f86e 	bl	80030e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800500a:	2302      	movs	r3, #2
 800500c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500e:	2300      	movs	r3, #0
 8005010:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005012:	2303      	movs	r3, #3
 8005014:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005016:	230b      	movs	r3, #11
 8005018:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800501a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800501e:	4619      	mov	r1, r3
 8005020:	4813      	ldr	r0, [pc, #76]	; (8005070 <HAL_ETH_MspInit+0x194>)
 8005022:	f7fe f85d 	bl	80030e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005026:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502c:	2302      	movs	r3, #2
 800502e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005030:	2300      	movs	r3, #0
 8005032:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005034:	2303      	movs	r3, #3
 8005036:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005038:	230b      	movs	r3, #11
 800503a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800503c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005040:	4619      	mov	r1, r3
 8005042:	480c      	ldr	r0, [pc, #48]	; (8005074 <HAL_ETH_MspInit+0x198>)
 8005044:	f7fe f84c 	bl	80030e0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005048:	2200      	movs	r2, #0
 800504a:	2105      	movs	r1, #5
 800504c:	203d      	movs	r0, #61	; 0x3d
 800504e:	f7fc fae3 	bl	8001618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005052:	203d      	movs	r0, #61	; 0x3d
 8005054:	f7fc fafc 	bl	8001650 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005058:	bf00      	nop
 800505a:	3738      	adds	r7, #56	; 0x38
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40028000 	.word	0x40028000
 8005064:	40023800 	.word	0x40023800
 8005068:	40020800 	.word	0x40020800
 800506c:	40020000 	.word	0x40020000
 8005070:	40020400 	.word	0x40020400
 8005074:	40021800 	.word	0x40021800

08005078 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800507c:	4802      	ldr	r0, [pc, #8]	; (8005088 <ETH_PHY_IO_Init+0x10>)
 800507e:	f7fd fbc7 	bl	8002810 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	bd80      	pop	{r7, pc}
 8005088:	20004fa0 	.word	0x20004fa0

0800508c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  return 0;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	68f9      	ldr	r1, [r7, #12]
 80050ae:	4807      	ldr	r0, [pc, #28]	; (80050cc <ETH_PHY_IO_ReadReg+0x30>)
 80050b0:	f7fd fa16 	bl	80024e0 <HAL_ETH_ReadPHYRegister>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80050ba:	f04f 33ff 	mov.w	r3, #4294967295
 80050be:	e000      	b.n	80050c2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20004fa0 	.word	0x20004fa0

080050d0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	68f9      	ldr	r1, [r7, #12]
 80050e2:	4807      	ldr	r0, [pc, #28]	; (8005100 <ETH_PHY_IO_WriteReg+0x30>)
 80050e4:	f7fd fa47 	bl	8002576 <HAL_ETH_WritePHYRegister>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80050ee:	f04f 33ff 	mov.w	r3, #4294967295
 80050f2:	e000      	b.n	80050f6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20004fa0 	.word	0x20004fa0

08005104 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005108:	f7fc f99e 	bl	8001448 <HAL_GetTick>
 800510c:	4603      	mov	r3, r0
}
 800510e:	4618      	mov	r0, r3
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b0a0      	sub	sp, #128	; 0x80
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800511c:	f107 0308 	add.w	r3, r7, #8
 8005120:	2264      	movs	r2, #100	; 0x64
 8005122:	2100      	movs	r1, #0
 8005124:	4618      	mov	r0, r3
 8005126:	f013 fca8 	bl	8018a7a <memset>
  int32_t PHYLinkState = 0;
 800512a:	2300      	movs	r3, #0
 800512c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800512e:	2300      	movs	r3, #0
 8005130:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005132:	2300      	movs	r3, #0
 8005134:	67bb      	str	r3, [r7, #120]	; 0x78
 8005136:	2300      	movs	r3, #0
 8005138:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800513e:	483a      	ldr	r0, [pc, #232]	; (8005228 <ethernet_link_thread+0x114>)
 8005140:	f7fc f8c5 	bl	80012ce <LAN8742_GetLinkState>
 8005144:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005148:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800514c:	089b      	lsrs	r3, r3, #2
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00c      	beq.n	8005172 <ethernet_link_thread+0x5e>
 8005158:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800515a:	2b01      	cmp	r3, #1
 800515c:	dc09      	bgt.n	8005172 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800515e:	4833      	ldr	r0, [pc, #204]	; (800522c <ethernet_link_thread+0x118>)
 8005160:	f7fc fe7a 	bl	8001e58 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005164:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005166:	f007 f9ef 	bl	800c548 <netif_set_down>
    netif_set_link_down(netif);
 800516a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800516c:	f007 fa56 	bl	800c61c <netif_set_link_down>
 8005170:	e055      	b.n	800521e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005174:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d14e      	bne.n	800521e <ethernet_link_thread+0x10a>
 8005180:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005182:	2b01      	cmp	r3, #1
 8005184:	dd4b      	ble.n	800521e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8005186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005188:	3b02      	subs	r3, #2
 800518a:	2b03      	cmp	r3, #3
 800518c:	d82a      	bhi.n	80051e4 <ethernet_link_thread+0xd0>
 800518e:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <ethernet_link_thread+0x80>)
 8005190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005194:	080051a5 	.word	0x080051a5
 8005198:	080051b7 	.word	0x080051b7
 800519c:	080051c7 	.word	0x080051c7
 80051a0:	080051d7 	.word	0x080051d7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80051a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051a8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80051aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051ae:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80051b0:	2301      	movs	r3, #1
 80051b2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80051b4:	e017      	b.n	80051e6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80051b6:	2300      	movs	r3, #0
 80051b8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80051ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051be:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80051c0:	2301      	movs	r3, #1
 80051c2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80051c4:	e00f      	b.n	80051e6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80051c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051ca:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80051cc:	2300      	movs	r3, #0
 80051ce:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80051d0:	2301      	movs	r3, #1
 80051d2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80051d4:	e007      	b.n	80051e6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80051d6:	2300      	movs	r3, #0
 80051d8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80051da:	2300      	movs	r3, #0
 80051dc:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80051de:	2301      	movs	r3, #1
 80051e0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80051e2:	e000      	b.n	80051e6 <ethernet_link_thread+0xd2>
    default:
      break;
 80051e4:	bf00      	nop
    }

    if(linkchanged)
 80051e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d018      	beq.n	800521e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80051ec:	f107 0308 	add.w	r3, r7, #8
 80051f0:	4619      	mov	r1, r3
 80051f2:	480e      	ldr	r0, [pc, #56]	; (800522c <ethernet_link_thread+0x118>)
 80051f4:	f7fd fa08 	bl	8002608 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80051f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051fa:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80051fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051fe:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005200:	f107 0308 	add.w	r3, r7, #8
 8005204:	4619      	mov	r1, r3
 8005206:	4809      	ldr	r0, [pc, #36]	; (800522c <ethernet_link_thread+0x118>)
 8005208:	f7fd fae8 	bl	80027dc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800520c:	4807      	ldr	r0, [pc, #28]	; (800522c <ethernet_link_thread+0x118>)
 800520e:	f7fc fd95 	bl	8001d3c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005212:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005214:	f007 f92c 	bl	800c470 <netif_set_up>
      netif_set_link_up(netif);
 8005218:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800521a:	f007 f9c7 	bl	800c5ac <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800521e:	2064      	movs	r0, #100	; 0x64
 8005220:	f000 f90e 	bl	8005440 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005224:	e78b      	b.n	800513e <ethernet_link_thread+0x2a>
 8005226:	bf00      	nop
 8005228:	20005088 	.word	0x20005088
 800522c:	20004fa0 	.word	0x20004fa0

08005230 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af02      	add	r7, sp, #8
 8005236:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005238:	4812      	ldr	r0, [pc, #72]	; (8005284 <HAL_ETH_RxAllocateCallback+0x54>)
 800523a:	f006 fe85 	bl	800bf48 <memp_malloc_pool>
 800523e:	60f8      	str	r0, [r7, #12]
  if (p)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d014      	beq.n	8005270 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f103 0220 	add.w	r2, r3, #32
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4a0d      	ldr	r2, [pc, #52]	; (8005288 <HAL_ETH_RxAllocateCallback+0x58>)
 8005254:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800525e:	9201      	str	r2, [sp, #4]
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2241      	movs	r2, #65	; 0x41
 8005266:	2100      	movs	r1, #0
 8005268:	2000      	movs	r0, #0
 800526a:	f007 fbfb 	bl	800ca64 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800526e:	e005      	b.n	800527c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005270:	4b06      	ldr	r3, [pc, #24]	; (800528c <HAL_ETH_RxAllocateCallback+0x5c>)
 8005272:	2201      	movs	r2, #1
 8005274:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]
}
 800527c:	bf00      	nop
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	0801d46c 	.word	0x0801d46c
 8005288:	08004e8d 	.word	0x08004e8d
 800528c:	20004e54 	.word	0x20004e54

08005290 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005290:	b480      	push	{r7}
 8005292:	b089      	sub	sp, #36	; 0x24
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	3b20      	subs	r3, #32
 80052ae:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	2200      	movs	r2, #0
 80052ba:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	887a      	ldrh	r2, [r7, #2]
 80052c0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d103      	bne.n	80052d2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	69fa      	ldr	r2, [r7, #28]
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	e003      	b.n	80052da <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69fa      	ldr	r2, [r7, #28]
 80052d8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	61fb      	str	r3, [r7, #28]
 80052e6:	e009      	b.n	80052fc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	891a      	ldrh	r2, [r3, #8]
 80052ec:	887b      	ldrh	r3, [r7, #2]
 80052ee:	4413      	add	r3, r2
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	61fb      	str	r3, [r7, #28]
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f2      	bne.n	80052e8 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005302:	bf00      	nop
 8005304:	bf00      	nop
 8005306:	3724      	adds	r7, #36	; 0x24
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f007 fd5d 	bl	800cdd8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800531e:	bf00      	nop
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005326:	b480      	push	{r7}
 8005328:	b085      	sub	sp, #20
 800532a:	af00      	add	r7, sp, #0
 800532c:	4603      	mov	r3, r0
 800532e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005330:	2300      	movs	r3, #0
 8005332:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005338:	2b84      	cmp	r3, #132	; 0x84
 800533a:	d005      	beq.n	8005348 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800533c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4413      	add	r3, r2
 8005344:	3303      	adds	r3, #3
 8005346:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005348:	68fb      	ldr	r3, [r7, #12]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800535c:	f3ef 8305 	mrs	r3, IPSR
 8005360:	607b      	str	r3, [r7, #4]
  return(result);
 8005362:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005364:	2b00      	cmp	r3, #0
 8005366:	bf14      	ite	ne
 8005368:	2301      	movne	r3, #1
 800536a:	2300      	moveq	r3, #0
 800536c:	b2db      	uxtb	r3, r3
}
 800536e:	4618      	mov	r0, r3
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800537e:	f001 fd3b 	bl	8006df8 <vTaskStartScheduler>
  
  return osOK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	bd80      	pop	{r7, pc}

08005388 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800538c:	f7ff ffe3 	bl	8005356 <inHandlerMode>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005396:	f001 fe53 	bl	8007040 <xTaskGetTickCountFromISR>
 800539a:	4603      	mov	r3, r0
 800539c:	e002      	b.n	80053a4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800539e:	f001 fe3f 	bl	8007020 <xTaskGetTickCount>
 80053a2:	4603      	mov	r3, r0
  }
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80053a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053aa:	b089      	sub	sp, #36	; 0x24
 80053ac:	af04      	add	r7, sp, #16
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d020      	beq.n	80053fc <osThreadCreate+0x54>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d01c      	beq.n	80053fc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685c      	ldr	r4, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691e      	ldr	r6, [r3, #16]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff ffa6 	bl	8005326 <makeFreeRtosPriority>
 80053da:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053e4:	9202      	str	r2, [sp, #8]
 80053e6:	9301      	str	r3, [sp, #4]
 80053e8:	9100      	str	r1, [sp, #0]
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	4632      	mov	r2, r6
 80053ee:	4629      	mov	r1, r5
 80053f0:	4620      	mov	r0, r4
 80053f2:	f001 fb23 	bl	8006a3c <xTaskCreateStatic>
 80053f6:	4603      	mov	r3, r0
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	e01c      	b.n	8005436 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685c      	ldr	r4, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005408:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff ff88 	bl	8005326 <makeFreeRtosPriority>
 8005416:	4602      	mov	r2, r0
 8005418:	f107 030c 	add.w	r3, r7, #12
 800541c:	9301      	str	r3, [sp, #4]
 800541e:	9200      	str	r2, [sp, #0]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	4632      	mov	r2, r6
 8005424:	4629      	mov	r1, r5
 8005426:	4620      	mov	r0, r4
 8005428:	f001 fb65 	bl	8006af6 <xTaskCreate>
 800542c:	4603      	mov	r3, r0
 800542e:	2b01      	cmp	r3, #1
 8005430:	d001      	beq.n	8005436 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005432:	2300      	movs	r3, #0
 8005434:	e000      	b.n	8005438 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005436:	68fb      	ldr	r3, [r7, #12]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005440 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <osDelay+0x16>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	e000      	b.n	8005458 <osDelay+0x18>
 8005456:	2301      	movs	r3, #1
 8005458:	4618      	mov	r0, r3
 800545a:	f001 fc99 	bl	8006d90 <vTaskDelay>
  
  return osOK;
 800545e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	4619      	mov	r1, r3
 800547e:	2001      	movs	r0, #1
 8005480:	f000 fc7d 	bl	8005d7e <xQueueCreateMutexStatic>
 8005484:	4603      	mov	r3, r0
 8005486:	e003      	b.n	8005490 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005488:	2001      	movs	r0, #1
 800548a:	f000 fc60 	bl	8005d4e <xQueueCreateMutex>
 800548e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80054a2:	2300      	movs	r3, #0
 80054a4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <osMutexWait+0x18>
    return osErrorParameter;
 80054ac:	2380      	movs	r3, #128	; 0x80
 80054ae:	e03a      	b.n	8005526 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ba:	d103      	bne.n	80054c4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80054bc:	f04f 33ff 	mov.w	r3, #4294967295
 80054c0:	60fb      	str	r3, [r7, #12]
 80054c2:	e009      	b.n	80054d8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d006      	beq.n	80054d8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <osMutexWait+0x40>
      ticks = 1;
 80054d4:	2301      	movs	r3, #1
 80054d6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80054d8:	f7ff ff3d 	bl	8005356 <inHandlerMode>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d017      	beq.n	8005512 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80054e2:	f107 0308 	add.w	r3, r7, #8
 80054e6:	461a      	mov	r2, r3
 80054e8:	2100      	movs	r1, #0
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f001 f874 	bl	80065d8 <xQueueReceiveFromISR>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d001      	beq.n	80054fa <osMutexWait+0x62>
      return osErrorOS;
 80054f6:	23ff      	movs	r3, #255	; 0xff
 80054f8:	e015      	b.n	8005526 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d011      	beq.n	8005524 <osMutexWait+0x8c>
 8005500:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <osMutexWait+0x98>)
 8005502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	e008      	b.n	8005524 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005512:	68f9      	ldr	r1, [r7, #12]
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 ff53 	bl	80063c0 <xQueueSemaphoreTake>
 800551a:	4603      	mov	r3, r0
 800551c:	2b01      	cmp	r3, #1
 800551e:	d001      	beq.n	8005524 <osMutexWait+0x8c>
    return osErrorOS;
 8005520:	23ff      	movs	r3, #255	; 0xff
 8005522:	e000      	b.n	8005526 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	e000ed04 	.word	0xe000ed04

08005534 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800553c:	2300      	movs	r3, #0
 800553e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005540:	2300      	movs	r3, #0
 8005542:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005544:	f7ff ff07 	bl	8005356 <inHandlerMode>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d016      	beq.n	800557c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800554e:	f107 0308 	add.w	r3, r7, #8
 8005552:	4619      	mov	r1, r3
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fdc6 	bl	80060e6 <xQueueGiveFromISR>
 800555a:	4603      	mov	r3, r0
 800555c:	2b01      	cmp	r3, #1
 800555e:	d001      	beq.n	8005564 <osMutexRelease+0x30>
      return osErrorOS;
 8005560:	23ff      	movs	r3, #255	; 0xff
 8005562:	e017      	b.n	8005594 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d013      	beq.n	8005592 <osMutexRelease+0x5e>
 800556a:	4b0c      	ldr	r3, [pc, #48]	; (800559c <osMutexRelease+0x68>)
 800556c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	e00a      	b.n	8005592 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800557c:	2300      	movs	r3, #0
 800557e:	2200      	movs	r2, #0
 8005580:	2100      	movs	r1, #0
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fc16 	bl	8005db4 <xQueueGenericSend>
 8005588:	4603      	mov	r3, r0
 800558a:	2b01      	cmp	r3, #1
 800558c:	d001      	beq.n	8005592 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800558e:	23ff      	movs	r3, #255	; 0xff
 8005590:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005592:	68fb      	ldr	r3, [r7, #12]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	e000ed04 	.word	0xe000ed04

080055a0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00f      	beq.n	80055d2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d10a      	bne.n	80055ce <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2203      	movs	r2, #3
 80055be:	9200      	str	r2, [sp, #0]
 80055c0:	2200      	movs	r2, #0
 80055c2:	2100      	movs	r1, #0
 80055c4:	2001      	movs	r0, #1
 80055c6:	f000 fad7 	bl	8005b78 <xQueueGenericCreateStatic>
 80055ca:	4603      	mov	r3, r0
 80055cc:	e016      	b.n	80055fc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80055ce:	2300      	movs	r3, #0
 80055d0:	e014      	b.n	80055fc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d110      	bne.n	80055fa <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80055d8:	2203      	movs	r2, #3
 80055da:	2100      	movs	r1, #0
 80055dc:	2001      	movs	r0, #1
 80055de:	f000 fb43 	bl	8005c68 <xQueueGenericCreate>
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <osSemaphoreCreate+0x56>
 80055ea:	2300      	movs	r3, #0
 80055ec:	2200      	movs	r2, #0
 80055ee:	2100      	movs	r1, #0
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 fbdf 	bl	8005db4 <xQueueGenericSend>
      return sema;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	e000      	b.n	80055fc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80055fa:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800560e:	2300      	movs	r3, #0
 8005610:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005618:	2380      	movs	r3, #128	; 0x80
 800561a:	e03a      	b.n	8005692 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005626:	d103      	bne.n	8005630 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005628:	f04f 33ff 	mov.w	r3, #4294967295
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	e009      	b.n	8005644 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d006      	beq.n	8005644 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <osSemaphoreWait+0x40>
      ticks = 1;
 8005640:	2301      	movs	r3, #1
 8005642:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005644:	f7ff fe87 	bl	8005356 <inHandlerMode>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d017      	beq.n	800567e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800564e:	f107 0308 	add.w	r3, r7, #8
 8005652:	461a      	mov	r2, r3
 8005654:	2100      	movs	r1, #0
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 ffbe 	bl	80065d8 <xQueueReceiveFromISR>
 800565c:	4603      	mov	r3, r0
 800565e:	2b01      	cmp	r3, #1
 8005660:	d001      	beq.n	8005666 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005662:	23ff      	movs	r3, #255	; 0xff
 8005664:	e015      	b.n	8005692 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d011      	beq.n	8005690 <osSemaphoreWait+0x8c>
 800566c:	4b0b      	ldr	r3, [pc, #44]	; (800569c <osSemaphoreWait+0x98>)
 800566e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	e008      	b.n	8005690 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800567e:	68f9      	ldr	r1, [r7, #12]
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fe9d 	bl	80063c0 <xQueueSemaphoreTake>
 8005686:	4603      	mov	r3, r0
 8005688:	2b01      	cmp	r3, #1
 800568a:	d001      	beq.n	8005690 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800568c:	23ff      	movs	r3, #255	; 0xff
 800568e:	e000      	b.n	8005692 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	e000ed04 	.word	0xe000ed04

080056a0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80056b0:	f7ff fe51 	bl	8005356 <inHandlerMode>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d016      	beq.n	80056e8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80056ba:	f107 0308 	add.w	r3, r7, #8
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fd10 	bl	80060e6 <xQueueGiveFromISR>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d001      	beq.n	80056d0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80056cc:	23ff      	movs	r3, #255	; 0xff
 80056ce:	e017      	b.n	8005700 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d013      	beq.n	80056fe <osSemaphoreRelease+0x5e>
 80056d6:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <osSemaphoreRelease+0x68>)
 80056d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	e00a      	b.n	80056fe <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80056e8:	2300      	movs	r3, #0
 80056ea:	2200      	movs	r2, #0
 80056ec:	2100      	movs	r1, #0
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fb60 	bl	8005db4 <xQueueGenericSend>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d001      	beq.n	80056fe <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80056fa:	23ff      	movs	r3, #255	; 0xff
 80056fc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80056fe:	68fb      	ldr	r3, [r7, #12]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	e000ed04 	.word	0xe000ed04

0800570c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005714:	f7ff fe1f 	bl	8005356 <inHandlerMode>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800571e:	2382      	movs	r3, #130	; 0x82
 8005720:	e003      	b.n	800572a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f001 f814 	bl	8006750 <vQueueDelete>

  return osOK; 
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005732:	b590      	push	{r4, r7, lr}
 8005734:	b085      	sub	sp, #20
 8005736:	af02      	add	r7, sp, #8
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d011      	beq.n	8005768 <osMessageCreate+0x36>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00d      	beq.n	8005768 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6818      	ldr	r0, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6859      	ldr	r1, [r3, #4]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	2400      	movs	r4, #0
 800575e:	9400      	str	r4, [sp, #0]
 8005760:	f000 fa0a 	bl	8005b78 <xQueueGenericCreateStatic>
 8005764:	4603      	mov	r3, r0
 8005766:	e008      	b.n	800577a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6818      	ldr	r0, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	4619      	mov	r1, r3
 8005774:	f000 fa78 	bl	8005c68 <xQueueGenericCreate>
 8005778:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800577a:	4618      	mov	r0, r3
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	bd90      	pop	{r4, r7, pc}
	...

08005784 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005790:	2300      	movs	r3, #0
 8005792:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <osMessagePut+0x1e>
    ticks = 1;
 800579e:	2301      	movs	r3, #1
 80057a0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80057a2:	f7ff fdd8 	bl	8005356 <inHandlerMode>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d018      	beq.n	80057de <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80057ac:	f107 0210 	add.w	r2, r7, #16
 80057b0:	f107 0108 	add.w	r1, r7, #8
 80057b4:	2300      	movs	r3, #0
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 fbfa 	bl	8005fb0 <xQueueGenericSendFromISR>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d001      	beq.n	80057c6 <osMessagePut+0x42>
      return osErrorOS;
 80057c2:	23ff      	movs	r3, #255	; 0xff
 80057c4:	e018      	b.n	80057f8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d014      	beq.n	80057f6 <osMessagePut+0x72>
 80057cc:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <osMessagePut+0x7c>)
 80057ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	e00b      	b.n	80057f6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80057de:	f107 0108 	add.w	r1, r7, #8
 80057e2:	2300      	movs	r3, #0
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 fae4 	bl	8005db4 <xQueueGenericSend>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d001      	beq.n	80057f6 <osMessagePut+0x72>
      return osErrorOS;
 80057f2:	23ff      	movs	r3, #255	; 0xff
 80057f4:	e000      	b.n	80057f8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	e000ed04 	.word	0xe000ed04

08005804 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005804:	b590      	push	{r4, r7, lr}
 8005806:	b08b      	sub	sp, #44	; 0x2c
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005814:	2300      	movs	r3, #0
 8005816:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10a      	bne.n	8005834 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800581e:	2380      	movs	r3, #128	; 0x80
 8005820:	617b      	str	r3, [r7, #20]
    return event;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	461c      	mov	r4, r3
 8005826:	f107 0314 	add.w	r3, r7, #20
 800582a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800582e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005832:	e054      	b.n	80058de <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005834:	2300      	movs	r3, #0
 8005836:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005838:	2300      	movs	r3, #0
 800583a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005842:	d103      	bne.n	800584c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005844:	f04f 33ff 	mov.w	r3, #4294967295
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
 800584a:	e009      	b.n	8005860 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d006      	beq.n	8005860 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <osMessageGet+0x5c>
      ticks = 1;
 800585c:	2301      	movs	r3, #1
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005860:	f7ff fd79 	bl	8005356 <inHandlerMode>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d01c      	beq.n	80058a4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800586a:	f107 0220 	add.w	r2, r7, #32
 800586e:	f107 0314 	add.w	r3, r7, #20
 8005872:	3304      	adds	r3, #4
 8005874:	4619      	mov	r1, r3
 8005876:	68b8      	ldr	r0, [r7, #8]
 8005878:	f000 feae 	bl	80065d8 <xQueueReceiveFromISR>
 800587c:	4603      	mov	r3, r0
 800587e:	2b01      	cmp	r3, #1
 8005880:	d102      	bne.n	8005888 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005882:	2310      	movs	r3, #16
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	e001      	b.n	800588c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d01d      	beq.n	80058ce <osMessageGet+0xca>
 8005892:	4b15      	ldr	r3, [pc, #84]	; (80058e8 <osMessageGet+0xe4>)
 8005894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	e014      	b.n	80058ce <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80058a4:	f107 0314 	add.w	r3, r7, #20
 80058a8:	3304      	adds	r3, #4
 80058aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ac:	4619      	mov	r1, r3
 80058ae:	68b8      	ldr	r0, [r7, #8]
 80058b0:	f000 fca6 	bl	8006200 <xQueueReceive>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d102      	bne.n	80058c0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80058ba:	2310      	movs	r3, #16
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	e006      	b.n	80058ce <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <osMessageGet+0xc6>
 80058c6:	2300      	movs	r3, #0
 80058c8:	e000      	b.n	80058cc <osMessageGet+0xc8>
 80058ca:	2340      	movs	r3, #64	; 0x40
 80058cc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	461c      	mov	r4, r3
 80058d2:	f107 0314 	add.w	r3, r7, #20
 80058d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80058da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	372c      	adds	r7, #44	; 0x2c
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd90      	pop	{r4, r7, pc}
 80058e6:	bf00      	nop
 80058e8:	e000ed04 	.word	0xe000ed04

080058ec <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80058f4:	f7ff fd2f 	bl	8005356 <inHandlerMode>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d004      	beq.n	8005908 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 ff08 	bl	8006714 <uxQueueMessagesWaitingFromISR>
 8005904:	4603      	mov	r3, r0
 8005906:	e003      	b.n	8005910 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fee5 	bl	80066d8 <uxQueueMessagesWaiting>
 800590e:	4603      	mov	r3, r0
  }
}
 8005910:	4618      	mov	r0, r3
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005920:	f7ff fd19 	bl	8005356 <inHandlerMode>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <osMessageDelete+0x16>
    return osErrorISR;
 800592a:	2382      	movs	r3, #130	; 0x82
 800592c:	e003      	b.n	8005936 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 ff0e 	bl	8006750 <vQueueDelete>

  return osOK; 
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800593e:	b480      	push	{r7}
 8005940:	b083      	sub	sp, #12
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f103 0208 	add.w	r2, r3, #8
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f04f 32ff 	mov.w	r2, #4294967295
 8005956:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f103 0208 	add.w	r2, r3, #8
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f103 0208 	add.w	r2, r3, #8
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005972:	bf00      	nop
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	601a      	str	r2, [r3, #0]
}
 80059d4:	bf00      	nop
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f6:	d103      	bne.n	8005a00 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	e00c      	b.n	8005a1a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3308      	adds	r3, #8
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	e002      	b.n	8005a0e <vListInsert+0x2e>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d2f6      	bcs.n	8005a08 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	601a      	str	r2, [r3, #0]
}
 8005a46:	bf00      	nop
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a52:	b480      	push	{r7}
 8005a54:	b085      	sub	sp, #20
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6892      	ldr	r2, [r2, #8]
 8005a68:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6852      	ldr	r2, [r2, #4]
 8005a72:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d103      	bne.n	8005a86 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	1e5a      	subs	r2, r3, #1
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
	...

08005aa8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10a      	bne.n	8005ad2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ace:	bf00      	nop
 8005ad0:	e7fe      	b.n	8005ad0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ad2:	f002 f917 	bl	8007d04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ade:	68f9      	ldr	r1, [r7, #12]
 8005ae0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ae2:	fb01 f303 	mul.w	r3, r1, r3
 8005ae6:	441a      	add	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b02:	3b01      	subs	r3, #1
 8005b04:	68f9      	ldr	r1, [r7, #12]
 8005b06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b08:	fb01 f303 	mul.w	r3, r1, r3
 8005b0c:	441a      	add	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	22ff      	movs	r2, #255	; 0xff
 8005b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	22ff      	movs	r2, #255	; 0xff
 8005b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d114      	bne.n	8005b52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d01a      	beq.n	8005b66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3310      	adds	r3, #16
 8005b34:	4618      	mov	r0, r3
 8005b36:	f001 fbd3 	bl	80072e0 <xTaskRemoveFromEventList>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d012      	beq.n	8005b66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b40:	4b0c      	ldr	r3, [pc, #48]	; (8005b74 <xQueueGenericReset+0xcc>)
 8005b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	e009      	b.n	8005b66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	3310      	adds	r3, #16
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7ff fef1 	bl	800593e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3324      	adds	r3, #36	; 0x24
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff feec 	bl	800593e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b66:	f002 f8fd 	bl	8007d64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b6a:	2301      	movs	r3, #1
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	e000ed04 	.word	0xe000ed04

08005b78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08e      	sub	sp, #56	; 0x38
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10a      	bne.n	8005ba2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b9e:	bf00      	nop
 8005ba0:	e7fe      	b.n	8005ba0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10a      	bne.n	8005bbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bba:	bf00      	nop
 8005bbc:	e7fe      	b.n	8005bbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <xQueueGenericCreateStatic+0x52>
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <xQueueGenericCreateStatic+0x56>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e000      	b.n	8005bd0 <xQueueGenericCreateStatic+0x58>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10a      	bne.n	8005bea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	623b      	str	r3, [r7, #32]
}
 8005be6:	bf00      	nop
 8005be8:	e7fe      	b.n	8005be8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d102      	bne.n	8005bf6 <xQueueGenericCreateStatic+0x7e>
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <xQueueGenericCreateStatic+0x82>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e000      	b.n	8005bfc <xQueueGenericCreateStatic+0x84>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10a      	bne.n	8005c16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	61fb      	str	r3, [r7, #28]
}
 8005c12:	bf00      	nop
 8005c14:	e7fe      	b.n	8005c14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c16:	2348      	movs	r3, #72	; 0x48
 8005c18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2b48      	cmp	r3, #72	; 0x48
 8005c1e:	d00a      	beq.n	8005c36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	61bb      	str	r3, [r7, #24]
}
 8005c32:	bf00      	nop
 8005c34:	e7fe      	b.n	8005c34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005c36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00d      	beq.n	8005c5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	4613      	mov	r3, r2
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	68b9      	ldr	r1, [r7, #8]
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 f83f 	bl	8005cdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3730      	adds	r7, #48	; 0x30
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	; 0x28
 8005c6c:	af02      	add	r7, sp, #8
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	4613      	mov	r3, r2
 8005c74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10a      	bne.n	8005c92 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	613b      	str	r3, [r7, #16]
}
 8005c8e:	bf00      	nop
 8005c90:	e7fe      	b.n	8005c90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	fb02 f303 	mul.w	r3, r2, r3
 8005c9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	3348      	adds	r3, #72	; 0x48
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f002 f951 	bl	8007f48 <pvPortMalloc>
 8005ca6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d011      	beq.n	8005cd2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	3348      	adds	r3, #72	; 0x48
 8005cb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cc0:	79fa      	ldrb	r2, [r7, #7]
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	68b9      	ldr	r1, [r7, #8]
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f805 	bl	8005cdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005cd2:	69bb      	ldr	r3, [r7, #24]
	}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3720      	adds	r7, #32
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d103      	bne.n	8005cf8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	e002      	b.n	8005cfe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	69b8      	ldr	r0, [r7, #24]
 8005d0e:	f7ff fecb 	bl	8005aa8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d12:	bf00      	nop
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b082      	sub	sp, #8
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00e      	beq.n	8005d46 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2100      	movs	r1, #0
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f837 	bl	8005db4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005d46:	bf00      	nop
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b086      	sub	sp, #24
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	4603      	mov	r3, r0
 8005d56:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005d60:	79fb      	ldrb	r3, [r7, #7]
 8005d62:	461a      	mov	r2, r3
 8005d64:	6939      	ldr	r1, [r7, #16]
 8005d66:	6978      	ldr	r0, [r7, #20]
 8005d68:	f7ff ff7e 	bl	8005c68 <xQueueGenericCreate>
 8005d6c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f7ff ffd3 	bl	8005d1a <prvInitialiseMutex>

		return xNewQueue;
 8005d74:	68fb      	ldr	r3, [r7, #12]
	}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b088      	sub	sp, #32
 8005d82:	af02      	add	r7, sp, #8
 8005d84:	4603      	mov	r3, r0
 8005d86:	6039      	str	r1, [r7, #0]
 8005d88:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	617b      	str	r3, [r7, #20]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005d92:	79fb      	ldrb	r3, [r7, #7]
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	6939      	ldr	r1, [r7, #16]
 8005d9c:	6978      	ldr	r0, [r7, #20]
 8005d9e:	f7ff feeb 	bl	8005b78 <xQueueGenericCreateStatic>
 8005da2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f7ff ffb8 	bl	8005d1a <prvInitialiseMutex>

		return xNewQueue;
 8005daa:	68fb      	ldr	r3, [r7, #12]
	}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08e      	sub	sp, #56	; 0x38
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10a      	bne.n	8005de6 <xQueueGenericSend+0x32>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005de2:	bf00      	nop
 8005de4:	e7fe      	b.n	8005de4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d103      	bne.n	8005df4 <xQueueGenericSend+0x40>
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <xQueueGenericSend+0x44>
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <xQueueGenericSend+0x46>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10a      	bne.n	8005e14 <xQueueGenericSend+0x60>
	__asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e10:	bf00      	nop
 8005e12:	e7fe      	b.n	8005e12 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d103      	bne.n	8005e22 <xQueueGenericSend+0x6e>
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d101      	bne.n	8005e26 <xQueueGenericSend+0x72>
 8005e22:	2301      	movs	r3, #1
 8005e24:	e000      	b.n	8005e28 <xQueueGenericSend+0x74>
 8005e26:	2300      	movs	r3, #0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10a      	bne.n	8005e42 <xQueueGenericSend+0x8e>
	__asm volatile
 8005e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e30:	f383 8811 	msr	BASEPRI, r3
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	623b      	str	r3, [r7, #32]
}
 8005e3e:	bf00      	nop
 8005e40:	e7fe      	b.n	8005e40 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e42:	f001 fc0d 	bl	8007660 <xTaskGetSchedulerState>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d102      	bne.n	8005e52 <xQueueGenericSend+0x9e>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <xQueueGenericSend+0xa2>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e000      	b.n	8005e58 <xQueueGenericSend+0xa4>
 8005e56:	2300      	movs	r3, #0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10a      	bne.n	8005e72 <xQueueGenericSend+0xbe>
	__asm volatile
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	61fb      	str	r3, [r7, #28]
}
 8005e6e:	bf00      	nop
 8005e70:	e7fe      	b.n	8005e70 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e72:	f001 ff47 	bl	8007d04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d302      	bcc.n	8005e88 <xQueueGenericSend+0xd4>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d129      	bne.n	8005edc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	68b9      	ldr	r1, [r7, #8]
 8005e8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e8e:	f000 fc9a 	bl	80067c6 <prvCopyDataToQueue>
 8005e92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d010      	beq.n	8005ebe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9e:	3324      	adds	r3, #36	; 0x24
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f001 fa1d 	bl	80072e0 <xTaskRemoveFromEventList>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d013      	beq.n	8005ed4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005eac:	4b3f      	ldr	r3, [pc, #252]	; (8005fac <xQueueGenericSend+0x1f8>)
 8005eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	e00a      	b.n	8005ed4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d007      	beq.n	8005ed4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ec4:	4b39      	ldr	r3, [pc, #228]	; (8005fac <xQueueGenericSend+0x1f8>)
 8005ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ed4:	f001 ff46 	bl	8007d64 <vPortExitCritical>
				return pdPASS;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e063      	b.n	8005fa4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d103      	bne.n	8005eea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ee2:	f001 ff3f 	bl	8007d64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e05c      	b.n	8005fa4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d106      	bne.n	8005efe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ef0:	f107 0314 	add.w	r3, r7, #20
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f001 fa55 	bl	80073a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005efa:	2301      	movs	r3, #1
 8005efc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005efe:	f001 ff31 	bl	8007d64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f02:	f000 ffe3 	bl	8006ecc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f06:	f001 fefd 	bl	8007d04 <vPortEnterCritical>
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f10:	b25b      	sxtb	r3, r3
 8005f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f16:	d103      	bne.n	8005f20 <xQueueGenericSend+0x16c>
 8005f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f26:	b25b      	sxtb	r3, r3
 8005f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2c:	d103      	bne.n	8005f36 <xQueueGenericSend+0x182>
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f36:	f001 ff15 	bl	8007d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f3a:	1d3a      	adds	r2, r7, #4
 8005f3c:	f107 0314 	add.w	r3, r7, #20
 8005f40:	4611      	mov	r1, r2
 8005f42:	4618      	mov	r0, r3
 8005f44:	f001 fa44 	bl	80073d0 <xTaskCheckForTimeOut>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d124      	bne.n	8005f98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f50:	f000 fd31 	bl	80069b6 <prvIsQueueFull>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d018      	beq.n	8005f8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	3310      	adds	r3, #16
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	4611      	mov	r1, r2
 8005f62:	4618      	mov	r0, r3
 8005f64:	f001 f998 	bl	8007298 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f6a:	f000 fcbc 	bl	80068e6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f6e:	f000 ffbb 	bl	8006ee8 <xTaskResumeAll>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f47f af7c 	bne.w	8005e72 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005f7a:	4b0c      	ldr	r3, [pc, #48]	; (8005fac <xQueueGenericSend+0x1f8>)
 8005f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	e772      	b.n	8005e72 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f8e:	f000 fcaa 	bl	80068e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f92:	f000 ffa9 	bl	8006ee8 <xTaskResumeAll>
 8005f96:	e76c      	b.n	8005e72 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f9a:	f000 fca4 	bl	80068e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f9e:	f000 ffa3 	bl	8006ee8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005fa2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3738      	adds	r7, #56	; 0x38
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	e000ed04 	.word	0xe000ed04

08005fb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b090      	sub	sp, #64	; 0x40
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
 8005fbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10a      	bne.n	8005fde <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005fda:	bf00      	nop
 8005fdc:	e7fe      	b.n	8005fdc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d103      	bne.n	8005fec <xQueueGenericSendFromISR+0x3c>
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <xQueueGenericSendFromISR+0x40>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e000      	b.n	8005ff2 <xQueueGenericSendFromISR+0x42>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10a      	bne.n	800600c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006008:	bf00      	nop
 800600a:	e7fe      	b.n	800600a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	2b02      	cmp	r3, #2
 8006010:	d103      	bne.n	800601a <xQueueGenericSendFromISR+0x6a>
 8006012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006016:	2b01      	cmp	r3, #1
 8006018:	d101      	bne.n	800601e <xQueueGenericSendFromISR+0x6e>
 800601a:	2301      	movs	r3, #1
 800601c:	e000      	b.n	8006020 <xQueueGenericSendFromISR+0x70>
 800601e:	2300      	movs	r3, #0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10a      	bne.n	800603a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	623b      	str	r3, [r7, #32]
}
 8006036:	bf00      	nop
 8006038:	e7fe      	b.n	8006038 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800603a:	f001 ff45 	bl	8007ec8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800603e:	f3ef 8211 	mrs	r2, BASEPRI
 8006042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	61fa      	str	r2, [r7, #28]
 8006054:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006056:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006058:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800605a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800605e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006062:	429a      	cmp	r2, r3
 8006064:	d302      	bcc.n	800606c <xQueueGenericSendFromISR+0xbc>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b02      	cmp	r3, #2
 800606a:	d12f      	bne.n	80060cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800606c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006082:	f000 fba0 	bl	80067c6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006086:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608e:	d112      	bne.n	80060b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	2b00      	cmp	r3, #0
 8006096:	d016      	beq.n	80060c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609a:	3324      	adds	r3, #36	; 0x24
 800609c:	4618      	mov	r0, r3
 800609e:	f001 f91f 	bl	80072e0 <xTaskRemoveFromEventList>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00e      	beq.n	80060c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00b      	beq.n	80060c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	e007      	b.n	80060c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80060ba:	3301      	adds	r3, #1
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	b25a      	sxtb	r2, r3
 80060c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80060c6:	2301      	movs	r3, #1
 80060c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80060ca:	e001      	b.n	80060d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060cc:	2300      	movs	r3, #0
 80060ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3740      	adds	r7, #64	; 0x40
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b08e      	sub	sp, #56	; 0x38
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10a      	bne.n	8006110 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80060fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	623b      	str	r3, [r7, #32]
}
 800610c:	bf00      	nop
 800610e:	e7fe      	b.n	800610e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00a      	beq.n	800612e <xQueueGiveFromISR+0x48>
	__asm volatile
 8006118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611c:	f383 8811 	msr	BASEPRI, r3
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	61fb      	str	r3, [r7, #28]
}
 800612a:	bf00      	nop
 800612c:	e7fe      	b.n	800612c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800612e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d103      	bne.n	800613e <xQueueGiveFromISR+0x58>
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <xQueueGiveFromISR+0x5c>
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <xQueueGiveFromISR+0x5e>
 8006142:	2300      	movs	r3, #0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <xQueueGiveFromISR+0x78>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	61bb      	str	r3, [r7, #24]
}
 800615a:	bf00      	nop
 800615c:	e7fe      	b.n	800615c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800615e:	f001 feb3 	bl	8007ec8 <vPortValidateInterruptPriority>
	__asm volatile
 8006162:	f3ef 8211 	mrs	r2, BASEPRI
 8006166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	617a      	str	r2, [r7, #20]
 8006178:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800617a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800617c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006182:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800618a:	429a      	cmp	r2, r3
 800618c:	d22b      	bcs.n	80061e6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d112      	bne.n	80061d0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d016      	beq.n	80061e0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	3324      	adds	r3, #36	; 0x24
 80061b6:	4618      	mov	r0, r3
 80061b8:	f001 f892 	bl	80072e0 <xTaskRemoveFromEventList>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00e      	beq.n	80061e0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00b      	beq.n	80061e0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2201      	movs	r2, #1
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	e007      	b.n	80061e0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061d4:	3301      	adds	r3, #1
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	b25a      	sxtb	r2, r3
 80061da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80061e0:	2301      	movs	r3, #1
 80061e2:	637b      	str	r3, [r7, #52]	; 0x34
 80061e4:	e001      	b.n	80061ea <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	637b      	str	r3, [r7, #52]	; 0x34
 80061ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f383 8811 	msr	BASEPRI, r3
}
 80061f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3738      	adds	r7, #56	; 0x38
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08c      	sub	sp, #48	; 0x30
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800620c:	2300      	movs	r3, #0
 800620e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10a      	bne.n	8006230 <xQueueReceive+0x30>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	623b      	str	r3, [r7, #32]
}
 800622c:	bf00      	nop
 800622e:	e7fe      	b.n	800622e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d103      	bne.n	800623e <xQueueReceive+0x3e>
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <xQueueReceive+0x42>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <xQueueReceive+0x44>
 8006242:	2300      	movs	r3, #0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10a      	bne.n	800625e <xQueueReceive+0x5e>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	61fb      	str	r3, [r7, #28]
}
 800625a:	bf00      	nop
 800625c:	e7fe      	b.n	800625c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800625e:	f001 f9ff 	bl	8007660 <xTaskGetSchedulerState>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d102      	bne.n	800626e <xQueueReceive+0x6e>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <xQueueReceive+0x72>
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <xQueueReceive+0x74>
 8006272:	2300      	movs	r3, #0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10a      	bne.n	800628e <xQueueReceive+0x8e>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	61bb      	str	r3, [r7, #24]
}
 800628a:	bf00      	nop
 800628c:	e7fe      	b.n	800628c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800628e:	f001 fd39 	bl	8007d04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	2b00      	cmp	r3, #0
 800629c:	d01f      	beq.n	80062de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062a2:	f000 fafa 	bl	800689a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	1e5a      	subs	r2, r3, #1
 80062aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00f      	beq.n	80062d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	3310      	adds	r3, #16
 80062ba:	4618      	mov	r0, r3
 80062bc:	f001 f810 	bl	80072e0 <xTaskRemoveFromEventList>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d007      	beq.n	80062d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062c6:	4b3d      	ldr	r3, [pc, #244]	; (80063bc <xQueueReceive+0x1bc>)
 80062c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062d6:	f001 fd45 	bl	8007d64 <vPortExitCritical>
				return pdPASS;
 80062da:	2301      	movs	r3, #1
 80062dc:	e069      	b.n	80063b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d103      	bne.n	80062ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062e4:	f001 fd3e 	bl	8007d64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062e8:	2300      	movs	r3, #0
 80062ea:	e062      	b.n	80063b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062f2:	f107 0310 	add.w	r3, r7, #16
 80062f6:	4618      	mov	r0, r3
 80062f8:	f001 f854 	bl	80073a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062fc:	2301      	movs	r3, #1
 80062fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006300:	f001 fd30 	bl	8007d64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006304:	f000 fde2 	bl	8006ecc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006308:	f001 fcfc 	bl	8007d04 <vPortEnterCritical>
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006312:	b25b      	sxtb	r3, r3
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006318:	d103      	bne.n	8006322 <xQueueReceive+0x122>
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006328:	b25b      	sxtb	r3, r3
 800632a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632e:	d103      	bne.n	8006338 <xQueueReceive+0x138>
 8006330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006338:	f001 fd14 	bl	8007d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800633c:	1d3a      	adds	r2, r7, #4
 800633e:	f107 0310 	add.w	r3, r7, #16
 8006342:	4611      	mov	r1, r2
 8006344:	4618      	mov	r0, r3
 8006346:	f001 f843 	bl	80073d0 <xTaskCheckForTimeOut>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d123      	bne.n	8006398 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006352:	f000 fb1a 	bl	800698a <prvIsQueueEmpty>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d017      	beq.n	800638c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	3324      	adds	r3, #36	; 0x24
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	4611      	mov	r1, r2
 8006364:	4618      	mov	r0, r3
 8006366:	f000 ff97 	bl	8007298 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800636a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800636c:	f000 fabb 	bl	80068e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006370:	f000 fdba 	bl	8006ee8 <xTaskResumeAll>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d189      	bne.n	800628e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800637a:	4b10      	ldr	r3, [pc, #64]	; (80063bc <xQueueReceive+0x1bc>)
 800637c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	e780      	b.n	800628e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800638c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800638e:	f000 faaa 	bl	80068e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006392:	f000 fda9 	bl	8006ee8 <xTaskResumeAll>
 8006396:	e77a      	b.n	800628e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800639a:	f000 faa4 	bl	80068e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800639e:	f000 fda3 	bl	8006ee8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063a4:	f000 faf1 	bl	800698a <prvIsQueueEmpty>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f43f af6f 	beq.w	800628e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3730      	adds	r7, #48	; 0x30
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	e000ed04 	.word	0xe000ed04

080063c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08e      	sub	sp, #56	; 0x38
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80063ca:	2300      	movs	r3, #0
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80063d2:	2300      	movs	r3, #0
 80063d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10a      	bne.n	80063f2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	623b      	str	r3, [r7, #32]
}
 80063ee:	bf00      	nop
 80063f0:	e7fe      	b.n	80063f0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80063f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	61fb      	str	r3, [r7, #28]
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006410:	f001 f926 	bl	8007660 <xTaskGetSchedulerState>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d102      	bne.n	8006420 <xQueueSemaphoreTake+0x60>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <xQueueSemaphoreTake+0x64>
 8006420:	2301      	movs	r3, #1
 8006422:	e000      	b.n	8006426 <xQueueSemaphoreTake+0x66>
 8006424:	2300      	movs	r3, #0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10a      	bne.n	8006440 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	61bb      	str	r3, [r7, #24]
}
 800643c:	bf00      	nop
 800643e:	e7fe      	b.n	800643e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006440:	f001 fc60 	bl	8007d04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	2b00      	cmp	r3, #0
 800644e:	d024      	beq.n	800649a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	1e5a      	subs	r2, r3, #1
 8006454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006456:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d104      	bne.n	800646a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006460:	f001 faa6 	bl	80079b0 <pvTaskIncrementMutexHeldCount>
 8006464:	4602      	mov	r2, r0
 8006466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006468:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800646a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00f      	beq.n	8006492 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	3310      	adds	r3, #16
 8006476:	4618      	mov	r0, r3
 8006478:	f000 ff32 	bl	80072e0 <xTaskRemoveFromEventList>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d007      	beq.n	8006492 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006482:	4b54      	ldr	r3, [pc, #336]	; (80065d4 <xQueueSemaphoreTake+0x214>)
 8006484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006492:	f001 fc67 	bl	8007d64 <vPortExitCritical>
				return pdPASS;
 8006496:	2301      	movs	r3, #1
 8006498:	e097      	b.n	80065ca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d111      	bne.n	80064c4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80064a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	617b      	str	r3, [r7, #20]
}
 80064b8:	bf00      	nop
 80064ba:	e7fe      	b.n	80064ba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80064bc:	f001 fc52 	bl	8007d64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064c0:	2300      	movs	r3, #0
 80064c2:	e082      	b.n	80065ca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d106      	bne.n	80064d8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064ca:	f107 030c 	add.w	r3, r7, #12
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 ff68 	bl	80073a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064d4:	2301      	movs	r3, #1
 80064d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064d8:	f001 fc44 	bl	8007d64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064dc:	f000 fcf6 	bl	8006ecc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064e0:	f001 fc10 	bl	8007d04 <vPortEnterCritical>
 80064e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064ea:	b25b      	sxtb	r3, r3
 80064ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f0:	d103      	bne.n	80064fa <xQueueSemaphoreTake+0x13a>
 80064f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006500:	b25b      	sxtb	r3, r3
 8006502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006506:	d103      	bne.n	8006510 <xQueueSemaphoreTake+0x150>
 8006508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006510:	f001 fc28 	bl	8007d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006514:	463a      	mov	r2, r7
 8006516:	f107 030c 	add.w	r3, r7, #12
 800651a:	4611      	mov	r1, r2
 800651c:	4618      	mov	r0, r3
 800651e:	f000 ff57 	bl	80073d0 <xTaskCheckForTimeOut>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d132      	bne.n	800658e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800652a:	f000 fa2e 	bl	800698a <prvIsQueueEmpty>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d026      	beq.n	8006582 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d109      	bne.n	8006550 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800653c:	f001 fbe2 	bl	8007d04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	4618      	mov	r0, r3
 8006546:	f001 f8a9 	bl	800769c <xTaskPriorityInherit>
 800654a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800654c:	f001 fc0a 	bl	8007d64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006552:	3324      	adds	r3, #36	; 0x24
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	4611      	mov	r1, r2
 8006558:	4618      	mov	r0, r3
 800655a:	f000 fe9d 	bl	8007298 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800655e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006560:	f000 f9c1 	bl	80068e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006564:	f000 fcc0 	bl	8006ee8 <xTaskResumeAll>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	f47f af68 	bne.w	8006440 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006570:	4b18      	ldr	r3, [pc, #96]	; (80065d4 <xQueueSemaphoreTake+0x214>)
 8006572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	e75e      	b.n	8006440 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006582:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006584:	f000 f9af 	bl	80068e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006588:	f000 fcae 	bl	8006ee8 <xTaskResumeAll>
 800658c:	e758      	b.n	8006440 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800658e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006590:	f000 f9a9 	bl	80068e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006594:	f000 fca8 	bl	8006ee8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800659a:	f000 f9f6 	bl	800698a <prvIsQueueEmpty>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f43f af4d 	beq.w	8006440 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80065a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00d      	beq.n	80065c8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80065ac:	f001 fbaa 	bl	8007d04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80065b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065b2:	f000 f8f0 	bl	8006796 <prvGetDisinheritPriorityAfterTimeout>
 80065b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065be:	4618      	mov	r0, r3
 80065c0:	f001 f968 	bl	8007894 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80065c4:	f001 fbce 	bl	8007d64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3738      	adds	r7, #56	; 0x38
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	e000ed04 	.word	0xe000ed04

080065d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08e      	sub	sp, #56	; 0x38
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80065e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10a      	bne.n	8006604 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	623b      	str	r3, [r7, #32]
}
 8006600:	bf00      	nop
 8006602:	e7fe      	b.n	8006602 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d103      	bne.n	8006612 <xQueueReceiveFromISR+0x3a>
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <xQueueReceiveFromISR+0x3e>
 8006612:	2301      	movs	r3, #1
 8006614:	e000      	b.n	8006618 <xQueueReceiveFromISR+0x40>
 8006616:	2300      	movs	r3, #0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10a      	bne.n	8006632 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	61fb      	str	r3, [r7, #28]
}
 800662e:	bf00      	nop
 8006630:	e7fe      	b.n	8006630 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006632:	f001 fc49 	bl	8007ec8 <vPortValidateInterruptPriority>
	__asm volatile
 8006636:	f3ef 8211 	mrs	r2, BASEPRI
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	61ba      	str	r2, [r7, #24]
 800664c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800664e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006650:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006656:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665a:	2b00      	cmp	r3, #0
 800665c:	d02f      	beq.n	80066be <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800665e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006668:	68b9      	ldr	r1, [r7, #8]
 800666a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800666c:	f000 f915 	bl	800689a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006672:	1e5a      	subs	r2, r3, #1
 8006674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006676:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006678:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800667c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006680:	d112      	bne.n	80066a8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d016      	beq.n	80066b8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	3310      	adds	r3, #16
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fe26 	bl	80072e0 <xTaskRemoveFromEventList>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00e      	beq.n	80066b8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00b      	beq.n	80066b8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	e007      	b.n	80066b8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80066a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066ac:	3301      	adds	r3, #1
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	b25a      	sxtb	r2, r3
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80066b8:	2301      	movs	r3, #1
 80066ba:	637b      	str	r3, [r7, #52]	; 0x34
 80066bc:	e001      	b.n	80066c2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80066be:	2300      	movs	r3, #0
 80066c0:	637b      	str	r3, [r7, #52]	; 0x34
 80066c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f383 8811 	msr	BASEPRI, r3
}
 80066cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3738      	adds	r7, #56	; 0x38
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	60bb      	str	r3, [r7, #8]
}
 80066f8:	bf00      	nop
 80066fa:	e7fe      	b.n	80066fa <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80066fc:	f001 fb02 	bl	8007d04 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006704:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006706:	f001 fb2d 	bl	8007d64 <vPortExitCritical>

	return uxReturn;
 800670a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10a      	bne.n	800673c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	60fb      	str	r3, [r7, #12]
}
 8006738:	bf00      	nop
 800673a:	e7fe      	b.n	800673a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006740:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006742:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006744:	4618      	mov	r0, r3
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10a      	bne.n	8006778 <vQueueDelete+0x28>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	60bb      	str	r3, [r7, #8]
}
 8006774:	bf00      	nop
 8006776:	e7fe      	b.n	8006776 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f000 f935 	bl	80069e8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006784:	2b00      	cmp	r3, #0
 8006786:	d102      	bne.n	800678e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f001 fca9 	bl	80080e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800678e:	bf00      	nop
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006796:	b480      	push	{r7}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d006      	beq.n	80067b4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f1c3 0307 	rsb	r3, r3, #7
 80067b0:	60fb      	str	r3, [r7, #12]
 80067b2:	e001      	b.n	80067b8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80067b4:	2300      	movs	r3, #0
 80067b6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80067b8:	68fb      	ldr	r3, [r7, #12]
	}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b086      	sub	sp, #24
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	60b9      	str	r1, [r7, #8]
 80067d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80067d2:	2300      	movs	r3, #0
 80067d4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067da:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10d      	bne.n	8006800 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d14d      	bne.n	8006888 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 ffc9 	bl	8007788 <xTaskPriorityDisinherit>
 80067f6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	609a      	str	r2, [r3, #8]
 80067fe:	e043      	b.n	8006888 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d119      	bne.n	800683a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6858      	ldr	r0, [r3, #4]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	461a      	mov	r2, r3
 8006810:	68b9      	ldr	r1, [r7, #8]
 8006812:	f012 fa1b 	bl	8018c4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	441a      	add	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	429a      	cmp	r2, r3
 800682e:	d32b      	bcc.n	8006888 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	605a      	str	r2, [r3, #4]
 8006838:	e026      	b.n	8006888 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	68d8      	ldr	r0, [r3, #12]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	461a      	mov	r2, r3
 8006844:	68b9      	ldr	r1, [r7, #8]
 8006846:	f012 fa01 	bl	8018c4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	68da      	ldr	r2, [r3, #12]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	425b      	negs	r3, r3
 8006854:	441a      	add	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	429a      	cmp	r2, r3
 8006864:	d207      	bcs.n	8006876 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	689a      	ldr	r2, [r3, #8]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	425b      	negs	r3, r3
 8006870:	441a      	add	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b02      	cmp	r3, #2
 800687a:	d105      	bne.n	8006888 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	3b01      	subs	r3, #1
 8006886:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006890:	697b      	ldr	r3, [r7, #20]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d018      	beq.n	80068de <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	68da      	ldr	r2, [r3, #12]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b4:	441a      	add	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68da      	ldr	r2, [r3, #12]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d303      	bcc.n	80068ce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68d9      	ldr	r1, [r3, #12]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d6:	461a      	mov	r2, r3
 80068d8:	6838      	ldr	r0, [r7, #0]
 80068da:	f012 f9b7 	bl	8018c4c <memcpy>
	}
}
 80068de:	bf00      	nop
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80068ee:	f001 fa09 	bl	8007d04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068f8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068fa:	e011      	b.n	8006920 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006900:	2b00      	cmp	r3, #0
 8006902:	d012      	beq.n	800692a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	3324      	adds	r3, #36	; 0x24
 8006908:	4618      	mov	r0, r3
 800690a:	f000 fce9 	bl	80072e0 <xTaskRemoveFromEventList>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006914:	f000 fdbe 	bl	8007494 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006918:	7bfb      	ldrb	r3, [r7, #15]
 800691a:	3b01      	subs	r3, #1
 800691c:	b2db      	uxtb	r3, r3
 800691e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006924:	2b00      	cmp	r3, #0
 8006926:	dce9      	bgt.n	80068fc <prvUnlockQueue+0x16>
 8006928:	e000      	b.n	800692c <prvUnlockQueue+0x46>
					break;
 800692a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	22ff      	movs	r2, #255	; 0xff
 8006930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006934:	f001 fa16 	bl	8007d64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006938:	f001 f9e4 	bl	8007d04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006942:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006944:	e011      	b.n	800696a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d012      	beq.n	8006974 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	3310      	adds	r3, #16
 8006952:	4618      	mov	r0, r3
 8006954:	f000 fcc4 	bl	80072e0 <xTaskRemoveFromEventList>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800695e:	f000 fd99 	bl	8007494 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006962:	7bbb      	ldrb	r3, [r7, #14]
 8006964:	3b01      	subs	r3, #1
 8006966:	b2db      	uxtb	r3, r3
 8006968:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800696a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800696e:	2b00      	cmp	r3, #0
 8006970:	dce9      	bgt.n	8006946 <prvUnlockQueue+0x60>
 8006972:	e000      	b.n	8006976 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006974:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	22ff      	movs	r2, #255	; 0xff
 800697a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800697e:	f001 f9f1 	bl	8007d64 <vPortExitCritical>
}
 8006982:	bf00      	nop
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b084      	sub	sp, #16
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006992:	f001 f9b7 	bl	8007d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	2b00      	cmp	r3, #0
 800699c:	d102      	bne.n	80069a4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800699e:	2301      	movs	r3, #1
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	e001      	b.n	80069a8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80069a4:	2300      	movs	r3, #0
 80069a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069a8:	f001 f9dc 	bl	8007d64 <vPortExitCritical>

	return xReturn;
 80069ac:	68fb      	ldr	r3, [r7, #12]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b084      	sub	sp, #16
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069be:	f001 f9a1 	bl	8007d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d102      	bne.n	80069d4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80069ce:	2301      	movs	r3, #1
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	e001      	b.n	80069d8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80069d4:	2300      	movs	r3, #0
 80069d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069d8:	f001 f9c4 	bl	8007d64 <vPortExitCritical>

	return xReturn;
 80069dc:	68fb      	ldr	r3, [r7, #12]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069f0:	2300      	movs	r3, #0
 80069f2:	60fb      	str	r3, [r7, #12]
 80069f4:	e016      	b.n	8006a24 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80069f6:	4a10      	ldr	r2, [pc, #64]	; (8006a38 <vQueueUnregisterQueue+0x50>)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	4413      	add	r3, r2
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d10b      	bne.n	8006a1e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006a06:	4a0c      	ldr	r2, [pc, #48]	; (8006a38 <vQueueUnregisterQueue+0x50>)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006a10:	4a09      	ldr	r2, [pc, #36]	; (8006a38 <vQueueUnregisterQueue+0x50>)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	00db      	lsls	r3, r3, #3
 8006a16:	4413      	add	r3, r2
 8006a18:	2200      	movs	r2, #0
 8006a1a:	605a      	str	r2, [r3, #4]
				break;
 8006a1c:	e006      	b.n	8006a2c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3301      	adds	r3, #1
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2b07      	cmp	r3, #7
 8006a28:	d9e5      	bls.n	80069f6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006a2a:	bf00      	nop
 8006a2c:	bf00      	nop
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	200050a8 	.word	0x200050a8

08006a3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08e      	sub	sp, #56	; 0x38
 8006a40:	af04      	add	r7, sp, #16
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10a      	bne.n	8006a66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	623b      	str	r3, [r7, #32]
}
 8006a62:	bf00      	nop
 8006a64:	e7fe      	b.n	8006a64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10a      	bne.n	8006a82 <xTaskCreateStatic+0x46>
	__asm volatile
 8006a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	61fb      	str	r3, [r7, #28]
}
 8006a7e:	bf00      	nop
 8006a80:	e7fe      	b.n	8006a80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a82:	23a0      	movs	r3, #160	; 0xa0
 8006a84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	2ba0      	cmp	r3, #160	; 0xa0
 8006a8a:	d00a      	beq.n	8006aa2 <xTaskCreateStatic+0x66>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	61bb      	str	r3, [r7, #24]
}
 8006a9e:	bf00      	nop
 8006aa0:	e7fe      	b.n	8006aa0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006aa2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d01e      	beq.n	8006ae8 <xTaskCreateStatic+0xac>
 8006aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d01b      	beq.n	8006ae8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ab8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	2202      	movs	r2, #2
 8006abe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	9303      	str	r3, [sp, #12]
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	9302      	str	r3, [sp, #8]
 8006aca:	f107 0314 	add.w	r3, r7, #20
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	68b9      	ldr	r1, [r7, #8]
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 f850 	bl	8006b80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ae0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ae2:	f000 f8eb 	bl	8006cbc <prvAddNewTaskToReadyList>
 8006ae6:	e001      	b.n	8006aec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006aec:	697b      	ldr	r3, [r7, #20]
	}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3728      	adds	r7, #40	; 0x28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b08c      	sub	sp, #48	; 0x30
 8006afa:	af04      	add	r7, sp, #16
 8006afc:	60f8      	str	r0, [r7, #12]
 8006afe:	60b9      	str	r1, [r7, #8]
 8006b00:	603b      	str	r3, [r7, #0]
 8006b02:	4613      	mov	r3, r2
 8006b04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b06:	88fb      	ldrh	r3, [r7, #6]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f001 fa1c 	bl	8007f48 <pvPortMalloc>
 8006b10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00e      	beq.n	8006b36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b18:	20a0      	movs	r0, #160	; 0xa0
 8006b1a:	f001 fa15 	bl	8007f48 <pvPortMalloc>
 8006b1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	631a      	str	r2, [r3, #48]	; 0x30
 8006b2c:	e005      	b.n	8006b3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b2e:	6978      	ldr	r0, [r7, #20]
 8006b30:	f001 fad6 	bl	80080e0 <vPortFree>
 8006b34:	e001      	b.n	8006b3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d017      	beq.n	8006b70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b48:	88fa      	ldrh	r2, [r7, #6]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	9303      	str	r3, [sp, #12]
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	9302      	str	r3, [sp, #8]
 8006b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b54:	9301      	str	r3, [sp, #4]
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	68b9      	ldr	r1, [r7, #8]
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 f80e 	bl	8006b80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b64:	69f8      	ldr	r0, [r7, #28]
 8006b66:	f000 f8a9 	bl	8006cbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	61bb      	str	r3, [r7, #24]
 8006b6e:	e002      	b.n	8006b76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b70:	f04f 33ff 	mov.w	r3, #4294967295
 8006b74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b76:	69bb      	ldr	r3, [r7, #24]
	}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3720      	adds	r7, #32
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	f023 0307 	bic.w	r3, r3, #7
 8006ba6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	f003 0307 	and.w	r3, r3, #7
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	617b      	str	r3, [r7, #20]
}
 8006bc4:	bf00      	nop
 8006bc6:	e7fe      	b.n	8006bc6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d01f      	beq.n	8006c0e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bce:	2300      	movs	r3, #0
 8006bd0:	61fb      	str	r3, [r7, #28]
 8006bd2:	e012      	b.n	8006bfa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	4413      	add	r3, r2
 8006bda:	7819      	ldrb	r1, [r3, #0]
 8006bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	4413      	add	r3, r2
 8006be2:	3334      	adds	r3, #52	; 0x34
 8006be4:	460a      	mov	r2, r1
 8006be6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	4413      	add	r3, r2
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d006      	beq.n	8006c02 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	61fb      	str	r3, [r7, #28]
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	2b0f      	cmp	r3, #15
 8006bfe:	d9e9      	bls.n	8006bd4 <prvInitialiseNewTask+0x54>
 8006c00:	e000      	b.n	8006c04 <prvInitialiseNewTask+0x84>
			{
				break;
 8006c02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c0c:	e003      	b.n	8006c16 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c18:	2b06      	cmp	r3, #6
 8006c1a:	d901      	bls.n	8006c20 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c1c:	2306      	movs	r3, #6
 8006c1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c2a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2e:	2200      	movs	r2, #0
 8006c30:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	3304      	adds	r3, #4
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fe fea1 	bl	800597e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3e:	3318      	adds	r3, #24
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fe fe9c 	bl	800597e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4e:	f1c3 0207 	rsb	r2, r3, #7
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6e:	334c      	adds	r3, #76	; 0x4c
 8006c70:	224c      	movs	r2, #76	; 0x4c
 8006c72:	2100      	movs	r1, #0
 8006c74:	4618      	mov	r0, r3
 8006c76:	f011 ff00 	bl	8018a7a <memset>
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	4a0c      	ldr	r2, [pc, #48]	; (8006cb0 <prvInitialiseNewTask+0x130>)
 8006c7e:	651a      	str	r2, [r3, #80]	; 0x50
 8006c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c82:	4a0c      	ldr	r2, [pc, #48]	; (8006cb4 <prvInitialiseNewTask+0x134>)
 8006c84:	655a      	str	r2, [r3, #84]	; 0x54
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	4a0b      	ldr	r2, [pc, #44]	; (8006cb8 <prvInitialiseNewTask+0x138>)
 8006c8a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	68f9      	ldr	r1, [r7, #12]
 8006c90:	69b8      	ldr	r0, [r7, #24]
 8006c92:	f000 ff07 	bl	8007aa4 <pxPortInitialiseStack>
 8006c96:	4602      	mov	r2, r0
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d002      	beq.n	8006ca8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ca6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ca8:	bf00      	nop
 8006caa:	3720      	adds	r7, #32
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	20010f94 	.word	0x20010f94
 8006cb4:	20010ffc 	.word	0x20010ffc
 8006cb8:	20011064 	.word	0x20011064

08006cbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006cc4:	f001 f81e 	bl	8007d04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006cc8:	4b2a      	ldr	r3, [pc, #168]	; (8006d74 <prvAddNewTaskToReadyList+0xb8>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	4a29      	ldr	r2, [pc, #164]	; (8006d74 <prvAddNewTaskToReadyList+0xb8>)
 8006cd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006cd2:	4b29      	ldr	r3, [pc, #164]	; (8006d78 <prvAddNewTaskToReadyList+0xbc>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d109      	bne.n	8006cee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006cda:	4a27      	ldr	r2, [pc, #156]	; (8006d78 <prvAddNewTaskToReadyList+0xbc>)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ce0:	4b24      	ldr	r3, [pc, #144]	; (8006d74 <prvAddNewTaskToReadyList+0xb8>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d110      	bne.n	8006d0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ce8:	f000 fbf8 	bl	80074dc <prvInitialiseTaskLists>
 8006cec:	e00d      	b.n	8006d0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006cee:	4b23      	ldr	r3, [pc, #140]	; (8006d7c <prvAddNewTaskToReadyList+0xc0>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d109      	bne.n	8006d0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cf6:	4b20      	ldr	r3, [pc, #128]	; (8006d78 <prvAddNewTaskToReadyList+0xbc>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d802      	bhi.n	8006d0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d04:	4a1c      	ldr	r2, [pc, #112]	; (8006d78 <prvAddNewTaskToReadyList+0xbc>)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d0a:	4b1d      	ldr	r3, [pc, #116]	; (8006d80 <prvAddNewTaskToReadyList+0xc4>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	4a1b      	ldr	r2, [pc, #108]	; (8006d80 <prvAddNewTaskToReadyList+0xc4>)
 8006d12:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	2201      	movs	r2, #1
 8006d1a:	409a      	lsls	r2, r3
 8006d1c:	4b19      	ldr	r3, [pc, #100]	; (8006d84 <prvAddNewTaskToReadyList+0xc8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	4a18      	ldr	r2, [pc, #96]	; (8006d84 <prvAddNewTaskToReadyList+0xc8>)
 8006d24:	6013      	str	r3, [r2, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4a15      	ldr	r2, [pc, #84]	; (8006d88 <prvAddNewTaskToReadyList+0xcc>)
 8006d34:	441a      	add	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	3304      	adds	r3, #4
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	f7fe fe2b 	bl	8005998 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d42:	f001 f80f 	bl	8007d64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d46:	4b0d      	ldr	r3, [pc, #52]	; (8006d7c <prvAddNewTaskToReadyList+0xc0>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00e      	beq.n	8006d6c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d4e:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <prvAddNewTaskToReadyList+0xbc>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d207      	bcs.n	8006d6c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d5c:	4b0b      	ldr	r3, [pc, #44]	; (8006d8c <prvAddNewTaskToReadyList+0xd0>)
 8006d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d6c:	bf00      	nop
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	200051e8 	.word	0x200051e8
 8006d78:	200050e8 	.word	0x200050e8
 8006d7c:	200051f4 	.word	0x200051f4
 8006d80:	20005204 	.word	0x20005204
 8006d84:	200051f0 	.word	0x200051f0
 8006d88:	200050ec 	.word	0x200050ec
 8006d8c:	e000ed04 	.word	0xe000ed04

08006d90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d017      	beq.n	8006dd2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006da2:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <vTaskDelay+0x60>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <vTaskDelay+0x30>
	__asm volatile
 8006daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	60bb      	str	r3, [r7, #8]
}
 8006dbc:	bf00      	nop
 8006dbe:	e7fe      	b.n	8006dbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006dc0:	f000 f884 	bl	8006ecc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fe06 	bl	80079d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006dcc:	f000 f88c 	bl	8006ee8 <xTaskResumeAll>
 8006dd0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d107      	bne.n	8006de8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006dd8:	4b06      	ldr	r3, [pc, #24]	; (8006df4 <vTaskDelay+0x64>)
 8006dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006de8:	bf00      	nop
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	20005210 	.word	0x20005210
 8006df4:	e000ed04 	.word	0xe000ed04

08006df8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08a      	sub	sp, #40	; 0x28
 8006dfc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e06:	463a      	mov	r2, r7
 8006e08:	1d39      	adds	r1, r7, #4
 8006e0a:	f107 0308 	add.w	r3, r7, #8
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7f9 fbd4 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	9202      	str	r2, [sp, #8]
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	2300      	movs	r3, #0
 8006e24:	460a      	mov	r2, r1
 8006e26:	4921      	ldr	r1, [pc, #132]	; (8006eac <vTaskStartScheduler+0xb4>)
 8006e28:	4821      	ldr	r0, [pc, #132]	; (8006eb0 <vTaskStartScheduler+0xb8>)
 8006e2a:	f7ff fe07 	bl	8006a3c <xTaskCreateStatic>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	4a20      	ldr	r2, [pc, #128]	; (8006eb4 <vTaskStartScheduler+0xbc>)
 8006e32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e34:	4b1f      	ldr	r3, [pc, #124]	; (8006eb4 <vTaskStartScheduler+0xbc>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	617b      	str	r3, [r7, #20]
 8006e40:	e001      	b.n	8006e46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d11b      	bne.n	8006e84 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	613b      	str	r3, [r7, #16]
}
 8006e5e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e60:	4b15      	ldr	r3, [pc, #84]	; (8006eb8 <vTaskStartScheduler+0xc0>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	334c      	adds	r3, #76	; 0x4c
 8006e66:	4a15      	ldr	r2, [pc, #84]	; (8006ebc <vTaskStartScheduler+0xc4>)
 8006e68:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e6a:	4b15      	ldr	r3, [pc, #84]	; (8006ec0 <vTaskStartScheduler+0xc8>)
 8006e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e72:	4b14      	ldr	r3, [pc, #80]	; (8006ec4 <vTaskStartScheduler+0xcc>)
 8006e74:	2201      	movs	r2, #1
 8006e76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e78:	4b13      	ldr	r3, [pc, #76]	; (8006ec8 <vTaskStartScheduler+0xd0>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e7e:	f000 fe9f 	bl	8007bc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e82:	e00e      	b.n	8006ea2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8a:	d10a      	bne.n	8006ea2 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	60fb      	str	r3, [r7, #12]
}
 8006e9e:	bf00      	nop
 8006ea0:	e7fe      	b.n	8006ea0 <vTaskStartScheduler+0xa8>
}
 8006ea2:	bf00      	nop
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	080199b4 	.word	0x080199b4
 8006eb0:	080074ad 	.word	0x080074ad
 8006eb4:	2000520c 	.word	0x2000520c
 8006eb8:	200050e8 	.word	0x200050e8
 8006ebc:	2000008c 	.word	0x2000008c
 8006ec0:	20005208 	.word	0x20005208
 8006ec4:	200051f4 	.word	0x200051f4
 8006ec8:	200051ec 	.word	0x200051ec

08006ecc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ecc:	b480      	push	{r7}
 8006ece:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ed0:	4b04      	ldr	r3, [pc, #16]	; (8006ee4 <vTaskSuspendAll+0x18>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	4a03      	ldr	r2, [pc, #12]	; (8006ee4 <vTaskSuspendAll+0x18>)
 8006ed8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006eda:	bf00      	nop
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	20005210 	.word	0x20005210

08006ee8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ef6:	4b41      	ldr	r3, [pc, #260]	; (8006ffc <xTaskResumeAll+0x114>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10a      	bne.n	8006f14 <xTaskResumeAll+0x2c>
	__asm volatile
 8006efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	603b      	str	r3, [r7, #0]
}
 8006f10:	bf00      	nop
 8006f12:	e7fe      	b.n	8006f12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f14:	f000 fef6 	bl	8007d04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f18:	4b38      	ldr	r3, [pc, #224]	; (8006ffc <xTaskResumeAll+0x114>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	4a37      	ldr	r2, [pc, #220]	; (8006ffc <xTaskResumeAll+0x114>)
 8006f20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f22:	4b36      	ldr	r3, [pc, #216]	; (8006ffc <xTaskResumeAll+0x114>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d161      	bne.n	8006fee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f2a:	4b35      	ldr	r3, [pc, #212]	; (8007000 <xTaskResumeAll+0x118>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d05d      	beq.n	8006fee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f32:	e02e      	b.n	8006f92 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f34:	4b33      	ldr	r3, [pc, #204]	; (8007004 <xTaskResumeAll+0x11c>)
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3318      	adds	r3, #24
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe fd86 	bl	8005a52 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fe fd81 	bl	8005a52 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f54:	2201      	movs	r2, #1
 8006f56:	409a      	lsls	r2, r3
 8006f58:	4b2b      	ldr	r3, [pc, #172]	; (8007008 <xTaskResumeAll+0x120>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	4a2a      	ldr	r2, [pc, #168]	; (8007008 <xTaskResumeAll+0x120>)
 8006f60:	6013      	str	r3, [r2, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f66:	4613      	mov	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4a27      	ldr	r2, [pc, #156]	; (800700c <xTaskResumeAll+0x124>)
 8006f70:	441a      	add	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3304      	adds	r3, #4
 8006f76:	4619      	mov	r1, r3
 8006f78:	4610      	mov	r0, r2
 8006f7a:	f7fe fd0d 	bl	8005998 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f82:	4b23      	ldr	r3, [pc, #140]	; (8007010 <xTaskResumeAll+0x128>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d302      	bcc.n	8006f92 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006f8c:	4b21      	ldr	r3, [pc, #132]	; (8007014 <xTaskResumeAll+0x12c>)
 8006f8e:	2201      	movs	r2, #1
 8006f90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f92:	4b1c      	ldr	r3, [pc, #112]	; (8007004 <xTaskResumeAll+0x11c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1cc      	bne.n	8006f34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006fa0:	f000 fb3e 	bl	8007620 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006fa4:	4b1c      	ldr	r3, [pc, #112]	; (8007018 <xTaskResumeAll+0x130>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d010      	beq.n	8006fd2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006fb0:	f000 f858 	bl	8007064 <xTaskIncrementTick>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006fba:	4b16      	ldr	r3, [pc, #88]	; (8007014 <xTaskResumeAll+0x12c>)
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1f1      	bne.n	8006fb0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006fcc:	4b12      	ldr	r3, [pc, #72]	; (8007018 <xTaskResumeAll+0x130>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fd2:	4b10      	ldr	r3, [pc, #64]	; (8007014 <xTaskResumeAll+0x12c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d009      	beq.n	8006fee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fde:	4b0f      	ldr	r3, [pc, #60]	; (800701c <xTaskResumeAll+0x134>)
 8006fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fee:	f000 feb9 	bl	8007d64 <vPortExitCritical>

	return xAlreadyYielded;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20005210 	.word	0x20005210
 8007000:	200051e8 	.word	0x200051e8
 8007004:	200051a8 	.word	0x200051a8
 8007008:	200051f0 	.word	0x200051f0
 800700c:	200050ec 	.word	0x200050ec
 8007010:	200050e8 	.word	0x200050e8
 8007014:	200051fc 	.word	0x200051fc
 8007018:	200051f8 	.word	0x200051f8
 800701c:	e000ed04 	.word	0xe000ed04

08007020 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007026:	4b05      	ldr	r3, [pc, #20]	; (800703c <xTaskGetTickCount+0x1c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800702c:	687b      	ldr	r3, [r7, #4]
}
 800702e:	4618      	mov	r0, r3
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	200051ec 	.word	0x200051ec

08007040 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007046:	f000 ff3f 	bl	8007ec8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800704a:	2300      	movs	r3, #0
 800704c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800704e:	4b04      	ldr	r3, [pc, #16]	; (8007060 <xTaskGetTickCountFromISR+0x20>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007054:	683b      	ldr	r3, [r7, #0]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	200051ec 	.word	0x200051ec

08007064 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800706a:	2300      	movs	r3, #0
 800706c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800706e:	4b4e      	ldr	r3, [pc, #312]	; (80071a8 <xTaskIncrementTick+0x144>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	f040 808e 	bne.w	8007194 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007078:	4b4c      	ldr	r3, [pc, #304]	; (80071ac <xTaskIncrementTick+0x148>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3301      	adds	r3, #1
 800707e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007080:	4a4a      	ldr	r2, [pc, #296]	; (80071ac <xTaskIncrementTick+0x148>)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d120      	bne.n	80070ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800708c:	4b48      	ldr	r3, [pc, #288]	; (80071b0 <xTaskIncrementTick+0x14c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00a      	beq.n	80070ac <xTaskIncrementTick+0x48>
	__asm volatile
 8007096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709a:	f383 8811 	msr	BASEPRI, r3
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	603b      	str	r3, [r7, #0]
}
 80070a8:	bf00      	nop
 80070aa:	e7fe      	b.n	80070aa <xTaskIncrementTick+0x46>
 80070ac:	4b40      	ldr	r3, [pc, #256]	; (80071b0 <xTaskIncrementTick+0x14c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	60fb      	str	r3, [r7, #12]
 80070b2:	4b40      	ldr	r3, [pc, #256]	; (80071b4 <xTaskIncrementTick+0x150>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a3e      	ldr	r2, [pc, #248]	; (80071b0 <xTaskIncrementTick+0x14c>)
 80070b8:	6013      	str	r3, [r2, #0]
 80070ba:	4a3e      	ldr	r2, [pc, #248]	; (80071b4 <xTaskIncrementTick+0x150>)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	4b3d      	ldr	r3, [pc, #244]	; (80071b8 <xTaskIncrementTick+0x154>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3301      	adds	r3, #1
 80070c6:	4a3c      	ldr	r2, [pc, #240]	; (80071b8 <xTaskIncrementTick+0x154>)
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	f000 faa9 	bl	8007620 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070ce:	4b3b      	ldr	r3, [pc, #236]	; (80071bc <xTaskIncrementTick+0x158>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d348      	bcc.n	800716a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070d8:	4b35      	ldr	r3, [pc, #212]	; (80071b0 <xTaskIncrementTick+0x14c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d104      	bne.n	80070ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070e2:	4b36      	ldr	r3, [pc, #216]	; (80071bc <xTaskIncrementTick+0x158>)
 80070e4:	f04f 32ff 	mov.w	r2, #4294967295
 80070e8:	601a      	str	r2, [r3, #0]
					break;
 80070ea:	e03e      	b.n	800716a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ec:	4b30      	ldr	r3, [pc, #192]	; (80071b0 <xTaskIncrementTick+0x14c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	429a      	cmp	r2, r3
 8007102:	d203      	bcs.n	800710c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007104:	4a2d      	ldr	r2, [pc, #180]	; (80071bc <xTaskIncrementTick+0x158>)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800710a:	e02e      	b.n	800716a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	3304      	adds	r3, #4
 8007110:	4618      	mov	r0, r3
 8007112:	f7fe fc9e 	bl	8005a52 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711a:	2b00      	cmp	r3, #0
 800711c:	d004      	beq.n	8007128 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	3318      	adds	r3, #24
 8007122:	4618      	mov	r0, r3
 8007124:	f7fe fc95 	bl	8005a52 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	2201      	movs	r2, #1
 800712e:	409a      	lsls	r2, r3
 8007130:	4b23      	ldr	r3, [pc, #140]	; (80071c0 <xTaskIncrementTick+0x15c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4313      	orrs	r3, r2
 8007136:	4a22      	ldr	r2, [pc, #136]	; (80071c0 <xTaskIncrementTick+0x15c>)
 8007138:	6013      	str	r3, [r2, #0]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713e:	4613      	mov	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4413      	add	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4a1f      	ldr	r2, [pc, #124]	; (80071c4 <xTaskIncrementTick+0x160>)
 8007148:	441a      	add	r2, r3
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	3304      	adds	r3, #4
 800714e:	4619      	mov	r1, r3
 8007150:	4610      	mov	r0, r2
 8007152:	f7fe fc21 	bl	8005998 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715a:	4b1b      	ldr	r3, [pc, #108]	; (80071c8 <xTaskIncrementTick+0x164>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007160:	429a      	cmp	r2, r3
 8007162:	d3b9      	bcc.n	80070d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007164:	2301      	movs	r3, #1
 8007166:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007168:	e7b6      	b.n	80070d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800716a:	4b17      	ldr	r3, [pc, #92]	; (80071c8 <xTaskIncrementTick+0x164>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007170:	4914      	ldr	r1, [pc, #80]	; (80071c4 <xTaskIncrementTick+0x160>)
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	440b      	add	r3, r1
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d901      	bls.n	8007186 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007182:	2301      	movs	r3, #1
 8007184:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007186:	4b11      	ldr	r3, [pc, #68]	; (80071cc <xTaskIncrementTick+0x168>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d007      	beq.n	800719e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800718e:	2301      	movs	r3, #1
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	e004      	b.n	800719e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007194:	4b0e      	ldr	r3, [pc, #56]	; (80071d0 <xTaskIncrementTick+0x16c>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3301      	adds	r3, #1
 800719a:	4a0d      	ldr	r2, [pc, #52]	; (80071d0 <xTaskIncrementTick+0x16c>)
 800719c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800719e:	697b      	ldr	r3, [r7, #20]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	20005210 	.word	0x20005210
 80071ac:	200051ec 	.word	0x200051ec
 80071b0:	200051a0 	.word	0x200051a0
 80071b4:	200051a4 	.word	0x200051a4
 80071b8:	20005200 	.word	0x20005200
 80071bc:	20005208 	.word	0x20005208
 80071c0:	200051f0 	.word	0x200051f0
 80071c4:	200050ec 	.word	0x200050ec
 80071c8:	200050e8 	.word	0x200050e8
 80071cc:	200051fc 	.word	0x200051fc
 80071d0:	200051f8 	.word	0x200051f8

080071d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071da:	4b29      	ldr	r3, [pc, #164]	; (8007280 <vTaskSwitchContext+0xac>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071e2:	4b28      	ldr	r3, [pc, #160]	; (8007284 <vTaskSwitchContext+0xb0>)
 80071e4:	2201      	movs	r2, #1
 80071e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071e8:	e044      	b.n	8007274 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80071ea:	4b26      	ldr	r3, [pc, #152]	; (8007284 <vTaskSwitchContext+0xb0>)
 80071ec:	2200      	movs	r2, #0
 80071ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071f0:	4b25      	ldr	r3, [pc, #148]	; (8007288 <vTaskSwitchContext+0xb4>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	fab3 f383 	clz	r3, r3
 80071fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80071fe:	7afb      	ldrb	r3, [r7, #11]
 8007200:	f1c3 031f 	rsb	r3, r3, #31
 8007204:	617b      	str	r3, [r7, #20]
 8007206:	4921      	ldr	r1, [pc, #132]	; (800728c <vTaskSwitchContext+0xb8>)
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	4613      	mov	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	440b      	add	r3, r1
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10a      	bne.n	8007230 <vTaskSwitchContext+0x5c>
	__asm volatile
 800721a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	607b      	str	r3, [r7, #4]
}
 800722c:	bf00      	nop
 800722e:	e7fe      	b.n	800722e <vTaskSwitchContext+0x5a>
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4a14      	ldr	r2, [pc, #80]	; (800728c <vTaskSwitchContext+0xb8>)
 800723c:	4413      	add	r3, r2
 800723e:	613b      	str	r3, [r7, #16]
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	605a      	str	r2, [r3, #4]
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	3308      	adds	r3, #8
 8007252:	429a      	cmp	r2, r3
 8007254:	d104      	bne.n	8007260 <vTaskSwitchContext+0x8c>
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	605a      	str	r2, [r3, #4]
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	4a0a      	ldr	r2, [pc, #40]	; (8007290 <vTaskSwitchContext+0xbc>)
 8007268:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800726a:	4b09      	ldr	r3, [pc, #36]	; (8007290 <vTaskSwitchContext+0xbc>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	334c      	adds	r3, #76	; 0x4c
 8007270:	4a08      	ldr	r2, [pc, #32]	; (8007294 <vTaskSwitchContext+0xc0>)
 8007272:	6013      	str	r3, [r2, #0]
}
 8007274:	bf00      	nop
 8007276:	371c      	adds	r7, #28
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	20005210 	.word	0x20005210
 8007284:	200051fc 	.word	0x200051fc
 8007288:	200051f0 	.word	0x200051f0
 800728c:	200050ec 	.word	0x200050ec
 8007290:	200050e8 	.word	0x200050e8
 8007294:	2000008c 	.word	0x2000008c

08007298 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10a      	bne.n	80072be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	60fb      	str	r3, [r7, #12]
}
 80072ba:	bf00      	nop
 80072bc:	e7fe      	b.n	80072bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072be:	4b07      	ldr	r3, [pc, #28]	; (80072dc <vTaskPlaceOnEventList+0x44>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3318      	adds	r3, #24
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7fe fb8a 	bl	80059e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072cc:	2101      	movs	r1, #1
 80072ce:	6838      	ldr	r0, [r7, #0]
 80072d0:	f000 fb82 	bl	80079d8 <prvAddCurrentTaskToDelayedList>
}
 80072d4:	bf00      	nop
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	200050e8 	.word	0x200050e8

080072e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10a      	bne.n	800730c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	60fb      	str	r3, [r7, #12]
}
 8007308:	bf00      	nop
 800730a:	e7fe      	b.n	800730a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	3318      	adds	r3, #24
 8007310:	4618      	mov	r0, r3
 8007312:	f7fe fb9e 	bl	8005a52 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007316:	4b1d      	ldr	r3, [pc, #116]	; (800738c <xTaskRemoveFromEventList+0xac>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d11c      	bne.n	8007358 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	3304      	adds	r3, #4
 8007322:	4618      	mov	r0, r3
 8007324:	f7fe fb95 	bl	8005a52 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	2201      	movs	r2, #1
 800732e:	409a      	lsls	r2, r3
 8007330:	4b17      	ldr	r3, [pc, #92]	; (8007390 <xTaskRemoveFromEventList+0xb0>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4313      	orrs	r3, r2
 8007336:	4a16      	ldr	r2, [pc, #88]	; (8007390 <xTaskRemoveFromEventList+0xb0>)
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800733e:	4613      	mov	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4a13      	ldr	r2, [pc, #76]	; (8007394 <xTaskRemoveFromEventList+0xb4>)
 8007348:	441a      	add	r2, r3
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	3304      	adds	r3, #4
 800734e:	4619      	mov	r1, r3
 8007350:	4610      	mov	r0, r2
 8007352:	f7fe fb21 	bl	8005998 <vListInsertEnd>
 8007356:	e005      	b.n	8007364 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	3318      	adds	r3, #24
 800735c:	4619      	mov	r1, r3
 800735e:	480e      	ldr	r0, [pc, #56]	; (8007398 <xTaskRemoveFromEventList+0xb8>)
 8007360:	f7fe fb1a 	bl	8005998 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007368:	4b0c      	ldr	r3, [pc, #48]	; (800739c <xTaskRemoveFromEventList+0xbc>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736e:	429a      	cmp	r2, r3
 8007370:	d905      	bls.n	800737e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007372:	2301      	movs	r3, #1
 8007374:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007376:	4b0a      	ldr	r3, [pc, #40]	; (80073a0 <xTaskRemoveFromEventList+0xc0>)
 8007378:	2201      	movs	r2, #1
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	e001      	b.n	8007382 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800737e:	2300      	movs	r3, #0
 8007380:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007382:	697b      	ldr	r3, [r7, #20]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3718      	adds	r7, #24
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	20005210 	.word	0x20005210
 8007390:	200051f0 	.word	0x200051f0
 8007394:	200050ec 	.word	0x200050ec
 8007398:	200051a8 	.word	0x200051a8
 800739c:	200050e8 	.word	0x200050e8
 80073a0:	200051fc 	.word	0x200051fc

080073a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073ac:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <vTaskInternalSetTimeOutState+0x24>)
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073b4:	4b05      	ldr	r3, [pc, #20]	; (80073cc <vTaskInternalSetTimeOutState+0x28>)
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	605a      	str	r2, [r3, #4]
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	20005200 	.word	0x20005200
 80073cc:	200051ec 	.word	0x200051ec

080073d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10a      	bne.n	80073f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	613b      	str	r3, [r7, #16]
}
 80073f2:	bf00      	nop
 80073f4:	e7fe      	b.n	80073f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	60fb      	str	r3, [r7, #12]
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007412:	f000 fc77 	bl	8007d04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007416:	4b1d      	ldr	r3, [pc, #116]	; (800748c <xTaskCheckForTimeOut+0xbc>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742e:	d102      	bne.n	8007436 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007430:	2300      	movs	r3, #0
 8007432:	61fb      	str	r3, [r7, #28]
 8007434:	e023      	b.n	800747e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	4b15      	ldr	r3, [pc, #84]	; (8007490 <xTaskCheckForTimeOut+0xc0>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	429a      	cmp	r2, r3
 8007440:	d007      	beq.n	8007452 <xTaskCheckForTimeOut+0x82>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	429a      	cmp	r2, r3
 800744a:	d302      	bcc.n	8007452 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800744c:	2301      	movs	r3, #1
 800744e:	61fb      	str	r3, [r7, #28]
 8007450:	e015      	b.n	800747e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	429a      	cmp	r2, r3
 800745a:	d20b      	bcs.n	8007474 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	1ad2      	subs	r2, r2, r3
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7ff ff9b 	bl	80073a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800746e:	2300      	movs	r3, #0
 8007470:	61fb      	str	r3, [r7, #28]
 8007472:	e004      	b.n	800747e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800747a:	2301      	movs	r3, #1
 800747c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800747e:	f000 fc71 	bl	8007d64 <vPortExitCritical>

	return xReturn;
 8007482:	69fb      	ldr	r3, [r7, #28]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3720      	adds	r7, #32
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	200051ec 	.word	0x200051ec
 8007490:	20005200 	.word	0x20005200

08007494 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007494:	b480      	push	{r7}
 8007496:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007498:	4b03      	ldr	r3, [pc, #12]	; (80074a8 <vTaskMissedYield+0x14>)
 800749a:	2201      	movs	r2, #1
 800749c:	601a      	str	r2, [r3, #0]
}
 800749e:	bf00      	nop
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	200051fc 	.word	0x200051fc

080074ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074b4:	f000 f852 	bl	800755c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074b8:	4b06      	ldr	r3, [pc, #24]	; (80074d4 <prvIdleTask+0x28>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d9f9      	bls.n	80074b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074c0:	4b05      	ldr	r3, [pc, #20]	; (80074d8 <prvIdleTask+0x2c>)
 80074c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c6:	601a      	str	r2, [r3, #0]
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074d0:	e7f0      	b.n	80074b4 <prvIdleTask+0x8>
 80074d2:	bf00      	nop
 80074d4:	200050ec 	.word	0x200050ec
 80074d8:	e000ed04 	.word	0xe000ed04

080074dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074e2:	2300      	movs	r3, #0
 80074e4:	607b      	str	r3, [r7, #4]
 80074e6:	e00c      	b.n	8007502 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	4613      	mov	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4a12      	ldr	r2, [pc, #72]	; (800753c <prvInitialiseTaskLists+0x60>)
 80074f4:	4413      	add	r3, r2
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fe fa21 	bl	800593e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3301      	adds	r3, #1
 8007500:	607b      	str	r3, [r7, #4]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2b06      	cmp	r3, #6
 8007506:	d9ef      	bls.n	80074e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007508:	480d      	ldr	r0, [pc, #52]	; (8007540 <prvInitialiseTaskLists+0x64>)
 800750a:	f7fe fa18 	bl	800593e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800750e:	480d      	ldr	r0, [pc, #52]	; (8007544 <prvInitialiseTaskLists+0x68>)
 8007510:	f7fe fa15 	bl	800593e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007514:	480c      	ldr	r0, [pc, #48]	; (8007548 <prvInitialiseTaskLists+0x6c>)
 8007516:	f7fe fa12 	bl	800593e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800751a:	480c      	ldr	r0, [pc, #48]	; (800754c <prvInitialiseTaskLists+0x70>)
 800751c:	f7fe fa0f 	bl	800593e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007520:	480b      	ldr	r0, [pc, #44]	; (8007550 <prvInitialiseTaskLists+0x74>)
 8007522:	f7fe fa0c 	bl	800593e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007526:	4b0b      	ldr	r3, [pc, #44]	; (8007554 <prvInitialiseTaskLists+0x78>)
 8007528:	4a05      	ldr	r2, [pc, #20]	; (8007540 <prvInitialiseTaskLists+0x64>)
 800752a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800752c:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <prvInitialiseTaskLists+0x7c>)
 800752e:	4a05      	ldr	r2, [pc, #20]	; (8007544 <prvInitialiseTaskLists+0x68>)
 8007530:	601a      	str	r2, [r3, #0]
}
 8007532:	bf00      	nop
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	200050ec 	.word	0x200050ec
 8007540:	20005178 	.word	0x20005178
 8007544:	2000518c 	.word	0x2000518c
 8007548:	200051a8 	.word	0x200051a8
 800754c:	200051bc 	.word	0x200051bc
 8007550:	200051d4 	.word	0x200051d4
 8007554:	200051a0 	.word	0x200051a0
 8007558:	200051a4 	.word	0x200051a4

0800755c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007562:	e019      	b.n	8007598 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007564:	f000 fbce 	bl	8007d04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007568:	4b10      	ldr	r3, [pc, #64]	; (80075ac <prvCheckTasksWaitingTermination+0x50>)
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3304      	adds	r3, #4
 8007574:	4618      	mov	r0, r3
 8007576:	f7fe fa6c 	bl	8005a52 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800757a:	4b0d      	ldr	r3, [pc, #52]	; (80075b0 <prvCheckTasksWaitingTermination+0x54>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3b01      	subs	r3, #1
 8007580:	4a0b      	ldr	r2, [pc, #44]	; (80075b0 <prvCheckTasksWaitingTermination+0x54>)
 8007582:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007584:	4b0b      	ldr	r3, [pc, #44]	; (80075b4 <prvCheckTasksWaitingTermination+0x58>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3b01      	subs	r3, #1
 800758a:	4a0a      	ldr	r2, [pc, #40]	; (80075b4 <prvCheckTasksWaitingTermination+0x58>)
 800758c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800758e:	f000 fbe9 	bl	8007d64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f810 	bl	80075b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007598:	4b06      	ldr	r3, [pc, #24]	; (80075b4 <prvCheckTasksWaitingTermination+0x58>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1e1      	bne.n	8007564 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075a0:	bf00      	nop
 80075a2:	bf00      	nop
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	200051bc 	.word	0x200051bc
 80075b0:	200051e8 	.word	0x200051e8
 80075b4:	200051d0 	.word	0x200051d0

080075b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	334c      	adds	r3, #76	; 0x4c
 80075c4:	4618      	mov	r0, r3
 80075c6:	f011 fa8f 	bl	8018ae8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d108      	bne.n	80075e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 fd81 	bl	80080e0 <vPortFree>
				vPortFree( pxTCB );
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fd7e 	bl	80080e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075e4:	e018      	b.n	8007618 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d103      	bne.n	80075f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fd75 	bl	80080e0 <vPortFree>
	}
 80075f6:	e00f      	b.n	8007618 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d00a      	beq.n	8007618 <prvDeleteTCB+0x60>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	60fb      	str	r3, [r7, #12]
}
 8007614:	bf00      	nop
 8007616:	e7fe      	b.n	8007616 <prvDeleteTCB+0x5e>
	}
 8007618:	bf00      	nop
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007626:	4b0c      	ldr	r3, [pc, #48]	; (8007658 <prvResetNextTaskUnblockTime+0x38>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d104      	bne.n	800763a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007630:	4b0a      	ldr	r3, [pc, #40]	; (800765c <prvResetNextTaskUnblockTime+0x3c>)
 8007632:	f04f 32ff 	mov.w	r2, #4294967295
 8007636:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007638:	e008      	b.n	800764c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800763a:	4b07      	ldr	r3, [pc, #28]	; (8007658 <prvResetNextTaskUnblockTime+0x38>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	4a04      	ldr	r2, [pc, #16]	; (800765c <prvResetNextTaskUnblockTime+0x3c>)
 800764a:	6013      	str	r3, [r2, #0]
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr
 8007658:	200051a0 	.word	0x200051a0
 800765c:	20005208 	.word	0x20005208

08007660 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007666:	4b0b      	ldr	r3, [pc, #44]	; (8007694 <xTaskGetSchedulerState+0x34>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d102      	bne.n	8007674 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800766e:	2301      	movs	r3, #1
 8007670:	607b      	str	r3, [r7, #4]
 8007672:	e008      	b.n	8007686 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007674:	4b08      	ldr	r3, [pc, #32]	; (8007698 <xTaskGetSchedulerState+0x38>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d102      	bne.n	8007682 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800767c:	2302      	movs	r3, #2
 800767e:	607b      	str	r3, [r7, #4]
 8007680:	e001      	b.n	8007686 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007682:	2300      	movs	r3, #0
 8007684:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007686:	687b      	ldr	r3, [r7, #4]
	}
 8007688:	4618      	mov	r0, r3
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	200051f4 	.word	0x200051f4
 8007698:	20005210 	.word	0x20005210

0800769c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80076a8:	2300      	movs	r3, #0
 80076aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d05e      	beq.n	8007770 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b6:	4b31      	ldr	r3, [pc, #196]	; (800777c <xTaskPriorityInherit+0xe0>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	429a      	cmp	r2, r3
 80076be:	d24e      	bcs.n	800775e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	db06      	blt.n	80076d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076c8:	4b2c      	ldr	r3, [pc, #176]	; (800777c <xTaskPriorityInherit+0xe0>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ce:	f1c3 0207 	rsb	r2, r3, #7
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	6959      	ldr	r1, [r3, #20]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076de:	4613      	mov	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4a26      	ldr	r2, [pc, #152]	; (8007780 <xTaskPriorityInherit+0xe4>)
 80076e8:	4413      	add	r3, r2
 80076ea:	4299      	cmp	r1, r3
 80076ec:	d12f      	bne.n	800774e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	3304      	adds	r3, #4
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fe f9ad 	bl	8005a52 <uxListRemove>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10a      	bne.n	8007714 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007702:	2201      	movs	r2, #1
 8007704:	fa02 f303 	lsl.w	r3, r2, r3
 8007708:	43da      	mvns	r2, r3
 800770a:	4b1e      	ldr	r3, [pc, #120]	; (8007784 <xTaskPriorityInherit+0xe8>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4013      	ands	r3, r2
 8007710:	4a1c      	ldr	r2, [pc, #112]	; (8007784 <xTaskPriorityInherit+0xe8>)
 8007712:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007714:	4b19      	ldr	r3, [pc, #100]	; (800777c <xTaskPriorityInherit+0xe0>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007722:	2201      	movs	r2, #1
 8007724:	409a      	lsls	r2, r3
 8007726:	4b17      	ldr	r3, [pc, #92]	; (8007784 <xTaskPriorityInherit+0xe8>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4313      	orrs	r3, r2
 800772c:	4a15      	ldr	r2, [pc, #84]	; (8007784 <xTaskPriorityInherit+0xe8>)
 800772e:	6013      	str	r3, [r2, #0]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007734:	4613      	mov	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4413      	add	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4a10      	ldr	r2, [pc, #64]	; (8007780 <xTaskPriorityInherit+0xe4>)
 800773e:	441a      	add	r2, r3
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	3304      	adds	r3, #4
 8007744:	4619      	mov	r1, r3
 8007746:	4610      	mov	r0, r2
 8007748:	f7fe f926 	bl	8005998 <vListInsertEnd>
 800774c:	e004      	b.n	8007758 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800774e:	4b0b      	ldr	r3, [pc, #44]	; (800777c <xTaskPriorityInherit+0xe0>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007758:	2301      	movs	r3, #1
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	e008      	b.n	8007770 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007762:	4b06      	ldr	r3, [pc, #24]	; (800777c <xTaskPriorityInherit+0xe0>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007768:	429a      	cmp	r2, r3
 800776a:	d201      	bcs.n	8007770 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800776c:	2301      	movs	r3, #1
 800776e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007770:	68fb      	ldr	r3, [r7, #12]
	}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	200050e8 	.word	0x200050e8
 8007780:	200050ec 	.word	0x200050ec
 8007784:	200051f0 	.word	0x200051f0

08007788 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007794:	2300      	movs	r3, #0
 8007796:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d06e      	beq.n	800787c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800779e:	4b3a      	ldr	r3, [pc, #232]	; (8007888 <xTaskPriorityDisinherit+0x100>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d00a      	beq.n	80077be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80077a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	60fb      	str	r3, [r7, #12]
}
 80077ba:	bf00      	nop
 80077bc:	e7fe      	b.n	80077bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10a      	bne.n	80077dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80077c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	60bb      	str	r3, [r7, #8]
}
 80077d8:	bf00      	nop
 80077da:	e7fe      	b.n	80077da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077e0:	1e5a      	subs	r2, r3, #1
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d044      	beq.n	800787c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d140      	bne.n	800787c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	3304      	adds	r3, #4
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fe f927 	bl	8005a52 <uxListRemove>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d115      	bne.n	8007836 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780e:	491f      	ldr	r1, [pc, #124]	; (800788c <xTaskPriorityDisinherit+0x104>)
 8007810:	4613      	mov	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	440b      	add	r3, r1
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10a      	bne.n	8007836 <xTaskPriorityDisinherit+0xae>
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	2201      	movs	r2, #1
 8007826:	fa02 f303 	lsl.w	r3, r2, r3
 800782a:	43da      	mvns	r2, r3
 800782c:	4b18      	ldr	r3, [pc, #96]	; (8007890 <xTaskPriorityDisinherit+0x108>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4013      	ands	r3, r2
 8007832:	4a17      	ldr	r2, [pc, #92]	; (8007890 <xTaskPriorityDisinherit+0x108>)
 8007834:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007842:	f1c3 0207 	rsb	r2, r3, #7
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784e:	2201      	movs	r2, #1
 8007850:	409a      	lsls	r2, r3
 8007852:	4b0f      	ldr	r3, [pc, #60]	; (8007890 <xTaskPriorityDisinherit+0x108>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4313      	orrs	r3, r2
 8007858:	4a0d      	ldr	r2, [pc, #52]	; (8007890 <xTaskPriorityDisinherit+0x108>)
 800785a:	6013      	str	r3, [r2, #0]
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007860:	4613      	mov	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	4a08      	ldr	r2, [pc, #32]	; (800788c <xTaskPriorityDisinherit+0x104>)
 800786a:	441a      	add	r2, r3
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	3304      	adds	r3, #4
 8007870:	4619      	mov	r1, r3
 8007872:	4610      	mov	r0, r2
 8007874:	f7fe f890 	bl	8005998 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007878:	2301      	movs	r3, #1
 800787a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800787c:	697b      	ldr	r3, [r7, #20]
	}
 800787e:	4618      	mov	r0, r3
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	200050e8 	.word	0x200050e8
 800788c:	200050ec 	.word	0x200050ec
 8007890:	200051f0 	.word	0x200051f0

08007894 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007894:	b580      	push	{r7, lr}
 8007896:	b088      	sub	sp, #32
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80078a2:	2301      	movs	r3, #1
 80078a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d077      	beq.n	800799c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10a      	bne.n	80078ca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80078b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	60fb      	str	r3, [r7, #12]
}
 80078c6:	bf00      	nop
 80078c8:	e7fe      	b.n	80078c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d902      	bls.n	80078da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	61fb      	str	r3, [r7, #28]
 80078d8:	e002      	b.n	80078e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e4:	69fa      	ldr	r2, [r7, #28]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d058      	beq.n	800799c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d153      	bne.n	800799c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80078f4:	4b2b      	ldr	r3, [pc, #172]	; (80079a4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	69ba      	ldr	r2, [r7, #24]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d10a      	bne.n	8007914 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	60bb      	str	r3, [r7, #8]
}
 8007910:	bf00      	nop
 8007912:	e7fe      	b.n	8007912 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007918:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	69fa      	ldr	r2, [r7, #28]
 800791e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	2b00      	cmp	r3, #0
 8007926:	db04      	blt.n	8007932 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	f1c3 0207 	rsb	r2, r3, #7
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	6959      	ldr	r1, [r3, #20]
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	4613      	mov	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4413      	add	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4a19      	ldr	r2, [pc, #100]	; (80079a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007942:	4413      	add	r3, r2
 8007944:	4299      	cmp	r1, r3
 8007946:	d129      	bne.n	800799c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	3304      	adds	r3, #4
 800794c:	4618      	mov	r0, r3
 800794e:	f7fe f880 	bl	8005a52 <uxListRemove>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10a      	bne.n	800796e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	2201      	movs	r2, #1
 800795e:	fa02 f303 	lsl.w	r3, r2, r3
 8007962:	43da      	mvns	r2, r3
 8007964:	4b11      	ldr	r3, [pc, #68]	; (80079ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4013      	ands	r3, r2
 800796a:	4a10      	ldr	r2, [pc, #64]	; (80079ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800796c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007972:	2201      	movs	r2, #1
 8007974:	409a      	lsls	r2, r3
 8007976:	4b0d      	ldr	r3, [pc, #52]	; (80079ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4313      	orrs	r3, r2
 800797c:	4a0b      	ldr	r2, [pc, #44]	; (80079ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800797e:	6013      	str	r3, [r2, #0]
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007984:	4613      	mov	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4a06      	ldr	r2, [pc, #24]	; (80079a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800798e:	441a      	add	r2, r3
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	3304      	adds	r3, #4
 8007994:	4619      	mov	r1, r3
 8007996:	4610      	mov	r0, r2
 8007998:	f7fd fffe 	bl	8005998 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800799c:	bf00      	nop
 800799e:	3720      	adds	r7, #32
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	200050e8 	.word	0x200050e8
 80079a8:	200050ec 	.word	0x200050ec
 80079ac:	200051f0 	.word	0x200051f0

080079b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80079b0:	b480      	push	{r7}
 80079b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80079b4:	4b07      	ldr	r3, [pc, #28]	; (80079d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d004      	beq.n	80079c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80079bc:	4b05      	ldr	r3, [pc, #20]	; (80079d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079c2:	3201      	adds	r2, #1
 80079c4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80079c6:	4b03      	ldr	r3, [pc, #12]	; (80079d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80079c8:	681b      	ldr	r3, [r3, #0]
	}
 80079ca:	4618      	mov	r0, r3
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	200050e8 	.word	0x200050e8

080079d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079e2:	4b29      	ldr	r3, [pc, #164]	; (8007a88 <prvAddCurrentTaskToDelayedList+0xb0>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079e8:	4b28      	ldr	r3, [pc, #160]	; (8007a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3304      	adds	r3, #4
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fe f82f 	bl	8005a52 <uxListRemove>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10b      	bne.n	8007a12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80079fa:	4b24      	ldr	r3, [pc, #144]	; (8007a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a00:	2201      	movs	r2, #1
 8007a02:	fa02 f303 	lsl.w	r3, r2, r3
 8007a06:	43da      	mvns	r2, r3
 8007a08:	4b21      	ldr	r3, [pc, #132]	; (8007a90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	4a20      	ldr	r2, [pc, #128]	; (8007a90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a18:	d10a      	bne.n	8007a30 <prvAddCurrentTaskToDelayedList+0x58>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d007      	beq.n	8007a30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a20:	4b1a      	ldr	r3, [pc, #104]	; (8007a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	3304      	adds	r3, #4
 8007a26:	4619      	mov	r1, r3
 8007a28:	481a      	ldr	r0, [pc, #104]	; (8007a94 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a2a:	f7fd ffb5 	bl	8005998 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a2e:	e026      	b.n	8007a7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4413      	add	r3, r2
 8007a36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a38:	4b14      	ldr	r3, [pc, #80]	; (8007a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d209      	bcs.n	8007a5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a48:	4b13      	ldr	r3, [pc, #76]	; (8007a98 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	3304      	adds	r3, #4
 8007a52:	4619      	mov	r1, r3
 8007a54:	4610      	mov	r0, r2
 8007a56:	f7fd ffc3 	bl	80059e0 <vListInsert>
}
 8007a5a:	e010      	b.n	8007a7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a5c:	4b0f      	ldr	r3, [pc, #60]	; (8007a9c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	4b0a      	ldr	r3, [pc, #40]	; (8007a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3304      	adds	r3, #4
 8007a66:	4619      	mov	r1, r3
 8007a68:	4610      	mov	r0, r2
 8007a6a:	f7fd ffb9 	bl	80059e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a6e:	4b0c      	ldr	r3, [pc, #48]	; (8007aa0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d202      	bcs.n	8007a7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007a78:	4a09      	ldr	r2, [pc, #36]	; (8007aa0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	6013      	str	r3, [r2, #0]
}
 8007a7e:	bf00      	nop
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	200051ec 	.word	0x200051ec
 8007a8c:	200050e8 	.word	0x200050e8
 8007a90:	200051f0 	.word	0x200051f0
 8007a94:	200051d4 	.word	0x200051d4
 8007a98:	200051a4 	.word	0x200051a4
 8007a9c:	200051a0 	.word	0x200051a0
 8007aa0:	20005208 	.word	0x20005208

08007aa4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	3b04      	subs	r3, #4
 8007ab4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007abc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3b04      	subs	r3, #4
 8007ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	f023 0201 	bic.w	r2, r3, #1
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3b04      	subs	r3, #4
 8007ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ad4:	4a0c      	ldr	r2, [pc, #48]	; (8007b08 <pxPortInitialiseStack+0x64>)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3b14      	subs	r3, #20
 8007ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	3b04      	subs	r3, #4
 8007aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f06f 0202 	mvn.w	r2, #2
 8007af2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	3b20      	subs	r3, #32
 8007af8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007afa:	68fb      	ldr	r3, [r7, #12]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	08007b0d 	.word	0x08007b0d

08007b0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b16:	4b12      	ldr	r3, [pc, #72]	; (8007b60 <prvTaskExitError+0x54>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b1e:	d00a      	beq.n	8007b36 <prvTaskExitError+0x2a>
	__asm volatile
 8007b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b24:	f383 8811 	msr	BASEPRI, r3
 8007b28:	f3bf 8f6f 	isb	sy
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	60fb      	str	r3, [r7, #12]
}
 8007b32:	bf00      	nop
 8007b34:	e7fe      	b.n	8007b34 <prvTaskExitError+0x28>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	60bb      	str	r3, [r7, #8]
}
 8007b48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b4a:	bf00      	nop
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0fc      	beq.n	8007b4c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b52:	bf00      	nop
 8007b54:	bf00      	nop
 8007b56:	3714      	adds	r7, #20
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	20000020 	.word	0x20000020
	...

08007b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b70:	4b07      	ldr	r3, [pc, #28]	; (8007b90 <pxCurrentTCBConst2>)
 8007b72:	6819      	ldr	r1, [r3, #0]
 8007b74:	6808      	ldr	r0, [r1, #0]
 8007b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7a:	f380 8809 	msr	PSP, r0
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f04f 0000 	mov.w	r0, #0
 8007b86:	f380 8811 	msr	BASEPRI, r0
 8007b8a:	4770      	bx	lr
 8007b8c:	f3af 8000 	nop.w

08007b90 <pxCurrentTCBConst2>:
 8007b90:	200050e8 	.word	0x200050e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop

08007b98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b98:	4808      	ldr	r0, [pc, #32]	; (8007bbc <prvPortStartFirstTask+0x24>)
 8007b9a:	6800      	ldr	r0, [r0, #0]
 8007b9c:	6800      	ldr	r0, [r0, #0]
 8007b9e:	f380 8808 	msr	MSP, r0
 8007ba2:	f04f 0000 	mov.w	r0, #0
 8007ba6:	f380 8814 	msr	CONTROL, r0
 8007baa:	b662      	cpsie	i
 8007bac:	b661      	cpsie	f
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	df00      	svc	0
 8007bb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bba:	bf00      	nop
 8007bbc:	e000ed08 	.word	0xe000ed08

08007bc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007bc6:	4b46      	ldr	r3, [pc, #280]	; (8007ce0 <xPortStartScheduler+0x120>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a46      	ldr	r2, [pc, #280]	; (8007ce4 <xPortStartScheduler+0x124>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d10a      	bne.n	8007be6 <xPortStartScheduler+0x26>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	613b      	str	r3, [r7, #16]
}
 8007be2:	bf00      	nop
 8007be4:	e7fe      	b.n	8007be4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007be6:	4b3e      	ldr	r3, [pc, #248]	; (8007ce0 <xPortStartScheduler+0x120>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a3f      	ldr	r2, [pc, #252]	; (8007ce8 <xPortStartScheduler+0x128>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d10a      	bne.n	8007c06 <xPortStartScheduler+0x46>
	__asm volatile
 8007bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	60fb      	str	r3, [r7, #12]
}
 8007c02:	bf00      	nop
 8007c04:	e7fe      	b.n	8007c04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c06:	4b39      	ldr	r3, [pc, #228]	; (8007cec <xPortStartScheduler+0x12c>)
 8007c08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	22ff      	movs	r2, #255	; 0xff
 8007c16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c20:	78fb      	ldrb	r3, [r7, #3]
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	4b31      	ldr	r3, [pc, #196]	; (8007cf0 <xPortStartScheduler+0x130>)
 8007c2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c2e:	4b31      	ldr	r3, [pc, #196]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c30:	2207      	movs	r2, #7
 8007c32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c34:	e009      	b.n	8007c4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007c36:	4b2f      	ldr	r3, [pc, #188]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	4a2d      	ldr	r2, [pc, #180]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c40:	78fb      	ldrb	r3, [r7, #3]
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	005b      	lsls	r3, r3, #1
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c4a:	78fb      	ldrb	r3, [r7, #3]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c52:	2b80      	cmp	r3, #128	; 0x80
 8007c54:	d0ef      	beq.n	8007c36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c56:	4b27      	ldr	r3, [pc, #156]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f1c3 0307 	rsb	r3, r3, #7
 8007c5e:	2b04      	cmp	r3, #4
 8007c60:	d00a      	beq.n	8007c78 <xPortStartScheduler+0xb8>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	60bb      	str	r3, [r7, #8]
}
 8007c74:	bf00      	nop
 8007c76:	e7fe      	b.n	8007c76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c78:	4b1e      	ldr	r3, [pc, #120]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	021b      	lsls	r3, r3, #8
 8007c7e:	4a1d      	ldr	r2, [pc, #116]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c82:	4b1c      	ldr	r3, [pc, #112]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c8a:	4a1a      	ldr	r2, [pc, #104]	; (8007cf4 <xPortStartScheduler+0x134>)
 8007c8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c96:	4b18      	ldr	r3, [pc, #96]	; (8007cf8 <xPortStartScheduler+0x138>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a17      	ldr	r2, [pc, #92]	; (8007cf8 <xPortStartScheduler+0x138>)
 8007c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ca0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ca2:	4b15      	ldr	r3, [pc, #84]	; (8007cf8 <xPortStartScheduler+0x138>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a14      	ldr	r2, [pc, #80]	; (8007cf8 <xPortStartScheduler+0x138>)
 8007ca8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007cac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cae:	f000 f8dd 	bl	8007e6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007cb2:	4b12      	ldr	r3, [pc, #72]	; (8007cfc <xPortStartScheduler+0x13c>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007cb8:	f000 f8fc 	bl	8007eb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cbc:	4b10      	ldr	r3, [pc, #64]	; (8007d00 <xPortStartScheduler+0x140>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a0f      	ldr	r2, [pc, #60]	; (8007d00 <xPortStartScheduler+0x140>)
 8007cc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007cc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cc8:	f7ff ff66 	bl	8007b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ccc:	f7ff fa82 	bl	80071d4 <vTaskSwitchContext>
	prvTaskExitError();
 8007cd0:	f7ff ff1c 	bl	8007b0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	e000ed00 	.word	0xe000ed00
 8007ce4:	410fc271 	.word	0x410fc271
 8007ce8:	410fc270 	.word	0x410fc270
 8007cec:	e000e400 	.word	0xe000e400
 8007cf0:	20005214 	.word	0x20005214
 8007cf4:	20005218 	.word	0x20005218
 8007cf8:	e000ed20 	.word	0xe000ed20
 8007cfc:	20000020 	.word	0x20000020
 8007d00:	e000ef34 	.word	0xe000ef34

08007d04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
	__asm volatile
 8007d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	607b      	str	r3, [r7, #4]
}
 8007d1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d1e:	4b0f      	ldr	r3, [pc, #60]	; (8007d5c <vPortEnterCritical+0x58>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3301      	adds	r3, #1
 8007d24:	4a0d      	ldr	r2, [pc, #52]	; (8007d5c <vPortEnterCritical+0x58>)
 8007d26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d28:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <vPortEnterCritical+0x58>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d10f      	bne.n	8007d50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d30:	4b0b      	ldr	r3, [pc, #44]	; (8007d60 <vPortEnterCritical+0x5c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00a      	beq.n	8007d50 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	603b      	str	r3, [r7, #0]
}
 8007d4c:	bf00      	nop
 8007d4e:	e7fe      	b.n	8007d4e <vPortEnterCritical+0x4a>
	}
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	20000020 	.word	0x20000020
 8007d60:	e000ed04 	.word	0xe000ed04

08007d64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d6a:	4b12      	ldr	r3, [pc, #72]	; (8007db4 <vPortExitCritical+0x50>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10a      	bne.n	8007d88 <vPortExitCritical+0x24>
	__asm volatile
 8007d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	607b      	str	r3, [r7, #4]
}
 8007d84:	bf00      	nop
 8007d86:	e7fe      	b.n	8007d86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d88:	4b0a      	ldr	r3, [pc, #40]	; (8007db4 <vPortExitCritical+0x50>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	4a09      	ldr	r2, [pc, #36]	; (8007db4 <vPortExitCritical+0x50>)
 8007d90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d92:	4b08      	ldr	r3, [pc, #32]	; (8007db4 <vPortExitCritical+0x50>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d105      	bne.n	8007da6 <vPortExitCritical+0x42>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	f383 8811 	msr	BASEPRI, r3
}
 8007da4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	20000020 	.word	0x20000020
	...

08007dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007dc0:	f3ef 8009 	mrs	r0, PSP
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	4b15      	ldr	r3, [pc, #84]	; (8007e20 <pxCurrentTCBConst>)
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	f01e 0f10 	tst.w	lr, #16
 8007dd0:	bf08      	it	eq
 8007dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dda:	6010      	str	r0, [r2, #0]
 8007ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007de4:	f380 8811 	msr	BASEPRI, r0
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f7ff f9f0 	bl	80071d4 <vTaskSwitchContext>
 8007df4:	f04f 0000 	mov.w	r0, #0
 8007df8:	f380 8811 	msr	BASEPRI, r0
 8007dfc:	bc09      	pop	{r0, r3}
 8007dfe:	6819      	ldr	r1, [r3, #0]
 8007e00:	6808      	ldr	r0, [r1, #0]
 8007e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e06:	f01e 0f10 	tst.w	lr, #16
 8007e0a:	bf08      	it	eq
 8007e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e10:	f380 8809 	msr	PSP, r0
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	f3af 8000 	nop.w

08007e20 <pxCurrentTCBConst>:
 8007e20:	200050e8 	.word	0x200050e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop

08007e28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	607b      	str	r3, [r7, #4]
}
 8007e40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e42:	f7ff f90f 	bl	8007064 <xTaskIncrementTick>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e4c:	4b06      	ldr	r3, [pc, #24]	; (8007e68 <SysTick_Handler+0x40>)
 8007e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	2300      	movs	r3, #0
 8007e56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	f383 8811 	msr	BASEPRI, r3
}
 8007e5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	e000ed04 	.word	0xe000ed04

08007e6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e70:	4b0b      	ldr	r3, [pc, #44]	; (8007ea0 <vPortSetupTimerInterrupt+0x34>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e76:	4b0b      	ldr	r3, [pc, #44]	; (8007ea4 <vPortSetupTimerInterrupt+0x38>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ea8 <vPortSetupTimerInterrupt+0x3c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a0a      	ldr	r2, [pc, #40]	; (8007eac <vPortSetupTimerInterrupt+0x40>)
 8007e82:	fba2 2303 	umull	r2, r3, r2, r3
 8007e86:	099b      	lsrs	r3, r3, #6
 8007e88:	4a09      	ldr	r2, [pc, #36]	; (8007eb0 <vPortSetupTimerInterrupt+0x44>)
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e8e:	4b04      	ldr	r3, [pc, #16]	; (8007ea0 <vPortSetupTimerInterrupt+0x34>)
 8007e90:	2207      	movs	r2, #7
 8007e92:	601a      	str	r2, [r3, #0]
}
 8007e94:	bf00      	nop
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	e000e010 	.word	0xe000e010
 8007ea4:	e000e018 	.word	0xe000e018
 8007ea8:	20000000 	.word	0x20000000
 8007eac:	10624dd3 	.word	0x10624dd3
 8007eb0:	e000e014 	.word	0xe000e014

08007eb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007eb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ec4 <vPortEnableVFP+0x10>
 8007eb8:	6801      	ldr	r1, [r0, #0]
 8007eba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007ebe:	6001      	str	r1, [r0, #0]
 8007ec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ec2:	bf00      	nop
 8007ec4:	e000ed88 	.word	0xe000ed88

08007ec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ece:	f3ef 8305 	mrs	r3, IPSR
 8007ed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b0f      	cmp	r3, #15
 8007ed8:	d914      	bls.n	8007f04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007eda:	4a17      	ldr	r2, [pc, #92]	; (8007f38 <vPortValidateInterruptPriority+0x70>)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ee4:	4b15      	ldr	r3, [pc, #84]	; (8007f3c <vPortValidateInterruptPriority+0x74>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	7afa      	ldrb	r2, [r7, #11]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d20a      	bcs.n	8007f04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	607b      	str	r3, [r7, #4]
}
 8007f00:	bf00      	nop
 8007f02:	e7fe      	b.n	8007f02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f04:	4b0e      	ldr	r3, [pc, #56]	; (8007f40 <vPortValidateInterruptPriority+0x78>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f0c:	4b0d      	ldr	r3, [pc, #52]	; (8007f44 <vPortValidateInterruptPriority+0x7c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d90a      	bls.n	8007f2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	603b      	str	r3, [r7, #0]
}
 8007f26:	bf00      	nop
 8007f28:	e7fe      	b.n	8007f28 <vPortValidateInterruptPriority+0x60>
	}
 8007f2a:	bf00      	nop
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	e000e3f0 	.word	0xe000e3f0
 8007f3c:	20005214 	.word	0x20005214
 8007f40:	e000ed0c 	.word	0xe000ed0c
 8007f44:	20005218 	.word	0x20005218

08007f48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b08a      	sub	sp, #40	; 0x28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f50:	2300      	movs	r3, #0
 8007f52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f54:	f7fe ffba 	bl	8006ecc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f58:	4b5b      	ldr	r3, [pc, #364]	; (80080c8 <pvPortMalloc+0x180>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f60:	f000 f920 	bl	80081a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f64:	4b59      	ldr	r3, [pc, #356]	; (80080cc <pvPortMalloc+0x184>)
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f040 8093 	bne.w	8008098 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d01d      	beq.n	8007fb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007f78:	2208      	movs	r2, #8
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f003 0307 	and.w	r3, r3, #7
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d014      	beq.n	8007fb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f023 0307 	bic.w	r3, r3, #7
 8007f90:	3308      	adds	r3, #8
 8007f92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f003 0307 	and.w	r3, r3, #7
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00a      	beq.n	8007fb4 <pvPortMalloc+0x6c>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	617b      	str	r3, [r7, #20]
}
 8007fb0:	bf00      	nop
 8007fb2:	e7fe      	b.n	8007fb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d06e      	beq.n	8008098 <pvPortMalloc+0x150>
 8007fba:	4b45      	ldr	r3, [pc, #276]	; (80080d0 <pvPortMalloc+0x188>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d869      	bhi.n	8008098 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007fc4:	4b43      	ldr	r3, [pc, #268]	; (80080d4 <pvPortMalloc+0x18c>)
 8007fc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007fc8:	4b42      	ldr	r3, [pc, #264]	; (80080d4 <pvPortMalloc+0x18c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fce:	e004      	b.n	8007fda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d903      	bls.n	8007fec <pvPortMalloc+0xa4>
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1f1      	bne.n	8007fd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007fec:	4b36      	ldr	r3, [pc, #216]	; (80080c8 <pvPortMalloc+0x180>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d050      	beq.n	8008098 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2208      	movs	r2, #8
 8007ffc:	4413      	add	r3, r2
 8007ffe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	1ad2      	subs	r2, r2, r3
 8008010:	2308      	movs	r3, #8
 8008012:	005b      	lsls	r3, r3, #1
 8008014:	429a      	cmp	r2, r3
 8008016:	d91f      	bls.n	8008058 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4413      	add	r3, r2
 800801e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	f003 0307 	and.w	r3, r3, #7
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00a      	beq.n	8008040 <pvPortMalloc+0xf8>
	__asm volatile
 800802a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802e:	f383 8811 	msr	BASEPRI, r3
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	613b      	str	r3, [r7, #16]
}
 800803c:	bf00      	nop
 800803e:	e7fe      	b.n	800803e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	1ad2      	subs	r2, r2, r3
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008052:	69b8      	ldr	r0, [r7, #24]
 8008054:	f000 f908 	bl	8008268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008058:	4b1d      	ldr	r3, [pc, #116]	; (80080d0 <pvPortMalloc+0x188>)
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	4a1b      	ldr	r2, [pc, #108]	; (80080d0 <pvPortMalloc+0x188>)
 8008064:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008066:	4b1a      	ldr	r3, [pc, #104]	; (80080d0 <pvPortMalloc+0x188>)
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	4b1b      	ldr	r3, [pc, #108]	; (80080d8 <pvPortMalloc+0x190>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	429a      	cmp	r2, r3
 8008070:	d203      	bcs.n	800807a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008072:	4b17      	ldr	r3, [pc, #92]	; (80080d0 <pvPortMalloc+0x188>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a18      	ldr	r2, [pc, #96]	; (80080d8 <pvPortMalloc+0x190>)
 8008078:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	4b13      	ldr	r3, [pc, #76]	; (80080cc <pvPortMalloc+0x184>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	431a      	orrs	r2, r3
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800808e:	4b13      	ldr	r3, [pc, #76]	; (80080dc <pvPortMalloc+0x194>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3301      	adds	r3, #1
 8008094:	4a11      	ldr	r2, [pc, #68]	; (80080dc <pvPortMalloc+0x194>)
 8008096:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008098:	f7fe ff26 	bl	8006ee8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	f003 0307 	and.w	r3, r3, #7
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <pvPortMalloc+0x174>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	60fb      	str	r3, [r7, #12]
}
 80080b8:	bf00      	nop
 80080ba:	e7fe      	b.n	80080ba <pvPortMalloc+0x172>
	return pvReturn;
 80080bc:	69fb      	ldr	r3, [r7, #28]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3728      	adds	r7, #40	; 0x28
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	2000d224 	.word	0x2000d224
 80080cc:	2000d238 	.word	0x2000d238
 80080d0:	2000d228 	.word	0x2000d228
 80080d4:	2000d21c 	.word	0x2000d21c
 80080d8:	2000d22c 	.word	0x2000d22c
 80080dc:	2000d230 	.word	0x2000d230

080080e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d04d      	beq.n	800818e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080f2:	2308      	movs	r3, #8
 80080f4:	425b      	negs	r3, r3
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	4413      	add	r3, r2
 80080fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	4b24      	ldr	r3, [pc, #144]	; (8008198 <vPortFree+0xb8>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4013      	ands	r3, r2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10a      	bne.n	8008124 <vPortFree+0x44>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	60fb      	str	r3, [r7, #12]
}
 8008120:	bf00      	nop
 8008122:	e7fe      	b.n	8008122 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00a      	beq.n	8008142 <vPortFree+0x62>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	60bb      	str	r3, [r7, #8]
}
 800813e:	bf00      	nop
 8008140:	e7fe      	b.n	8008140 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	4b14      	ldr	r3, [pc, #80]	; (8008198 <vPortFree+0xb8>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4013      	ands	r3, r2
 800814c:	2b00      	cmp	r3, #0
 800814e:	d01e      	beq.n	800818e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d11a      	bne.n	800818e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	4b0e      	ldr	r3, [pc, #56]	; (8008198 <vPortFree+0xb8>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	43db      	mvns	r3, r3
 8008162:	401a      	ands	r2, r3
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008168:	f7fe feb0 	bl	8006ecc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	685a      	ldr	r2, [r3, #4]
 8008170:	4b0a      	ldr	r3, [pc, #40]	; (800819c <vPortFree+0xbc>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4413      	add	r3, r2
 8008176:	4a09      	ldr	r2, [pc, #36]	; (800819c <vPortFree+0xbc>)
 8008178:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800817a:	6938      	ldr	r0, [r7, #16]
 800817c:	f000 f874 	bl	8008268 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008180:	4b07      	ldr	r3, [pc, #28]	; (80081a0 <vPortFree+0xc0>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	3301      	adds	r3, #1
 8008186:	4a06      	ldr	r2, [pc, #24]	; (80081a0 <vPortFree+0xc0>)
 8008188:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800818a:	f7fe fead 	bl	8006ee8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800818e:	bf00      	nop
 8008190:	3718      	adds	r7, #24
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	2000d238 	.word	0x2000d238
 800819c:	2000d228 	.word	0x2000d228
 80081a0:	2000d234 	.word	0x2000d234

080081a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081b0:	4b27      	ldr	r3, [pc, #156]	; (8008250 <prvHeapInit+0xac>)
 80081b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f003 0307 	and.w	r3, r3, #7
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00c      	beq.n	80081d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	3307      	adds	r3, #7
 80081c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f023 0307 	bic.w	r3, r3, #7
 80081ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	4a1f      	ldr	r2, [pc, #124]	; (8008250 <prvHeapInit+0xac>)
 80081d4:	4413      	add	r3, r2
 80081d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80081dc:	4a1d      	ldr	r2, [pc, #116]	; (8008254 <prvHeapInit+0xb0>)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80081e2:	4b1c      	ldr	r3, [pc, #112]	; (8008254 <prvHeapInit+0xb0>)
 80081e4:	2200      	movs	r2, #0
 80081e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	4413      	add	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081f0:	2208      	movs	r2, #8
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	1a9b      	subs	r3, r3, r2
 80081f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f023 0307 	bic.w	r3, r3, #7
 80081fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	4a15      	ldr	r2, [pc, #84]	; (8008258 <prvHeapInit+0xb4>)
 8008204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008206:	4b14      	ldr	r3, [pc, #80]	; (8008258 <prvHeapInit+0xb4>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2200      	movs	r2, #0
 800820c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800820e:	4b12      	ldr	r3, [pc, #72]	; (8008258 <prvHeapInit+0xb4>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	1ad2      	subs	r2, r2, r3
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008224:	4b0c      	ldr	r3, [pc, #48]	; (8008258 <prvHeapInit+0xb4>)
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	4a0a      	ldr	r2, [pc, #40]	; (800825c <prvHeapInit+0xb8>)
 8008232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	4a09      	ldr	r2, [pc, #36]	; (8008260 <prvHeapInit+0xbc>)
 800823a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800823c:	4b09      	ldr	r3, [pc, #36]	; (8008264 <prvHeapInit+0xc0>)
 800823e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008242:	601a      	str	r2, [r3, #0]
}
 8008244:	bf00      	nop
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr
 8008250:	2000521c 	.word	0x2000521c
 8008254:	2000d21c 	.word	0x2000d21c
 8008258:	2000d224 	.word	0x2000d224
 800825c:	2000d22c 	.word	0x2000d22c
 8008260:	2000d228 	.word	0x2000d228
 8008264:	2000d238 	.word	0x2000d238

08008268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008270:	4b28      	ldr	r3, [pc, #160]	; (8008314 <prvInsertBlockIntoFreeList+0xac>)
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	e002      	b.n	800827c <prvInsertBlockIntoFreeList+0x14>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	60fb      	str	r3, [r7, #12]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	429a      	cmp	r2, r3
 8008284:	d8f7      	bhi.n	8008276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	4413      	add	r3, r2
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	429a      	cmp	r2, r3
 8008296:	d108      	bne.n	80082aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	441a      	add	r2, r3
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	441a      	add	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d118      	bne.n	80082f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	4b15      	ldr	r3, [pc, #84]	; (8008318 <prvInsertBlockIntoFreeList+0xb0>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d00d      	beq.n	80082e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	441a      	add	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	e008      	b.n	80082f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80082e6:	4b0c      	ldr	r3, [pc, #48]	; (8008318 <prvInsertBlockIntoFreeList+0xb0>)
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	601a      	str	r2, [r3, #0]
 80082ee:	e003      	b.n	80082f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d002      	beq.n	8008306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008306:	bf00      	nop
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	2000d21c 	.word	0x2000d21c
 8008318:	2000d224 	.word	0x2000d224

0800831c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	330c      	adds	r3, #12
 800832c:	461a      	mov	r2, r3
 800832e:	6839      	ldr	r1, [r7, #0]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f002 faa3 	bl	800a87c <tcpip_send_msg_wait_sem>
 8008336:	4603      	mov	r3, r0
 8008338:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800833a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d103      	bne.n	800834a <netconn_apimsg+0x2e>
    return apimsg->err;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008348:	e001      	b.n	800834e <netconn_apimsg+0x32>
  }
  return err;
 800834a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
	...

08008358 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08c      	sub	sp, #48	; 0x30
 800835c:	af00      	add	r7, sp, #0
 800835e:	4603      	mov	r3, r0
 8008360:	603a      	str	r2, [r7, #0]
 8008362:	71fb      	strb	r3, [r7, #7]
 8008364:	460b      	mov	r3, r1
 8008366:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	4618      	mov	r0, r3
 800836e:	f001 f923 	bl	80095b8 <netconn_alloc>
 8008372:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008376:	2b00      	cmp	r3, #0
 8008378:	d054      	beq.n	8008424 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800837a:	79bb      	ldrb	r3, [r7, #6]
 800837c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800837e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008380:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008382:	f107 0308 	add.w	r3, r7, #8
 8008386:	4619      	mov	r1, r3
 8008388:	4829      	ldr	r0, [pc, #164]	; (8008430 <netconn_new_with_proto_and_callback+0xd8>)
 800838a:	f7ff ffc7 	bl	800831c <netconn_apimsg>
 800838e:	4603      	mov	r3, r0
 8008390:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008394:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008398:	2b00      	cmp	r3, #0
 800839a:	d043      	beq.n	8008424 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800839c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d005      	beq.n	80083b0 <netconn_new_with_proto_and_callback+0x58>
 80083a4:	4b23      	ldr	r3, [pc, #140]	; (8008434 <netconn_new_with_proto_and_callback+0xdc>)
 80083a6:	22a3      	movs	r2, #163	; 0xa3
 80083a8:	4923      	ldr	r1, [pc, #140]	; (8008438 <netconn_new_with_proto_and_callback+0xe0>)
 80083aa:	4824      	ldr	r0, [pc, #144]	; (800843c <netconn_new_with_proto_and_callback+0xe4>)
 80083ac:	f010 fb00 	bl	80189b0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80083b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b2:	3310      	adds	r3, #16
 80083b4:	4618      	mov	r0, r3
 80083b6:	f010 f8d4 	bl	8018562 <sys_mbox_valid>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d105      	bne.n	80083cc <netconn_new_with_proto_and_callback+0x74>
 80083c0:	4b1c      	ldr	r3, [pc, #112]	; (8008434 <netconn_new_with_proto_and_callback+0xdc>)
 80083c2:	22a4      	movs	r2, #164	; 0xa4
 80083c4:	491e      	ldr	r1, [pc, #120]	; (8008440 <netconn_new_with_proto_and_callback+0xe8>)
 80083c6:	481d      	ldr	r0, [pc, #116]	; (800843c <netconn_new_with_proto_and_callback+0xe4>)
 80083c8:	f010 faf2 	bl	80189b0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80083cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ce:	3314      	adds	r3, #20
 80083d0:	4618      	mov	r0, r3
 80083d2:	f010 f8c6 	bl	8018562 <sys_mbox_valid>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d005      	beq.n	80083e8 <netconn_new_with_proto_and_callback+0x90>
 80083dc:	4b15      	ldr	r3, [pc, #84]	; (8008434 <netconn_new_with_proto_and_callback+0xdc>)
 80083de:	22a6      	movs	r2, #166	; 0xa6
 80083e0:	4918      	ldr	r1, [pc, #96]	; (8008444 <netconn_new_with_proto_and_callback+0xec>)
 80083e2:	4816      	ldr	r0, [pc, #88]	; (800843c <netconn_new_with_proto_and_callback+0xe4>)
 80083e4:	f010 fae4 	bl	80189b0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80083e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ea:	330c      	adds	r3, #12
 80083ec:	4618      	mov	r0, r3
 80083ee:	f010 f949 	bl	8018684 <sys_sem_valid>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d105      	bne.n	8008404 <netconn_new_with_proto_and_callback+0xac>
 80083f8:	4b0e      	ldr	r3, [pc, #56]	; (8008434 <netconn_new_with_proto_and_callback+0xdc>)
 80083fa:	22a9      	movs	r2, #169	; 0xa9
 80083fc:	4912      	ldr	r1, [pc, #72]	; (8008448 <netconn_new_with_proto_and_callback+0xf0>)
 80083fe:	480f      	ldr	r0, [pc, #60]	; (800843c <netconn_new_with_proto_and_callback+0xe4>)
 8008400:	f010 fad6 	bl	80189b0 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008406:	330c      	adds	r3, #12
 8008408:	4618      	mov	r0, r3
 800840a:	f010 f92e 	bl	801866a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800840e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008410:	3310      	adds	r3, #16
 8008412:	4618      	mov	r0, r3
 8008414:	f010 f81e 	bl	8018454 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008418:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800841a:	2007      	movs	r0, #7
 800841c:	f003 fe2c 	bl	800c078 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008420:	2300      	movs	r3, #0
 8008422:	e000      	b.n	8008426 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008426:	4618      	mov	r0, r3
 8008428:	3730      	adds	r7, #48	; 0x30
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	0800958d 	.word	0x0800958d
 8008434:	080199bc 	.word	0x080199bc
 8008438:	080199f0 	.word	0x080199f0
 800843c:	08019a14 	.word	0x08019a14
 8008440:	08019a3c 	.word	0x08019a3c
 8008444:	08019a54 	.word	0x08019a54
 8008448:	08019a78 	.word	0x08019a78

0800844c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b08c      	sub	sp, #48	; 0x30
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	e014      	b.n	8008488 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008462:	2329      	movs	r3, #41	; 0x29
 8008464:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008466:	f107 030c 	add.w	r3, r7, #12
 800846a:	4619      	mov	r1, r3
 800846c:	4808      	ldr	r0, [pc, #32]	; (8008490 <netconn_prepare_delete+0x44>)
 800846e:	f7ff ff55 	bl	800831c <netconn_apimsg>
 8008472:	4603      	mov	r3, r0
 8008474:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008478:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800847c:	2b00      	cmp	r3, #0
 800847e:	d002      	beq.n	8008486 <netconn_prepare_delete+0x3a>
    return err;
 8008480:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008484:	e000      	b.n	8008488 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3730      	adds	r7, #48	; 0x30
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	08009af9 	.word	0x08009af9

08008494 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d101      	bne.n	80084a6 <netconn_delete+0x12>
    return ERR_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	e00d      	b.n	80084c2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7ff ffd0 	bl	800844c <netconn_prepare_delete>
 80084ac:	4603      	mov	r3, r0
 80084ae:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80084b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d102      	bne.n	80084be <netconn_delete+0x2a>
    netconn_free(conn);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f001 f8eb 	bl	8009694 <netconn_free>
  }
  return err;
 80084be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
	...

080084cc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08e      	sub	sp, #56	; 0x38
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	4613      	mov	r3, r2
 80084d8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d109      	bne.n	80084f4 <netconn_bind+0x28>
 80084e0:	4b11      	ldr	r3, [pc, #68]	; (8008528 <netconn_bind+0x5c>)
 80084e2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80084e6:	4911      	ldr	r1, [pc, #68]	; (800852c <netconn_bind+0x60>)
 80084e8:	4811      	ldr	r0, [pc, #68]	; (8008530 <netconn_bind+0x64>)
 80084ea:	f010 fa61 	bl	80189b0 <iprintf>
 80084ee:	f06f 030f 	mvn.w	r3, #15
 80084f2:	e015      	b.n	8008520 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80084fa:	4b0e      	ldr	r3, [pc, #56]	; (8008534 <netconn_bind+0x68>)
 80084fc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008506:	88fb      	ldrh	r3, [r7, #6]
 8008508:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800850a:	f107 0314 	add.w	r3, r7, #20
 800850e:	4619      	mov	r1, r3
 8008510:	4809      	ldr	r0, [pc, #36]	; (8008538 <netconn_bind+0x6c>)
 8008512:	f7ff ff03 	bl	800831c <netconn_apimsg>
 8008516:	4603      	mov	r3, r0
 8008518:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800851c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008520:	4618      	mov	r0, r3
 8008522:	3738      	adds	r7, #56	; 0x38
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	080199bc 	.word	0x080199bc
 800852c:	08019af4 	.word	0x08019af4
 8008530:	08019a14 	.word	0x08019a14
 8008534:	080276d4 	.word	0x080276d4
 8008538:	08009cc1 	.word	0x08009cc1

0800853c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b08c      	sub	sp, #48	; 0x30
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d109      	bne.n	8008562 <netconn_listen_with_backlog+0x26>
 800854e:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <netconn_listen_with_backlog+0x48>)
 8008550:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008554:	490c      	ldr	r1, [pc, #48]	; (8008588 <netconn_listen_with_backlog+0x4c>)
 8008556:	480d      	ldr	r0, [pc, #52]	; (800858c <netconn_listen_with_backlog+0x50>)
 8008558:	f010 fa2a 	bl	80189b0 <iprintf>
 800855c:	f06f 030f 	mvn.w	r3, #15
 8008560:	e00c      	b.n	800857c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008566:	f107 030c 	add.w	r3, r7, #12
 800856a:	4619      	mov	r1, r3
 800856c:	4808      	ldr	r0, [pc, #32]	; (8008590 <netconn_listen_with_backlog+0x54>)
 800856e:	f7ff fed5 	bl	800831c <netconn_apimsg>
 8008572:	4603      	mov	r3, r0
 8008574:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008578:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800857c:	4618      	mov	r0, r3
 800857e:	3730      	adds	r7, #48	; 0x30
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	080199bc 	.word	0x080199bc
 8008588:	08019b74 	.word	0x08019b74
 800858c:	08019a14 	.word	0x08019a14
 8008590:	08009d35 	.word	0x08009d35

08008594 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d109      	bne.n	80085b8 <netconn_accept+0x24>
 80085a4:	4b3d      	ldr	r3, [pc, #244]	; (800869c <netconn_accept+0x108>)
 80085a6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80085aa:	493d      	ldr	r1, [pc, #244]	; (80086a0 <netconn_accept+0x10c>)
 80085ac:	483d      	ldr	r0, [pc, #244]	; (80086a4 <netconn_accept+0x110>)
 80085ae:	f010 f9ff 	bl	80189b0 <iprintf>
 80085b2:	f06f 030f 	mvn.w	r3, #15
 80085b6:	e06c      	b.n	8008692 <netconn_accept+0xfe>
  *new_conn = NULL;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	2200      	movs	r2, #0
 80085bc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d109      	bne.n	80085d8 <netconn_accept+0x44>
 80085c4:	4b35      	ldr	r3, [pc, #212]	; (800869c <netconn_accept+0x108>)
 80085c6:	f240 12e3 	movw	r2, #483	; 0x1e3
 80085ca:	4937      	ldr	r1, [pc, #220]	; (80086a8 <netconn_accept+0x114>)
 80085cc:	4835      	ldr	r0, [pc, #212]	; (80086a4 <netconn_accept+0x110>)
 80085ce:	f010 f9ef 	bl	80189b0 <iprintf>
 80085d2:	f06f 030f 	mvn.w	r3, #15
 80085d6:	e05c      	b.n	8008692 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fb6c 	bl	8008cb6 <netconn_err>
 80085de:	4603      	mov	r3, r0
 80085e0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80085e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d002      	beq.n	80085f0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80085ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80085ee:	e050      	b.n	8008692 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3314      	adds	r3, #20
 80085f4:	4618      	mov	r0, r3
 80085f6:	f00f ffb4 	bl	8018562 <sys_mbox_valid>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d005      	beq.n	800860c <netconn_accept+0x78>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	7f1b      	ldrb	r3, [r3, #28]
 8008604:	f003 0301 	and.w	r3, r3, #1
 8008608:	2b00      	cmp	r3, #0
 800860a:	d002      	beq.n	8008612 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800860c:	f06f 030e 	mvn.w	r3, #14
 8008610:	e03f      	b.n	8008692 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	7f1b      	ldrb	r3, [r3, #28]
 8008616:	f003 0302 	and.w	r3, r3, #2
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00e      	beq.n	800863c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	3314      	adds	r3, #20
 8008622:	f107 020c 	add.w	r2, r7, #12
 8008626:	4611      	mov	r1, r2
 8008628:	4618      	mov	r0, r3
 800862a:	f00f ff7e 	bl	801852a <sys_arch_mbox_tryfetch>
 800862e:	4603      	mov	r3, r0
 8008630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008634:	d10a      	bne.n	800864c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008636:	f06f 0306 	mvn.w	r3, #6
 800863a:	e02a      	b.n	8008692 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	3314      	adds	r3, #20
 8008640:	f107 010c 	add.w	r1, r7, #12
 8008644:	2200      	movs	r2, #0
 8008646:	4618      	mov	r0, r3
 8008648:	f00f ff30 	bl	80184ac <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008650:	2b00      	cmp	r3, #0
 8008652:	d005      	beq.n	8008660 <netconn_accept+0xcc>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	2200      	movs	r2, #0
 800865a:	2101      	movs	r1, #1
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f107 0213 	add.w	r2, r7, #19
 8008666:	4611      	mov	r1, r2
 8008668:	4618      	mov	r0, r3
 800866a:	f000 fb75 	bl	8008d58 <lwip_netconn_is_err_msg>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d002      	beq.n	800867a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008674:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008678:	e00b      	b.n	8008692 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d102      	bne.n	8008686 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008680:	f06f 030e 	mvn.w	r3, #14
 8008684:	e005      	b.n	8008692 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008690:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008692:	4618      	mov	r0, r3
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	080199bc 	.word	0x080199bc
 80086a0:	08019b94 	.word	0x08019b94
 80086a4:	08019a14 	.word	0x08019a14
 80086a8:	08019bb4 	.word	0x08019bb4

080086ac <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b088      	sub	sp, #32
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	4613      	mov	r3, r2
 80086b8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80086ba:	2300      	movs	r3, #0
 80086bc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d109      	bne.n	80086d8 <netconn_recv_data+0x2c>
 80086c4:	4b58      	ldr	r3, [pc, #352]	; (8008828 <netconn_recv_data+0x17c>)
 80086c6:	f44f 7212 	mov.w	r2, #584	; 0x248
 80086ca:	4958      	ldr	r1, [pc, #352]	; (800882c <netconn_recv_data+0x180>)
 80086cc:	4858      	ldr	r0, [pc, #352]	; (8008830 <netconn_recv_data+0x184>)
 80086ce:	f010 f96f 	bl	80189b0 <iprintf>
 80086d2:	f06f 030f 	mvn.w	r3, #15
 80086d6:	e0a2      	b.n	800881e <netconn_recv_data+0x172>
  *new_buf = NULL;
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2200      	movs	r2, #0
 80086dc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d109      	bne.n	80086f8 <netconn_recv_data+0x4c>
 80086e4:	4b50      	ldr	r3, [pc, #320]	; (8008828 <netconn_recv_data+0x17c>)
 80086e6:	f240 224a 	movw	r2, #586	; 0x24a
 80086ea:	4952      	ldr	r1, [pc, #328]	; (8008834 <netconn_recv_data+0x188>)
 80086ec:	4850      	ldr	r0, [pc, #320]	; (8008830 <netconn_recv_data+0x184>)
 80086ee:	f010 f95f 	bl	80189b0 <iprintf>
 80086f2:	f06f 030f 	mvn.w	r3, #15
 80086f6:	e092      	b.n	800881e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	3310      	adds	r3, #16
 80086fc:	4618      	mov	r0, r3
 80086fe:	f00f ff30 	bl	8018562 <sys_mbox_valid>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10e      	bne.n	8008726 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f000 fad4 	bl	8008cb6 <netconn_err>
 800870e:	4603      	mov	r3, r0
 8008710:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008712:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d002      	beq.n	8008720 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800871a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800871e:	e07e      	b.n	800881e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8008720:	f06f 030a 	mvn.w	r3, #10
 8008724:	e07b      	b.n	800881e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	7f1b      	ldrb	r3, [r3, #28]
 800872a:	f003 0302 	and.w	r3, r3, #2
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10f      	bne.n	8008752 <netconn_recv_data+0xa6>
 8008732:	79fb      	ldrb	r3, [r7, #7]
 8008734:	f003 0304 	and.w	r3, r3, #4
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10a      	bne.n	8008752 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	7f1b      	ldrb	r3, [r3, #28]
 8008740:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008744:	2b00      	cmp	r3, #0
 8008746:	d104      	bne.n	8008752 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d023      	beq.n	800879a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	3310      	adds	r3, #16
 8008756:	f107 0218 	add.w	r2, r7, #24
 800875a:	4611      	mov	r1, r2
 800875c:	4618      	mov	r0, r3
 800875e:	f00f fee4 	bl	801852a <sys_arch_mbox_tryfetch>
 8008762:	4603      	mov	r3, r0
 8008764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008768:	d11f      	bne.n	80087aa <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 faa3 	bl	8008cb6 <netconn_err>
 8008770:	4603      	mov	r3, r0
 8008772:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008774:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d002      	beq.n	8008782 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800877c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008780:	e04d      	b.n	800881e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	7f1b      	ldrb	r3, [r3, #28]
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800878e:	f06f 030a 	mvn.w	r3, #10
 8008792:	e044      	b.n	800881e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008794:	f06f 0306 	mvn.w	r3, #6
 8008798:	e041      	b.n	800881e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	3310      	adds	r3, #16
 800879e:	f107 0118 	add.w	r1, r7, #24
 80087a2:	2200      	movs	r2, #0
 80087a4:	4618      	mov	r0, r3
 80087a6:	f00f fe81 	bl	80184ac <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087b2:	2b10      	cmp	r3, #16
 80087b4:	d117      	bne.n	80087e6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	f107 0217 	add.w	r2, r7, #23
 80087bc:	4611      	mov	r1, r2
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 faca 	bl	8008d58 <lwip_netconn_is_err_msg>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d009      	beq.n	80087de <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80087ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087ce:	f113 0f0f 	cmn.w	r3, #15
 80087d2:	d101      	bne.n	80087d8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80087d4:	2300      	movs	r3, #0
 80087d6:	e022      	b.n	800881e <netconn_recv_data+0x172>
      }
      return err;
 80087d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087dc:	e01f      	b.n	800881e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	891b      	ldrh	r3, [r3, #8]
 80087e2:	83fb      	strh	r3, [r7, #30]
 80087e4:	e00d      	b.n	8008802 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d106      	bne.n	80087fa <netconn_recv_data+0x14e>
 80087ec:	4b0e      	ldr	r3, [pc, #56]	; (8008828 <netconn_recv_data+0x17c>)
 80087ee:	f240 2291 	movw	r2, #657	; 0x291
 80087f2:	4911      	ldr	r1, [pc, #68]	; (8008838 <netconn_recv_data+0x18c>)
 80087f4:	480e      	ldr	r0, [pc, #56]	; (8008830 <netconn_recv_data+0x184>)
 80087f6:	f010 f8db 	bl	80189b0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	891b      	ldrh	r3, [r3, #8]
 8008800:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008806:	2b00      	cmp	r3, #0
 8008808:	d005      	beq.n	8008816 <netconn_recv_data+0x16a>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880e:	8bfa      	ldrh	r2, [r7, #30]
 8008810:	2101      	movs	r1, #1
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3720      	adds	r7, #32
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	080199bc 	.word	0x080199bc
 800882c:	08019bd4 	.word	0x08019bd4
 8008830:	08019a14 	.word	0x08019a14
 8008834:	08019bf4 	.word	0x08019bf4
 8008838:	08019c10 	.word	0x08019c10

0800883c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d005      	beq.n	800885a <netconn_tcp_recvd_msg+0x1e>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008856:	2b10      	cmp	r3, #16
 8008858:	d009      	beq.n	800886e <netconn_tcp_recvd_msg+0x32>
 800885a:	4b0c      	ldr	r3, [pc, #48]	; (800888c <netconn_tcp_recvd_msg+0x50>)
 800885c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8008860:	490b      	ldr	r1, [pc, #44]	; (8008890 <netconn_tcp_recvd_msg+0x54>)
 8008862:	480c      	ldr	r0, [pc, #48]	; (8008894 <netconn_tcp_recvd_msg+0x58>)
 8008864:	f010 f8a4 	bl	80189b0 <iprintf>
 8008868:	f06f 030f 	mvn.w	r3, #15
 800886c:	e00a      	b.n	8008884 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800887a:	6879      	ldr	r1, [r7, #4]
 800887c:	4806      	ldr	r0, [pc, #24]	; (8008898 <netconn_tcp_recvd_msg+0x5c>)
 800887e:	f7ff fd4d 	bl	800831c <netconn_apimsg>
 8008882:	4603      	mov	r3, r0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	080199bc 	.word	0x080199bc
 8008890:	08019c1c 	.word	0x08019c1c
 8008894:	08019a14 	.word	0x08019a14
 8008898:	08009e65 	.word	0x08009e65

0800889c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b090      	sub	sp, #64	; 0x40
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	4613      	mov	r3, r2
 80088a8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	3310      	adds	r3, #16
 80088ae:	4618      	mov	r0, r3
 80088b0:	f00f fe57 	bl	8018562 <sys_mbox_valid>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d102      	bne.n	80088c0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80088ba:	f06f 030a 	mvn.w	r3, #10
 80088be:	e06d      	b.n	800899c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	7f1b      	ldrb	r3, [r3, #28]
 80088c4:	b25b      	sxtb	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	da07      	bge.n	80088da <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	7f1b      	ldrb	r3, [r3, #28]
 80088ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088d2:	b2da      	uxtb	r2, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80088d8:	e039      	b.n	800894e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80088da:	79fb      	ldrb	r3, [r7, #7]
 80088dc:	461a      	mov	r2, r3
 80088de:	68b9      	ldr	r1, [r7, #8]
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f7ff fee3 	bl	80086ac <netconn_recv_data>
 80088e6:	4603      	mov	r3, r0
 80088e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80088ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d002      	beq.n	80088fa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80088f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80088f8:	e050      	b.n	800899c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008900:	79fb      	ldrb	r3, [r7, #7]
 8008902:	f003 0308 	and.w	r3, r3, #8
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10e      	bne.n	8008928 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800890a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890c:	2b00      	cmp	r3, #0
 800890e:	d002      	beq.n	8008916 <netconn_recv_data_tcp+0x7a>
 8008910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008912:	891b      	ldrh	r3, [r3, #8]
 8008914:	e000      	b.n	8008918 <netconn_recv_data_tcp+0x7c>
 8008916:	2301      	movs	r3, #1
 8008918:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800891a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800891c:	f107 0214 	add.w	r2, r7, #20
 8008920:	4619      	mov	r1, r3
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f7ff ff8a 	bl	800883c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892a:	2b00      	cmp	r3, #0
 800892c:	d134      	bne.n	8008998 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800892e:	79fb      	ldrb	r3, [r7, #7]
 8008930:	f003 0310 	and.w	r3, r3, #16
 8008934:	2b00      	cmp	r3, #0
 8008936:	d009      	beq.n	800894c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	7f1b      	ldrb	r3, [r3, #28]
 800893c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008940:	b2da      	uxtb	r2, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008946:	f06f 0306 	mvn.w	r3, #6
 800894a:	e027      	b.n	800899c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800894c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008952:	2b00      	cmp	r3, #0
 8008954:	d005      	beq.n	8008962 <netconn_recv_data_tcp+0xc6>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895a:	2200      	movs	r2, #0
 800895c:	2101      	movs	r1, #1
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10f      	bne.n	800898a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f000 f9a3 	bl	8008cb6 <netconn_err>
 8008970:	4603      	mov	r3, r0
 8008972:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008976:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800897a:	2b00      	cmp	r3, #0
 800897c:	d002      	beq.n	8008984 <netconn_recv_data_tcp+0xe8>
          return err;
 800897e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008982:	e00b      	b.n	800899c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008984:	f06f 030d 	mvn.w	r3, #13
 8008988:	e008      	b.n	800899c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800898a:	2101      	movs	r1, #1
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f000 f955 	bl	8008c3c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008992:	f06f 030e 	mvn.w	r3, #14
 8008996:	e001      	b.n	800899c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008998:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800899c:	4618      	mov	r0, r3
 800899e:	3740      	adds	r7, #64	; 0x40
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b086      	sub	sp, #24
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80089ae:	2300      	movs	r3, #0
 80089b0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d109      	bne.n	80089cc <netconn_recv+0x28>
 80089b8:	4b32      	ldr	r3, [pc, #200]	; (8008a84 <netconn_recv+0xe0>)
 80089ba:	f240 3263 	movw	r2, #867	; 0x363
 80089be:	4932      	ldr	r1, [pc, #200]	; (8008a88 <netconn_recv+0xe4>)
 80089c0:	4832      	ldr	r0, [pc, #200]	; (8008a8c <netconn_recv+0xe8>)
 80089c2:	f00f fff5 	bl	80189b0 <iprintf>
 80089c6:	f06f 030f 	mvn.w	r3, #15
 80089ca:	e056      	b.n	8008a7a <netconn_recv+0xd6>
  *new_buf = NULL;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2200      	movs	r2, #0
 80089d0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d109      	bne.n	80089ec <netconn_recv+0x48>
 80089d8:	4b2a      	ldr	r3, [pc, #168]	; (8008a84 <netconn_recv+0xe0>)
 80089da:	f240 3265 	movw	r2, #869	; 0x365
 80089de:	492c      	ldr	r1, [pc, #176]	; (8008a90 <netconn_recv+0xec>)
 80089e0:	482a      	ldr	r0, [pc, #168]	; (8008a8c <netconn_recv+0xe8>)
 80089e2:	f00f ffe5 	bl	80189b0 <iprintf>
 80089e6:	f06f 030f 	mvn.w	r3, #15
 80089ea:	e046      	b.n	8008a7a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089f4:	2b10      	cmp	r3, #16
 80089f6:	d13a      	bne.n	8008a6e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80089f8:	2300      	movs	r3, #0
 80089fa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80089fc:	2006      	movs	r0, #6
 80089fe:	f003 fac5 	bl	800bf8c <memp_malloc>
 8008a02:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d102      	bne.n	8008a10 <netconn_recv+0x6c>
      return ERR_MEM;
 8008a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a0e:	e034      	b.n	8008a7a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8008a10:	f107 030c 	add.w	r3, r7, #12
 8008a14:	2200      	movs	r2, #0
 8008a16:	4619      	mov	r1, r3
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7ff ff3f 	bl	800889c <netconn_recv_data_tcp>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008a22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d006      	beq.n	8008a38 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8008a2a:	6979      	ldr	r1, [r7, #20]
 8008a2c:	2006      	movs	r0, #6
 8008a2e:	f003 fb23 	bl	800c078 <memp_free>
      return err;
 8008a32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a36:	e020      	b.n	8008a7a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d106      	bne.n	8008a4c <netconn_recv+0xa8>
 8008a3e:	4b11      	ldr	r3, [pc, #68]	; (8008a84 <netconn_recv+0xe0>)
 8008a40:	f240 3279 	movw	r2, #889	; 0x379
 8008a44:	4913      	ldr	r1, [pc, #76]	; (8008a94 <netconn_recv+0xf0>)
 8008a46:	4811      	ldr	r0, [pc, #68]	; (8008a8c <netconn_recv+0xe8>)
 8008a48:	f00f ffb2 	bl	80189b0 <iprintf>

    buf->p = p;
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	2200      	movs	r2, #0
 8008a62:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	e005      	b.n	8008a7a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8008a6e:	2200      	movs	r2, #0
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f7ff fe1a 	bl	80086ac <netconn_recv_data>
 8008a78:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3718      	adds	r7, #24
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	080199bc 	.word	0x080199bc
 8008a88:	08019bd4 	.word	0x08019bd4
 8008a8c:	08019a14 	.word	0x08019a14
 8008a90:	08019bf4 	.word	0x08019bf4
 8008a94:	08019c6c 	.word	0x08019c6c

08008a98 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b088      	sub	sp, #32
 8008a9c:	af02      	add	r7, sp, #8
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
 8008aa4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8008aae:	78fa      	ldrb	r2, [r7, #3]
 8008ab0:	f107 0110 	add.w	r1, r7, #16
 8008ab4:	6a3b      	ldr	r3, [r7, #32]
 8008ab6:	9300      	str	r3, [sp, #0]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	2201      	movs	r2, #1
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f000 f805 	bl	8008acc <netconn_write_vectors_partly>
 8008ac2:	4603      	mov	r3, r0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3718      	adds	r7, #24
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b092      	sub	sp, #72	; 0x48
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	461a      	mov	r2, r3
 8008ada:	460b      	mov	r3, r1
 8008adc:	80fb      	strh	r3, [r7, #6]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d109      	bne.n	8008afc <netconn_write_vectors_partly+0x30>
 8008ae8:	4b4e      	ldr	r3, [pc, #312]	; (8008c24 <netconn_write_vectors_partly+0x158>)
 8008aea:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008aee:	494e      	ldr	r1, [pc, #312]	; (8008c28 <netconn_write_vectors_partly+0x15c>)
 8008af0:	484e      	ldr	r0, [pc, #312]	; (8008c2c <netconn_write_vectors_partly+0x160>)
 8008af2:	f00f ff5d 	bl	80189b0 <iprintf>
 8008af6:	f06f 030f 	mvn.w	r3, #15
 8008afa:	e08e      	b.n	8008c1a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b04:	2b10      	cmp	r3, #16
 8008b06:	d009      	beq.n	8008b1c <netconn_write_vectors_partly+0x50>
 8008b08:	4b46      	ldr	r3, [pc, #280]	; (8008c24 <netconn_write_vectors_partly+0x158>)
 8008b0a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8008b0e:	4948      	ldr	r1, [pc, #288]	; (8008c30 <netconn_write_vectors_partly+0x164>)
 8008b10:	4846      	ldr	r0, [pc, #280]	; (8008c2c <netconn_write_vectors_partly+0x160>)
 8008b12:	f00f ff4d 	bl	80189b0 <iprintf>
 8008b16:	f06f 0305 	mvn.w	r3, #5
 8008b1a:	e07e      	b.n	8008c1a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	7f1b      	ldrb	r3, [r3, #28]
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d104      	bne.n	8008b32 <netconn_write_vectors_partly+0x66>
 8008b28:	797b      	ldrb	r3, [r7, #5]
 8008b2a:	f003 0304 	and.w	r3, r3, #4
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <netconn_write_vectors_partly+0x6a>
 8008b32:	2301      	movs	r3, #1
 8008b34:	e000      	b.n	8008b38 <netconn_write_vectors_partly+0x6c>
 8008b36:	2300      	movs	r3, #0
 8008b38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008b3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d005      	beq.n	8008b50 <netconn_write_vectors_partly+0x84>
 8008b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d102      	bne.n	8008b50 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008b4a:	f06f 0305 	mvn.w	r3, #5
 8008b4e:	e064      	b.n	8008c1a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008b50:	2300      	movs	r3, #0
 8008b52:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008b54:	2300      	movs	r3, #0
 8008b56:	643b      	str	r3, [r7, #64]	; 0x40
 8008b58:	e015      	b.n	8008b86 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8008b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	4413      	add	r3, r2
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b66:	4413      	add	r3, r2
 8008b68:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8008b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b6c:	00db      	lsls	r3, r3, #3
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	4413      	add	r3, r2
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d202      	bcs.n	8008b80 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8008b7a:	f06f 0305 	mvn.w	r3, #5
 8008b7e:	e04c      	b.n	8008c1a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b82:	3301      	adds	r3, #1
 8008b84:	643b      	str	r3, [r7, #64]	; 0x40
 8008b86:	88fb      	ldrh	r3, [r7, #6]
 8008b88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	dbe5      	blt.n	8008b5a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8008b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d101      	bne.n	8008b98 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	e040      	b.n	8008c1a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	da0a      	bge.n	8008bb4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d102      	bne.n	8008baa <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008ba4:	f06f 0305 	mvn.w	r3, #5
 8008ba8:	e037      	b.n	8008c1a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008baa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008bae:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008bbc:	88fb      	ldrh	r3, [r7, #6]
 8008bbe:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008bc4:	797b      	ldrb	r3, [r7, #5]
 8008bc6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008bd2:	f107 0314 	add.w	r3, r7, #20
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	4816      	ldr	r0, [pc, #88]	; (8008c34 <netconn_write_vectors_partly+0x168>)
 8008bda:	f7ff fb9f 	bl	800831c <netconn_apimsg>
 8008bde:	4603      	mov	r3, r0
 8008be0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008be4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d114      	bne.n	8008c16 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8008bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d002      	beq.n	8008bf8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bf6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008bf8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10a      	bne.n	8008c16 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d006      	beq.n	8008c16 <netconn_write_vectors_partly+0x14a>
 8008c08:	4b06      	ldr	r3, [pc, #24]	; (8008c24 <netconn_write_vectors_partly+0x158>)
 8008c0a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008c0e:	490a      	ldr	r1, [pc, #40]	; (8008c38 <netconn_write_vectors_partly+0x16c>)
 8008c10:	4806      	ldr	r0, [pc, #24]	; (8008c2c <netconn_write_vectors_partly+0x160>)
 8008c12:	f00f fecd 	bl	80189b0 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008c16:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3748      	adds	r7, #72	; 0x48
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	080199bc 	.word	0x080199bc
 8008c28:	08019c94 	.word	0x08019c94
 8008c2c:	08019a14 	.word	0x08019a14
 8008c30:	08019cb0 	.word	0x08019cb0
 8008c34:	0800a269 	.word	0x0800a269
 8008c38:	08019cd4 	.word	0x08019cd4

08008c3c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b08c      	sub	sp, #48	; 0x30
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	460b      	mov	r3, r1
 8008c46:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d109      	bne.n	8008c62 <netconn_close_shutdown+0x26>
 8008c4e:	4b0f      	ldr	r3, [pc, #60]	; (8008c8c <netconn_close_shutdown+0x50>)
 8008c50:	f240 4247 	movw	r2, #1095	; 0x447
 8008c54:	490e      	ldr	r1, [pc, #56]	; (8008c90 <netconn_close_shutdown+0x54>)
 8008c56:	480f      	ldr	r0, [pc, #60]	; (8008c94 <netconn_close_shutdown+0x58>)
 8008c58:	f00f feaa 	bl	80189b0 <iprintf>
 8008c5c:	f06f 030f 	mvn.w	r3, #15
 8008c60:	e010      	b.n	8008c84 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008c66:	78fb      	ldrb	r3, [r7, #3]
 8008c68:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008c6a:	2329      	movs	r3, #41	; 0x29
 8008c6c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008c6e:	f107 030c 	add.w	r3, r7, #12
 8008c72:	4619      	mov	r1, r3
 8008c74:	4808      	ldr	r0, [pc, #32]	; (8008c98 <netconn_close_shutdown+0x5c>)
 8008c76:	f7ff fb51 	bl	800831c <netconn_apimsg>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008c80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3730      	adds	r7, #48	; 0x30
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	080199bc 	.word	0x080199bc
 8008c90:	08019cf8 	.word	0x08019cf8
 8008c94:	08019a14 	.word	0x08019a14
 8008c98:	0800a381 	.word	0x0800a381

08008c9c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008ca4:	2103      	movs	r1, #3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7ff ffc8 	bl	8008c3c <netconn_close_shutdown>
 8008cac:	4603      	mov	r3, r0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <netconn_err+0x12>
    return ERR_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	e00d      	b.n	8008ce4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008cc8:	f00f fd66 	bl	8018798 <sys_arch_protect>
 8008ccc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	7a1b      	ldrb	r3, [r3, #8]
 8008cd2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f00f fd6a 	bl	80187b4 <sys_arch_unprotect>
  return err;
 8008ce0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cfa:	f113 0f0d 	cmn.w	r3, #13
 8008cfe:	d009      	beq.n	8008d14 <lwip_netconn_err_to_msg+0x28>
 8008d00:	f113 0f0d 	cmn.w	r3, #13
 8008d04:	dc0c      	bgt.n	8008d20 <lwip_netconn_err_to_msg+0x34>
 8008d06:	f113 0f0f 	cmn.w	r3, #15
 8008d0a:	d007      	beq.n	8008d1c <lwip_netconn_err_to_msg+0x30>
 8008d0c:	f113 0f0e 	cmn.w	r3, #14
 8008d10:	d002      	beq.n	8008d18 <lwip_netconn_err_to_msg+0x2c>
 8008d12:	e005      	b.n	8008d20 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008d14:	4b0a      	ldr	r3, [pc, #40]	; (8008d40 <lwip_netconn_err_to_msg+0x54>)
 8008d16:	e00e      	b.n	8008d36 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008d18:	4b0a      	ldr	r3, [pc, #40]	; (8008d44 <lwip_netconn_err_to_msg+0x58>)
 8008d1a:	e00c      	b.n	8008d36 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008d1c:	4b0a      	ldr	r3, [pc, #40]	; (8008d48 <lwip_netconn_err_to_msg+0x5c>)
 8008d1e:	e00a      	b.n	8008d36 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d005      	beq.n	8008d34 <lwip_netconn_err_to_msg+0x48>
 8008d28:	4b08      	ldr	r3, [pc, #32]	; (8008d4c <lwip_netconn_err_to_msg+0x60>)
 8008d2a:	227d      	movs	r2, #125	; 0x7d
 8008d2c:	4908      	ldr	r1, [pc, #32]	; (8008d50 <lwip_netconn_err_to_msg+0x64>)
 8008d2e:	4809      	ldr	r0, [pc, #36]	; (8008d54 <lwip_netconn_err_to_msg+0x68>)
 8008d30:	f00f fe3e 	bl	80189b0 <iprintf>
      return NULL;
 8008d34:	2300      	movs	r3, #0
  }
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	0801d478 	.word	0x0801d478
 8008d44:	0801d479 	.word	0x0801d479
 8008d48:	0801d47a 	.word	0x0801d47a
 8008d4c:	08019d14 	.word	0x08019d14
 8008d50:	08019d48 	.word	0x08019d48
 8008d54:	08019d58 	.word	0x08019d58

08008d58 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d105      	bne.n	8008d74 <lwip_netconn_is_err_msg+0x1c>
 8008d68:	4b12      	ldr	r3, [pc, #72]	; (8008db4 <lwip_netconn_is_err_msg+0x5c>)
 8008d6a:	2285      	movs	r2, #133	; 0x85
 8008d6c:	4912      	ldr	r1, [pc, #72]	; (8008db8 <lwip_netconn_is_err_msg+0x60>)
 8008d6e:	4813      	ldr	r0, [pc, #76]	; (8008dbc <lwip_netconn_is_err_msg+0x64>)
 8008d70:	f00f fe1e 	bl	80189b0 <iprintf>

  if (msg == &netconn_aborted) {
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a12      	ldr	r2, [pc, #72]	; (8008dc0 <lwip_netconn_is_err_msg+0x68>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d104      	bne.n	8008d86 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	22f3      	movs	r2, #243	; 0xf3
 8008d80:	701a      	strb	r2, [r3, #0]
    return 1;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e012      	b.n	8008dac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a0e      	ldr	r2, [pc, #56]	; (8008dc4 <lwip_netconn_is_err_msg+0x6c>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d104      	bne.n	8008d98 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	22f2      	movs	r2, #242	; 0xf2
 8008d92:	701a      	strb	r2, [r3, #0]
    return 1;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e009      	b.n	8008dac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a0b      	ldr	r2, [pc, #44]	; (8008dc8 <lwip_netconn_is_err_msg+0x70>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d104      	bne.n	8008daa <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	22f1      	movs	r2, #241	; 0xf1
 8008da4:	701a      	strb	r2, [r3, #0]
    return 1;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e000      	b.n	8008dac <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	08019d14 	.word	0x08019d14
 8008db8:	08019d80 	.word	0x08019d80
 8008dbc:	08019d58 	.word	0x08019d58
 8008dc0:	0801d478 	.word	0x0801d478
 8008dc4:	0801d479 	.word	0x0801d479
 8008dc8:	0801d47a 	.word	0x0801d47a

08008dcc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b088      	sub	sp, #32
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	607a      	str	r2, [r7, #4]
 8008dd8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d105      	bne.n	8008dec <recv_udp+0x20>
 8008de0:	4b34      	ldr	r3, [pc, #208]	; (8008eb4 <recv_udp+0xe8>)
 8008de2:	22e5      	movs	r2, #229	; 0xe5
 8008de4:	4934      	ldr	r1, [pc, #208]	; (8008eb8 <recv_udp+0xec>)
 8008de6:	4835      	ldr	r0, [pc, #212]	; (8008ebc <recv_udp+0xf0>)
 8008de8:	f00f fde2 	bl	80189b0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d105      	bne.n	8008dfe <recv_udp+0x32>
 8008df2:	4b30      	ldr	r3, [pc, #192]	; (8008eb4 <recv_udp+0xe8>)
 8008df4:	22e6      	movs	r2, #230	; 0xe6
 8008df6:	4932      	ldr	r1, [pc, #200]	; (8008ec0 <recv_udp+0xf4>)
 8008df8:	4830      	ldr	r0, [pc, #192]	; (8008ebc <recv_udp+0xf0>)
 8008dfa:	f00f fdd9 	bl	80189b0 <iprintf>
  conn = (struct netconn *)arg;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d103      	bne.n	8008e10 <recv_udp+0x44>
    pbuf_free(p);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f003 ffe5 	bl	800cdd8 <pbuf_free>
    return;
 8008e0e:	e04d      	b.n	8008eac <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	68ba      	ldr	r2, [r7, #8]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d005      	beq.n	8008e26 <recv_udp+0x5a>
 8008e1a:	4b26      	ldr	r3, [pc, #152]	; (8008eb4 <recv_udp+0xe8>)
 8008e1c:	22ee      	movs	r2, #238	; 0xee
 8008e1e:	4929      	ldr	r1, [pc, #164]	; (8008ec4 <recv_udp+0xf8>)
 8008e20:	4826      	ldr	r0, [pc, #152]	; (8008ebc <recv_udp+0xf0>)
 8008e22:	f00f fdc5 	bl	80189b0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	3310      	adds	r3, #16
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f00f fb99 	bl	8018562 <sys_mbox_valid>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d103      	bne.n	8008e3e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f003 ffce 	bl	800cdd8 <pbuf_free>
    return;
 8008e3c:	e036      	b.n	8008eac <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008e3e:	2006      	movs	r0, #6
 8008e40:	f003 f8a4 	bl	800bf8c <memp_malloc>
 8008e44:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d103      	bne.n	8008e54 <recv_udp+0x88>
    pbuf_free(p);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f003 ffc3 	bl	800cdd8 <pbuf_free>
    return;
 8008e52:	e02b      	b.n	8008eac <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d002      	beq.n	8008e6c <recv_udp+0xa0>
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	e000      	b.n	8008e6e <recv_udp+0xa2>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	69ba      	ldr	r2, [r7, #24]
 8008e70:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008e76:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	891b      	ldrh	r3, [r3, #8]
 8008e7c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	3310      	adds	r3, #16
 8008e82:	69b9      	ldr	r1, [r7, #24]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f00f faf7 	bl	8018478 <sys_mbox_trypost>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008e90:	69b8      	ldr	r0, [r7, #24]
 8008e92:	f001 fb01 	bl	800a498 <netbuf_delete>
    return;
 8008e96:	e009      	b.n	8008eac <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d005      	beq.n	8008eac <recv_udp+0xe0>
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea4:	8afa      	ldrh	r2, [r7, #22]
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	69f8      	ldr	r0, [r7, #28]
 8008eaa:	4798      	blx	r3
  }
}
 8008eac:	3720      	adds	r7, #32
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	08019d14 	.word	0x08019d14
 8008eb8:	08019d8c 	.word	0x08019d8c
 8008ebc:	08019d58 	.word	0x08019d58
 8008ec0:	08019db0 	.word	0x08019db0
 8008ec4:	08019dd0 	.word	0x08019dd0

08008ec8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b088      	sub	sp, #32
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
 8008ed4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d106      	bne.n	8008eea <recv_tcp+0x22>
 8008edc:	4b36      	ldr	r3, [pc, #216]	; (8008fb8 <recv_tcp+0xf0>)
 8008ede:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008ee2:	4936      	ldr	r1, [pc, #216]	; (8008fbc <recv_tcp+0xf4>)
 8008ee4:	4836      	ldr	r0, [pc, #216]	; (8008fc0 <recv_tcp+0xf8>)
 8008ee6:	f00f fd63 	bl	80189b0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d106      	bne.n	8008efe <recv_tcp+0x36>
 8008ef0:	4b31      	ldr	r3, [pc, #196]	; (8008fb8 <recv_tcp+0xf0>)
 8008ef2:	f240 122d 	movw	r2, #301	; 0x12d
 8008ef6:	4933      	ldr	r1, [pc, #204]	; (8008fc4 <recv_tcp+0xfc>)
 8008ef8:	4831      	ldr	r0, [pc, #196]	; (8008fc0 <recv_tcp+0xf8>)
 8008efa:	f00f fd59 	bl	80189b0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008efe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d006      	beq.n	8008f14 <recv_tcp+0x4c>
 8008f06:	4b2c      	ldr	r3, [pc, #176]	; (8008fb8 <recv_tcp+0xf0>)
 8008f08:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008f0c:	492e      	ldr	r1, [pc, #184]	; (8008fc8 <recv_tcp+0x100>)
 8008f0e:	482c      	ldr	r0, [pc, #176]	; (8008fc0 <recv_tcp+0xf8>)
 8008f10:	f00f fd4e 	bl	80189b0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d102      	bne.n	8008f24 <recv_tcp+0x5c>
    return ERR_VAL;
 8008f1e:	f06f 0305 	mvn.w	r3, #5
 8008f22:	e045      	b.n	8008fb0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d006      	beq.n	8008f3c <recv_tcp+0x74>
 8008f2e:	4b22      	ldr	r3, [pc, #136]	; (8008fb8 <recv_tcp+0xf0>)
 8008f30:	f240 1235 	movw	r2, #309	; 0x135
 8008f34:	4925      	ldr	r1, [pc, #148]	; (8008fcc <recv_tcp+0x104>)
 8008f36:	4822      	ldr	r0, [pc, #136]	; (8008fc0 <recv_tcp+0xf8>)
 8008f38:	f00f fd3a 	bl	80189b0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	3310      	adds	r3, #16
 8008f40:	4618      	mov	r0, r3
 8008f42:	f00f fb0e 	bl	8018562 <sys_mbox_valid>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10d      	bne.n	8008f68 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d008      	beq.n	8008f64 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	891b      	ldrh	r3, [r3, #8]
 8008f56:	4619      	mov	r1, r3
 8008f58:	68b8      	ldr	r0, [r7, #8]
 8008f5a:	f004 ff17 	bl	800dd8c <tcp_recved>
      pbuf_free(p);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f003 ff3a 	bl	800cdd8 <pbuf_free>
    }
    return ERR_OK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	e023      	b.n	8008fb0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d005      	beq.n	8008f7a <recv_tcp+0xb2>
    msg = p;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	891b      	ldrh	r3, [r3, #8]
 8008f76:	83fb      	strh	r3, [r7, #30]
 8008f78:	e003      	b.n	8008f82 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008f7a:	4b15      	ldr	r3, [pc, #84]	; (8008fd0 <recv_tcp+0x108>)
 8008f7c:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	3310      	adds	r3, #16
 8008f86:	69b9      	ldr	r1, [r7, #24]
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f00f fa75 	bl	8018478 <sys_mbox_trypost>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d002      	beq.n	8008f9a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008f94:	f04f 33ff 	mov.w	r3, #4294967295
 8008f98:	e00a      	b.n	8008fb0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d005      	beq.n	8008fae <recv_tcp+0xe6>
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	8bfa      	ldrh	r2, [r7, #30]
 8008fa8:	2100      	movs	r1, #0
 8008faa:	6978      	ldr	r0, [r7, #20]
 8008fac:	4798      	blx	r3
  }

  return ERR_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3720      	adds	r7, #32
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	08019d14 	.word	0x08019d14
 8008fbc:	08019df0 	.word	0x08019df0
 8008fc0:	08019d58 	.word	0x08019d58
 8008fc4:	08019e14 	.word	0x08019e14
 8008fc8:	08019e34 	.word	0x08019e34
 8008fcc:	08019e4c 	.word	0x08019e4c
 8008fd0:	0801d47a 	.word	0x0801d47a

08008fd4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d106      	bne.n	8008ff6 <poll_tcp+0x22>
 8008fe8:	4b29      	ldr	r3, [pc, #164]	; (8009090 <poll_tcp+0xbc>)
 8008fea:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008fee:	4929      	ldr	r1, [pc, #164]	; (8009094 <poll_tcp+0xc0>)
 8008ff0:	4829      	ldr	r0, [pc, #164]	; (8009098 <poll_tcp+0xc4>)
 8008ff2:	f00f fcdd 	bl	80189b0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	785b      	ldrb	r3, [r3, #1]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d104      	bne.n	8009008 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008ffe:	2101      	movs	r1, #1
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f000 ff65 	bl	8009ed0 <lwip_netconn_do_writemore>
 8009006:	e016      	b.n	8009036 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	785b      	ldrb	r3, [r3, #1]
 800900c:	2b04      	cmp	r3, #4
 800900e:	d112      	bne.n	8009036 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6a1b      	ldr	r3, [r3, #32]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00a      	beq.n	800902e <poll_tcp+0x5a>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6a1b      	ldr	r3, [r3, #32]
 800901c:	7a5b      	ldrb	r3, [r3, #9]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d005      	beq.n	800902e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6a1b      	ldr	r3, [r3, #32]
 8009026:	7a5a      	ldrb	r2, [r3, #9]
 8009028:	3a01      	subs	r2, #1
 800902a:	b2d2      	uxtb	r2, r2
 800902c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800902e:	2101      	movs	r1, #1
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 fbf7 	bl	8009824 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	7f1b      	ldrb	r3, [r3, #28]
 800903a:	f003 0310 	and.w	r3, r3, #16
 800903e:	2b00      	cmp	r3, #0
 8009040:	d021      	beq.n	8009086 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d01d      	beq.n	8009086 <poll_tcp+0xb2>
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009052:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009056:	d316      	bcc.n	8009086 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009060:	2b04      	cmp	r3, #4
 8009062:	d810      	bhi.n	8009086 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	7f1b      	ldrb	r3, [r3, #28]
 8009068:	f023 0310 	bic.w	r3, r3, #16
 800906c:	b2da      	uxtb	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009076:	2b00      	cmp	r3, #0
 8009078:	d005      	beq.n	8009086 <poll_tcp+0xb2>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	2200      	movs	r2, #0
 8009080:	2102      	movs	r1, #2
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	08019d14 	.word	0x08019d14
 8009094:	08019e6c 	.word	0x08019e6c
 8009098:	08019d58 	.word	0x08019d58

0800909c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	4613      	mov	r3, r2
 80090a8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d106      	bne.n	80090c2 <sent_tcp+0x26>
 80090b4:	4b20      	ldr	r3, [pc, #128]	; (8009138 <sent_tcp+0x9c>)
 80090b6:	f240 1293 	movw	r2, #403	; 0x193
 80090ba:	4920      	ldr	r1, [pc, #128]	; (800913c <sent_tcp+0xa0>)
 80090bc:	4820      	ldr	r0, [pc, #128]	; (8009140 <sent_tcp+0xa4>)
 80090be:	f00f fc77 	bl	80189b0 <iprintf>

  if (conn) {
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d032      	beq.n	800912e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	785b      	ldrb	r3, [r3, #1]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d104      	bne.n	80090da <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80090d0:	2101      	movs	r1, #1
 80090d2:	6978      	ldr	r0, [r7, #20]
 80090d4:	f000 fefc 	bl	8009ed0 <lwip_netconn_do_writemore>
 80090d8:	e007      	b.n	80090ea <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	785b      	ldrb	r3, [r3, #1]
 80090de:	2b04      	cmp	r3, #4
 80090e0:	d103      	bne.n	80090ea <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80090e2:	2101      	movs	r1, #1
 80090e4:	6978      	ldr	r0, [r7, #20]
 80090e6:	f000 fb9d 	bl	8009824 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d01d      	beq.n	800912e <sent_tcp+0x92>
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80090fa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80090fe:	d316      	bcc.n	800912e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009108:	2b04      	cmp	r3, #4
 800910a:	d810      	bhi.n	800912e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	7f1b      	ldrb	r3, [r3, #28]
 8009110:	f023 0310 	bic.w	r3, r3, #16
 8009114:	b2da      	uxtb	r2, r3
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911e:	2b00      	cmp	r3, #0
 8009120:	d005      	beq.n	800912e <sent_tcp+0x92>
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009126:	88fa      	ldrh	r2, [r7, #6]
 8009128:	2102      	movs	r1, #2
 800912a:	6978      	ldr	r0, [r7, #20]
 800912c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	08019d14 	.word	0x08019d14
 800913c:	08019e6c 	.word	0x08019e6c
 8009140:	08019d58 	.word	0x08019d58

08009144 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b088      	sub	sp, #32
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	460b      	mov	r3, r1
 800914e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d106      	bne.n	8009168 <err_tcp+0x24>
 800915a:	4b5f      	ldr	r3, [pc, #380]	; (80092d8 <err_tcp+0x194>)
 800915c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009160:	495e      	ldr	r1, [pc, #376]	; (80092dc <err_tcp+0x198>)
 8009162:	485f      	ldr	r0, [pc, #380]	; (80092e0 <err_tcp+0x19c>)
 8009164:	f00f fc24 	bl	80189b0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009168:	f00f fb16 	bl	8018798 <sys_arch_protect>
 800916c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	2200      	movs	r2, #0
 8009172:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	78fa      	ldrb	r2, [r7, #3]
 8009178:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	7f1b      	ldrb	r3, [r3, #28]
 800917e:	f043 0301 	orr.w	r3, r3, #1
 8009182:	b2da      	uxtb	r2, r3
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	785b      	ldrb	r3, [r3, #1]
 800918c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	2200      	movs	r2, #0
 8009192:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009194:	69b8      	ldr	r0, [r7, #24]
 8009196:	f00f fb0d 	bl	80187b4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d005      	beq.n	80091ae <err_tcp+0x6a>
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a6:	2200      	movs	r2, #0
 80091a8:	2104      	movs	r1, #4
 80091aa:	69f8      	ldr	r0, [r7, #28]
 80091ac:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d005      	beq.n	80091c2 <err_tcp+0x7e>
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ba:	2200      	movs	r2, #0
 80091bc:	2100      	movs	r1, #0
 80091be:	69f8      	ldr	r0, [r7, #28]
 80091c0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d005      	beq.n	80091d6 <err_tcp+0x92>
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ce:	2200      	movs	r2, #0
 80091d0:	2102      	movs	r1, #2
 80091d2:	69f8      	ldr	r0, [r7, #28]
 80091d4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80091d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091da:	4618      	mov	r0, r3
 80091dc:	f7ff fd86 	bl	8008cec <lwip_netconn_err_to_msg>
 80091e0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	3310      	adds	r3, #16
 80091e6:	4618      	mov	r0, r3
 80091e8:	f00f f9bb 	bl	8018562 <sys_mbox_valid>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d005      	beq.n	80091fe <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	3310      	adds	r3, #16
 80091f6:	6939      	ldr	r1, [r7, #16]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f00f f93d 	bl	8018478 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	3314      	adds	r3, #20
 8009202:	4618      	mov	r0, r3
 8009204:	f00f f9ad 	bl	8018562 <sys_mbox_valid>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d005      	beq.n	800921a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	3314      	adds	r3, #20
 8009212:	6939      	ldr	r1, [r7, #16]
 8009214:	4618      	mov	r0, r3
 8009216:	f00f f92f 	bl	8018478 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800921a:	7dfb      	ldrb	r3, [r7, #23]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d005      	beq.n	800922c <err_tcp+0xe8>
 8009220:	7dfb      	ldrb	r3, [r7, #23]
 8009222:	2b04      	cmp	r3, #4
 8009224:	d002      	beq.n	800922c <err_tcp+0xe8>
 8009226:	7dfb      	ldrb	r3, [r7, #23]
 8009228:	2b03      	cmp	r3, #3
 800922a:	d143      	bne.n	80092b4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	7f1b      	ldrb	r3, [r3, #28]
 8009230:	f003 0304 	and.w	r3, r3, #4
 8009234:	2b00      	cmp	r3, #0
 8009236:	bf14      	ite	ne
 8009238:	2301      	movne	r3, #1
 800923a:	2300      	moveq	r3, #0
 800923c:	b2db      	uxtb	r3, r3
 800923e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	7f1b      	ldrb	r3, [r3, #28]
 8009244:	f023 0304 	bic.w	r3, r3, #4
 8009248:	b2da      	uxtb	r2, r3
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d13b      	bne.n	80092cc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	6a1b      	ldr	r3, [r3, #32]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d106      	bne.n	800926a <err_tcp+0x126>
 800925c:	4b1e      	ldr	r3, [pc, #120]	; (80092d8 <err_tcp+0x194>)
 800925e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009262:	4920      	ldr	r1, [pc, #128]	; (80092e4 <err_tcp+0x1a0>)
 8009264:	481e      	ldr	r0, [pc, #120]	; (80092e0 <err_tcp+0x19c>)
 8009266:	f00f fba3 	bl	80189b0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800926a:	7dfb      	ldrb	r3, [r7, #23]
 800926c:	2b04      	cmp	r3, #4
 800926e:	d104      	bne.n	800927a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	6a1b      	ldr	r3, [r3, #32]
 8009274:	2200      	movs	r2, #0
 8009276:	711a      	strb	r2, [r3, #4]
 8009278:	e003      	b.n	8009282 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	6a1b      	ldr	r3, [r3, #32]
 800927e:	78fa      	ldrb	r2, [r7, #3]
 8009280:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	330c      	adds	r3, #12
 800928a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800928c:	68b8      	ldr	r0, [r7, #8]
 800928e:	f00f f9f9 	bl	8018684 <sys_sem_valid>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d106      	bne.n	80092a6 <err_tcp+0x162>
 8009298:	4b0f      	ldr	r3, [pc, #60]	; (80092d8 <err_tcp+0x194>)
 800929a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800929e:	4912      	ldr	r1, [pc, #72]	; (80092e8 <err_tcp+0x1a4>)
 80092a0:	480f      	ldr	r0, [pc, #60]	; (80092e0 <err_tcp+0x19c>)
 80092a2:	f00f fb85 	bl	80189b0 <iprintf>
      conn->current_msg = NULL;
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	2200      	movs	r2, #0
 80092aa:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80092ac:	68b8      	ldr	r0, [r7, #8]
 80092ae:	f00f f9cf 	bl	8018650 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80092b2:	e00b      	b.n	80092cc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	6a1b      	ldr	r3, [r3, #32]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d008      	beq.n	80092ce <err_tcp+0x18a>
 80092bc:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <err_tcp+0x194>)
 80092be:	f240 12f7 	movw	r2, #503	; 0x1f7
 80092c2:	490a      	ldr	r1, [pc, #40]	; (80092ec <err_tcp+0x1a8>)
 80092c4:	4806      	ldr	r0, [pc, #24]	; (80092e0 <err_tcp+0x19c>)
 80092c6:	f00f fb73 	bl	80189b0 <iprintf>
  }
}
 80092ca:	e000      	b.n	80092ce <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 80092cc:	bf00      	nop
}
 80092ce:	bf00      	nop
 80092d0:	3720      	adds	r7, #32
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	08019d14 	.word	0x08019d14
 80092dc:	08019e6c 	.word	0x08019e6c
 80092e0:	08019d58 	.word	0x08019d58
 80092e4:	08019e7c 	.word	0x08019e7c
 80092e8:	08019e98 	.word	0x08019e98
 80092ec:	08019eb4 	.word	0x08019eb4

080092f0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80092fe:	6879      	ldr	r1, [r7, #4]
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f005 fc27 	bl	800eb54 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009306:	490a      	ldr	r1, [pc, #40]	; (8009330 <setup_tcp+0x40>)
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f005 fc35 	bl	800eb78 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800930e:	4909      	ldr	r1, [pc, #36]	; (8009334 <setup_tcp+0x44>)
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f005 fc53 	bl	800ebbc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009316:	2202      	movs	r2, #2
 8009318:	4907      	ldr	r1, [pc, #28]	; (8009338 <setup_tcp+0x48>)
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f005 fcaa 	bl	800ec74 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009320:	4906      	ldr	r1, [pc, #24]	; (800933c <setup_tcp+0x4c>)
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f005 fc6c 	bl	800ec00 <tcp_err>
}
 8009328:	bf00      	nop
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	08008ec9 	.word	0x08008ec9
 8009334:	0800909d 	.word	0x0800909d
 8009338:	08008fd5 	.word	0x08008fd5
 800933c:	08009145 	.word	0x08009145

08009340 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009340:	b590      	push	{r4, r7, lr}
 8009342:	b089      	sub	sp, #36	; 0x24
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	4613      	mov	r3, r2
 800934c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d102      	bne.n	800935e <accept_function+0x1e>
    return ERR_VAL;
 8009358:	f06f 0305 	mvn.w	r3, #5
 800935c:	e0a1      	b.n	80094a2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	3314      	adds	r3, #20
 8009362:	4618      	mov	r0, r3
 8009364:	f00f f8fd 	bl	8018562 <sys_mbox_valid>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d102      	bne.n	8009374 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800936e:	f06f 0305 	mvn.w	r3, #5
 8009372:	e096      	b.n	80094a2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d11b      	bne.n	80093b2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	f103 0414 	add.w	r4, r3, #20
 8009380:	f06f 000c 	mvn.w	r0, #12
 8009384:	f7ff fcb2 	bl	8008cec <lwip_netconn_err_to_msg>
 8009388:	4603      	mov	r3, r0
 800938a:	4619      	mov	r1, r3
 800938c:	4620      	mov	r0, r4
 800938e:	f00f f873 	bl	8018478 <sys_mbox_trypost>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d109      	bne.n	80093ac <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939c:	2b00      	cmp	r3, #0
 800939e:	d005      	beq.n	80093ac <accept_function+0x6c>
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a4:	2200      	movs	r2, #0
 80093a6:	2100      	movs	r1, #0
 80093a8:	69f8      	ldr	r0, [r7, #28]
 80093aa:	4798      	blx	r3
    }
    return ERR_VAL;
 80093ac:	f06f 0305 	mvn.w	r3, #5
 80093b0:	e077      	b.n	80094a2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 80093b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d006      	beq.n	80093c8 <accept_function+0x88>
 80093ba:	4b3c      	ldr	r3, [pc, #240]	; (80094ac <accept_function+0x16c>)
 80093bc:	f240 222a 	movw	r2, #554	; 0x22a
 80093c0:	493b      	ldr	r1, [pc, #236]	; (80094b0 <accept_function+0x170>)
 80093c2:	483c      	ldr	r0, [pc, #240]	; (80094b4 <accept_function+0x174>)
 80093c4:	f00f faf4 	bl	80189b0 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	781a      	ldrb	r2, [r3, #0]
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d0:	4619      	mov	r1, r3
 80093d2:	4610      	mov	r0, r2
 80093d4:	f000 f8f0 	bl	80095b8 <netconn_alloc>
 80093d8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d11b      	bne.n	8009418 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	f103 0414 	add.w	r4, r3, #20
 80093e6:	f06f 000c 	mvn.w	r0, #12
 80093ea:	f7ff fc7f 	bl	8008cec <lwip_netconn_err_to_msg>
 80093ee:	4603      	mov	r3, r0
 80093f0:	4619      	mov	r1, r3
 80093f2:	4620      	mov	r0, r4
 80093f4:	f00f f840 	bl	8018478 <sys_mbox_trypost>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d109      	bne.n	8009412 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009402:	2b00      	cmp	r3, #0
 8009404:	d005      	beq.n	8009412 <accept_function+0xd2>
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940a:	2200      	movs	r2, #0
 800940c:	2100      	movs	r1, #0
 800940e:	69f8      	ldr	r0, [r7, #28]
 8009410:	4798      	blx	r3
    }
    return ERR_MEM;
 8009412:	f04f 33ff 	mov.w	r3, #4294967295
 8009416:	e044      	b.n	80094a2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800941e:	69b8      	ldr	r0, [r7, #24]
 8009420:	f7ff ff66 	bl	80092f0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	3314      	adds	r3, #20
 8009428:	69b9      	ldr	r1, [r7, #24]
 800942a:	4618      	mov	r0, r3
 800942c:	f00f f824 	bl	8018478 <sys_mbox_trypost>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d02a      	beq.n	800948c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800943c:	2100      	movs	r1, #0
 800943e:	6978      	ldr	r0, [r7, #20]
 8009440:	f005 fb88 	bl	800eb54 <tcp_arg>
    tcp_recv(pcb, NULL);
 8009444:	2100      	movs	r1, #0
 8009446:	6978      	ldr	r0, [r7, #20]
 8009448:	f005 fb96 	bl	800eb78 <tcp_recv>
    tcp_sent(pcb, NULL);
 800944c:	2100      	movs	r1, #0
 800944e:	6978      	ldr	r0, [r7, #20]
 8009450:	f005 fbb4 	bl	800ebbc <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009454:	2200      	movs	r2, #0
 8009456:	2100      	movs	r1, #0
 8009458:	6978      	ldr	r0, [r7, #20]
 800945a:	f005 fc0b 	bl	800ec74 <tcp_poll>
    tcp_err(pcb, NULL);
 800945e:	2100      	movs	r1, #0
 8009460:	6978      	ldr	r0, [r7, #20]
 8009462:	f005 fbcd 	bl	800ec00 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	2200      	movs	r2, #0
 800946a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	3310      	adds	r3, #16
 8009470:	4618      	mov	r0, r3
 8009472:	f00e ffef 	bl	8018454 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	3310      	adds	r3, #16
 800947a:	4618      	mov	r0, r3
 800947c:	f00f f882 	bl	8018584 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009480:	69b8      	ldr	r0, [r7, #24]
 8009482:	f000 f907 	bl	8009694 <netconn_free>
    return ERR_MEM;
 8009486:	f04f 33ff 	mov.w	r3, #4294967295
 800948a:	e00a      	b.n	80094a2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009490:	2b00      	cmp	r3, #0
 8009492:	d005      	beq.n	80094a0 <accept_function+0x160>
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009498:	2200      	movs	r2, #0
 800949a:	2100      	movs	r1, #0
 800949c:	69f8      	ldr	r0, [r7, #28]
 800949e:	4798      	blx	r3
  }

  return ERR_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3724      	adds	r7, #36	; 0x24
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd90      	pop	{r4, r7, pc}
 80094aa:	bf00      	nop
 80094ac:	08019d14 	.word	0x08019d14
 80094b0:	08019ed0 	.word	0x08019ed0
 80094b4:	08019d58 	.word	0x08019d58

080094b8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80094b8:	b590      	push	{r4, r7, lr}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80094c0:	2300      	movs	r3, #0
 80094c2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d006      	beq.n	80094dc <pcb_new+0x24>
 80094ce:	4b2b      	ldr	r3, [pc, #172]	; (800957c <pcb_new+0xc4>)
 80094d0:	f240 2265 	movw	r2, #613	; 0x265
 80094d4:	492a      	ldr	r1, [pc, #168]	; (8009580 <pcb_new+0xc8>)
 80094d6:	482b      	ldr	r0, [pc, #172]	; (8009584 <pcb_new+0xcc>)
 80094d8:	f00f fa6a 	bl	80189b0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094e6:	2b10      	cmp	r3, #16
 80094e8:	d022      	beq.n	8009530 <pcb_new+0x78>
 80094ea:	2b20      	cmp	r3, #32
 80094ec:	d133      	bne.n	8009556 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681c      	ldr	r4, [r3, #0]
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	4618      	mov	r0, r3
 80094f6:	f00a fdd4 	bl	80140a2 <udp_new_ip_type>
 80094fa:	4603      	mov	r3, r0
 80094fc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d02a      	beq.n	800955e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	2b22      	cmp	r3, #34	; 0x22
 8009510:	d104      	bne.n	800951c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6858      	ldr	r0, [r3, #4]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	461a      	mov	r2, r3
 8009528:	4917      	ldr	r1, [pc, #92]	; (8009588 <pcb_new+0xd0>)
 800952a:	f00a fd41 	bl	8013fb0 <udp_recv>
      }
      break;
 800952e:	e016      	b.n	800955e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681c      	ldr	r4, [r3, #0]
 8009534:	7bfb      	ldrb	r3, [r7, #15]
 8009536:	4618      	mov	r0, r3
 8009538:	f005 fafe 	bl	800eb38 <tcp_new_ip_type>
 800953c:	4603      	mov	r3, r0
 800953e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00b      	beq.n	8009562 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4618      	mov	r0, r3
 8009550:	f7ff fece 	bl	80092f0 <setup_tcp>
      }
      break;
 8009554:	e005      	b.n	8009562 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	22fa      	movs	r2, #250	; 0xfa
 800955a:	711a      	strb	r2, [r3, #4]
      return;
 800955c:	e00a      	b.n	8009574 <pcb_new+0xbc>
      break;
 800955e:	bf00      	nop
 8009560:	e000      	b.n	8009564 <pcb_new+0xac>
      break;
 8009562:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d102      	bne.n	8009574 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	22ff      	movs	r2, #255	; 0xff
 8009572:	711a      	strb	r2, [r3, #4]
  }
}
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	bd90      	pop	{r4, r7, pc}
 800957a:	bf00      	nop
 800957c:	08019d14 	.word	0x08019d14
 8009580:	08019ef8 	.word	0x08019ef8
 8009584:	08019d58 	.word	0x08019d58
 8009588:	08008dcd 	.word	0x08008dcd

0800958c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2200      	movs	r2, #0
 800959c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d102      	bne.n	80095ae <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f7ff ff85 	bl	80094b8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80095ae:	bf00      	nop
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
	...

080095b8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	6039      	str	r1, [r7, #0]
 80095c2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80095c4:	2300      	movs	r3, #0
 80095c6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80095c8:	2007      	movs	r0, #7
 80095ca:	f002 fcdf 	bl	800bf8c <memp_malloc>
 80095ce:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d101      	bne.n	80095da <netconn_alloc+0x22>
    return NULL;
 80095d6:	2300      	movs	r3, #0
 80095d8:	e052      	b.n	8009680 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	79fa      	ldrb	r2, [r7, #7]
 80095e4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80095ec:	79fb      	ldrb	r3, [r7, #7]
 80095ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095f2:	2b10      	cmp	r3, #16
 80095f4:	d004      	beq.n	8009600 <netconn_alloc+0x48>
 80095f6:	2b20      	cmp	r3, #32
 80095f8:	d105      	bne.n	8009606 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80095fa:	2306      	movs	r3, #6
 80095fc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80095fe:	e00a      	b.n	8009616 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009600:	2306      	movs	r3, #6
 8009602:	617b      	str	r3, [r7, #20]
      break;
 8009604:	e007      	b.n	8009616 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009606:	4b20      	ldr	r3, [pc, #128]	; (8009688 <netconn_alloc+0xd0>)
 8009608:	f240 22e5 	movw	r2, #741	; 0x2e5
 800960c:	491f      	ldr	r1, [pc, #124]	; (800968c <netconn_alloc+0xd4>)
 800960e:	4820      	ldr	r0, [pc, #128]	; (8009690 <netconn_alloc+0xd8>)
 8009610:	f00f f9ce 	bl	80189b0 <iprintf>
      goto free_and_return;
 8009614:	e02f      	b.n	8009676 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	3310      	adds	r3, #16
 800961a:	6979      	ldr	r1, [r7, #20]
 800961c:	4618      	mov	r0, r3
 800961e:	f00e fef7 	bl	8018410 <sys_mbox_new>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d125      	bne.n	8009674 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	330c      	adds	r3, #12
 800962c:	2100      	movs	r1, #0
 800962e:	4618      	mov	r0, r3
 8009630:	f00e ffb5 	bl	801859e <sys_sem_new>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d005      	beq.n	8009646 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	3310      	adds	r3, #16
 800963e:	4618      	mov	r0, r3
 8009640:	f00e ff08 	bl	8018454 <sys_mbox_free>
    goto free_and_return;
 8009644:	e017      	b.n	8009676 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	3314      	adds	r3, #20
 800964a:	4618      	mov	r0, r3
 800964c:	f00e ff9a 	bl	8018584 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	f04f 32ff 	mov.w	r2, #4294967295
 800965c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2200      	movs	r2, #0
 8009668:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	7cfa      	ldrb	r2, [r7, #19]
 800966e:	771a      	strb	r2, [r3, #28]
  return conn;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	e005      	b.n	8009680 <netconn_alloc+0xc8>
    goto free_and_return;
 8009674:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009676:	68f9      	ldr	r1, [r7, #12]
 8009678:	2007      	movs	r0, #7
 800967a:	f002 fcfd 	bl	800c078 <memp_free>
  return NULL;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3718      	adds	r7, #24
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	08019d14 	.word	0x08019d14
 800968c:	08019f18 	.word	0x08019f18
 8009690:	08019d58 	.word	0x08019d58

08009694 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d006      	beq.n	80096b2 <netconn_free+0x1e>
 80096a4:	4b1b      	ldr	r3, [pc, #108]	; (8009714 <netconn_free+0x80>)
 80096a6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80096aa:	491b      	ldr	r1, [pc, #108]	; (8009718 <netconn_free+0x84>)
 80096ac:	481b      	ldr	r0, [pc, #108]	; (800971c <netconn_free+0x88>)
 80096ae:	f00f f97f 	bl	80189b0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	3310      	adds	r3, #16
 80096b6:	4618      	mov	r0, r3
 80096b8:	f00e ff53 	bl	8018562 <sys_mbox_valid>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d006      	beq.n	80096d0 <netconn_free+0x3c>
 80096c2:	4b14      	ldr	r3, [pc, #80]	; (8009714 <netconn_free+0x80>)
 80096c4:	f240 3223 	movw	r2, #803	; 0x323
 80096c8:	4915      	ldr	r1, [pc, #84]	; (8009720 <netconn_free+0x8c>)
 80096ca:	4814      	ldr	r0, [pc, #80]	; (800971c <netconn_free+0x88>)
 80096cc:	f00f f970 	bl	80189b0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	3314      	adds	r3, #20
 80096d4:	4618      	mov	r0, r3
 80096d6:	f00e ff44 	bl	8018562 <sys_mbox_valid>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d006      	beq.n	80096ee <netconn_free+0x5a>
 80096e0:	4b0c      	ldr	r3, [pc, #48]	; (8009714 <netconn_free+0x80>)
 80096e2:	f240 3226 	movw	r2, #806	; 0x326
 80096e6:	490f      	ldr	r1, [pc, #60]	; (8009724 <netconn_free+0x90>)
 80096e8:	480c      	ldr	r0, [pc, #48]	; (800971c <netconn_free+0x88>)
 80096ea:	f00f f961 	bl	80189b0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	330c      	adds	r3, #12
 80096f2:	4618      	mov	r0, r3
 80096f4:	f00e ffb9 	bl	801866a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	330c      	adds	r3, #12
 80096fc:	4618      	mov	r0, r3
 80096fe:	f00e ffd2 	bl	80186a6 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009702:	6879      	ldr	r1, [r7, #4]
 8009704:	2007      	movs	r0, #7
 8009706:	f002 fcb7 	bl	800c078 <memp_free>
}
 800970a:	bf00      	nop
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	08019d14 	.word	0x08019d14
 8009718:	08019f40 	.word	0x08019f40
 800971c:	08019d58 	.word	0x08019d58
 8009720:	08019f70 	.word	0x08019f70
 8009724:	08019fac 	.word	0x08019fac

08009728 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	3310      	adds	r3, #16
 8009734:	4618      	mov	r0, r3
 8009736:	f00e ff14 	bl	8018562 <sys_mbox_valid>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d02f      	beq.n	80097a0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009740:	e018      	b.n	8009774 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800974a:	2b10      	cmp	r3, #16
 800974c:	d10e      	bne.n	800976c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	f107 020f 	add.w	r2, r7, #15
 8009754:	4611      	mov	r1, r2
 8009756:	4618      	mov	r0, r3
 8009758:	f7ff fafe 	bl	8008d58 <lwip_netconn_is_err_msg>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d108      	bne.n	8009774 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	4618      	mov	r0, r3
 8009766:	f003 fb37 	bl	800cdd8 <pbuf_free>
 800976a:	e003      	b.n	8009774 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	4618      	mov	r0, r3
 8009770:	f000 fe92 	bl	800a498 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	3310      	adds	r3, #16
 8009778:	f107 0210 	add.w	r2, r7, #16
 800977c:	4611      	mov	r1, r2
 800977e:	4618      	mov	r0, r3
 8009780:	f00e fed3 	bl	801852a <sys_arch_mbox_tryfetch>
 8009784:	4603      	mov	r3, r0
 8009786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800978a:	d1da      	bne.n	8009742 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	3310      	adds	r3, #16
 8009790:	4618      	mov	r0, r3
 8009792:	f00e fe5f 	bl	8018454 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	3310      	adds	r3, #16
 800979a:	4618      	mov	r0, r3
 800979c:	f00e fef2 	bl	8018584 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	3314      	adds	r3, #20
 80097a4:	4618      	mov	r0, r3
 80097a6:	f00e fedc 	bl	8018562 <sys_mbox_valid>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d034      	beq.n	800981a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80097b0:	e01d      	b.n	80097ee <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	f107 020e 	add.w	r2, r7, #14
 80097b8:	4611      	mov	r1, r2
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7ff facc 	bl	8008d58 <lwip_netconn_is_err_msg>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d113      	bne.n	80097ee <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80097ca:	6978      	ldr	r0, [r7, #20]
 80097cc:	f7ff ffac 	bl	8009728 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d007      	beq.n	80097e8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	4618      	mov	r0, r3
 80097de:	f004 f8fb 	bl	800d9d8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	2200      	movs	r2, #0
 80097e6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80097e8:	6978      	ldr	r0, [r7, #20]
 80097ea:	f7ff ff53 	bl	8009694 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	3314      	adds	r3, #20
 80097f2:	f107 0210 	add.w	r2, r7, #16
 80097f6:	4611      	mov	r1, r2
 80097f8:	4618      	mov	r0, r3
 80097fa:	f00e fe96 	bl	801852a <sys_arch_mbox_tryfetch>
 80097fe:	4603      	mov	r3, r0
 8009800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009804:	d1d5      	bne.n	80097b2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	3314      	adds	r3, #20
 800980a:	4618      	mov	r0, r3
 800980c:	f00e fe22 	bl	8018454 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	3314      	adds	r3, #20
 8009814:	4618      	mov	r0, r3
 8009816:	f00e feb5 	bl	8018584 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800981a:	bf00      	nop
 800981c:	3718      	adds	r7, #24
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
	...

08009824 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	460b      	mov	r3, r1
 800982e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009830:	2300      	movs	r3, #0
 8009832:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d106      	bne.n	8009848 <lwip_netconn_do_close_internal+0x24>
 800983a:	4b87      	ldr	r3, [pc, #540]	; (8009a58 <lwip_netconn_do_close_internal+0x234>)
 800983c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009840:	4986      	ldr	r1, [pc, #536]	; (8009a5c <lwip_netconn_do_close_internal+0x238>)
 8009842:	4887      	ldr	r0, [pc, #540]	; (8009a60 <lwip_netconn_do_close_internal+0x23c>)
 8009844:	f00f f8b4 	bl	80189b0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009850:	2b10      	cmp	r3, #16
 8009852:	d006      	beq.n	8009862 <lwip_netconn_do_close_internal+0x3e>
 8009854:	4b80      	ldr	r3, [pc, #512]	; (8009a58 <lwip_netconn_do_close_internal+0x234>)
 8009856:	f240 32a3 	movw	r2, #931	; 0x3a3
 800985a:	4982      	ldr	r1, [pc, #520]	; (8009a64 <lwip_netconn_do_close_internal+0x240>)
 800985c:	4880      	ldr	r0, [pc, #512]	; (8009a60 <lwip_netconn_do_close_internal+0x23c>)
 800985e:	f00f f8a7 	bl	80189b0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	785b      	ldrb	r3, [r3, #1]
 8009866:	2b04      	cmp	r3, #4
 8009868:	d006      	beq.n	8009878 <lwip_netconn_do_close_internal+0x54>
 800986a:	4b7b      	ldr	r3, [pc, #492]	; (8009a58 <lwip_netconn_do_close_internal+0x234>)
 800986c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009870:	497d      	ldr	r1, [pc, #500]	; (8009a68 <lwip_netconn_do_close_internal+0x244>)
 8009872:	487b      	ldr	r0, [pc, #492]	; (8009a60 <lwip_netconn_do_close_internal+0x23c>)
 8009874:	f00f f89c 	bl	80189b0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d106      	bne.n	800988e <lwip_netconn_do_close_internal+0x6a>
 8009880:	4b75      	ldr	r3, [pc, #468]	; (8009a58 <lwip_netconn_do_close_internal+0x234>)
 8009882:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009886:	4979      	ldr	r1, [pc, #484]	; (8009a6c <lwip_netconn_do_close_internal+0x248>)
 8009888:	4875      	ldr	r0, [pc, #468]	; (8009a60 <lwip_netconn_do_close_internal+0x23c>)
 800988a:	f00f f891 	bl	80189b0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a1b      	ldr	r3, [r3, #32]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d106      	bne.n	80098a4 <lwip_netconn_do_close_internal+0x80>
 8009896:	4b70      	ldr	r3, [pc, #448]	; (8009a58 <lwip_netconn_do_close_internal+0x234>)
 8009898:	f240 32a6 	movw	r2, #934	; 0x3a6
 800989c:	4974      	ldr	r1, [pc, #464]	; (8009a70 <lwip_netconn_do_close_internal+0x24c>)
 800989e:	4870      	ldr	r0, [pc, #448]	; (8009a60 <lwip_netconn_do_close_internal+0x23c>)
 80098a0:	f00f f886 	bl	80189b0 <iprintf>

  tpcb = conn->pcb.tcp;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	7a1b      	ldrb	r3, [r3, #8]
 80098b0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80098b2:	7bfb      	ldrb	r3, [r7, #15]
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
 80098bc:	f003 0302 	and.w	r3, r3, #2
 80098c0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
 80098c4:	2b03      	cmp	r3, #3
 80098c6:	d102      	bne.n	80098ce <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80098c8:	2301      	movs	r3, #1
 80098ca:	75bb      	strb	r3, [r7, #22]
 80098cc:	e01f      	b.n	800990e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80098ce:	7bbb      	ldrb	r3, [r7, #14]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00e      	beq.n	80098f2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80098d8:	2b05      	cmp	r3, #5
 80098da:	d007      	beq.n	80098ec <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80098e0:	2b06      	cmp	r3, #6
 80098e2:	d003      	beq.n	80098ec <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80098e8:	2b08      	cmp	r3, #8
 80098ea:	d102      	bne.n	80098f2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80098ec:	2301      	movs	r3, #1
 80098ee:	75bb      	strb	r3, [r7, #22]
 80098f0:	e00d      	b.n	800990e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80098f2:	7b7b      	ldrb	r3, [r7, #13]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d008      	beq.n	800990a <lwip_netconn_do_close_internal+0xe6>
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	8b5b      	ldrh	r3, [r3, #26]
 80098fc:	f003 0310 	and.w	r3, r3, #16
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009904:	2301      	movs	r3, #1
 8009906:	75bb      	strb	r3, [r7, #22]
 8009908:	e001      	b.n	800990e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800990a:	2300      	movs	r3, #0
 800990c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800990e:	7dbb      	ldrb	r3, [r7, #22]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d003      	beq.n	800991c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009914:	2100      	movs	r1, #0
 8009916:	6938      	ldr	r0, [r7, #16]
 8009918:	f005 f91c 	bl	800eb54 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	7d1b      	ldrb	r3, [r3, #20]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d104      	bne.n	800992e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009924:	2100      	movs	r1, #0
 8009926:	6938      	ldr	r0, [r7, #16]
 8009928:	f005 f98c 	bl	800ec44 <tcp_accept>
 800992c:	e01d      	b.n	800996a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800992e:	7bbb      	ldrb	r3, [r7, #14]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d007      	beq.n	8009944 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009934:	2100      	movs	r1, #0
 8009936:	6938      	ldr	r0, [r7, #16]
 8009938:	f005 f91e 	bl	800eb78 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800993c:	2100      	movs	r1, #0
 800993e:	6938      	ldr	r0, [r7, #16]
 8009940:	f005 f980 	bl	800ec44 <tcp_accept>
    }
    if (shut_tx) {
 8009944:	7b7b      	ldrb	r3, [r7, #13]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d003      	beq.n	8009952 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800994a:	2100      	movs	r1, #0
 800994c:	6938      	ldr	r0, [r7, #16]
 800994e:	f005 f935 	bl	800ebbc <tcp_sent>
    }
    if (shut_close) {
 8009952:	7dbb      	ldrb	r3, [r7, #22]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d008      	beq.n	800996a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009958:	2200      	movs	r2, #0
 800995a:	2100      	movs	r1, #0
 800995c:	6938      	ldr	r0, [r7, #16]
 800995e:	f005 f989 	bl	800ec74 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009962:	2100      	movs	r1, #0
 8009964:	6938      	ldr	r0, [r7, #16]
 8009966:	f005 f94b 	bl	800ec00 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800996a:	7dbb      	ldrb	r3, [r7, #22]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d005      	beq.n	800997c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009970:	6938      	ldr	r0, [r7, #16]
 8009972:	f003 feeb 	bl	800d74c <tcp_close>
 8009976:	4603      	mov	r3, r0
 8009978:	75fb      	strb	r3, [r7, #23]
 800997a:	e007      	b.n	800998c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800997c:	7bbb      	ldrb	r3, [r7, #14]
 800997e:	7b7a      	ldrb	r2, [r7, #13]
 8009980:	4619      	mov	r1, r3
 8009982:	6938      	ldr	r0, [r7, #16]
 8009984:	f003 ff0e 	bl	800d7a4 <tcp_shutdown>
 8009988:	4603      	mov	r3, r0
 800998a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800998c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d102      	bne.n	800999a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009994:	2301      	movs	r3, #1
 8009996:	757b      	strb	r3, [r7, #21]
 8009998:	e016      	b.n	80099c8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800999a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800999e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a2:	d10f      	bne.n	80099c4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a1b      	ldr	r3, [r3, #32]
 80099a8:	7a5b      	ldrb	r3, [r3, #9]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10c      	bne.n	80099c8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80099ae:	2301      	movs	r3, #1
 80099b0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80099b2:	7dbb      	ldrb	r3, [r7, #22]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d007      	beq.n	80099c8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80099b8:	6938      	ldr	r0, [r7, #16]
 80099ba:	f004 f80d 	bl	800d9d8 <tcp_abort>
          err = ERR_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	75fb      	strb	r3, [r7, #23]
 80099c2:	e001      	b.n	80099c8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80099c4:	2301      	movs	r3, #1
 80099c6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80099c8:	7d7b      	ldrb	r3, [r7, #21]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d052      	beq.n	8009a74 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a1b      	ldr	r3, [r3, #32]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	330c      	adds	r3, #12
 80099d6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6a1b      	ldr	r3, [r3, #32]
 80099dc:	7dfa      	ldrb	r2, [r7, #23]
 80099de:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80099ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d129      	bne.n	8009a48 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80099f4:	7dbb      	ldrb	r3, [r7, #22]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00c      	beq.n	8009a14 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d005      	beq.n	8009a14 <lwip_netconn_do_close_internal+0x1f0>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	2104      	movs	r1, #4
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	4798      	blx	r3
      }
      if (shut_rx) {
 8009a14:	7bbb      	ldrb	r3, [r7, #14]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d009      	beq.n	8009a2e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d005      	beq.n	8009a2e <lwip_netconn_do_close_internal+0x20a>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a26:	2200      	movs	r2, #0
 8009a28:	2100      	movs	r1, #0
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	4798      	blx	r3
      }
      if (shut_tx) {
 8009a2e:	7b7b      	ldrb	r3, [r7, #13]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d009      	beq.n	8009a48 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d005      	beq.n	8009a48 <lwip_netconn_do_close_internal+0x224>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a40:	2200      	movs	r2, #0
 8009a42:	2102      	movs	r1, #2
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009a48:	78fb      	ldrb	r3, [r7, #3]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d002      	beq.n	8009a54 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009a4e:	68b8      	ldr	r0, [r7, #8]
 8009a50:	f00e fdfe 	bl	8018650 <sys_sem_signal>
    }
    return ERR_OK;
 8009a54:	2300      	movs	r3, #0
 8009a56:	e03c      	b.n	8009ad2 <lwip_netconn_do_close_internal+0x2ae>
 8009a58:	08019d14 	.word	0x08019d14
 8009a5c:	08019fe8 	.word	0x08019fe8
 8009a60:	08019d58 	.word	0x08019d58
 8009a64:	08019ff8 	.word	0x08019ff8
 8009a68:	0801a018 	.word	0x0801a018
 8009a6c:	0801a03c 	.word	0x0801a03c
 8009a70:	08019e7c 	.word	0x08019e7c
  }
  if (!close_finished) {
 8009a74:	7d7b      	ldrb	r3, [r7, #21]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d11e      	bne.n	8009ab8 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	7d1b      	ldrb	r3, [r3, #20]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d106      	bne.n	8009a90 <lwip_netconn_do_close_internal+0x26c>
 8009a82:	4b16      	ldr	r3, [pc, #88]	; (8009adc <lwip_netconn_do_close_internal+0x2b8>)
 8009a84:	f240 4241 	movw	r2, #1089	; 0x441
 8009a88:	4915      	ldr	r1, [pc, #84]	; (8009ae0 <lwip_netconn_do_close_internal+0x2bc>)
 8009a8a:	4816      	ldr	r0, [pc, #88]	; (8009ae4 <lwip_netconn_do_close_internal+0x2c0>)
 8009a8c:	f00e ff90 	bl	80189b0 <iprintf>
    if (shut_tx) {
 8009a90:	7b7b      	ldrb	r3, [r7, #13]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8009a96:	4914      	ldr	r1, [pc, #80]	; (8009ae8 <lwip_netconn_do_close_internal+0x2c4>)
 8009a98:	6938      	ldr	r0, [r7, #16]
 8009a9a:	f005 f88f 	bl	800ebbc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	4912      	ldr	r1, [pc, #72]	; (8009aec <lwip_netconn_do_close_internal+0x2c8>)
 8009aa2:	6938      	ldr	r0, [r7, #16]
 8009aa4:	f005 f8e6 	bl	800ec74 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009aa8:	4911      	ldr	r1, [pc, #68]	; (8009af0 <lwip_netconn_do_close_internal+0x2cc>)
 8009aaa:	6938      	ldr	r0, [r7, #16]
 8009aac:	f005 f8a8 	bl	800ec00 <tcp_err>
    tcp_arg(tpcb, conn);
 8009ab0:	6879      	ldr	r1, [r7, #4]
 8009ab2:	6938      	ldr	r0, [r7, #16]
 8009ab4:	f005 f84e 	bl	800eb54 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009ab8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d106      	bne.n	8009ace <lwip_netconn_do_close_internal+0x2aa>
 8009ac0:	4b06      	ldr	r3, [pc, #24]	; (8009adc <lwip_netconn_do_close_internal+0x2b8>)
 8009ac2:	f240 424d 	movw	r2, #1101	; 0x44d
 8009ac6:	490b      	ldr	r1, [pc, #44]	; (8009af4 <lwip_netconn_do_close_internal+0x2d0>)
 8009ac8:	4806      	ldr	r0, [pc, #24]	; (8009ae4 <lwip_netconn_do_close_internal+0x2c0>)
 8009aca:	f00e ff71 	bl	80189b0 <iprintf>
  return err;
 8009ace:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3718      	adds	r7, #24
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	08019d14 	.word	0x08019d14
 8009ae0:	0801a050 	.word	0x0801a050
 8009ae4:	08019d58 	.word	0x08019d58
 8009ae8:	0800909d 	.word	0x0800909d
 8009aec:	08008fd5 	.word	0x08008fd5
 8009af0:	08009145 	.word	0x08009145
 8009af4:	0801a074 	.word	0x0801a074

08009af8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	785b      	ldrb	r3, [r3, #1]
 8009b0a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009b0c:	7afb      	ldrb	r3, [r7, #11]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00d      	beq.n	8009b2e <lwip_netconn_do_delconn+0x36>
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b1c:	2b10      	cmp	r3, #16
 8009b1e:	d006      	beq.n	8009b2e <lwip_netconn_do_delconn+0x36>
 8009b20:	4b60      	ldr	r3, [pc, #384]	; (8009ca4 <lwip_netconn_do_delconn+0x1ac>)
 8009b22:	f240 425e 	movw	r2, #1118	; 0x45e
 8009b26:	4960      	ldr	r1, [pc, #384]	; (8009ca8 <lwip_netconn_do_delconn+0x1b0>)
 8009b28:	4860      	ldr	r0, [pc, #384]	; (8009cac <lwip_netconn_do_delconn+0x1b4>)
 8009b2a:	f00e ff41 	bl	80189b0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009b2e:	7afb      	ldrb	r3, [r7, #11]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d005      	beq.n	8009b40 <lwip_netconn_do_delconn+0x48>
 8009b34:	7afb      	ldrb	r3, [r7, #11]
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d002      	beq.n	8009b40 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009b3a:	7afb      	ldrb	r3, [r7, #11]
 8009b3c:	2b03      	cmp	r3, #3
 8009b3e:	d109      	bne.n	8009b54 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009b40:	7afb      	ldrb	r3, [r7, #11]
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d10a      	bne.n	8009b5c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	7f1b      	ldrb	r3, [r3, #28]
 8009b4c:	f003 0304 	and.w	r3, r3, #4
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d103      	bne.n	8009b5c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	22fb      	movs	r2, #251	; 0xfb
 8009b58:	711a      	strb	r2, [r3, #4]
 8009b5a:	e097      	b.n	8009c8c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009b5c:	7afb      	ldrb	r3, [r7, #11]
 8009b5e:	2b03      	cmp	r3, #3
 8009b60:	d10d      	bne.n	8009b7e <lwip_netconn_do_delconn+0x86>
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	7f1b      	ldrb	r3, [r3, #28]
 8009b68:	f003 0304 	and.w	r3, r3, #4
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d106      	bne.n	8009b7e <lwip_netconn_do_delconn+0x86>
 8009b70:	4b4c      	ldr	r3, [pc, #304]	; (8009ca4 <lwip_netconn_do_delconn+0x1ac>)
 8009b72:	f240 427a 	movw	r2, #1146	; 0x47a
 8009b76:	494e      	ldr	r1, [pc, #312]	; (8009cb0 <lwip_netconn_do_delconn+0x1b8>)
 8009b78:	484c      	ldr	r0, [pc, #304]	; (8009cac <lwip_netconn_do_delconn+0x1b4>)
 8009b7a:	f00e ff19 	bl	80189b0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2200      	movs	r2, #0
 8009b82:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7ff fdcd 	bl	8009728 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d05f      	beq.n	8009c58 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ba2:	2b10      	cmp	r3, #16
 8009ba4:	d00d      	beq.n	8009bc2 <lwip_netconn_do_delconn+0xca>
 8009ba6:	2b20      	cmp	r3, #32
 8009ba8:	d151      	bne.n	8009c4e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f00a fa18 	bl	8013ff0 <udp_remove>
          break;
 8009bc0:	e046      	b.n	8009c50 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	6a1b      	ldr	r3, [r3, #32]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d006      	beq.n	8009bda <lwip_netconn_do_delconn+0xe2>
 8009bcc:	4b35      	ldr	r3, [pc, #212]	; (8009ca4 <lwip_netconn_do_delconn+0x1ac>)
 8009bce:	f240 4294 	movw	r2, #1172	; 0x494
 8009bd2:	4938      	ldr	r1, [pc, #224]	; (8009cb4 <lwip_netconn_do_delconn+0x1bc>)
 8009bd4:	4835      	ldr	r0, [pc, #212]	; (8009cac <lwip_netconn_do_delconn+0x1b4>)
 8009bd6:	f00e feeb 	bl	80189b0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2204      	movs	r2, #4
 8009be0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2203      	movs	r2, #3
 8009be6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7ff fe14 	bl	8009824 <lwip_netconn_do_close_internal>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d04b      	beq.n	8009c9a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	785b      	ldrb	r3, [r3, #1]
 8009c08:	2b04      	cmp	r3, #4
 8009c0a:	d006      	beq.n	8009c1a <lwip_netconn_do_delconn+0x122>
 8009c0c:	4b25      	ldr	r3, [pc, #148]	; (8009ca4 <lwip_netconn_do_delconn+0x1ac>)
 8009c0e:	f240 429a 	movw	r2, #1178	; 0x49a
 8009c12:	4929      	ldr	r1, [pc, #164]	; (8009cb8 <lwip_netconn_do_delconn+0x1c0>)
 8009c14:	4825      	ldr	r0, [pc, #148]	; (8009cac <lwip_netconn_do_delconn+0x1b4>)
 8009c16:	f00e fecb 	bl	80189b0 <iprintf>
            UNLOCK_TCPIP_CORE();
 8009c1a:	4828      	ldr	r0, [pc, #160]	; (8009cbc <lwip_netconn_do_delconn+0x1c4>)
 8009c1c:	f00e fd89 	bl	8018732 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	330c      	adds	r3, #12
 8009c26:	2100      	movs	r1, #0
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f00e fce0 	bl	80185ee <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009c2e:	4823      	ldr	r0, [pc, #140]	; (8009cbc <lwip_netconn_do_delconn+0x1c4>)
 8009c30:	f00e fd70 	bl	8018714 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	785b      	ldrb	r3, [r3, #1]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d02d      	beq.n	8009c9a <lwip_netconn_do_delconn+0x1a2>
 8009c3e:	4b19      	ldr	r3, [pc, #100]	; (8009ca4 <lwip_netconn_do_delconn+0x1ac>)
 8009c40:	f240 429e 	movw	r2, #1182	; 0x49e
 8009c44:	491c      	ldr	r1, [pc, #112]	; (8009cb8 <lwip_netconn_do_delconn+0x1c0>)
 8009c46:	4819      	ldr	r0, [pc, #100]	; (8009cac <lwip_netconn_do_delconn+0x1b4>)
 8009c48:	f00e feb2 	bl	80189b0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009c4c:	e025      	b.n	8009c9a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8009c4e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2200      	movs	r2, #0
 8009c56:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d007      	beq.n	8009c72 <lwip_netconn_do_delconn+0x17a>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	6810      	ldr	r0, [r2, #0]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	2100      	movs	r1, #0
 8009c70:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d007      	beq.n	8009c8c <lwip_netconn_do_delconn+0x194>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	6810      	ldr	r0, [r2, #0]
 8009c86:	2200      	movs	r2, #0
 8009c88:	2102      	movs	r1, #2
 8009c8a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	330c      	adds	r3, #12
 8009c92:	4618      	mov	r0, r3
 8009c94:	f00e fcf6 	bl	8018684 <sys_sem_valid>
 8009c98:	e000      	b.n	8009c9c <lwip_netconn_do_delconn+0x1a4>
          return;
 8009c9a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	08019d14 	.word	0x08019d14
 8009ca8:	0801a084 	.word	0x0801a084
 8009cac:	08019d58 	.word	0x08019d58
 8009cb0:	0801a098 	.word	0x0801a098
 8009cb4:	0801a0b8 	.word	0x0801a0b8
 8009cb8:	0801a0d4 	.word	0x0801a0d4
 8009cbc:	2000d248 	.word	0x2000d248

08009cc0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d025      	beq.n	8009d22 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ce0:	2b10      	cmp	r3, #16
 8009ce2:	d00e      	beq.n	8009d02 <lwip_netconn_do_bind+0x42>
 8009ce4:	2b20      	cmp	r3, #32
 8009ce6:	d119      	bne.n	8009d1c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	6858      	ldr	r0, [r3, #4]
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	6899      	ldr	r1, [r3, #8]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	899b      	ldrh	r3, [r3, #12]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	f00a f864 	bl	8013dc4 <udp_bind>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	73fb      	strb	r3, [r7, #15]
        break;
 8009d00:	e011      	b.n	8009d26 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	6858      	ldr	r0, [r3, #4]
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	6899      	ldr	r1, [r3, #8]
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	899b      	ldrh	r3, [r3, #12]
 8009d10:	461a      	mov	r2, r3
 8009d12:	f003 fe6d 	bl	800d9f0 <tcp_bind>
 8009d16:	4603      	mov	r3, r0
 8009d18:	73fb      	strb	r3, [r7, #15]
        break;
 8009d1a:	e004      	b.n	8009d26 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009d1c:	23fa      	movs	r3, #250	; 0xfa
 8009d1e:	73fb      	strb	r3, [r7, #15]
        break;
 8009d20:	e001      	b.n	8009d26 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8009d22:	23fa      	movs	r3, #250	; 0xfa
 8009d24:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	7bfa      	ldrb	r2, [r7, #15]
 8009d2a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009d2c:	bf00      	nop
 8009d2e:	3710      	adds	r7, #16
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d07f      	beq.n	8009e4a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d54:	2b10      	cmp	r3, #16
 8009d56:	d175      	bne.n	8009e44 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	785b      	ldrb	r3, [r3, #1]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d165      	bne.n	8009e2e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	7d1b      	ldrb	r3, [r3, #20]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009d6e:	23fa      	movs	r3, #250	; 0xfa
 8009d70:	72fb      	strb	r3, [r7, #11]
 8009d72:	e06c      	b.n	8009e4e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009d74:	23ff      	movs	r3, #255	; 0xff
 8009d76:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	f107 020b 	add.w	r2, r7, #11
 8009d82:	7cf9      	ldrb	r1, [r7, #19]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f003 fefd 	bl	800db84 <tcp_listen_with_backlog_and_err>
 8009d8a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d05d      	beq.n	8009e4e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3310      	adds	r3, #16
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f00e fbe2 	bl	8018562 <sys_mbox_valid>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00b      	beq.n	8009dbc <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	3310      	adds	r3, #16
 8009daa:	4618      	mov	r0, r3
 8009dac:	f00e fb52 	bl	8018454 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3310      	adds	r3, #16
 8009db6:	4618      	mov	r0, r3
 8009db8:	f00e fbe4 	bl	8018584 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	3314      	adds	r3, #20
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f00e fbcb 	bl	8018562 <sys_mbox_valid>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d108      	bne.n	8009de4 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	3314      	adds	r3, #20
 8009dd8:	2106      	movs	r1, #6
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f00e fb18 	bl	8018410 <sys_mbox_new>
 8009de0:	4603      	mov	r3, r0
 8009de2:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009de4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d118      	bne.n	8009e1e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2202      	movs	r2, #2
 8009df2:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	685a      	ldr	r2, [r3, #4]
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4619      	mov	r1, r3
 8009e08:	4610      	mov	r0, r2
 8009e0a:	f004 fea3 	bl	800eb54 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	4912      	ldr	r1, [pc, #72]	; (8009e60 <lwip_netconn_do_listen+0x12c>)
 8009e16:	4618      	mov	r0, r3
 8009e18:	f004 ff14 	bl	800ec44 <tcp_accept>
 8009e1c:	e017      	b.n	8009e4e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8009e1e:	68f8      	ldr	r0, [r7, #12]
 8009e20:	f003 fc94 	bl	800d74c <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	605a      	str	r2, [r3, #4]
 8009e2c:	e00f      	b.n	8009e4e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	785b      	ldrb	r3, [r3, #1]
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d102      	bne.n	8009e3e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	72fb      	strb	r3, [r7, #11]
 8009e3c:	e007      	b.n	8009e4e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8009e3e:	23f5      	movs	r3, #245	; 0xf5
 8009e40:	72fb      	strb	r3, [r7, #11]
 8009e42:	e004      	b.n	8009e4e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8009e44:	23f0      	movs	r3, #240	; 0xf0
 8009e46:	72fb      	strb	r3, [r7, #11]
 8009e48:	e001      	b.n	8009e4e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8009e4a:	23f5      	movs	r3, #245	; 0xf5
 8009e4c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8009e4e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009e56:	bf00      	nop
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	08009341 	.word	0x08009341

08009e64 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	2200      	movs	r2, #0
 8009e74:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d022      	beq.n	8009ec6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e8a:	2b10      	cmp	r3, #16
 8009e8c:	d11b      	bne.n	8009ec6 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e9a:	d202      	bcs.n	8009ea2 <lwip_netconn_do_recv+0x3e>
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	e001      	b.n	8009ea6 <lwip_netconn_do_recv+0x42>
 8009ea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ea6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	89fa      	ldrh	r2, [r7, #14]
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f003 ff6a 	bl	800dd8c <tcp_recved>
        remaining -= recved;
 8009eb8:	89fb      	ldrh	r3, [r7, #14]
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1e6      	bne.n	8009e94 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009ec6:	bf00      	nop
 8009ec8:	3718      	adds	r7, #24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
	...

08009ed0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b088      	sub	sp, #32
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	460b      	mov	r3, r1
 8009eda:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009edc:	2300      	movs	r3, #0
 8009ede:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d106      	bne.n	8009ef4 <lwip_netconn_do_writemore+0x24>
 8009ee6:	4b96      	ldr	r3, [pc, #600]	; (800a140 <lwip_netconn_do_writemore+0x270>)
 8009ee8:	f240 6273 	movw	r2, #1651	; 0x673
 8009eec:	4995      	ldr	r1, [pc, #596]	; (800a144 <lwip_netconn_do_writemore+0x274>)
 8009eee:	4896      	ldr	r0, [pc, #600]	; (800a148 <lwip_netconn_do_writemore+0x278>)
 8009ef0:	f00e fd5e 	bl	80189b0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	785b      	ldrb	r3, [r3, #1]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d006      	beq.n	8009f0a <lwip_netconn_do_writemore+0x3a>
 8009efc:	4b90      	ldr	r3, [pc, #576]	; (800a140 <lwip_netconn_do_writemore+0x270>)
 8009efe:	f240 6274 	movw	r2, #1652	; 0x674
 8009f02:	4992      	ldr	r1, [pc, #584]	; (800a14c <lwip_netconn_do_writemore+0x27c>)
 8009f04:	4890      	ldr	r0, [pc, #576]	; (800a148 <lwip_netconn_do_writemore+0x278>)
 8009f06:	f00e fd53 	bl	80189b0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a1b      	ldr	r3, [r3, #32]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d106      	bne.n	8009f20 <lwip_netconn_do_writemore+0x50>
 8009f12:	4b8b      	ldr	r3, [pc, #556]	; (800a140 <lwip_netconn_do_writemore+0x270>)
 8009f14:	f240 6275 	movw	r2, #1653	; 0x675
 8009f18:	498d      	ldr	r1, [pc, #564]	; (800a150 <lwip_netconn_do_writemore+0x280>)
 8009f1a:	488b      	ldr	r0, [pc, #556]	; (800a148 <lwip_netconn_do_writemore+0x278>)
 8009f1c:	f00e fd48 	bl	80189b0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d106      	bne.n	8009f36 <lwip_netconn_do_writemore+0x66>
 8009f28:	4b85      	ldr	r3, [pc, #532]	; (800a140 <lwip_netconn_do_writemore+0x270>)
 8009f2a:	f240 6276 	movw	r2, #1654	; 0x676
 8009f2e:	4989      	ldr	r1, [pc, #548]	; (800a154 <lwip_netconn_do_writemore+0x284>)
 8009f30:	4885      	ldr	r0, [pc, #532]	; (800a148 <lwip_netconn_do_writemore+0x278>)
 8009f32:	f00e fd3d 	bl	80189b0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a1b      	ldr	r3, [r3, #32]
 8009f3a:	699a      	ldr	r2, [r3, #24]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a1b      	ldr	r3, [r3, #32]
 8009f40:	695b      	ldr	r3, [r3, #20]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d306      	bcc.n	8009f54 <lwip_netconn_do_writemore+0x84>
 8009f46:	4b7e      	ldr	r3, [pc, #504]	; (800a140 <lwip_netconn_do_writemore+0x270>)
 8009f48:	f240 6277 	movw	r2, #1655	; 0x677
 8009f4c:	4982      	ldr	r1, [pc, #520]	; (800a158 <lwip_netconn_do_writemore+0x288>)
 8009f4e:	487e      	ldr	r0, [pc, #504]	; (800a148 <lwip_netconn_do_writemore+0x278>)
 8009f50:	f00e fd2e 	bl	80189b0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a1b      	ldr	r3, [r3, #32]
 8009f58:	899b      	ldrh	r3, [r3, #12]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d106      	bne.n	8009f6c <lwip_netconn_do_writemore+0x9c>
 8009f5e:	4b78      	ldr	r3, [pc, #480]	; (800a140 <lwip_netconn_do_writemore+0x270>)
 8009f60:	f240 6279 	movw	r2, #1657	; 0x679
 8009f64:	497d      	ldr	r1, [pc, #500]	; (800a15c <lwip_netconn_do_writemore+0x28c>)
 8009f66:	4878      	ldr	r0, [pc, #480]	; (800a148 <lwip_netconn_do_writemore+0x278>)
 8009f68:	f00e fd22 	bl	80189b0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a1b      	ldr	r3, [r3, #32]
 8009f70:	7f1b      	ldrb	r3, [r3, #28]
 8009f72:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	7f1b      	ldrb	r3, [r3, #28]
 8009f78:	f003 0302 	and.w	r3, r3, #2
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d104      	bne.n	8009f8a <lwip_netconn_do_writemore+0xba>
 8009f80:	7ebb      	ldrb	r3, [r7, #26]
 8009f82:	f003 0304 	and.w	r3, r3, #4
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <lwip_netconn_do_writemore+0xbe>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e000      	b.n	8009f90 <lwip_netconn_do_writemore+0xc0>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a1b      	ldr	r3, [r3, #32]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6a1b      	ldr	r3, [r3, #32]
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a1b      	ldr	r3, [r3, #32]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6a1b      	ldr	r3, [r3, #32]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	1ad3      	subs	r3, r2, r3
 8009fb4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fbc:	d307      	bcc.n	8009fce <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8009fbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009fc2:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009fc4:	7ebb      	ldrb	r3, [r7, #26]
 8009fc6:	f043 0302 	orr.w	r3, r3, #2
 8009fca:	76bb      	strb	r3, [r7, #26]
 8009fcc:	e001      	b.n	8009fd2 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009fda:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009fdc:	89fa      	ldrh	r2, [r7, #14]
 8009fde:	8bbb      	ldrh	r3, [r7, #28]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d216      	bcs.n	800a012 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009fe4:	89fb      	ldrh	r3, [r7, #14]
 8009fe6:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009fe8:	7e3b      	ldrb	r3, [r7, #24]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00d      	beq.n	800a00a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009fee:	8bbb      	ldrh	r3, [r7, #28]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d10e      	bne.n	800a012 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a1b      	ldr	r3, [r3, #32]
 8009ff8:	699b      	ldr	r3, [r3, #24]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d102      	bne.n	800a004 <lwip_netconn_do_writemore+0x134>
 8009ffe:	f06f 0306 	mvn.w	r3, #6
 800a002:	e000      	b.n	800a006 <lwip_netconn_do_writemore+0x136>
 800a004:	2300      	movs	r3, #0
 800a006:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a008:	e07d      	b.n	800a106 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a00a:	7ebb      	ldrb	r3, [r7, #26]
 800a00c:	f043 0302 	orr.w	r3, r3, #2
 800a010:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a1b      	ldr	r3, [r3, #32]
 800a016:	691a      	ldr	r2, [r3, #16]
 800a018:	8bbb      	ldrh	r3, [r7, #28]
 800a01a:	441a      	add	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a1b      	ldr	r3, [r3, #32]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	429a      	cmp	r2, r3
 800a026:	d906      	bls.n	800a036 <lwip_netconn_do_writemore+0x166>
 800a028:	4b45      	ldr	r3, [pc, #276]	; (800a140 <lwip_netconn_do_writemore+0x270>)
 800a02a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800a02e:	494c      	ldr	r1, [pc, #304]	; (800a160 <lwip_netconn_do_writemore+0x290>)
 800a030:	4845      	ldr	r0, [pc, #276]	; (800a148 <lwip_netconn_do_writemore+0x278>)
 800a032:	f00e fcbd 	bl	80189b0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a036:	8bbb      	ldrh	r3, [r7, #28]
 800a038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d103      	bne.n	800a048 <lwip_netconn_do_writemore+0x178>
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a046:	d209      	bcs.n	800a05c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a04c:	8bba      	ldrh	r2, [r7, #28]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d10b      	bne.n	800a06a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	899b      	ldrh	r3, [r3, #12]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d906      	bls.n	800a06a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800a05c:	2301      	movs	r3, #1
 800a05e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a060:	7ebb      	ldrb	r3, [r7, #26]
 800a062:	f043 0302 	orr.w	r3, r3, #2
 800a066:	76bb      	strb	r3, [r7, #26]
 800a068:	e001      	b.n	800a06e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6858      	ldr	r0, [r3, #4]
 800a072:	7ebb      	ldrb	r3, [r7, #26]
 800a074:	8bba      	ldrh	r2, [r7, #28]
 800a076:	6979      	ldr	r1, [r7, #20]
 800a078:	f007 fcae 	bl	80119d8 <tcp_write>
 800a07c:	4603      	mov	r3, r0
 800a07e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a080:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d12c      	bne.n	800a0e2 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a1b      	ldr	r3, [r3, #32]
 800a08c:	6999      	ldr	r1, [r3, #24]
 800a08e:	8bba      	ldrh	r2, [r7, #28]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6a1b      	ldr	r3, [r3, #32]
 800a094:	440a      	add	r2, r1
 800a096:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a1b      	ldr	r3, [r3, #32]
 800a09c:	6919      	ldr	r1, [r3, #16]
 800a09e:	8bba      	ldrh	r2, [r7, #28]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a1b      	ldr	r3, [r3, #32]
 800a0a4:	440a      	add	r2, r1
 800a0a6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6a1b      	ldr	r3, [r3, #32]
 800a0ac:	691a      	ldr	r2, [r3, #16]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d113      	bne.n	800a0e2 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	899a      	ldrh	r2, [r3, #12]
 800a0c0:	3a01      	subs	r2, #1
 800a0c2:	b292      	uxth	r2, r2
 800a0c4:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	899b      	ldrh	r3, [r3, #12]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d008      	beq.n	800a0e2 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a1b      	ldr	r3, [r3, #32]
 800a0d4:	689a      	ldr	r2, [r3, #8]
 800a0d6:	3208      	adds	r2, #8
 800a0d8:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a1b      	ldr	r3, [r3, #32]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a0e2:	7e7b      	ldrb	r3, [r7, #25]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d004      	beq.n	800a0f2 <lwip_netconn_do_writemore+0x222>
 800a0e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f43f af50 	beq.w	8009f92 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a0f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d004      	beq.n	800a104 <lwip_netconn_do_writemore+0x234>
 800a0fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a102:	d146      	bne.n	800a192 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a104:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a106:	7e3b      	ldrb	r3, [r7, #24]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d02b      	beq.n	800a164 <lwip_netconn_do_writemore+0x294>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a1b      	ldr	r3, [r3, #32]
 800a110:	699a      	ldr	r2, [r3, #24]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a1b      	ldr	r3, [r3, #32]
 800a116:	695b      	ldr	r3, [r3, #20]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d223      	bcs.n	800a164 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a120:	2b00      	cmp	r3, #0
 800a122:	d005      	beq.n	800a130 <lwip_netconn_do_writemore+0x260>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a128:	2200      	movs	r2, #0
 800a12a:	2103      	movs	r1, #3
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	7f1b      	ldrb	r3, [r3, #28]
 800a134:	f043 0310 	orr.w	r3, r3, #16
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	771a      	strb	r2, [r3, #28]
 800a13e:	e028      	b.n	800a192 <lwip_netconn_do_writemore+0x2c2>
 800a140:	08019d14 	.word	0x08019d14
 800a144:	08019e6c 	.word	0x08019e6c
 800a148:	08019d58 	.word	0x08019d58
 800a14c:	0801a174 	.word	0x0801a174
 800a150:	08019e7c 	.word	0x08019e7c
 800a154:	0801a194 	.word	0x0801a194
 800a158:	0801a1ac 	.word	0x0801a1ac
 800a15c:	0801a1ec 	.word	0x0801a1ec
 800a160:	0801a214 	.word	0x0801a214
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a16c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a170:	d305      	bcc.n	800a17e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a17a:	2b04      	cmp	r3, #4
 800a17c:	d909      	bls.n	800a192 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a182:	2b00      	cmp	r3, #0
 800a184:	d005      	beq.n	800a192 <lwip_netconn_do_writemore+0x2c2>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18a:	2200      	movs	r2, #0
 800a18c:	2103      	movs	r1, #3
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a192:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d11d      	bne.n	800a1d6 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a1b      	ldr	r3, [r3, #32]
 800a19e:	699a      	ldr	r2, [r3, #24]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a1b      	ldr	r3, [r3, #32]
 800a1a4:	695b      	ldr	r3, [r3, #20]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d002      	beq.n	800a1b0 <lwip_netconn_do_writemore+0x2e0>
 800a1aa:	7e3b      	ldrb	r3, [r7, #24]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d001      	beq.n	800a1b4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f008 f9f7 	bl	80125ac <tcp_output>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a1c2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a1c6:	f113 0f04 	cmn.w	r3, #4
 800a1ca:	d12c      	bne.n	800a226 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a1cc:	7b3b      	ldrb	r3, [r7, #12]
 800a1ce:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	76fb      	strb	r3, [r7, #27]
 800a1d4:	e027      	b.n	800a226 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a1d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1de:	d120      	bne.n	800a222 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f008 f9e1 	bl	80125ac <tcp_output>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a1ee:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a1f2:	f113 0f04 	cmn.w	r3, #4
 800a1f6:	d104      	bne.n	800a202 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a1f8:	7b7b      	ldrb	r3, [r7, #13]
 800a1fa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	76fb      	strb	r3, [r7, #27]
 800a200:	e011      	b.n	800a226 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a202:	7e3b      	ldrb	r3, [r7, #24]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00e      	beq.n	800a226 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a1b      	ldr	r3, [r3, #32]
 800a20c:	699b      	ldr	r3, [r3, #24]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d102      	bne.n	800a218 <lwip_netconn_do_writemore+0x348>
 800a212:	f06f 0306 	mvn.w	r3, #6
 800a216:	e000      	b.n	800a21a <lwip_netconn_do_writemore+0x34a>
 800a218:	2300      	movs	r3, #0
 800a21a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a21c:	2301      	movs	r3, #1
 800a21e:	76fb      	strb	r3, [r7, #27]
 800a220:	e001      	b.n	800a226 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a222:	2301      	movs	r3, #1
 800a224:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a226:	7efb      	ldrb	r3, [r7, #27]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d015      	beq.n	800a258 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6a1b      	ldr	r3, [r3, #32]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	330c      	adds	r3, #12
 800a234:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	7ffa      	ldrb	r2, [r7, #31]
 800a23c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a24a:	78fb      	ldrb	r3, [r7, #3]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d006      	beq.n	800a25e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a250:	68b8      	ldr	r0, [r7, #8]
 800a252:	f00e f9fd 	bl	8018650 <sys_sem_signal>
 800a256:	e002      	b.n	800a25e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a258:	f04f 33ff 	mov.w	r3, #4294967295
 800a25c:	e000      	b.n	800a260 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3720      	adds	r7, #32
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4618      	mov	r0, r3
 800a27a:	f7fe fd1c 	bl	8008cb6 <netconn_err>
 800a27e:	4603      	mov	r3, r0
 800a280:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d166      	bne.n	800a358 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a294:	2b10      	cmp	r3, #16
 800a296:	d15d      	bne.n	800a354 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	785b      	ldrb	r3, [r3, #1]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d002      	beq.n	800a2a8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a2a2:	23fb      	movs	r3, #251	; 0xfb
 800a2a4:	73fb      	strb	r3, [r7, #15]
 800a2a6:	e057      	b.n	800a358 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d04d      	beq.n	800a34e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	6a1b      	ldr	r3, [r3, #32]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d006      	beq.n	800a2d2 <lwip_netconn_do_write+0x6a>
 800a2c4:	4b28      	ldr	r3, [pc, #160]	; (800a368 <lwip_netconn_do_write+0x100>)
 800a2c6:	f240 7223 	movw	r2, #1827	; 0x723
 800a2ca:	4928      	ldr	r1, [pc, #160]	; (800a36c <lwip_netconn_do_write+0x104>)
 800a2cc:	4828      	ldr	r0, [pc, #160]	; (800a370 <lwip_netconn_do_write+0x108>)
 800a2ce:	f00e fb6f 	bl	80189b0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	695b      	ldr	r3, [r3, #20]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d106      	bne.n	800a2e8 <lwip_netconn_do_write+0x80>
 800a2da:	4b23      	ldr	r3, [pc, #140]	; (800a368 <lwip_netconn_do_write+0x100>)
 800a2dc:	f240 7224 	movw	r2, #1828	; 0x724
 800a2e0:	4924      	ldr	r1, [pc, #144]	; (800a374 <lwip_netconn_do_write+0x10c>)
 800a2e2:	4823      	ldr	r0, [pc, #140]	; (800a370 <lwip_netconn_do_write+0x108>)
 800a2e4:	f00e fb64 	bl	80189b0 <iprintf>
        msg->conn->current_msg = msg;
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7ff fdea 	bl	8009ed0 <lwip_netconn_do_writemore>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d02e      	beq.n	800a360 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	785b      	ldrb	r3, [r3, #1]
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d006      	beq.n	800a31a <lwip_netconn_do_write+0xb2>
 800a30c:	4b16      	ldr	r3, [pc, #88]	; (800a368 <lwip_netconn_do_write+0x100>)
 800a30e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a312:	4919      	ldr	r1, [pc, #100]	; (800a378 <lwip_netconn_do_write+0x110>)
 800a314:	4816      	ldr	r0, [pc, #88]	; (800a370 <lwip_netconn_do_write+0x108>)
 800a316:	f00e fb4b 	bl	80189b0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a31a:	4818      	ldr	r0, [pc, #96]	; (800a37c <lwip_netconn_do_write+0x114>)
 800a31c:	f00e fa09 	bl	8018732 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	330c      	adds	r3, #12
 800a326:	2100      	movs	r1, #0
 800a328:	4618      	mov	r0, r3
 800a32a:	f00e f960 	bl	80185ee <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a32e:	4813      	ldr	r0, [pc, #76]	; (800a37c <lwip_netconn_do_write+0x114>)
 800a330:	f00e f9f0 	bl	8018714 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	785b      	ldrb	r3, [r3, #1]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d110      	bne.n	800a360 <lwip_netconn_do_write+0xf8>
 800a33e:	4b0a      	ldr	r3, [pc, #40]	; (800a368 <lwip_netconn_do_write+0x100>)
 800a340:	f240 722c 	movw	r2, #1836	; 0x72c
 800a344:	490c      	ldr	r1, [pc, #48]	; (800a378 <lwip_netconn_do_write+0x110>)
 800a346:	480a      	ldr	r0, [pc, #40]	; (800a370 <lwip_netconn_do_write+0x108>)
 800a348:	f00e fb32 	bl	80189b0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a34c:	e008      	b.n	800a360 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a34e:	23f5      	movs	r3, #245	; 0xf5
 800a350:	73fb      	strb	r3, [r7, #15]
 800a352:	e001      	b.n	800a358 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a354:	23fa      	movs	r3, #250	; 0xfa
 800a356:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	7bfa      	ldrb	r2, [r7, #15]
 800a35c:	711a      	strb	r2, [r3, #4]
 800a35e:	e000      	b.n	800a362 <lwip_netconn_do_write+0xfa>
        return;
 800a360:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	08019d14 	.word	0x08019d14
 800a36c:	0801a0b8 	.word	0x0801a0b8
 800a370:	08019d58 	.word	0x08019d58
 800a374:	0801a240 	.word	0x0801a240
 800a378:	0801a0d4 	.word	0x0801a0d4
 800a37c:	2000d248 	.word	0x2000d248

0800a380 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	785b      	ldrb	r3, [r3, #1]
 800a392:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d069      	beq.n	800a472 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a3a8:	2b10      	cmp	r3, #16
 800a3aa:	d162      	bne.n	800a472 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d002      	beq.n	800a3ba <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a3b4:	7afb      	ldrb	r3, [r7, #11]
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d05b      	beq.n	800a472 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a3ba:	7afb      	ldrb	r3, [r7, #11]
 800a3bc:	2b03      	cmp	r3, #3
 800a3be:	d103      	bne.n	800a3c8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	22f5      	movs	r2, #245	; 0xf5
 800a3c4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a3c6:	e059      	b.n	800a47c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a3c8:	7afb      	ldrb	r3, [r7, #11]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d103      	bne.n	800a3d6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	22fb      	movs	r2, #251	; 0xfb
 800a3d2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a3d4:	e052      	b.n	800a47c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	7a1b      	ldrb	r3, [r3, #8]
 800a3da:	f003 0301 	and.w	r3, r3, #1
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d004      	beq.n	800a3ec <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7ff f99e 	bl	8009728 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6a1b      	ldr	r3, [r3, #32]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d006      	beq.n	800a404 <lwip_netconn_do_close+0x84>
 800a3f6:	4b23      	ldr	r3, [pc, #140]	; (800a484 <lwip_netconn_do_close+0x104>)
 800a3f8:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800a3fc:	4922      	ldr	r1, [pc, #136]	; (800a488 <lwip_netconn_do_close+0x108>)
 800a3fe:	4823      	ldr	r0, [pc, #140]	; (800a48c <lwip_netconn_do_close+0x10c>)
 800a400:	f00e fad6 	bl	80189b0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2204      	movs	r2, #4
 800a40a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2100      	movs	r1, #0
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7ff fa02 	bl	8009824 <lwip_netconn_do_close_internal>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d029      	beq.n	800a47a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	785b      	ldrb	r3, [r3, #1]
 800a42c:	2b04      	cmp	r3, #4
 800a42e:	d006      	beq.n	800a43e <lwip_netconn_do_close+0xbe>
 800a430:	4b14      	ldr	r3, [pc, #80]	; (800a484 <lwip_netconn_do_close+0x104>)
 800a432:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800a436:	4916      	ldr	r1, [pc, #88]	; (800a490 <lwip_netconn_do_close+0x110>)
 800a438:	4814      	ldr	r0, [pc, #80]	; (800a48c <lwip_netconn_do_close+0x10c>)
 800a43a:	f00e fab9 	bl	80189b0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800a43e:	4815      	ldr	r0, [pc, #84]	; (800a494 <lwip_netconn_do_close+0x114>)
 800a440:	f00e f977 	bl	8018732 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	330c      	adds	r3, #12
 800a44a:	2100      	movs	r1, #0
 800a44c:	4618      	mov	r0, r3
 800a44e:	f00e f8ce 	bl	80185ee <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a452:	4810      	ldr	r0, [pc, #64]	; (800a494 <lwip_netconn_do_close+0x114>)
 800a454:	f00e f95e 	bl	8018714 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	785b      	ldrb	r3, [r3, #1]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d00b      	beq.n	800a47a <lwip_netconn_do_close+0xfa>
 800a462:	4b08      	ldr	r3, [pc, #32]	; (800a484 <lwip_netconn_do_close+0x104>)
 800a464:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800a468:	4909      	ldr	r1, [pc, #36]	; (800a490 <lwip_netconn_do_close+0x110>)
 800a46a:	4808      	ldr	r0, [pc, #32]	; (800a48c <lwip_netconn_do_close+0x10c>)
 800a46c:	f00e faa0 	bl	80189b0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a470:	e003      	b.n	800a47a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	22f5      	movs	r2, #245	; 0xf5
 800a476:	711a      	strb	r2, [r3, #4]
 800a478:	e000      	b.n	800a47c <lwip_netconn_do_close+0xfc>
      return;
 800a47a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	08019d14 	.word	0x08019d14
 800a488:	0801a0b8 	.word	0x0801a0b8
 800a48c:	08019d58 	.word	0x08019d58
 800a490:	0801a0d4 	.word	0x0801a0d4
 800a494:	2000d248 	.word	0x2000d248

0800a498 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d013      	beq.n	800a4ce <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00b      	beq.n	800a4c6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f002 fc90 	bl	800cdd8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	605a      	str	r2, [r3, #4]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685a      	ldr	r2, [r3, #4]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a4c6:	6879      	ldr	r1, [r7, #4]
 800a4c8:	2006      	movs	r0, #6
 800a4ca:	f001 fdd5 	bl	800c078 <memp_free>
  }
}
 800a4ce:	bf00      	nop
 800a4d0:	3708      	adds	r7, #8
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
	...

0800a4d8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d108      	bne.n	800a4fc <netbuf_data+0x24>
 800a4ea:	4b1b      	ldr	r3, [pc, #108]	; (800a558 <netbuf_data+0x80>)
 800a4ec:	22c6      	movs	r2, #198	; 0xc6
 800a4ee:	491b      	ldr	r1, [pc, #108]	; (800a55c <netbuf_data+0x84>)
 800a4f0:	481b      	ldr	r0, [pc, #108]	; (800a560 <netbuf_data+0x88>)
 800a4f2:	f00e fa5d 	bl	80189b0 <iprintf>
 800a4f6:	f06f 030f 	mvn.w	r3, #15
 800a4fa:	e029      	b.n	800a550 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d108      	bne.n	800a514 <netbuf_data+0x3c>
 800a502:	4b15      	ldr	r3, [pc, #84]	; (800a558 <netbuf_data+0x80>)
 800a504:	22c7      	movs	r2, #199	; 0xc7
 800a506:	4917      	ldr	r1, [pc, #92]	; (800a564 <netbuf_data+0x8c>)
 800a508:	4815      	ldr	r0, [pc, #84]	; (800a560 <netbuf_data+0x88>)
 800a50a:	f00e fa51 	bl	80189b0 <iprintf>
 800a50e:	f06f 030f 	mvn.w	r3, #15
 800a512:	e01d      	b.n	800a550 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d108      	bne.n	800a52c <netbuf_data+0x54>
 800a51a:	4b0f      	ldr	r3, [pc, #60]	; (800a558 <netbuf_data+0x80>)
 800a51c:	22c8      	movs	r2, #200	; 0xc8
 800a51e:	4912      	ldr	r1, [pc, #72]	; (800a568 <netbuf_data+0x90>)
 800a520:	480f      	ldr	r0, [pc, #60]	; (800a560 <netbuf_data+0x88>)
 800a522:	f00e fa45 	bl	80189b0 <iprintf>
 800a526:	f06f 030f 	mvn.w	r3, #15
 800a52a:	e011      	b.n	800a550 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d102      	bne.n	800a53a <netbuf_data+0x62>
    return ERR_BUF;
 800a534:	f06f 0301 	mvn.w	r3, #1
 800a538:	e00a      	b.n	800a550 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	685a      	ldr	r2, [r3, #4]
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	895a      	ldrh	r2, [r3, #10]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	0801a26c 	.word	0x0801a26c
 800a55c:	0801a374 	.word	0x0801a374
 800a560:	0801a2bc 	.word	0x0801a2bc
 800a564:	0801a390 	.word	0x0801a390
 800a568:	0801a3b0 	.word	0x0801a3b0

0800a56c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d108      	bne.n	800a58c <netbuf_next+0x20>
 800a57a:	4b11      	ldr	r3, [pc, #68]	; (800a5c0 <netbuf_next+0x54>)
 800a57c:	22e0      	movs	r2, #224	; 0xe0
 800a57e:	4911      	ldr	r1, [pc, #68]	; (800a5c4 <netbuf_next+0x58>)
 800a580:	4811      	ldr	r0, [pc, #68]	; (800a5c8 <netbuf_next+0x5c>)
 800a582:	f00e fa15 	bl	80189b0 <iprintf>
 800a586:	f04f 33ff 	mov.w	r3, #4294967295
 800a58a:	e014      	b.n	800a5b6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d102      	bne.n	800a59c <netbuf_next+0x30>
    return -1;
 800a596:	f04f 33ff 	mov.w	r3, #4294967295
 800a59a:	e00c      	b.n	800a5b6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d101      	bne.n	800a5b4 <netbuf_next+0x48>
    return 1;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e000      	b.n	800a5b6 <netbuf_next+0x4a>
  }
  return 0;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	0801a26c 	.word	0x0801a26c
 800a5c4:	0801a3cc 	.word	0x0801a3cc
 800a5c8:	0801a2bc 	.word	0x0801a2bc

0800a5cc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a5d6:	f009 f8a1 	bl	801371c <sys_timeouts_sleeptime>
 800a5da:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e2:	d10b      	bne.n	800a5fc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a5e4:	4813      	ldr	r0, [pc, #76]	; (800a634 <tcpip_timeouts_mbox_fetch+0x68>)
 800a5e6:	f00e f8a4 	bl	8018732 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	6839      	ldr	r1, [r7, #0]
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f00d ff5c 	bl	80184ac <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a5f4:	480f      	ldr	r0, [pc, #60]	; (800a634 <tcpip_timeouts_mbox_fetch+0x68>)
 800a5f6:	f00e f88d 	bl	8018714 <sys_mutex_lock>
    return;
 800a5fa:	e018      	b.n	800a62e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d102      	bne.n	800a608 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a602:	f009 f851 	bl	80136a8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a606:	e7e6      	b.n	800a5d6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a608:	480a      	ldr	r0, [pc, #40]	; (800a634 <tcpip_timeouts_mbox_fetch+0x68>)
 800a60a:	f00e f892 	bl	8018732 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	6839      	ldr	r1, [r7, #0]
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f00d ff4a 	bl	80184ac <sys_arch_mbox_fetch>
 800a618:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a61a:	4806      	ldr	r0, [pc, #24]	; (800a634 <tcpip_timeouts_mbox_fetch+0x68>)
 800a61c:	f00e f87a 	bl	8018714 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a626:	d102      	bne.n	800a62e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a628:	f009 f83e 	bl	80136a8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a62c:	e7d3      	b.n	800a5d6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	2000d248 	.word	0x2000d248

0800a638 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a640:	4810      	ldr	r0, [pc, #64]	; (800a684 <tcpip_thread+0x4c>)
 800a642:	f00e f867 	bl	8018714 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a646:	4b10      	ldr	r3, [pc, #64]	; (800a688 <tcpip_thread+0x50>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d005      	beq.n	800a65a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a64e:	4b0e      	ldr	r3, [pc, #56]	; (800a688 <tcpip_thread+0x50>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a0e      	ldr	r2, [pc, #56]	; (800a68c <tcpip_thread+0x54>)
 800a654:	6812      	ldr	r2, [r2, #0]
 800a656:	4610      	mov	r0, r2
 800a658:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a65a:	f107 030c 	add.w	r3, r7, #12
 800a65e:	4619      	mov	r1, r3
 800a660:	480b      	ldr	r0, [pc, #44]	; (800a690 <tcpip_thread+0x58>)
 800a662:	f7ff ffb3 	bl	800a5cc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d106      	bne.n	800a67a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a66c:	4b09      	ldr	r3, [pc, #36]	; (800a694 <tcpip_thread+0x5c>)
 800a66e:	2291      	movs	r2, #145	; 0x91
 800a670:	4909      	ldr	r1, [pc, #36]	; (800a698 <tcpip_thread+0x60>)
 800a672:	480a      	ldr	r0, [pc, #40]	; (800a69c <tcpip_thread+0x64>)
 800a674:	f00e f99c 	bl	80189b0 <iprintf>
      continue;
 800a678:	e003      	b.n	800a682 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f000 f80f 	bl	800a6a0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a682:	e7ea      	b.n	800a65a <tcpip_thread+0x22>
 800a684:	2000d248 	.word	0x2000d248
 800a688:	2000d23c 	.word	0x2000d23c
 800a68c:	2000d240 	.word	0x2000d240
 800a690:	2000d244 	.word	0x2000d244
 800a694:	0801a404 	.word	0x0801a404
 800a698:	0801a434 	.word	0x0801a434
 800a69c:	0801a454 	.word	0x0801a454

0800a6a0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d026      	beq.n	800a6fe <tcpip_thread_handle_msg+0x5e>
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	dc2b      	bgt.n	800a70c <tcpip_thread_handle_msg+0x6c>
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d002      	beq.n	800a6be <tcpip_thread_handle_msg+0x1e>
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d015      	beq.n	800a6e8 <tcpip_thread_handle_msg+0x48>
 800a6bc:	e026      	b.n	800a70c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	6850      	ldr	r0, [r2, #4]
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	6892      	ldr	r2, [r2, #8]
 800a6ca:	4611      	mov	r1, r2
 800a6cc:	4798      	blx	r3
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d004      	beq.n	800a6de <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f002 fb7d 	bl	800cdd8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a6de:	6879      	ldr	r1, [r7, #4]
 800a6e0:	2009      	movs	r0, #9
 800a6e2:	f001 fcc9 	bl	800c078 <memp_free>
      break;
 800a6e6:	e018      	b.n	800a71a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	6892      	ldr	r2, [r2, #8]
 800a6f0:	4610      	mov	r0, r2
 800a6f2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a6f4:	6879      	ldr	r1, [r7, #4]
 800a6f6:	2008      	movs	r0, #8
 800a6f8:	f001 fcbe 	bl	800c078 <memp_free>
      break;
 800a6fc:	e00d      	b.n	800a71a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	6892      	ldr	r2, [r2, #8]
 800a706:	4610      	mov	r0, r2
 800a708:	4798      	blx	r3
      break;
 800a70a:	e006      	b.n	800a71a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a70c:	4b05      	ldr	r3, [pc, #20]	; (800a724 <tcpip_thread_handle_msg+0x84>)
 800a70e:	22cf      	movs	r2, #207	; 0xcf
 800a710:	4905      	ldr	r1, [pc, #20]	; (800a728 <tcpip_thread_handle_msg+0x88>)
 800a712:	4806      	ldr	r0, [pc, #24]	; (800a72c <tcpip_thread_handle_msg+0x8c>)
 800a714:	f00e f94c 	bl	80189b0 <iprintf>
      break;
 800a718:	bf00      	nop
  }
}
 800a71a:	bf00      	nop
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	0801a404 	.word	0x0801a404
 800a728:	0801a434 	.word	0x0801a434
 800a72c:	0801a454 	.word	0x0801a454

0800a730 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a73c:	481a      	ldr	r0, [pc, #104]	; (800a7a8 <tcpip_inpkt+0x78>)
 800a73e:	f00d ff10 	bl	8018562 <sys_mbox_valid>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d105      	bne.n	800a754 <tcpip_inpkt+0x24>
 800a748:	4b18      	ldr	r3, [pc, #96]	; (800a7ac <tcpip_inpkt+0x7c>)
 800a74a:	22fc      	movs	r2, #252	; 0xfc
 800a74c:	4918      	ldr	r1, [pc, #96]	; (800a7b0 <tcpip_inpkt+0x80>)
 800a74e:	4819      	ldr	r0, [pc, #100]	; (800a7b4 <tcpip_inpkt+0x84>)
 800a750:	f00e f92e 	bl	80189b0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a754:	2009      	movs	r0, #9
 800a756:	f001 fc19 	bl	800bf8c <memp_malloc>
 800a75a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d102      	bne.n	800a768 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a762:	f04f 33ff 	mov.w	r3, #4294967295
 800a766:	e01a      	b.n	800a79e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	2200      	movs	r2, #0
 800a76c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	68ba      	ldr	r2, [r7, #8]
 800a778:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a780:	6979      	ldr	r1, [r7, #20]
 800a782:	4809      	ldr	r0, [pc, #36]	; (800a7a8 <tcpip_inpkt+0x78>)
 800a784:	f00d fe78 	bl	8018478 <sys_mbox_trypost>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d006      	beq.n	800a79c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a78e:	6979      	ldr	r1, [r7, #20]
 800a790:	2009      	movs	r0, #9
 800a792:	f001 fc71 	bl	800c078 <memp_free>
    return ERR_MEM;
 800a796:	f04f 33ff 	mov.w	r3, #4294967295
 800a79a:	e000      	b.n	800a79e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a79c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3718      	adds	r7, #24
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	2000d244 	.word	0x2000d244
 800a7ac:	0801a404 	.word	0x0801a404
 800a7b0:	0801a47c 	.word	0x0801a47c
 800a7b4:	0801a454 	.word	0x0801a454

0800a7b8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a7c8:	f003 0318 	and.w	r3, r3, #24
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d006      	beq.n	800a7de <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a7d0:	4a08      	ldr	r2, [pc, #32]	; (800a7f4 <tcpip_input+0x3c>)
 800a7d2:	6839      	ldr	r1, [r7, #0]
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f7ff ffab 	bl	800a730 <tcpip_inpkt>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	e005      	b.n	800a7ea <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a7de:	4a06      	ldr	r2, [pc, #24]	; (800a7f8 <tcpip_input+0x40>)
 800a7e0:	6839      	ldr	r1, [r7, #0]
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7ff ffa4 	bl	800a730 <tcpip_inpkt>
 800a7e8:	4603      	mov	r3, r0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	08018265 	.word	0x08018265
 800a7f8:	08017131 	.word	0x08017131

0800a7fc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a806:	4819      	ldr	r0, [pc, #100]	; (800a86c <tcpip_try_callback+0x70>)
 800a808:	f00d feab 	bl	8018562 <sys_mbox_valid>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d106      	bne.n	800a820 <tcpip_try_callback+0x24>
 800a812:	4b17      	ldr	r3, [pc, #92]	; (800a870 <tcpip_try_callback+0x74>)
 800a814:	f240 125d 	movw	r2, #349	; 0x15d
 800a818:	4916      	ldr	r1, [pc, #88]	; (800a874 <tcpip_try_callback+0x78>)
 800a81a:	4817      	ldr	r0, [pc, #92]	; (800a878 <tcpip_try_callback+0x7c>)
 800a81c:	f00e f8c8 	bl	80189b0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a820:	2008      	movs	r0, #8
 800a822:	f001 fbb3 	bl	800bf8c <memp_malloc>
 800a826:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d102      	bne.n	800a834 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a82e:	f04f 33ff 	mov.w	r3, #4294967295
 800a832:	e017      	b.n	800a864 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2201      	movs	r2, #1
 800a838:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	683a      	ldr	r2, [r7, #0]
 800a844:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a846:	68f9      	ldr	r1, [r7, #12]
 800a848:	4808      	ldr	r0, [pc, #32]	; (800a86c <tcpip_try_callback+0x70>)
 800a84a:	f00d fe15 	bl	8018478 <sys_mbox_trypost>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d006      	beq.n	800a862 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a854:	68f9      	ldr	r1, [r7, #12]
 800a856:	2008      	movs	r0, #8
 800a858:	f001 fc0e 	bl	800c078 <memp_free>
    return ERR_MEM;
 800a85c:	f04f 33ff 	mov.w	r3, #4294967295
 800a860:	e000      	b.n	800a864 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	2000d244 	.word	0x2000d244
 800a870:	0801a404 	.word	0x0801a404
 800a874:	0801a47c 	.word	0x0801a47c
 800a878:	0801a454 	.word	0x0801a454

0800a87c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a888:	4806      	ldr	r0, [pc, #24]	; (800a8a4 <tcpip_send_msg_wait_sem+0x28>)
 800a88a:	f00d ff43 	bl	8018714 <sys_mutex_lock>
  fn(apimsg);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	68b8      	ldr	r0, [r7, #8]
 800a892:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a894:	4803      	ldr	r0, [pc, #12]	; (800a8a4 <tcpip_send_msg_wait_sem+0x28>)
 800a896:	f00d ff4c 	bl	8018732 <sys_mutex_unlock>
  return ERR_OK;
 800a89a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3710      	adds	r7, #16
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	2000d248 	.word	0x2000d248

0800a8a8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af02      	add	r7, sp, #8
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a8b2:	f000 fec1 	bl	800b638 <lwip_init>

  tcpip_init_done = initfunc;
 800a8b6:	4a17      	ldr	r2, [pc, #92]	; (800a914 <tcpip_init+0x6c>)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a8bc:	4a16      	ldr	r2, [pc, #88]	; (800a918 <tcpip_init+0x70>)
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a8c2:	2106      	movs	r1, #6
 800a8c4:	4815      	ldr	r0, [pc, #84]	; (800a91c <tcpip_init+0x74>)
 800a8c6:	f00d fda3 	bl	8018410 <sys_mbox_new>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d006      	beq.n	800a8de <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a8d0:	4b13      	ldr	r3, [pc, #76]	; (800a920 <tcpip_init+0x78>)
 800a8d2:	f240 2261 	movw	r2, #609	; 0x261
 800a8d6:	4913      	ldr	r1, [pc, #76]	; (800a924 <tcpip_init+0x7c>)
 800a8d8:	4813      	ldr	r0, [pc, #76]	; (800a928 <tcpip_init+0x80>)
 800a8da:	f00e f869 	bl	80189b0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a8de:	4813      	ldr	r0, [pc, #76]	; (800a92c <tcpip_init+0x84>)
 800a8e0:	f00d fefc 	bl	80186dc <sys_mutex_new>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d006      	beq.n	800a8f8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a8ea:	4b0d      	ldr	r3, [pc, #52]	; (800a920 <tcpip_init+0x78>)
 800a8ec:	f240 2265 	movw	r2, #613	; 0x265
 800a8f0:	490f      	ldr	r1, [pc, #60]	; (800a930 <tcpip_init+0x88>)
 800a8f2:	480d      	ldr	r0, [pc, #52]	; (800a928 <tcpip_init+0x80>)
 800a8f4:	f00e f85c 	bl	80189b0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	9300      	str	r3, [sp, #0]
 800a8fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a900:	2200      	movs	r2, #0
 800a902:	490c      	ldr	r1, [pc, #48]	; (800a934 <tcpip_init+0x8c>)
 800a904:	480c      	ldr	r0, [pc, #48]	; (800a938 <tcpip_init+0x90>)
 800a906:	f00d ff21 	bl	801874c <sys_thread_new>
}
 800a90a:	bf00      	nop
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	2000d23c 	.word	0x2000d23c
 800a918:	2000d240 	.word	0x2000d240
 800a91c:	2000d244 	.word	0x2000d244
 800a920:	0801a404 	.word	0x0801a404
 800a924:	0801a48c 	.word	0x0801a48c
 800a928:	0801a454 	.word	0x0801a454
 800a92c:	2000d248 	.word	0x2000d248
 800a930:	0801a4b0 	.word	0x0801a4b0
 800a934:	0800a639 	.word	0x0800a639
 800a938:	0801a4d4 	.word	0x0801a4d4

0800a93c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d002      	beq.n	800a952 <fs_open+0x16>
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d102      	bne.n	800a958 <fs_open+0x1c>
    return ERR_ARG;
 800a952:	f06f 030f 	mvn.w	r3, #15
 800a956:	e028      	b.n	800a9aa <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a958:	4b16      	ldr	r3, [pc, #88]	; (800a9b4 <fs_open+0x78>)
 800a95a:	60fb      	str	r3, [r7, #12]
 800a95c:	e020      	b.n	800a9a0 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	4619      	mov	r1, r3
 800a964:	6838      	ldr	r0, [r7, #0]
 800a966:	f7f5 fc43 	bl	80001f0 <strcmp>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d114      	bne.n	800a99a <fs_open+0x5e>
      file->data = (const char *)f->data;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	689a      	ldr	r2, [r3, #8]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	68da      	ldr	r2, [r3, #12]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	68da      	ldr	r2, [r3, #12]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	7c1a      	ldrb	r2, [r3, #16]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800a996:	2300      	movs	r3, #0
 800a998:	e007      	b.n	800a9aa <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	60fb      	str	r3, [r7, #12]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d1db      	bne.n	800a95e <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800a9a6:	f06f 0305 	mvn.w	r3, #5
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3710      	adds	r7, #16
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	08027578 	.word	0x08027578

0800a9b8 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	685a      	ldr	r2, [r3, #4]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	1ad3      	subs	r3, r2, r3
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b082      	sub	sp, #8
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800a9f2:	222c      	movs	r2, #44	; 0x2c
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f00e f83f 	bl	8018a7a <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800a9fc:	bf00      	nop
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800aa0a:	202c      	movs	r0, #44	; 0x2c
 800aa0c:	f001 f91a 	bl	800bc44 <mem_malloc>
 800aa10:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d002      	beq.n	800aa1e <http_state_alloc+0x1a>
    http_state_init(ret);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f7ff ffe6 	bl	800a9ea <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800aa1e:	687b      	ldr	r3, [r7, #4]
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	695b      	ldr	r3, [r3, #20]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d007      	beq.n	800aa48 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	695b      	ldr	r3, [r3, #20]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7ff ffbb 	bl	800a9b8 <fs_close>
    hs->handle = NULL;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a1b      	ldr	r3, [r3, #32]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d007      	beq.n	800aa60 <http_state_eof+0x38>
    pbuf_free(hs->req);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a1b      	ldr	r3, [r3, #32]
 800aa54:	4618      	mov	r0, r3
 800aa56:	f002 f9bf 	bl	800cdd8 <pbuf_free>
    hs->req = NULL;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800aa60:	bf00      	nop
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d005      	beq.n	800aa82 <http_state_free+0x1a>
    http_state_eof(hs);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f7ff ffd6 	bl	800aa28 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 ff47 	bl	800b910 <mem_free>
  }
}
 800aa82:	bf00      	nop
 800aa84:	3708      	adds	r7, #8
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
	...

0800aa8c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b086      	sub	sp, #24
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
 800aa98:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d106      	bne.n	800aaae <http_write+0x22>
 800aaa0:	4b2c      	ldr	r3, [pc, #176]	; (800ab54 <http_write+0xc8>)
 800aaa2:	f240 2219 	movw	r2, #537	; 0x219
 800aaa6:	492c      	ldr	r1, [pc, #176]	; (800ab58 <http_write+0xcc>)
 800aaa8:	482c      	ldr	r0, [pc, #176]	; (800ab5c <http_write+0xd0>)
 800aaaa:	f00d ff81 	bl	80189b0 <iprintf>
  len = *length;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	881b      	ldrh	r3, [r3, #0]
 800aab2:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800aab4:	8afb      	ldrh	r3, [r7, #22]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d101      	bne.n	800aabe <http_write+0x32>
    return ERR_OK;
 800aaba:	2300      	movs	r3, #0
 800aabc:	e045      	b.n	800ab4a <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aac4:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800aac6:	8aba      	ldrh	r2, [r7, #20]
 800aac8:	8afb      	ldrh	r3, [r7, #22]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d201      	bcs.n	800aad2 <http_write+0x46>
    len = max_len;
 800aace:	8abb      	ldrh	r3, [r7, #20]
 800aad0:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aad6:	005b      	lsls	r3, r3, #1
 800aad8:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800aada:	8afa      	ldrh	r2, [r7, #22]
 800aadc:	8abb      	ldrh	r3, [r7, #20]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d901      	bls.n	800aae6 <http_write+0x5a>
    len = max_len;
 800aae2:	8abb      	ldrh	r3, [r7, #20]
 800aae4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800aae6:	78fb      	ldrb	r3, [r7, #3]
 800aae8:	8afa      	ldrh	r2, [r7, #22]
 800aaea:	68b9      	ldr	r1, [r7, #8]
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f006 ff73 	bl	80119d8 <tcp_write>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800aaf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aafe:	d10f      	bne.n	800ab20 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d004      	beq.n	800ab14 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800ab10:	2b08      	cmp	r3, #8
 800ab12:	d902      	bls.n	800ab1a <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800ab14:	2301      	movs	r3, #1
 800ab16:	82fb      	strh	r3, [r7, #22]
 800ab18:	e002      	b.n	800ab20 <http_write+0x94>
      } else {
        len /= 2;
 800ab1a:	8afb      	ldrh	r3, [r7, #22]
 800ab1c:	085b      	lsrs	r3, r3, #1
 800ab1e:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800ab20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab28:	d102      	bne.n	800ab30 <http_write+0xa4>
 800ab2a:	8afb      	ldrh	r3, [r7, #22]
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d8da      	bhi.n	800aae6 <http_write+0x5a>

  if (err == ERR_OK) {
 800ab30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d103      	bne.n	800ab40 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	8afa      	ldrh	r2, [r7, #22]
 800ab3c:	801a      	strh	r2, [r3, #0]
 800ab3e:	e002      	b.n	800ab46 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800ab46:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3718      	adds	r7, #24
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	0801a524 	.word	0x0801a524
 800ab58:	0801a55c 	.word	0x0801a55c
 800ab5c:	0801a56c 	.word	0x0801a56c

0800ab60 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800ab6e:	2100      	movs	r1, #0
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f003 ffef 	bl	800eb54 <tcp_arg>
  altcp_recv(pcb, NULL);
 800ab76:	2100      	movs	r1, #0
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	f003 fffd 	bl	800eb78 <tcp_recv>
  altcp_err(pcb, NULL);
 800ab7e:	2100      	movs	r1, #0
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f004 f83d 	bl	800ec00 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800ab86:	2200      	movs	r2, #0
 800ab88:	2100      	movs	r1, #0
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f004 f872 	bl	800ec74 <tcp_poll>
  altcp_sent(pcb, NULL);
 800ab90:	2100      	movs	r1, #0
 800ab92:	68f8      	ldr	r0, [r7, #12]
 800ab94:	f004 f812 	bl	800ebbc <tcp_sent>
  if (hs != NULL) {
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d002      	beq.n	800aba4 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800ab9e:	68b8      	ldr	r0, [r7, #8]
 800aba0:	f7ff ff62 	bl	800aa68 <http_state_free>
  }

  if (abort_conn) {
 800aba4:	79fb      	ldrb	r3, [r7, #7]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d004      	beq.n	800abb4 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f002 ff14 	bl	800d9d8 <tcp_abort>
    return ERR_OK;
 800abb0:	2300      	movs	r3, #0
 800abb2:	e00f      	b.n	800abd4 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f002 fdc9 	bl	800d74c <tcp_close>
 800abba:	4603      	mov	r3, r0
 800abbc:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800abbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d004      	beq.n	800abd0 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800abc6:	2204      	movs	r2, #4
 800abc8:	4904      	ldr	r1, [pc, #16]	; (800abdc <http_close_or_abort_conn+0x7c>)
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	f004 f852 	bl	800ec74 <tcp_poll>
  }
  return err;
 800abd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3718      	adds	r7, #24
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	0800b2a3 	.word	0x0800b2a3

0800abe0 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800abea:	2200      	movs	r2, #0
 800abec:	6839      	ldr	r1, [r7, #0]
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7ff ffb6 	bl	800ab60 <http_close_or_abort_conn>
 800abf4:	4603      	mov	r3, r0
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}

0800abfe <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800abfe:	b580      	push	{r7, lr}
 800ac00:	b082      	sub	sp, #8
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	6078      	str	r0, [r7, #4]
 800ac06:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800ac08:	6839      	ldr	r1, [r7, #0]
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f7ff ffe8 	bl	800abe0 <http_close_conn>
  }
}
 800ac10:	bf00      	nop
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d105      	bne.n	800ac36 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800ac2a:	6839      	ldr	r1, [r7, #0]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f7ff ffe6 	bl	800abfe <http_eof>
    return 0;
 800ac32:	2300      	movs	r3, #0
 800ac34:	e016      	b.n	800ac64 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7ff fec6 	bl	800a9cc <fs_bytes_left>
 800ac40:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	dc05      	bgt.n	800ac54 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7ff ffd7 	bl	800abfe <http_eof>
    return 0;
 800ac50:	2300      	movs	r3, #0
 800ac52:	e007      	b.n	800ac64 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800ac54:	4b05      	ldr	r3, [pc, #20]	; (800ac6c <http_check_eof+0x54>)
 800ac56:	f240 429d 	movw	r2, #1181	; 0x49d
 800ac5a:	4905      	ldr	r1, [pc, #20]	; (800ac70 <http_check_eof+0x58>)
 800ac5c:	4805      	ldr	r0, [pc, #20]	; (800ac74 <http_check_eof+0x5c>)
 800ac5e:	f00d fea7 	bl	80189b0 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800ac62:	2301      	movs	r3, #1
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3710      	adds	r7, #16
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	0801a524 	.word	0x0801a524
 800ac70:	0801a594 	.word	0x0801a594
 800ac74:	0801a56c 	.word	0x0801a56c

0800ac78 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800ac82:	2300      	movs	r3, #0
 800ac84:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d803      	bhi.n	800ac9a <http_send_data_nonssi+0x22>
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	e001      	b.n	800ac9e <http_send_data_nonssi+0x26>
 800ac9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac9e:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	6999      	ldr	r1, [r3, #24]
 800aca4:	f107 020c 	add.w	r2, r7, #12
 800aca8:	2300      	movs	r3, #0
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7ff feee 	bl	800aa8c <http_write>
 800acb0:	4603      	mov	r3, r0
 800acb2:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800acb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d10d      	bne.n	800acd8 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800acbc:	2301      	movs	r3, #1
 800acbe:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	699b      	ldr	r3, [r3, #24]
 800acc4:	89ba      	ldrh	r2, [r7, #12]
 800acc6:	441a      	add	r2, r3
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd0:	89ba      	ldrh	r2, [r7, #12]
 800acd2:	1a9a      	subs	r2, r3, r2
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800acd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b084      	sub	sp, #16
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800acec:	2300      	movs	r3, #0
 800acee:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d101      	bne.n	800acfa <http_send+0x18>
    return 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	e025      	b.n	800ad46 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d108      	bne.n	800ad14 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800ad02:	6839      	ldr	r1, [r7, #0]
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7ff ff87 	bl	800ac18 <http_check_eof>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d101      	bne.n	800ad14 <http_send+0x32>
      return 0;
 800ad10:	2300      	movs	r3, #0
 800ad12:	e018      	b.n	800ad46 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800ad14:	6839      	ldr	r1, [r7, #0]
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f7ff ffae 	bl	800ac78 <http_send_data_nonssi>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10d      	bne.n	800ad44 <http_send+0x62>
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	695b      	ldr	r3, [r3, #20]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f7ff fe4d 	bl	800a9cc <fs_bytes_left>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	dc05      	bgt.n	800ad44 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7ff ff5f 	bl	800abfe <http_eof>
    return 0;
 800ad40:	2300      	movs	r3, #0
 800ad42:	e000      	b.n	800ad46 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
	...

0800ad50 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	4a1c      	ldr	r2, [pc, #112]	; (800add0 <http_get_404_file+0x80>)
 800ad5e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4619      	mov	r1, r3
 800ad68:	4610      	mov	r0, r2
 800ad6a:	f7ff fde7 	bl	800a93c <fs_open>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ad72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d024      	beq.n	800adc4 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	4a15      	ldr	r2, [pc, #84]	; (800add4 <http_get_404_file+0x84>)
 800ad7e:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4619      	mov	r1, r3
 800ad88:	4610      	mov	r0, r2
 800ad8a:	f7ff fdd7 	bl	800a93c <fs_open>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ad92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d014      	beq.n	800adc4 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	4a0e      	ldr	r2, [pc, #56]	; (800add8 <http_get_404_file+0x88>)
 800ad9e:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4619      	mov	r1, r3
 800ada8:	4610      	mov	r0, r2
 800adaa:	f7ff fdc7 	bl	800a93c <fs_open>
 800adae:	4603      	mov	r3, r0
 800adb0:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800adb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d004      	beq.n	800adc4 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	2200      	movs	r2, #0
 800adbe:	601a      	str	r2, [r3, #0]
        return NULL;
 800adc0:	2300      	movs	r3, #0
 800adc2:	e000      	b.n	800adc6 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800adc4:	687b      	ldr	r3, [r7, #4]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	0801a5cc 	.word	0x0801a5cc
 800add4:	0801a5d8 	.word	0x0801a5d8
 800add8:	0801a5e4 	.word	0x0801a5e4

0800addc <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b08e      	sub	sp, #56	; 0x38
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d106      	bne.n	800ae00 <http_parse_request+0x24>
 800adf2:	4b65      	ldr	r3, [pc, #404]	; (800af88 <http_parse_request+0x1ac>)
 800adf4:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800adf8:	4964      	ldr	r1, [pc, #400]	; (800af8c <http_parse_request+0x1b0>)
 800adfa:	4865      	ldr	r0, [pc, #404]	; (800af90 <http_parse_request+0x1b4>)
 800adfc:	f00d fdd8 	bl	80189b0 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d106      	bne.n	800ae14 <http_parse_request+0x38>
 800ae06:	4b60      	ldr	r3, [pc, #384]	; (800af88 <http_parse_request+0x1ac>)
 800ae08:	f240 72af 	movw	r2, #1967	; 0x7af
 800ae0c:	4961      	ldr	r1, [pc, #388]	; (800af94 <http_parse_request+0x1b8>)
 800ae0e:	4860      	ldr	r0, [pc, #384]	; (800af90 <http_parse_request+0x1b4>)
 800ae10:	f00d fdce 	bl	80189b0 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	695b      	ldr	r3, [r3, #20]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d103      	bne.n	800ae24 <http_parse_request+0x48>
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	699b      	ldr	r3, [r3, #24]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800ae24:	f06f 0307 	mvn.w	r3, #7
 800ae28:	e0a9      	b.n	800af7e <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d103      	bne.n	800ae3a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae36:	621a      	str	r2, [r3, #32]
 800ae38:	e005      	b.n	800ae46 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	6a1b      	ldr	r3, [r3, #32]
 800ae3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae40:	4618      	mov	r0, r3
 800ae42:	f002 f897 	bl	800cf74 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800ae46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae48:	f002 f86c 	bl	800cf24 <pbuf_ref>

  if (hs->req->next != NULL) {
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	6a1b      	ldr	r3, [r3, #32]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d012      	beq.n	800ae7c <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	6a1b      	ldr	r3, [r3, #32]
 800ae5a:	891b      	ldrh	r3, [r3, #8]
 800ae5c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800ae60:	4293      	cmp	r3, r2
 800ae62:	bf28      	it	cs
 800ae64:	4613      	movcs	r3, r2
 800ae66:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	6a18      	ldr	r0, [r3, #32]
 800ae6c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ae6e:	2300      	movs	r3, #0
 800ae70:	4949      	ldr	r1, [pc, #292]	; (800af98 <http_parse_request+0x1bc>)
 800ae72:	f002 f9b7 	bl	800d1e4 <pbuf_copy_partial>
    data = httpd_req_buf;
 800ae76:	4b48      	ldr	r3, [pc, #288]	; (800af98 <http_parse_request+0x1bc>)
 800ae78:	637b      	str	r3, [r7, #52]	; 0x34
 800ae7a:	e005      	b.n	800ae88 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800ae7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800ae82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae84:	895b      	ldrh	r3, [r3, #10]
 800ae86:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800ae88:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ae8a:	2b06      	cmp	r3, #6
 800ae8c:	d962      	bls.n	800af54 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800ae8e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ae90:	461a      	mov	r2, r3
 800ae92:	4942      	ldr	r1, [pc, #264]	; (800af9c <http_parse_request+0x1c0>)
 800ae94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ae96:	f000 fb99 	bl	800b5cc <lwip_strnstr>
 800ae9a:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800ae9c:	6a3b      	ldr	r3, [r7, #32]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d058      	beq.n	800af54 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800aea6:	2204      	movs	r2, #4
 800aea8:	493d      	ldr	r1, [pc, #244]	; (800afa0 <http_parse_request+0x1c4>)
 800aeaa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aeac:	f00d fdfa 	bl	8018aa4 <strncmp>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d116      	bne.n	800aee4 <http_parse_request+0x108>
        sp1 = data + 3;
 800aeb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb8:	3303      	adds	r3, #3
 800aeba:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	1c5a      	adds	r2, r3, #1
 800aec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec2:	1ad3      	subs	r3, r2, r3
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800aec8:	1ad3      	subs	r3, r2, r3
 800aeca:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	3301      	adds	r3, #1
 800aed0:	8b7a      	ldrh	r2, [r7, #26]
 800aed2:	4934      	ldr	r1, [pc, #208]	; (800afa4 <http_parse_request+0x1c8>)
 800aed4:	4618      	mov	r0, r3
 800aed6:	f000 fb79 	bl	800b5cc <lwip_strnstr>
 800aeda:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800aedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d111      	bne.n	800af06 <http_parse_request+0x12a>
 800aee2:	e006      	b.n	800aef2 <http_parse_request+0x116>
        data[4] = 0;
 800aee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aee6:	3304      	adds	r3, #4
 800aee8:	2200      	movs	r2, #0
 800aeea:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800aeec:	f06f 030f 	mvn.w	r3, #15
 800aef0:	e045      	b.n	800af7e <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	3301      	adds	r3, #1
 800aef6:	8b7a      	ldrh	r2, [r7, #26]
 800aef8:	4928      	ldr	r1, [pc, #160]	; (800af9c <http_parse_request+0x1c0>)
 800aefa:	4618      	mov	r0, r3
 800aefc:	f000 fb66 	bl	800b5cc <lwip_strnstr>
 800af00:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800af02:	2301      	movs	r3, #1
 800af04:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	3301      	adds	r3, #1
 800af0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af0c:	1ad3      	subs	r3, r2, r3
 800af0e:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800af10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af12:	2b00      	cmp	r3, #0
 800af14:	d01e      	beq.n	800af54 <http_parse_request+0x178>
 800af16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d91a      	bls.n	800af54 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800af1e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800af20:	461a      	mov	r2, r3
 800af22:	4921      	ldr	r1, [pc, #132]	; (800afa8 <http_parse_request+0x1cc>)
 800af24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800af26:	f000 fb51 	bl	800b5cc <lwip_strnstr>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d011      	beq.n	800af54 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	3301      	adds	r3, #1
 800af34:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	2200      	movs	r2, #0
 800af3a:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800af3c:	8b3b      	ldrh	r3, [r7, #24]
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	4413      	add	r3, r2
 800af42:	2200      	movs	r2, #0
 800af44:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800af46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af48:	6979      	ldr	r1, [r7, #20]
 800af4a:	68b8      	ldr	r0, [r7, #8]
 800af4c:	f000 f82e 	bl	800afac <http_find_file>
 800af50:	4603      	mov	r3, r0
 800af52:	e014      	b.n	800af7e <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	6a1b      	ldr	r3, [r3, #32]
 800af58:	4618      	mov	r0, r3
 800af5a:	f001 ffcb 	bl	800cef4 <pbuf_clen>
 800af5e:	4603      	mov	r3, r0
 800af60:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	6a1b      	ldr	r3, [r3, #32]
 800af66:	891b      	ldrh	r3, [r3, #8]
 800af68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af6c:	d205      	bcs.n	800af7a <http_parse_request+0x19e>
 800af6e:	8a7b      	ldrh	r3, [r7, #18]
 800af70:	2b05      	cmp	r3, #5
 800af72:	d802      	bhi.n	800af7a <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800af74:	f06f 0304 	mvn.w	r3, #4
 800af78:	e001      	b.n	800af7e <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800af7a:	f06f 030f 	mvn.w	r3, #15
  }
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3738      	adds	r7, #56	; 0x38
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	0801a524 	.word	0x0801a524
 800af8c:	0801a5f0 	.word	0x0801a5f0
 800af90:	0801a56c 	.word	0x0801a56c
 800af94:	0801a5fc 	.word	0x0801a5fc
 800af98:	2000d24c 	.word	0x2000d24c
 800af9c:	0801a608 	.word	0x0801a608
 800afa0:	0801a60c 	.word	0x0801a60c
 800afa4:	0801a614 	.word	0x0801a614
 800afa8:	0801a618 	.word	0x0801a618

0800afac <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b092      	sub	sp, #72	; 0x48
 800afb0:	af02      	add	r7, sp, #8
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800afb8:	2300      	movs	r3, #0
 800afba:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800afbc:	2300      	movs	r3, #0
 800afbe:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800afc0:	2300      	movs	r3, #0
 800afc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	4618      	mov	r0, r3
 800afca:	f7f5 f91b 	bl	8000204 <strlen>
 800afce:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800afd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d06b      	beq.n	800b0ae <http_find_file+0x102>
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afda:	3b01      	subs	r3, #1
 800afdc:	4413      	add	r3, r2
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	2b2f      	cmp	r3, #47	; 0x2f
 800afe2:	d164      	bne.n	800b0ae <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800afe4:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800afe6:	4a53      	ldr	r2, [pc, #332]	; (800b134 <http_find_file+0x188>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d102      	bne.n	800aff2 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800afec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d15d      	bne.n	800b0ae <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800aff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff4:	3b01      	subs	r3, #1
 800aff6:	2b3f      	cmp	r3, #63	; 0x3f
 800aff8:	bf28      	it	cs
 800affa:	233f      	movcs	r3, #63	; 0x3f
 800affc:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00a      	beq.n	800b01a <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b008:	4619      	mov	r1, r3
 800b00a:	484a      	ldr	r0, [pc, #296]	; (800b134 <http_find_file+0x188>)
 800b00c:	f00d fe1e 	bl	8018c4c <memcpy>
      http_uri_buf[copy_len] = 0;
 800b010:	4a48      	ldr	r2, [pc, #288]	; (800b134 <http_find_file+0x188>)
 800b012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b014:	4413      	add	r3, r2
 800b016:	2200      	movs	r2, #0
 800b018:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b01a:	2300      	movs	r3, #0
 800b01c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b01e:	e043      	b.n	800b0a8 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800b020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b022:	2b00      	cmp	r3, #0
 800b024:	d028      	beq.n	800b078 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800b026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b028:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800b02c:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800b02e:	6a3b      	ldr	r3, [r7, #32]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d01e      	beq.n	800b072 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800b034:	4a40      	ldr	r2, [pc, #256]	; (800b138 <http_find_file+0x18c>)
 800b036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b038:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b03c:	4618      	mov	r0, r3
 800b03e:	f7f5 f8e1 	bl	8000204 <strlen>
 800b042:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800b044:	69fa      	ldr	r2, [r7, #28]
 800b046:	6a3b      	ldr	r3, [r7, #32]
 800b048:	4293      	cmp	r3, r2
 800b04a:	bf28      	it	cs
 800b04c:	4613      	movcs	r3, r2
 800b04e:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	4a38      	ldr	r2, [pc, #224]	; (800b134 <http_find_file+0x188>)
 800b054:	1898      	adds	r0, r3, r2
 800b056:	4a38      	ldr	r2, [pc, #224]	; (800b138 <http_find_file+0x18c>)
 800b058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b05a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b05e:	69ba      	ldr	r2, [r7, #24]
 800b060:	4619      	mov	r1, r3
 800b062:	f00d fdf3 	bl	8018c4c <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800b066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	4413      	add	r3, r2
 800b06c:	4a31      	ldr	r2, [pc, #196]	; (800b134 <http_find_file+0x188>)
 800b06e:	2100      	movs	r1, #0
 800b070:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800b072:	4b30      	ldr	r3, [pc, #192]	; (800b134 <http_find_file+0x188>)
 800b074:	633b      	str	r3, [r7, #48]	; 0x30
 800b076:	e004      	b.n	800b082 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800b078:	4a2f      	ldr	r2, [pc, #188]	; (800b138 <http_find_file+0x18c>)
 800b07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b07c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b080:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b086:	4618      	mov	r0, r3
 800b088:	f7ff fc58 	bl	800a93c <fs_open>
 800b08c:	4603      	mov	r3, r0
 800b08e:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800b090:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d104      	bne.n	800b0a2 <http_find_file+0xf6>
        uri = file_name;
 800b098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09a:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800b0a0:	e005      	b.n	800b0ae <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b0a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0aa:	2b04      	cmp	r3, #4
 800b0ac:	d9b8      	bls.n	800b020 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800b0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d124      	bne.n	800b0fe <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	213f      	movs	r1, #63	; 0x3f
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f00d fce6 	bl	8018a8a <strchr>
 800b0be:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800b0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d005      	beq.n	800b0d2 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800b0c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	701a      	strb	r2, [r3, #0]
      params++;
 800b0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	68ba      	ldr	r2, [r7, #8]
 800b0d6:	4611      	mov	r1, r2
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7ff fc2f 	bl	800a93c <fs_open>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b0e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d102      	bne.n	800b0f0 <http_find_file+0x144>
      file = &hs->file_handle;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800b0ee:	e006      	b.n	800b0fe <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800b0f0:	f107 0308 	add.w	r3, r7, #8
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	68f8      	ldr	r0, [r7, #12]
 800b0f8:	f7ff fe2a 	bl	800ad50 <http_get_404_file>
 800b0fc:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800b0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b100:	2b00      	cmp	r3, #0
 800b102:	d106      	bne.n	800b112 <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800b104:	f107 0308 	add.w	r3, r7, #8
 800b108:	4619      	mov	r1, r3
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f7ff fe20 	bl	800ad50 <http_get_404_file>
 800b110:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b116:	9301      	str	r3, [sp, #4]
 800b118:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b11c:	9300      	str	r3, [sp, #0]
 800b11e:	4613      	mov	r3, r2
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f000 f809 	bl	800b13c <http_init_file>
 800b12a:	4603      	mov	r3, r0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3740      	adds	r7, #64	; 0x40
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}
 800b134:	2000d64c 	.word	0x2000d64c
 800b138:	0802758c 	.word	0x0802758c

0800b13c <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b086      	sub	sp, #24
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
 800b148:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d05c      	beq.n	800b20a <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d106      	bne.n	800b166 <http_init_file+0x2a>
 800b158:	4b35      	ldr	r3, [pc, #212]	; (800b230 <http_init_file+0xf4>)
 800b15a:	f640 120b 	movw	r2, #2315	; 0x90b
 800b15e:	4935      	ldr	r1, [pc, #212]	; (800b234 <http_init_file+0xf8>)
 800b160:	4835      	ldr	r0, [pc, #212]	; (800b238 <http_init_file+0xfc>)
 800b162:	f00d fc25 	bl	80189b0 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	68ba      	ldr	r2, [r7, #8]
 800b16a:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	da06      	bge.n	800b18a <http_init_file+0x4e>
 800b17c:	4b2c      	ldr	r3, [pc, #176]	; (800b230 <http_init_file+0xf4>)
 800b17e:	f640 1234 	movw	r2, #2356	; 0x934
 800b182:	492e      	ldr	r1, [pc, #184]	; (800b23c <http_init_file+0x100>)
 800b184:	482c      	ldr	r0, [pc, #176]	; (800b238 <http_init_file+0xfc>)
 800b186:	f00d fc13 	bl	80189b0 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	461a      	mov	r2, r3
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	695b      	ldr	r3, [r3, #20]
 800b1a0:	7c1b      	ldrb	r3, [r3, #16]
 800b1a2:	f003 0301 	and.w	r3, r3, #1
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d106      	bne.n	800b1b8 <http_init_file+0x7c>
 800b1aa:	4b21      	ldr	r3, [pc, #132]	; (800b230 <http_init_file+0xf4>)
 800b1ac:	f640 1243 	movw	r2, #2371	; 0x943
 800b1b0:	4923      	ldr	r1, [pc, #140]	; (800b240 <http_init_file+0x104>)
 800b1b2:	4821      	ldr	r0, [pc, #132]	; (800b238 <http_init_file+0xfc>)
 800b1b4:	f00d fbfc 	bl	80189b0 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d032      	beq.n	800b224 <http_init_file+0xe8>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	695b      	ldr	r3, [r3, #20]
 800b1c2:	7c1b      	ldrb	r3, [r3, #16]
 800b1c4:	f003 0301 	and.w	r3, r3, #1
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d02b      	beq.n	800b224 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6998      	ldr	r0, [r3, #24]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	491b      	ldr	r1, [pc, #108]	; (800b244 <http_init_file+0x108>)
 800b1d8:	f000 f9f8 	bl	800b5cc <lwip_strnstr>
 800b1dc:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d01f      	beq.n	800b224 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	1d1a      	adds	r2, r3, #4
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	699b      	ldr	r3, [r3, #24]
 800b1ec:	1ad3      	subs	r3, r2, r3
 800b1ee:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	699a      	ldr	r2, [r3, #24]
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	441a      	add	r2, r3
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	1ad2      	subs	r2, r2, r3
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	625a      	str	r2, [r3, #36]	; 0x24
 800b208:	e00c      	b.n	800b224 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2200      	movs	r2, #0
 800b20e:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2200      	movs	r2, #0
 800b214:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2200      	movs	r2, #0
 800b220:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3718      	adds	r7, #24
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	0801a524 	.word	0x0801a524
 800b234:	0801a620 	.word	0x0801a620
 800b238:	0801a56c 	.word	0x0801a56c
 800b23c:	0801a634 	.word	0x0801a634
 800b240:	0801a654 	.word	0x0801a654
 800b244:	0801a618 	.word	0x0801a618

0800b248 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	460b      	mov	r3, r1
 800b252:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d002      	beq.n	800b264 <http_err+0x1c>
    http_state_free(hs);
 800b25e:	68f8      	ldr	r0, [r7, #12]
 800b260:	f7ff fc02 	bl	800aa68 <http_state_free>
  }
}
 800b264:	bf00      	nop
 800b266:	3710      	adds	r7, #16
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b086      	sub	sp, #24
 800b270:	af00      	add	r7, sp, #0
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	4613      	mov	r3, r2
 800b278:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d101      	bne.n	800b288 <http_sent+0x1c>
    return ERR_OK;
 800b284:	2300      	movs	r3, #0
 800b286:	e008      	b.n	800b29a <http_sent+0x2e>
  }

  hs->retries = 0;
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800b290:	6979      	ldr	r1, [r7, #20]
 800b292:	68b8      	ldr	r0, [r7, #8]
 800b294:	f7ff fd25 	bl	800ace2 <http_send>

  return ERR_OK;
 800b298:	2300      	movs	r3, #0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3718      	adds	r7, #24
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b084      	sub	sp, #16
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
 800b2aa:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d107      	bne.n	800b2c6 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	6838      	ldr	r0, [r7, #0]
 800b2ba:	f7ff fc91 	bl	800abe0 <http_close_conn>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	e021      	b.n	800b30a <http_poll+0x68>
  } else {
    hs->retries++;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	b2da      	uxtb	r2, r3
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2dc:	2b04      	cmp	r3, #4
 800b2de:	d105      	bne.n	800b2ec <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800b2e0:	68f9      	ldr	r1, [r7, #12]
 800b2e2:	6838      	ldr	r0, [r7, #0]
 800b2e4:	f7ff fc7c 	bl	800abe0 <http_close_conn>
      return ERR_OK;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	e00e      	b.n	800b30a <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	695b      	ldr	r3, [r3, #20]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d009      	beq.n	800b308 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800b2f4:	68f9      	ldr	r1, [r7, #12]
 800b2f6:	6838      	ldr	r0, [r7, #0]
 800b2f8:	f7ff fcf3 	bl	800ace2 <http_send>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d002      	beq.n	800b308 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800b302:	6838      	ldr	r0, [r7, #0]
 800b304:	f007 f952 	bl	80125ac <tcp_output>
      }
    }
  }

  return ERR_OK;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
	...

0800b314 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b086      	sub	sp, #24
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	607a      	str	r2, [r7, #4]
 800b320:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800b326:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d105      	bne.n	800b33a <http_recv+0x26>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d002      	beq.n	800b33a <http_recv+0x26>
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d111      	bne.n	800b35e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d008      	beq.n	800b352 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	891b      	ldrh	r3, [r3, #8]
 800b344:	4619      	mov	r1, r3
 800b346:	68b8      	ldr	r0, [r7, #8]
 800b348:	f002 fd20 	bl	800dd8c <tcp_recved>
      pbuf_free(p);
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f001 fd43 	bl	800cdd8 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800b352:	6979      	ldr	r1, [r7, #20]
 800b354:	68b8      	ldr	r0, [r7, #8]
 800b356:	f7ff fc43 	bl	800abe0 <http_close_conn>
    return ERR_OK;
 800b35a:	2300      	movs	r3, #0
 800b35c:	e055      	b.n	800b40a <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	891b      	ldrh	r3, [r3, #8]
 800b362:	4619      	mov	r1, r3
 800b364:	68b8      	ldr	r0, [r7, #8]
 800b366:	f002 fd11 	bl	800dd8c <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	695b      	ldr	r3, [r3, #20]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d147      	bne.n	800b402 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800b372:	68ba      	ldr	r2, [r7, #8]
 800b374:	6979      	ldr	r1, [r7, #20]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f7ff fd30 	bl	800addc <http_parse_request>
 800b37c:	4603      	mov	r3, r0
 800b37e:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800b380:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d015      	beq.n	800b3b4 <http_recv+0xa0>
 800b388:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b38c:	f113 0f05 	cmn.w	r3, #5
 800b390:	d010      	beq.n	800b3b4 <http_recv+0xa0>
 800b392:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b396:	f113 0f10 	cmn.w	r3, #16
 800b39a:	d00b      	beq.n	800b3b4 <http_recv+0xa0>
 800b39c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b3a0:	f113 0f08 	cmn.w	r3, #8
 800b3a4:	d006      	beq.n	800b3b4 <http_recv+0xa0>
 800b3a6:	4b1b      	ldr	r3, [pc, #108]	; (800b414 <http_recv+0x100>)
 800b3a8:	f640 2204 	movw	r2, #2564	; 0xa04
 800b3ac:	491a      	ldr	r1, [pc, #104]	; (800b418 <http_recv+0x104>)
 800b3ae:	481b      	ldr	r0, [pc, #108]	; (800b41c <http_recv+0x108>)
 800b3b0:	f00d fafe 	bl	80189b0 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800b3b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b3b8:	f113 0f05 	cmn.w	r3, #5
 800b3bc:	d00b      	beq.n	800b3d6 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d007      	beq.n	800b3d6 <http_recv+0xc2>
          pbuf_free(hs->req);
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	6a1b      	ldr	r3, [r3, #32]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f001 fd04 	bl	800cdd8 <pbuf_free>
          hs->req = NULL;
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f001 fcfe 	bl	800cdd8 <pbuf_free>
      if (parsed == ERR_OK) {
 800b3dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d104      	bne.n	800b3ee <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800b3e4:	6979      	ldr	r1, [r7, #20]
 800b3e6:	68b8      	ldr	r0, [r7, #8]
 800b3e8:	f7ff fc7b 	bl	800ace2 <http_send>
 800b3ec:	e00c      	b.n	800b408 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800b3ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b3f2:	f113 0f10 	cmn.w	r3, #16
 800b3f6:	d107      	bne.n	800b408 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800b3f8:	6979      	ldr	r1, [r7, #20]
 800b3fa:	68b8      	ldr	r0, [r7, #8]
 800b3fc:	f7ff fbf0 	bl	800abe0 <http_close_conn>
 800b400:	e002      	b.n	800b408 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f001 fce8 	bl	800cdd8 <pbuf_free>
    }
  }
  return ERR_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3718      	adds	r7, #24
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	0801a524 	.word	0x0801a524
 800b418:	0801a680 	.word	0x0801a680
 800b41c:	0801a56c 	.word	0x0801a56c

0800b420 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b086      	sub	sp, #24
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	4613      	mov	r3, r2
 800b42c:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800b42e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d102      	bne.n	800b43c <http_accept+0x1c>
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d102      	bne.n	800b442 <http_accept+0x22>
    return ERR_VAL;
 800b43c:	f06f 0305 	mvn.w	r3, #5
 800b440:	e025      	b.n	800b48e <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b442:	2101      	movs	r1, #1
 800b444:	68b8      	ldr	r0, [r7, #8]
 800b446:	f003 f985 	bl	800e754 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800b44a:	f7ff fadb 	bl	800aa04 <http_state_alloc>
 800b44e:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d102      	bne.n	800b45c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800b456:	f04f 33ff 	mov.w	r3, #4294967295
 800b45a:	e018      	b.n	800b48e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	68ba      	ldr	r2, [r7, #8]
 800b460:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800b462:	6979      	ldr	r1, [r7, #20]
 800b464:	68b8      	ldr	r0, [r7, #8]
 800b466:	f003 fb75 	bl	800eb54 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800b46a:	490b      	ldr	r1, [pc, #44]	; (800b498 <http_accept+0x78>)
 800b46c:	68b8      	ldr	r0, [r7, #8]
 800b46e:	f003 fb83 	bl	800eb78 <tcp_recv>
  altcp_err(pcb, http_err);
 800b472:	490a      	ldr	r1, [pc, #40]	; (800b49c <http_accept+0x7c>)
 800b474:	68b8      	ldr	r0, [r7, #8]
 800b476:	f003 fbc3 	bl	800ec00 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b47a:	2204      	movs	r2, #4
 800b47c:	4908      	ldr	r1, [pc, #32]	; (800b4a0 <http_accept+0x80>)
 800b47e:	68b8      	ldr	r0, [r7, #8]
 800b480:	f003 fbf8 	bl	800ec74 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800b484:	4907      	ldr	r1, [pc, #28]	; (800b4a4 <http_accept+0x84>)
 800b486:	68b8      	ldr	r0, [r7, #8]
 800b488:	f003 fb98 	bl	800ebbc <tcp_sent>

  return ERR_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3718      	adds	r7, #24
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	0800b315 	.word	0x0800b315
 800b49c:	0800b249 	.word	0x0800b249
 800b4a0:	0800b2a3 	.word	0x0800b2a3
 800b4a4:	0800b26d 	.word	0x0800b26d

0800b4a8 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d029      	beq.n	800b50e <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800b4ba:	2101      	movs	r1, #1
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f003 f949 	bl	800e754 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800b4c2:	887b      	ldrh	r3, [r7, #2]
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	4914      	ldr	r1, [pc, #80]	; (800b518 <httpd_init_pcb+0x70>)
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f002 fa91 	bl	800d9f0 <tcp_bind>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800b4d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d006      	beq.n	800b4e8 <httpd_init_pcb+0x40>
 800b4da:	4b10      	ldr	r3, [pc, #64]	; (800b51c <httpd_init_pcb+0x74>)
 800b4dc:	f640 2257 	movw	r2, #2647	; 0xa57
 800b4e0:	490f      	ldr	r1, [pc, #60]	; (800b520 <httpd_init_pcb+0x78>)
 800b4e2:	4810      	ldr	r0, [pc, #64]	; (800b524 <httpd_init_pcb+0x7c>)
 800b4e4:	f00d fa64 	bl	80189b0 <iprintf>
    pcb = altcp_listen(pcb);
 800b4e8:	21ff      	movs	r1, #255	; 0xff
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f002 fb38 	bl	800db60 <tcp_listen_with_backlog>
 800b4f0:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d106      	bne.n	800b506 <httpd_init_pcb+0x5e>
 800b4f8:	4b08      	ldr	r3, [pc, #32]	; (800b51c <httpd_init_pcb+0x74>)
 800b4fa:	f640 2259 	movw	r2, #2649	; 0xa59
 800b4fe:	490a      	ldr	r1, [pc, #40]	; (800b528 <httpd_init_pcb+0x80>)
 800b500:	4808      	ldr	r0, [pc, #32]	; (800b524 <httpd_init_pcb+0x7c>)
 800b502:	f00d fa55 	bl	80189b0 <iprintf>
    altcp_accept(pcb, http_accept);
 800b506:	4909      	ldr	r1, [pc, #36]	; (800b52c <httpd_init_pcb+0x84>)
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f003 fb9b 	bl	800ec44 <tcp_accept>
  }
}
 800b50e:	bf00      	nop
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	080276d4 	.word	0x080276d4
 800b51c:	0801a524 	.word	0x0801a524
 800b520:	0801a6ac 	.word	0x0801a6ac
 800b524:	0801a56c 	.word	0x0801a56c
 800b528:	0801a6c8 	.word	0x0801a6c8
 800b52c:	0800b421 	.word	0x0800b421

0800b530 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800b536:	202e      	movs	r0, #46	; 0x2e
 800b538:	f003 fafe 	bl	800eb38 <tcp_new_ip_type>
 800b53c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d106      	bne.n	800b552 <httpd_init+0x22>
 800b544:	4b07      	ldr	r3, [pc, #28]	; (800b564 <httpd_init+0x34>)
 800b546:	f640 2272 	movw	r2, #2674	; 0xa72
 800b54a:	4907      	ldr	r1, [pc, #28]	; (800b568 <httpd_init+0x38>)
 800b54c:	4807      	ldr	r0, [pc, #28]	; (800b56c <httpd_init+0x3c>)
 800b54e:	f00d fa2f 	bl	80189b0 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800b552:	2150      	movs	r1, #80	; 0x50
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f7ff ffa7 	bl	800b4a8 <httpd_init_pcb>
}
 800b55a:	bf00      	nop
 800b55c:	3708      	adds	r7, #8
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	0801a524 	.word	0x0801a524
 800b568:	0801a6e8 	.word	0x0801a6e8
 800b56c:	0801a56c 	.word	0x0801a56c

0800b570 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	4603      	mov	r3, r0
 800b578:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b57a:	88fb      	ldrh	r3, [r7, #6]
 800b57c:	021b      	lsls	r3, r3, #8
 800b57e:	b21a      	sxth	r2, r3
 800b580:	88fb      	ldrh	r3, [r7, #6]
 800b582:	0a1b      	lsrs	r3, r3, #8
 800b584:	b29b      	uxth	r3, r3
 800b586:	b21b      	sxth	r3, r3
 800b588:	4313      	orrs	r3, r2
 800b58a:	b21b      	sxth	r3, r3
 800b58c:	b29b      	uxth	r3, r3
}
 800b58e:	4618      	mov	r0, r3
 800b590:	370c      	adds	r7, #12
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr

0800b59a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b59a:	b480      	push	{r7}
 800b59c:	b083      	sub	sp, #12
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	061a      	lsls	r2, r3, #24
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	021b      	lsls	r3, r3, #8
 800b5aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b5ae:	431a      	orrs	r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	0a1b      	lsrs	r3, r3, #8
 800b5b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b5b8:	431a      	orrs	r2, r3
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	0e1b      	lsrs	r3, r3, #24
 800b5be:	4313      	orrs	r3, r2
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b086      	sub	sp, #24
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800b5d8:	68b8      	ldr	r0, [r7, #8]
 800b5da:	f7f4 fe13 	bl	8000204 <strlen>
 800b5de:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d101      	bne.n	800b5ea <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	e022      	b.n	800b630 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	617b      	str	r3, [r7, #20]
 800b5ee:	e012      	b.n	800b616 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	781a      	ldrb	r2, [r3, #0]
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d109      	bne.n	800b610 <lwip_strnstr+0x44>
 800b5fc:	693a      	ldr	r2, [r7, #16]
 800b5fe:	68b9      	ldr	r1, [r7, #8]
 800b600:	6978      	ldr	r0, [r7, #20]
 800b602:	f00d fa4f 	bl	8018aa4 <strncmp>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d101      	bne.n	800b610 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	e00f      	b.n	800b630 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	3301      	adds	r3, #1
 800b614:	617b      	str	r3, [r7, #20]
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d007      	beq.n	800b62e <lwip_strnstr+0x62>
 800b61e:	697a      	ldr	r2, [r7, #20]
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	441a      	add	r2, r3
 800b624:	68f9      	ldr	r1, [r7, #12]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	440b      	add	r3, r1
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d9e0      	bls.n	800b5f0 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800b62e:	2300      	movs	r3, #0
}
 800b630:	4618      	mov	r0, r3
 800b632:	3718      	adds	r7, #24
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b63e:	2300      	movs	r3, #0
 800b640:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b642:	f00d f83d 	bl	80186c0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b646:	f000 f8d5 	bl	800b7f4 <mem_init>
  memp_init();
 800b64a:	f000 fc31 	bl	800beb0 <memp_init>
  pbuf_init();
  netif_init();
 800b64e:	f000 fd3d 	bl	800c0cc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b652:	f008 f89b 	bl	801378c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b656:	f001 fe69 	bl	800d32c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b65a:	f007 ffdd 	bl	8013618 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b65e:	bf00      	nop
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
	...

0800b668 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	4603      	mov	r3, r0
 800b670:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b672:	4b05      	ldr	r3, [pc, #20]	; (800b688 <ptr_to_mem+0x20>)
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	88fb      	ldrh	r3, [r7, #6]
 800b678:	4413      	add	r3, r2
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	370c      	adds	r7, #12
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr
 800b686:	bf00      	nop
 800b688:	2000dcf8 	.word	0x2000dcf8

0800b68c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b694:	4b05      	ldr	r3, [pc, #20]	; (800b6ac <mem_to_ptr+0x20>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	1ad3      	subs	r3, r2, r3
 800b69c:	b29b      	uxth	r3, r3
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	370c      	adds	r7, #12
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop
 800b6ac:	2000dcf8 	.word	0x2000dcf8

0800b6b0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b6b0:	b590      	push	{r4, r7, lr}
 800b6b2:	b085      	sub	sp, #20
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b6b8:	4b45      	ldr	r3, [pc, #276]	; (800b7d0 <plug_holes+0x120>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	687a      	ldr	r2, [r7, #4]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d206      	bcs.n	800b6d0 <plug_holes+0x20>
 800b6c2:	4b44      	ldr	r3, [pc, #272]	; (800b7d4 <plug_holes+0x124>)
 800b6c4:	f240 12df 	movw	r2, #479	; 0x1df
 800b6c8:	4943      	ldr	r1, [pc, #268]	; (800b7d8 <plug_holes+0x128>)
 800b6ca:	4844      	ldr	r0, [pc, #272]	; (800b7dc <plug_holes+0x12c>)
 800b6cc:	f00d f970 	bl	80189b0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b6d0:	4b43      	ldr	r3, [pc, #268]	; (800b7e0 <plug_holes+0x130>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d306      	bcc.n	800b6e8 <plug_holes+0x38>
 800b6da:	4b3e      	ldr	r3, [pc, #248]	; (800b7d4 <plug_holes+0x124>)
 800b6dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b6e0:	4940      	ldr	r1, [pc, #256]	; (800b7e4 <plug_holes+0x134>)
 800b6e2:	483e      	ldr	r0, [pc, #248]	; (800b7dc <plug_holes+0x12c>)
 800b6e4:	f00d f964 	bl	80189b0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	791b      	ldrb	r3, [r3, #4]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d006      	beq.n	800b6fe <plug_holes+0x4e>
 800b6f0:	4b38      	ldr	r3, [pc, #224]	; (800b7d4 <plug_holes+0x124>)
 800b6f2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b6f6:	493c      	ldr	r1, [pc, #240]	; (800b7e8 <plug_holes+0x138>)
 800b6f8:	4838      	ldr	r0, [pc, #224]	; (800b7dc <plug_holes+0x12c>)
 800b6fa:	f00d f959 	bl	80189b0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	881b      	ldrh	r3, [r3, #0]
 800b702:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b706:	d906      	bls.n	800b716 <plug_holes+0x66>
 800b708:	4b32      	ldr	r3, [pc, #200]	; (800b7d4 <plug_holes+0x124>)
 800b70a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b70e:	4937      	ldr	r1, [pc, #220]	; (800b7ec <plug_holes+0x13c>)
 800b710:	4832      	ldr	r0, [pc, #200]	; (800b7dc <plug_holes+0x12c>)
 800b712:	f00d f94d 	bl	80189b0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	881b      	ldrh	r3, [r3, #0]
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7ff ffa4 	bl	800b668 <ptr_to_mem>
 800b720:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	429a      	cmp	r2, r3
 800b728:	d024      	beq.n	800b774 <plug_holes+0xc4>
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	791b      	ldrb	r3, [r3, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d120      	bne.n	800b774 <plug_holes+0xc4>
 800b732:	4b2b      	ldr	r3, [pc, #172]	; (800b7e0 <plug_holes+0x130>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	68fa      	ldr	r2, [r7, #12]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d01b      	beq.n	800b774 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b73c:	4b2c      	ldr	r3, [pc, #176]	; (800b7f0 <plug_holes+0x140>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	429a      	cmp	r2, r3
 800b744:	d102      	bne.n	800b74c <plug_holes+0x9c>
      lfree = mem;
 800b746:	4a2a      	ldr	r2, [pc, #168]	; (800b7f0 <plug_holes+0x140>)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	881a      	ldrh	r2, [r3, #0]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	881b      	ldrh	r3, [r3, #0]
 800b758:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b75c:	d00a      	beq.n	800b774 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	881b      	ldrh	r3, [r3, #0]
 800b762:	4618      	mov	r0, r3
 800b764:	f7ff ff80 	bl	800b668 <ptr_to_mem>
 800b768:	4604      	mov	r4, r0
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f7ff ff8e 	bl	800b68c <mem_to_ptr>
 800b770:	4603      	mov	r3, r0
 800b772:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	885b      	ldrh	r3, [r3, #2]
 800b778:	4618      	mov	r0, r3
 800b77a:	f7ff ff75 	bl	800b668 <ptr_to_mem>
 800b77e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b780:	68ba      	ldr	r2, [r7, #8]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	429a      	cmp	r2, r3
 800b786:	d01f      	beq.n	800b7c8 <plug_holes+0x118>
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	791b      	ldrb	r3, [r3, #4]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d11b      	bne.n	800b7c8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b790:	4b17      	ldr	r3, [pc, #92]	; (800b7f0 <plug_holes+0x140>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	429a      	cmp	r2, r3
 800b798:	d102      	bne.n	800b7a0 <plug_holes+0xf0>
      lfree = pmem;
 800b79a:	4a15      	ldr	r2, [pc, #84]	; (800b7f0 <plug_holes+0x140>)
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	881a      	ldrh	r2, [r3, #0]
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	881b      	ldrh	r3, [r3, #0]
 800b7ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b7b0:	d00a      	beq.n	800b7c8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	881b      	ldrh	r3, [r3, #0]
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7ff ff56 	bl	800b668 <ptr_to_mem>
 800b7bc:	4604      	mov	r4, r0
 800b7be:	68b8      	ldr	r0, [r7, #8]
 800b7c0:	f7ff ff64 	bl	800b68c <mem_to_ptr>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b7c8:	bf00      	nop
 800b7ca:	3714      	adds	r7, #20
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd90      	pop	{r4, r7, pc}
 800b7d0:	2000dcf8 	.word	0x2000dcf8
 800b7d4:	0801a704 	.word	0x0801a704
 800b7d8:	0801a734 	.word	0x0801a734
 800b7dc:	0801a74c 	.word	0x0801a74c
 800b7e0:	2000dcfc 	.word	0x2000dcfc
 800b7e4:	0801a774 	.word	0x0801a774
 800b7e8:	0801a790 	.word	0x0801a790
 800b7ec:	0801a7ac 	.word	0x0801a7ac
 800b7f0:	2000dd04 	.word	0x2000dd04

0800b7f4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b7fa:	4b1f      	ldr	r3, [pc, #124]	; (800b878 <mem_init+0x84>)
 800b7fc:	3303      	adds	r3, #3
 800b7fe:	f023 0303 	bic.w	r3, r3, #3
 800b802:	461a      	mov	r2, r3
 800b804:	4b1d      	ldr	r3, [pc, #116]	; (800b87c <mem_init+0x88>)
 800b806:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b808:	4b1c      	ldr	r3, [pc, #112]	; (800b87c <mem_init+0x88>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b814:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2200      	movs	r2, #0
 800b820:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b822:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b826:	f7ff ff1f 	bl	800b668 <ptr_to_mem>
 800b82a:	4603      	mov	r3, r0
 800b82c:	4a14      	ldr	r2, [pc, #80]	; (800b880 <mem_init+0x8c>)
 800b82e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b830:	4b13      	ldr	r3, [pc, #76]	; (800b880 <mem_init+0x8c>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2201      	movs	r2, #1
 800b836:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b838:	4b11      	ldr	r3, [pc, #68]	; (800b880 <mem_init+0x8c>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b840:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b842:	4b0f      	ldr	r3, [pc, #60]	; (800b880 <mem_init+0x8c>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b84a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b84c:	4b0b      	ldr	r3, [pc, #44]	; (800b87c <mem_init+0x88>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a0c      	ldr	r2, [pc, #48]	; (800b884 <mem_init+0x90>)
 800b852:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b854:	480c      	ldr	r0, [pc, #48]	; (800b888 <mem_init+0x94>)
 800b856:	f00c ff41 	bl	80186dc <sys_mutex_new>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d006      	beq.n	800b86e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b860:	4b0a      	ldr	r3, [pc, #40]	; (800b88c <mem_init+0x98>)
 800b862:	f240 221f 	movw	r2, #543	; 0x21f
 800b866:	490a      	ldr	r1, [pc, #40]	; (800b890 <mem_init+0x9c>)
 800b868:	480a      	ldr	r0, [pc, #40]	; (800b894 <mem_init+0xa0>)
 800b86a:	f00d f8a1 	bl	80189b0 <iprintf>
  }
}
 800b86e:	bf00      	nop
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	2000d6a4 	.word	0x2000d6a4
 800b87c:	2000dcf8 	.word	0x2000dcf8
 800b880:	2000dcfc 	.word	0x2000dcfc
 800b884:	2000dd04 	.word	0x2000dd04
 800b888:	2000dd00 	.word	0x2000dd00
 800b88c:	0801a704 	.word	0x0801a704
 800b890:	0801a7d8 	.word	0x0801a7d8
 800b894:	0801a74c 	.word	0x0801a74c

0800b898 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b086      	sub	sp, #24
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f7ff fef3 	bl	800b68c <mem_to_ptr>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	881b      	ldrh	r3, [r3, #0]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7ff feda 	bl	800b668 <ptr_to_mem>
 800b8b4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	885b      	ldrh	r3, [r3, #2]
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7ff fed4 	bl	800b668 <ptr_to_mem>
 800b8c0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	881b      	ldrh	r3, [r3, #0]
 800b8c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8ca:	d818      	bhi.n	800b8fe <mem_link_valid+0x66>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	885b      	ldrh	r3, [r3, #2]
 800b8d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8d4:	d813      	bhi.n	800b8fe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b8da:	8afa      	ldrh	r2, [r7, #22]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d004      	beq.n	800b8ea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	881b      	ldrh	r3, [r3, #0]
 800b8e4:	8afa      	ldrh	r2, [r7, #22]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d109      	bne.n	800b8fe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b8ea:	4b08      	ldr	r3, [pc, #32]	; (800b90c <mem_link_valid+0x74>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b8ee:	693a      	ldr	r2, [r7, #16]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d006      	beq.n	800b902 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	885b      	ldrh	r3, [r3, #2]
 800b8f8:	8afa      	ldrh	r2, [r7, #22]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d001      	beq.n	800b902 <mem_link_valid+0x6a>
    return 0;
 800b8fe:	2300      	movs	r3, #0
 800b900:	e000      	b.n	800b904 <mem_link_valid+0x6c>
  }
  return 1;
 800b902:	2301      	movs	r3, #1
}
 800b904:	4618      	mov	r0, r3
 800b906:	3718      	adds	r7, #24
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	2000dcfc 	.word	0x2000dcfc

0800b910 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b088      	sub	sp, #32
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d070      	beq.n	800ba00 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f003 0303 	and.w	r3, r3, #3
 800b924:	2b00      	cmp	r3, #0
 800b926:	d00d      	beq.n	800b944 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b928:	4b37      	ldr	r3, [pc, #220]	; (800ba08 <mem_free+0xf8>)
 800b92a:	f240 2273 	movw	r2, #627	; 0x273
 800b92e:	4937      	ldr	r1, [pc, #220]	; (800ba0c <mem_free+0xfc>)
 800b930:	4837      	ldr	r0, [pc, #220]	; (800ba10 <mem_free+0x100>)
 800b932:	f00d f83d 	bl	80189b0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b936:	f00c ff2f 	bl	8018798 <sys_arch_protect>
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f00c ff39 	bl	80187b4 <sys_arch_unprotect>
    return;
 800b942:	e05e      	b.n	800ba02 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	3b08      	subs	r3, #8
 800b948:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b94a:	4b32      	ldr	r3, [pc, #200]	; (800ba14 <mem_free+0x104>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	69fa      	ldr	r2, [r7, #28]
 800b950:	429a      	cmp	r2, r3
 800b952:	d306      	bcc.n	800b962 <mem_free+0x52>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f103 020c 	add.w	r2, r3, #12
 800b95a:	4b2f      	ldr	r3, [pc, #188]	; (800ba18 <mem_free+0x108>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d90d      	bls.n	800b97e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b962:	4b29      	ldr	r3, [pc, #164]	; (800ba08 <mem_free+0xf8>)
 800b964:	f240 227f 	movw	r2, #639	; 0x27f
 800b968:	492c      	ldr	r1, [pc, #176]	; (800ba1c <mem_free+0x10c>)
 800b96a:	4829      	ldr	r0, [pc, #164]	; (800ba10 <mem_free+0x100>)
 800b96c:	f00d f820 	bl	80189b0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b970:	f00c ff12 	bl	8018798 <sys_arch_protect>
 800b974:	6138      	str	r0, [r7, #16]
 800b976:	6938      	ldr	r0, [r7, #16]
 800b978:	f00c ff1c 	bl	80187b4 <sys_arch_unprotect>
    return;
 800b97c:	e041      	b.n	800ba02 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b97e:	4828      	ldr	r0, [pc, #160]	; (800ba20 <mem_free+0x110>)
 800b980:	f00c fec8 	bl	8018714 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	791b      	ldrb	r3, [r3, #4]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d110      	bne.n	800b9ae <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b98c:	4b1e      	ldr	r3, [pc, #120]	; (800ba08 <mem_free+0xf8>)
 800b98e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b992:	4924      	ldr	r1, [pc, #144]	; (800ba24 <mem_free+0x114>)
 800b994:	481e      	ldr	r0, [pc, #120]	; (800ba10 <mem_free+0x100>)
 800b996:	f00d f80b 	bl	80189b0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b99a:	4821      	ldr	r0, [pc, #132]	; (800ba20 <mem_free+0x110>)
 800b99c:	f00c fec9 	bl	8018732 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b9a0:	f00c fefa 	bl	8018798 <sys_arch_protect>
 800b9a4:	6178      	str	r0, [r7, #20]
 800b9a6:	6978      	ldr	r0, [r7, #20]
 800b9a8:	f00c ff04 	bl	80187b4 <sys_arch_unprotect>
    return;
 800b9ac:	e029      	b.n	800ba02 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b9ae:	69f8      	ldr	r0, [r7, #28]
 800b9b0:	f7ff ff72 	bl	800b898 <mem_link_valid>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d110      	bne.n	800b9dc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b9ba:	4b13      	ldr	r3, [pc, #76]	; (800ba08 <mem_free+0xf8>)
 800b9bc:	f240 2295 	movw	r2, #661	; 0x295
 800b9c0:	4919      	ldr	r1, [pc, #100]	; (800ba28 <mem_free+0x118>)
 800b9c2:	4813      	ldr	r0, [pc, #76]	; (800ba10 <mem_free+0x100>)
 800b9c4:	f00c fff4 	bl	80189b0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b9c8:	4815      	ldr	r0, [pc, #84]	; (800ba20 <mem_free+0x110>)
 800b9ca:	f00c feb2 	bl	8018732 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b9ce:	f00c fee3 	bl	8018798 <sys_arch_protect>
 800b9d2:	61b8      	str	r0, [r7, #24]
 800b9d4:	69b8      	ldr	r0, [r7, #24]
 800b9d6:	f00c feed 	bl	80187b4 <sys_arch_unprotect>
    return;
 800b9da:	e012      	b.n	800ba02 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b9e2:	4b12      	ldr	r3, [pc, #72]	; (800ba2c <mem_free+0x11c>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	69fa      	ldr	r2, [r7, #28]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d202      	bcs.n	800b9f2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b9ec:	4a0f      	ldr	r2, [pc, #60]	; (800ba2c <mem_free+0x11c>)
 800b9ee:	69fb      	ldr	r3, [r7, #28]
 800b9f0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b9f2:	69f8      	ldr	r0, [r7, #28]
 800b9f4:	f7ff fe5c 	bl	800b6b0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b9f8:	4809      	ldr	r0, [pc, #36]	; (800ba20 <mem_free+0x110>)
 800b9fa:	f00c fe9a 	bl	8018732 <sys_mutex_unlock>
 800b9fe:	e000      	b.n	800ba02 <mem_free+0xf2>
    return;
 800ba00:	bf00      	nop
}
 800ba02:	3720      	adds	r7, #32
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	0801a704 	.word	0x0801a704
 800ba0c:	0801a7f4 	.word	0x0801a7f4
 800ba10:	0801a74c 	.word	0x0801a74c
 800ba14:	2000dcf8 	.word	0x2000dcf8
 800ba18:	2000dcfc 	.word	0x2000dcfc
 800ba1c:	0801a818 	.word	0x0801a818
 800ba20:	2000dd00 	.word	0x2000dd00
 800ba24:	0801a834 	.word	0x0801a834
 800ba28:	0801a85c 	.word	0x0801a85c
 800ba2c:	2000dd04 	.word	0x2000dd04

0800ba30 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b088      	sub	sp, #32
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	460b      	mov	r3, r1
 800ba3a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ba3c:	887b      	ldrh	r3, [r7, #2]
 800ba3e:	3303      	adds	r3, #3
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	f023 0303 	bic.w	r3, r3, #3
 800ba46:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ba48:	8bfb      	ldrh	r3, [r7, #30]
 800ba4a:	2b0b      	cmp	r3, #11
 800ba4c:	d801      	bhi.n	800ba52 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ba4e:	230c      	movs	r3, #12
 800ba50:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ba52:	8bfb      	ldrh	r3, [r7, #30]
 800ba54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba58:	d803      	bhi.n	800ba62 <mem_trim+0x32>
 800ba5a:	8bfa      	ldrh	r2, [r7, #30]
 800ba5c:	887b      	ldrh	r3, [r7, #2]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d201      	bcs.n	800ba66 <mem_trim+0x36>
    return NULL;
 800ba62:	2300      	movs	r3, #0
 800ba64:	e0d8      	b.n	800bc18 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ba66:	4b6e      	ldr	r3, [pc, #440]	; (800bc20 <mem_trim+0x1f0>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d304      	bcc.n	800ba7a <mem_trim+0x4a>
 800ba70:	4b6c      	ldr	r3, [pc, #432]	; (800bc24 <mem_trim+0x1f4>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d306      	bcc.n	800ba88 <mem_trim+0x58>
 800ba7a:	4b6b      	ldr	r3, [pc, #428]	; (800bc28 <mem_trim+0x1f8>)
 800ba7c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ba80:	496a      	ldr	r1, [pc, #424]	; (800bc2c <mem_trim+0x1fc>)
 800ba82:	486b      	ldr	r0, [pc, #428]	; (800bc30 <mem_trim+0x200>)
 800ba84:	f00c ff94 	bl	80189b0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ba88:	4b65      	ldr	r3, [pc, #404]	; (800bc20 <mem_trim+0x1f0>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d304      	bcc.n	800ba9c <mem_trim+0x6c>
 800ba92:	4b64      	ldr	r3, [pc, #400]	; (800bc24 <mem_trim+0x1f4>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d307      	bcc.n	800baac <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ba9c:	f00c fe7c 	bl	8018798 <sys_arch_protect>
 800baa0:	60b8      	str	r0, [r7, #8]
 800baa2:	68b8      	ldr	r0, [r7, #8]
 800baa4:	f00c fe86 	bl	80187b4 <sys_arch_unprotect>
    return rmem;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	e0b5      	b.n	800bc18 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	3b08      	subs	r3, #8
 800bab0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bab2:	69b8      	ldr	r0, [r7, #24]
 800bab4:	f7ff fdea 	bl	800b68c <mem_to_ptr>
 800bab8:	4603      	mov	r3, r0
 800baba:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800babc:	69bb      	ldr	r3, [r7, #24]
 800babe:	881a      	ldrh	r2, [r3, #0]
 800bac0:	8afb      	ldrh	r3, [r7, #22]
 800bac2:	1ad3      	subs	r3, r2, r3
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	3b08      	subs	r3, #8
 800bac8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800baca:	8bfa      	ldrh	r2, [r7, #30]
 800bacc:	8abb      	ldrh	r3, [r7, #20]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d906      	bls.n	800bae0 <mem_trim+0xb0>
 800bad2:	4b55      	ldr	r3, [pc, #340]	; (800bc28 <mem_trim+0x1f8>)
 800bad4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bad8:	4956      	ldr	r1, [pc, #344]	; (800bc34 <mem_trim+0x204>)
 800bada:	4855      	ldr	r0, [pc, #340]	; (800bc30 <mem_trim+0x200>)
 800badc:	f00c ff68 	bl	80189b0 <iprintf>
  if (newsize > size) {
 800bae0:	8bfa      	ldrh	r2, [r7, #30]
 800bae2:	8abb      	ldrh	r3, [r7, #20]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d901      	bls.n	800baec <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bae8:	2300      	movs	r3, #0
 800baea:	e095      	b.n	800bc18 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800baec:	8bfa      	ldrh	r2, [r7, #30]
 800baee:	8abb      	ldrh	r3, [r7, #20]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d101      	bne.n	800baf8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	e08f      	b.n	800bc18 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800baf8:	484f      	ldr	r0, [pc, #316]	; (800bc38 <mem_trim+0x208>)
 800bafa:	f00c fe0b 	bl	8018714 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	881b      	ldrh	r3, [r3, #0]
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7ff fdb0 	bl	800b668 <ptr_to_mem>
 800bb08:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	791b      	ldrb	r3, [r3, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d13f      	bne.n	800bb92 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	881b      	ldrh	r3, [r3, #0]
 800bb16:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb1a:	d106      	bne.n	800bb2a <mem_trim+0xfa>
 800bb1c:	4b42      	ldr	r3, [pc, #264]	; (800bc28 <mem_trim+0x1f8>)
 800bb1e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bb22:	4946      	ldr	r1, [pc, #280]	; (800bc3c <mem_trim+0x20c>)
 800bb24:	4842      	ldr	r0, [pc, #264]	; (800bc30 <mem_trim+0x200>)
 800bb26:	f00c ff43 	bl	80189b0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	881b      	ldrh	r3, [r3, #0]
 800bb2e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bb30:	8afa      	ldrh	r2, [r7, #22]
 800bb32:	8bfb      	ldrh	r3, [r7, #30]
 800bb34:	4413      	add	r3, r2
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	3308      	adds	r3, #8
 800bb3a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bb3c:	4b40      	ldr	r3, [pc, #256]	; (800bc40 <mem_trim+0x210>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	693a      	ldr	r2, [r7, #16]
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d106      	bne.n	800bb54 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bb46:	89fb      	ldrh	r3, [r7, #14]
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7ff fd8d 	bl	800b668 <ptr_to_mem>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	4a3b      	ldr	r2, [pc, #236]	; (800bc40 <mem_trim+0x210>)
 800bb52:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bb54:	89fb      	ldrh	r3, [r7, #14]
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7ff fd86 	bl	800b668 <ptr_to_mem>
 800bb5c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	2200      	movs	r2, #0
 800bb62:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	89ba      	ldrh	r2, [r7, #12]
 800bb68:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	8afa      	ldrh	r2, [r7, #22]
 800bb6e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bb70:	69bb      	ldr	r3, [r7, #24]
 800bb72:	89fa      	ldrh	r2, [r7, #14]
 800bb74:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	881b      	ldrh	r3, [r3, #0]
 800bb7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb7e:	d047      	beq.n	800bc10 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	881b      	ldrh	r3, [r3, #0]
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7ff fd6f 	bl	800b668 <ptr_to_mem>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	89fb      	ldrh	r3, [r7, #14]
 800bb8e:	8053      	strh	r3, [r2, #2]
 800bb90:	e03e      	b.n	800bc10 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bb92:	8bfb      	ldrh	r3, [r7, #30]
 800bb94:	f103 0214 	add.w	r2, r3, #20
 800bb98:	8abb      	ldrh	r3, [r7, #20]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d838      	bhi.n	800bc10 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bb9e:	8afa      	ldrh	r2, [r7, #22]
 800bba0:	8bfb      	ldrh	r3, [r7, #30]
 800bba2:	4413      	add	r3, r2
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	3308      	adds	r3, #8
 800bba8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bbaa:	69bb      	ldr	r3, [r7, #24]
 800bbac:	881b      	ldrh	r3, [r3, #0]
 800bbae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bbb2:	d106      	bne.n	800bbc2 <mem_trim+0x192>
 800bbb4:	4b1c      	ldr	r3, [pc, #112]	; (800bc28 <mem_trim+0x1f8>)
 800bbb6:	f240 3216 	movw	r2, #790	; 0x316
 800bbba:	4920      	ldr	r1, [pc, #128]	; (800bc3c <mem_trim+0x20c>)
 800bbbc:	481c      	ldr	r0, [pc, #112]	; (800bc30 <mem_trim+0x200>)
 800bbbe:	f00c fef7 	bl	80189b0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bbc2:	89fb      	ldrh	r3, [r7, #14]
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7ff fd4f 	bl	800b668 <ptr_to_mem>
 800bbca:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bbcc:	4b1c      	ldr	r3, [pc, #112]	; (800bc40 <mem_trim+0x210>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	693a      	ldr	r2, [r7, #16]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d202      	bcs.n	800bbdc <mem_trim+0x1ac>
      lfree = mem2;
 800bbd6:	4a1a      	ldr	r2, [pc, #104]	; (800bc40 <mem_trim+0x210>)
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	881a      	ldrh	r2, [r3, #0]
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	8afa      	ldrh	r2, [r7, #22]
 800bbee:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	89fa      	ldrh	r2, [r7, #14]
 800bbf4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	881b      	ldrh	r3, [r3, #0]
 800bbfa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bbfe:	d007      	beq.n	800bc10 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	881b      	ldrh	r3, [r3, #0]
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7ff fd2f 	bl	800b668 <ptr_to_mem>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	89fb      	ldrh	r3, [r7, #14]
 800bc0e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bc10:	4809      	ldr	r0, [pc, #36]	; (800bc38 <mem_trim+0x208>)
 800bc12:	f00c fd8e 	bl	8018732 <sys_mutex_unlock>
  return rmem;
 800bc16:	687b      	ldr	r3, [r7, #4]
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3720      	adds	r7, #32
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	2000dcf8 	.word	0x2000dcf8
 800bc24:	2000dcfc 	.word	0x2000dcfc
 800bc28:	0801a704 	.word	0x0801a704
 800bc2c:	0801a890 	.word	0x0801a890
 800bc30:	0801a74c 	.word	0x0801a74c
 800bc34:	0801a8a8 	.word	0x0801a8a8
 800bc38:	2000dd00 	.word	0x2000dd00
 800bc3c:	0801a8c8 	.word	0x0801a8c8
 800bc40:	2000dd04 	.word	0x2000dd04

0800bc44 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b088      	sub	sp, #32
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bc4e:	88fb      	ldrh	r3, [r7, #6]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d101      	bne.n	800bc58 <mem_malloc+0x14>
    return NULL;
 800bc54:	2300      	movs	r3, #0
 800bc56:	e0e2      	b.n	800be1e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bc58:	88fb      	ldrh	r3, [r7, #6]
 800bc5a:	3303      	adds	r3, #3
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	f023 0303 	bic.w	r3, r3, #3
 800bc62:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bc64:	8bbb      	ldrh	r3, [r7, #28]
 800bc66:	2b0b      	cmp	r3, #11
 800bc68:	d801      	bhi.n	800bc6e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bc6a:	230c      	movs	r3, #12
 800bc6c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bc6e:	8bbb      	ldrh	r3, [r7, #28]
 800bc70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc74:	d803      	bhi.n	800bc7e <mem_malloc+0x3a>
 800bc76:	8bba      	ldrh	r2, [r7, #28]
 800bc78:	88fb      	ldrh	r3, [r7, #6]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d201      	bcs.n	800bc82 <mem_malloc+0x3e>
    return NULL;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	e0cd      	b.n	800be1e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bc82:	4869      	ldr	r0, [pc, #420]	; (800be28 <mem_malloc+0x1e4>)
 800bc84:	f00c fd46 	bl	8018714 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bc88:	4b68      	ldr	r3, [pc, #416]	; (800be2c <mem_malloc+0x1e8>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7ff fcfd 	bl	800b68c <mem_to_ptr>
 800bc92:	4603      	mov	r3, r0
 800bc94:	83fb      	strh	r3, [r7, #30]
 800bc96:	e0b7      	b.n	800be08 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bc98:	8bfb      	ldrh	r3, [r7, #30]
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7ff fce4 	bl	800b668 <ptr_to_mem>
 800bca0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	791b      	ldrb	r3, [r3, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	f040 80a7 	bne.w	800bdfa <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	881b      	ldrh	r3, [r3, #0]
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	8bfb      	ldrh	r3, [r7, #30]
 800bcb4:	1ad3      	subs	r3, r2, r3
 800bcb6:	f1a3 0208 	sub.w	r2, r3, #8
 800bcba:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	f0c0 809c 	bcc.w	800bdfa <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	881b      	ldrh	r3, [r3, #0]
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	8bfb      	ldrh	r3, [r7, #30]
 800bcca:	1ad3      	subs	r3, r2, r3
 800bccc:	f1a3 0208 	sub.w	r2, r3, #8
 800bcd0:	8bbb      	ldrh	r3, [r7, #28]
 800bcd2:	3314      	adds	r3, #20
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d333      	bcc.n	800bd40 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bcd8:	8bfa      	ldrh	r2, [r7, #30]
 800bcda:	8bbb      	ldrh	r3, [r7, #28]
 800bcdc:	4413      	add	r3, r2
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	3308      	adds	r3, #8
 800bce2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bce4:	8a7b      	ldrh	r3, [r7, #18]
 800bce6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bcea:	d106      	bne.n	800bcfa <mem_malloc+0xb6>
 800bcec:	4b50      	ldr	r3, [pc, #320]	; (800be30 <mem_malloc+0x1ec>)
 800bcee:	f240 3287 	movw	r2, #903	; 0x387
 800bcf2:	4950      	ldr	r1, [pc, #320]	; (800be34 <mem_malloc+0x1f0>)
 800bcf4:	4850      	ldr	r0, [pc, #320]	; (800be38 <mem_malloc+0x1f4>)
 800bcf6:	f00c fe5b 	bl	80189b0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bcfa:	8a7b      	ldrh	r3, [r7, #18]
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7ff fcb3 	bl	800b668 <ptr_to_mem>
 800bd02:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2200      	movs	r2, #0
 800bd08:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	881a      	ldrh	r2, [r3, #0]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	8bfa      	ldrh	r2, [r7, #30]
 800bd16:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	8a7a      	ldrh	r2, [r7, #18]
 800bd1c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	2201      	movs	r2, #1
 800bd22:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	881b      	ldrh	r3, [r3, #0]
 800bd28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd2c:	d00b      	beq.n	800bd46 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	881b      	ldrh	r3, [r3, #0]
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7ff fc98 	bl	800b668 <ptr_to_mem>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	8a7b      	ldrh	r3, [r7, #18]
 800bd3c:	8053      	strh	r3, [r2, #2]
 800bd3e:	e002      	b.n	800bd46 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	2201      	movs	r2, #1
 800bd44:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bd46:	4b39      	ldr	r3, [pc, #228]	; (800be2c <mem_malloc+0x1e8>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	697a      	ldr	r2, [r7, #20]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d127      	bne.n	800bda0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800bd50:	4b36      	ldr	r3, [pc, #216]	; (800be2c <mem_malloc+0x1e8>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bd56:	e005      	b.n	800bd64 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	881b      	ldrh	r3, [r3, #0]
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7ff fc83 	bl	800b668 <ptr_to_mem>
 800bd62:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	791b      	ldrb	r3, [r3, #4]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d004      	beq.n	800bd76 <mem_malloc+0x132>
 800bd6c:	4b33      	ldr	r3, [pc, #204]	; (800be3c <mem_malloc+0x1f8>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	69ba      	ldr	r2, [r7, #24]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d1f0      	bne.n	800bd58 <mem_malloc+0x114>
          }
          lfree = cur;
 800bd76:	4a2d      	ldr	r2, [pc, #180]	; (800be2c <mem_malloc+0x1e8>)
 800bd78:	69bb      	ldr	r3, [r7, #24]
 800bd7a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bd7c:	4b2b      	ldr	r3, [pc, #172]	; (800be2c <mem_malloc+0x1e8>)
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	4b2e      	ldr	r3, [pc, #184]	; (800be3c <mem_malloc+0x1f8>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d00b      	beq.n	800bda0 <mem_malloc+0x15c>
 800bd88:	4b28      	ldr	r3, [pc, #160]	; (800be2c <mem_malloc+0x1e8>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	791b      	ldrb	r3, [r3, #4]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d006      	beq.n	800bda0 <mem_malloc+0x15c>
 800bd92:	4b27      	ldr	r3, [pc, #156]	; (800be30 <mem_malloc+0x1ec>)
 800bd94:	f240 32b5 	movw	r2, #949	; 0x3b5
 800bd98:	4929      	ldr	r1, [pc, #164]	; (800be40 <mem_malloc+0x1fc>)
 800bd9a:	4827      	ldr	r0, [pc, #156]	; (800be38 <mem_malloc+0x1f4>)
 800bd9c:	f00c fe08 	bl	80189b0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bda0:	4821      	ldr	r0, [pc, #132]	; (800be28 <mem_malloc+0x1e4>)
 800bda2:	f00c fcc6 	bl	8018732 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bda6:	8bba      	ldrh	r2, [r7, #28]
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	4413      	add	r3, r2
 800bdac:	3308      	adds	r3, #8
 800bdae:	4a23      	ldr	r2, [pc, #140]	; (800be3c <mem_malloc+0x1f8>)
 800bdb0:	6812      	ldr	r2, [r2, #0]
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d906      	bls.n	800bdc4 <mem_malloc+0x180>
 800bdb6:	4b1e      	ldr	r3, [pc, #120]	; (800be30 <mem_malloc+0x1ec>)
 800bdb8:	f240 32b9 	movw	r2, #953	; 0x3b9
 800bdbc:	4921      	ldr	r1, [pc, #132]	; (800be44 <mem_malloc+0x200>)
 800bdbe:	481e      	ldr	r0, [pc, #120]	; (800be38 <mem_malloc+0x1f4>)
 800bdc0:	f00c fdf6 	bl	80189b0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	f003 0303 	and.w	r3, r3, #3
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d006      	beq.n	800bddc <mem_malloc+0x198>
 800bdce:	4b18      	ldr	r3, [pc, #96]	; (800be30 <mem_malloc+0x1ec>)
 800bdd0:	f240 32bb 	movw	r2, #955	; 0x3bb
 800bdd4:	491c      	ldr	r1, [pc, #112]	; (800be48 <mem_malloc+0x204>)
 800bdd6:	4818      	ldr	r0, [pc, #96]	; (800be38 <mem_malloc+0x1f4>)
 800bdd8:	f00c fdea 	bl	80189b0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	f003 0303 	and.w	r3, r3, #3
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d006      	beq.n	800bdf4 <mem_malloc+0x1b0>
 800bde6:	4b12      	ldr	r3, [pc, #72]	; (800be30 <mem_malloc+0x1ec>)
 800bde8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800bdec:	4917      	ldr	r1, [pc, #92]	; (800be4c <mem_malloc+0x208>)
 800bdee:	4812      	ldr	r0, [pc, #72]	; (800be38 <mem_malloc+0x1f4>)
 800bdf0:	f00c fdde 	bl	80189b0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	3308      	adds	r3, #8
 800bdf8:	e011      	b.n	800be1e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800bdfa:	8bfb      	ldrh	r3, [r7, #30]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7ff fc33 	bl	800b668 <ptr_to_mem>
 800be02:	4603      	mov	r3, r0
 800be04:	881b      	ldrh	r3, [r3, #0]
 800be06:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800be08:	8bfa      	ldrh	r2, [r7, #30]
 800be0a:	8bbb      	ldrh	r3, [r7, #28]
 800be0c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800be10:	429a      	cmp	r2, r3
 800be12:	f4ff af41 	bcc.w	800bc98 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800be16:	4804      	ldr	r0, [pc, #16]	; (800be28 <mem_malloc+0x1e4>)
 800be18:	f00c fc8b 	bl	8018732 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3720      	adds	r7, #32
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	2000dd00 	.word	0x2000dd00
 800be2c:	2000dd04 	.word	0x2000dd04
 800be30:	0801a704 	.word	0x0801a704
 800be34:	0801a8c8 	.word	0x0801a8c8
 800be38:	0801a74c 	.word	0x0801a74c
 800be3c:	2000dcfc 	.word	0x2000dcfc
 800be40:	0801a8dc 	.word	0x0801a8dc
 800be44:	0801a8f8 	.word	0x0801a8f8
 800be48:	0801a928 	.word	0x0801a928
 800be4c:	0801a958 	.word	0x0801a958

0800be50 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800be50:	b480      	push	{r7}
 800be52:	b085      	sub	sp, #20
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	689b      	ldr	r3, [r3, #8]
 800be5c:	2200      	movs	r2, #0
 800be5e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	3303      	adds	r3, #3
 800be66:	f023 0303 	bic.w	r3, r3, #3
 800be6a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800be6c:	2300      	movs	r3, #0
 800be6e:	60fb      	str	r3, [r7, #12]
 800be70:	e011      	b.n	800be96 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	68ba      	ldr	r2, [r7, #8]
 800be82:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	881b      	ldrh	r3, [r3, #0]
 800be88:	461a      	mov	r2, r3
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	4413      	add	r3, r2
 800be8e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	3301      	adds	r3, #1
 800be94:	60fb      	str	r3, [r7, #12]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	885b      	ldrh	r3, [r3, #2]
 800be9a:	461a      	mov	r2, r3
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	4293      	cmp	r3, r2
 800bea0:	dbe7      	blt.n	800be72 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bea2:	bf00      	nop
 800bea4:	bf00      	nop
 800bea6:	3714      	adds	r7, #20
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800beb6:	2300      	movs	r3, #0
 800beb8:	80fb      	strh	r3, [r7, #6]
 800beba:	e009      	b.n	800bed0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bebc:	88fb      	ldrh	r3, [r7, #6]
 800bebe:	4a08      	ldr	r2, [pc, #32]	; (800bee0 <memp_init+0x30>)
 800bec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7ff ffc3 	bl	800be50 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800beca:	88fb      	ldrh	r3, [r7, #6]
 800becc:	3301      	adds	r3, #1
 800bece:	80fb      	strh	r3, [r7, #6]
 800bed0:	88fb      	ldrh	r3, [r7, #6]
 800bed2:	2b0c      	cmp	r3, #12
 800bed4:	d9f2      	bls.n	800bebc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bed6:	bf00      	nop
 800bed8:	bf00      	nop
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	08027650 	.word	0x08027650

0800bee4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800beec:	f00c fc54 	bl	8018798 <sys_arch_protect>
 800bef0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d015      	beq.n	800bf2c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	68ba      	ldr	r2, [r7, #8]
 800bf06:	6812      	ldr	r2, [r2, #0]
 800bf08:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	f003 0303 	and.w	r3, r3, #3
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d006      	beq.n	800bf22 <do_memp_malloc_pool+0x3e>
 800bf14:	4b09      	ldr	r3, [pc, #36]	; (800bf3c <do_memp_malloc_pool+0x58>)
 800bf16:	f44f 728c 	mov.w	r2, #280	; 0x118
 800bf1a:	4909      	ldr	r1, [pc, #36]	; (800bf40 <do_memp_malloc_pool+0x5c>)
 800bf1c:	4809      	ldr	r0, [pc, #36]	; (800bf44 <do_memp_malloc_pool+0x60>)
 800bf1e:	f00c fd47 	bl	80189b0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bf22:	68f8      	ldr	r0, [r7, #12]
 800bf24:	f00c fc46 	bl	80187b4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	e003      	b.n	800bf34 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bf2c:	68f8      	ldr	r0, [r7, #12]
 800bf2e:	f00c fc41 	bl	80187b4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	0801a97c 	.word	0x0801a97c
 800bf40:	0801a9ac 	.word	0x0801a9ac
 800bf44:	0801a9d0 	.word	0x0801a9d0

0800bf48 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d106      	bne.n	800bf64 <memp_malloc_pool+0x1c>
 800bf56:	4b0a      	ldr	r3, [pc, #40]	; (800bf80 <memp_malloc_pool+0x38>)
 800bf58:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800bf5c:	4909      	ldr	r1, [pc, #36]	; (800bf84 <memp_malloc_pool+0x3c>)
 800bf5e:	480a      	ldr	r0, [pc, #40]	; (800bf88 <memp_malloc_pool+0x40>)
 800bf60:	f00c fd26 	bl	80189b0 <iprintf>
  if (desc == NULL) {
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d101      	bne.n	800bf6e <memp_malloc_pool+0x26>
    return NULL;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	e003      	b.n	800bf76 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f7ff ffb8 	bl	800bee4 <do_memp_malloc_pool>
 800bf74:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3708      	adds	r7, #8
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	0801a97c 	.word	0x0801a97c
 800bf84:	0801a9f8 	.word	0x0801a9f8
 800bf88:	0801a9d0 	.word	0x0801a9d0

0800bf8c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	4603      	mov	r3, r0
 800bf94:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bf96:	79fb      	ldrb	r3, [r7, #7]
 800bf98:	2b0c      	cmp	r3, #12
 800bf9a:	d908      	bls.n	800bfae <memp_malloc+0x22>
 800bf9c:	4b0a      	ldr	r3, [pc, #40]	; (800bfc8 <memp_malloc+0x3c>)
 800bf9e:	f240 1257 	movw	r2, #343	; 0x157
 800bfa2:	490a      	ldr	r1, [pc, #40]	; (800bfcc <memp_malloc+0x40>)
 800bfa4:	480a      	ldr	r0, [pc, #40]	; (800bfd0 <memp_malloc+0x44>)
 800bfa6:	f00c fd03 	bl	80189b0 <iprintf>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	e008      	b.n	800bfc0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bfae:	79fb      	ldrb	r3, [r7, #7]
 800bfb0:	4a08      	ldr	r2, [pc, #32]	; (800bfd4 <memp_malloc+0x48>)
 800bfb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7ff ff94 	bl	800bee4 <do_memp_malloc_pool>
 800bfbc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	0801a97c 	.word	0x0801a97c
 800bfcc:	0801aa0c 	.word	0x0801aa0c
 800bfd0:	0801a9d0 	.word	0x0801a9d0
 800bfd4:	08027650 	.word	0x08027650

0800bfd8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	f003 0303 	and.w	r3, r3, #3
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d006      	beq.n	800bffa <do_memp_free_pool+0x22>
 800bfec:	4b0d      	ldr	r3, [pc, #52]	; (800c024 <do_memp_free_pool+0x4c>)
 800bfee:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800bff2:	490d      	ldr	r1, [pc, #52]	; (800c028 <do_memp_free_pool+0x50>)
 800bff4:	480d      	ldr	r0, [pc, #52]	; (800c02c <do_memp_free_pool+0x54>)
 800bff6:	f00c fcdb 	bl	80189b0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800bffe:	f00c fbcb 	bl	8018798 <sys_arch_protect>
 800c002:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	689b      	ldr	r3, [r3, #8]
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c016:	68b8      	ldr	r0, [r7, #8]
 800c018:	f00c fbcc 	bl	80187b4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c01c:	bf00      	nop
 800c01e:	3710      	adds	r7, #16
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	0801a97c 	.word	0x0801a97c
 800c028:	0801aa2c 	.word	0x0801aa2c
 800c02c:	0801a9d0 	.word	0x0801a9d0

0800c030 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d106      	bne.n	800c04e <memp_free_pool+0x1e>
 800c040:	4b0a      	ldr	r3, [pc, #40]	; (800c06c <memp_free_pool+0x3c>)
 800c042:	f240 1295 	movw	r2, #405	; 0x195
 800c046:	490a      	ldr	r1, [pc, #40]	; (800c070 <memp_free_pool+0x40>)
 800c048:	480a      	ldr	r0, [pc, #40]	; (800c074 <memp_free_pool+0x44>)
 800c04a:	f00c fcb1 	bl	80189b0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d007      	beq.n	800c064 <memp_free_pool+0x34>
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d004      	beq.n	800c064 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f7ff ffbb 	bl	800bfd8 <do_memp_free_pool>
 800c062:	e000      	b.n	800c066 <memp_free_pool+0x36>
    return;
 800c064:	bf00      	nop
}
 800c066:	3708      	adds	r7, #8
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	0801a97c 	.word	0x0801a97c
 800c070:	0801a9f8 	.word	0x0801a9f8
 800c074:	0801a9d0 	.word	0x0801a9d0

0800c078 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	4603      	mov	r3, r0
 800c080:	6039      	str	r1, [r7, #0]
 800c082:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c084:	79fb      	ldrb	r3, [r7, #7]
 800c086:	2b0c      	cmp	r3, #12
 800c088:	d907      	bls.n	800c09a <memp_free+0x22>
 800c08a:	4b0c      	ldr	r3, [pc, #48]	; (800c0bc <memp_free+0x44>)
 800c08c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c090:	490b      	ldr	r1, [pc, #44]	; (800c0c0 <memp_free+0x48>)
 800c092:	480c      	ldr	r0, [pc, #48]	; (800c0c4 <memp_free+0x4c>)
 800c094:	f00c fc8c 	bl	80189b0 <iprintf>
 800c098:	e00c      	b.n	800c0b4 <memp_free+0x3c>

  if (mem == NULL) {
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d008      	beq.n	800c0b2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c0a0:	79fb      	ldrb	r3, [r7, #7]
 800c0a2:	4a09      	ldr	r2, [pc, #36]	; (800c0c8 <memp_free+0x50>)
 800c0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0a8:	6839      	ldr	r1, [r7, #0]
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f7ff ff94 	bl	800bfd8 <do_memp_free_pool>
 800c0b0:	e000      	b.n	800c0b4 <memp_free+0x3c>
    return;
 800c0b2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c0b4:	3708      	adds	r7, #8
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	0801a97c 	.word	0x0801a97c
 800c0c0:	0801aa4c 	.word	0x0801aa4c
 800c0c4:	0801a9d0 	.word	0x0801a9d0
 800c0c8:	08027650 	.word	0x08027650

0800c0cc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c0d0:	bf00      	nop
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr
	...

0800c0dc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b086      	sub	sp, #24
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	607a      	str	r2, [r7, #4]
 800c0e8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d108      	bne.n	800c102 <netif_add+0x26>
 800c0f0:	4b5b      	ldr	r3, [pc, #364]	; (800c260 <netif_add+0x184>)
 800c0f2:	f240 1227 	movw	r2, #295	; 0x127
 800c0f6:	495b      	ldr	r1, [pc, #364]	; (800c264 <netif_add+0x188>)
 800c0f8:	485b      	ldr	r0, [pc, #364]	; (800c268 <netif_add+0x18c>)
 800c0fa:	f00c fc59 	bl	80189b0 <iprintf>
 800c0fe:	2300      	movs	r3, #0
 800c100:	e0a9      	b.n	800c256 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c104:	2b00      	cmp	r3, #0
 800c106:	d108      	bne.n	800c11a <netif_add+0x3e>
 800c108:	4b55      	ldr	r3, [pc, #340]	; (800c260 <netif_add+0x184>)
 800c10a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c10e:	4957      	ldr	r1, [pc, #348]	; (800c26c <netif_add+0x190>)
 800c110:	4855      	ldr	r0, [pc, #340]	; (800c268 <netif_add+0x18c>)
 800c112:	f00c fc4d 	bl	80189b0 <iprintf>
 800c116:	2300      	movs	r3, #0
 800c118:	e09d      	b.n	800c256 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d101      	bne.n	800c124 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c120:	4b53      	ldr	r3, [pc, #332]	; (800c270 <netif_add+0x194>)
 800c122:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d101      	bne.n	800c12e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c12a:	4b51      	ldr	r3, [pc, #324]	; (800c270 <netif_add+0x194>)
 800c12c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d101      	bne.n	800c138 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c134:	4b4e      	ldr	r3, [pc, #312]	; (800c270 <netif_add+0x194>)
 800c136:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2200      	movs	r2, #0
 800c13c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2200      	movs	r2, #0
 800c142:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2200      	movs	r2, #0
 800c148:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	4a49      	ldr	r2, [pc, #292]	; (800c274 <netif_add+0x198>)
 800c14e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2200      	movs	r2, #0
 800c154:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2200      	movs	r2, #0
 800c15a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	3324      	adds	r3, #36	; 0x24
 800c162:	2204      	movs	r2, #4
 800c164:	2100      	movs	r1, #0
 800c166:	4618      	mov	r0, r3
 800c168:	f00c fc87 	bl	8018a7a <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2200      	movs	r2, #0
 800c170:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6a3a      	ldr	r2, [r7, #32]
 800c176:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c178:	4b3f      	ldr	r3, [pc, #252]	; (800c278 <netif_add+0x19c>)
 800c17a:	781a      	ldrb	r2, [r3, #0]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c186:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	68b9      	ldr	r1, [r7, #8]
 800c18e:	68f8      	ldr	r0, [r7, #12]
 800c190:	f000 f914 	bl	800c3bc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	4798      	blx	r3
 800c19a:	4603      	mov	r3, r0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d001      	beq.n	800c1a4 <netif_add+0xc8>
    return NULL;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	e058      	b.n	800c256 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c1aa:	2bff      	cmp	r3, #255	; 0xff
 800c1ac:	d103      	bne.n	800c1b6 <netif_add+0xda>
        netif->num = 0;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c1ba:	4b30      	ldr	r3, [pc, #192]	; (800c27c <netif_add+0x1a0>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	617b      	str	r3, [r7, #20]
 800c1c0:	e02b      	b.n	800c21a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c1c2:	697a      	ldr	r2, [r7, #20]
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d106      	bne.n	800c1d8 <netif_add+0xfc>
 800c1ca:	4b25      	ldr	r3, [pc, #148]	; (800c260 <netif_add+0x184>)
 800c1cc:	f240 128b 	movw	r2, #395	; 0x18b
 800c1d0:	492b      	ldr	r1, [pc, #172]	; (800c280 <netif_add+0x1a4>)
 800c1d2:	4825      	ldr	r0, [pc, #148]	; (800c268 <netif_add+0x18c>)
 800c1d4:	f00c fbec 	bl	80189b0 <iprintf>
        num_netifs++;
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	2bff      	cmp	r3, #255	; 0xff
 800c1e2:	dd06      	ble.n	800c1f2 <netif_add+0x116>
 800c1e4:	4b1e      	ldr	r3, [pc, #120]	; (800c260 <netif_add+0x184>)
 800c1e6:	f240 128d 	movw	r2, #397	; 0x18d
 800c1ea:	4926      	ldr	r1, [pc, #152]	; (800c284 <netif_add+0x1a8>)
 800c1ec:	481e      	ldr	r0, [pc, #120]	; (800c268 <netif_add+0x18c>)
 800c1ee:	f00c fbdf 	bl	80189b0 <iprintf>
        if (netif2->num == netif->num) {
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d108      	bne.n	800c214 <netif_add+0x138>
          netif->num++;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c208:	3301      	adds	r3, #1
 800c20a:	b2da      	uxtb	r2, r3
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800c212:	e005      	b.n	800c220 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	617b      	str	r3, [r7, #20]
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d1d0      	bne.n	800c1c2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d1be      	bne.n	800c1a4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c22c:	2bfe      	cmp	r3, #254	; 0xfe
 800c22e:	d103      	bne.n	800c238 <netif_add+0x15c>
    netif_num = 0;
 800c230:	4b11      	ldr	r3, [pc, #68]	; (800c278 <netif_add+0x19c>)
 800c232:	2200      	movs	r2, #0
 800c234:	701a      	strb	r2, [r3, #0]
 800c236:	e006      	b.n	800c246 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c23e:	3301      	adds	r3, #1
 800c240:	b2da      	uxtb	r2, r3
 800c242:	4b0d      	ldr	r3, [pc, #52]	; (800c278 <netif_add+0x19c>)
 800c244:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c246:	4b0d      	ldr	r3, [pc, #52]	; (800c27c <netif_add+0x1a0>)
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c24e:	4a0b      	ldr	r2, [pc, #44]	; (800c27c <netif_add+0x1a0>)
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c254:	68fb      	ldr	r3, [r7, #12]
}
 800c256:	4618      	mov	r0, r3
 800c258:	3718      	adds	r7, #24
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	0801aa68 	.word	0x0801aa68
 800c264:	0801aafc 	.word	0x0801aafc
 800c268:	0801aab8 	.word	0x0801aab8
 800c26c:	0801ab18 	.word	0x0801ab18
 800c270:	080276d4 	.word	0x080276d4
 800c274:	0800c69f 	.word	0x0800c69f
 800c278:	20010dfc 	.word	0x20010dfc
 800c27c:	20010df4 	.word	0x20010df4
 800c280:	0801ab3c 	.word	0x0801ab3c
 800c284:	0801ab50 	.word	0x0801ab50

0800c288 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c292:	6839      	ldr	r1, [r7, #0]
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f002 fe93 	bl	800efc0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c29a:	6839      	ldr	r1, [r7, #0]
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f007 ff0d 	bl	80140bc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c2a2:	bf00      	nop
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
	...

0800c2ac <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b086      	sub	sp, #24
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	60b9      	str	r1, [r7, #8]
 800c2b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d106      	bne.n	800c2cc <netif_do_set_ipaddr+0x20>
 800c2be:	4b1d      	ldr	r3, [pc, #116]	; (800c334 <netif_do_set_ipaddr+0x88>)
 800c2c0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c2c4:	491c      	ldr	r1, [pc, #112]	; (800c338 <netif_do_set_ipaddr+0x8c>)
 800c2c6:	481d      	ldr	r0, [pc, #116]	; (800c33c <netif_do_set_ipaddr+0x90>)
 800c2c8:	f00c fb72 	bl	80189b0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d106      	bne.n	800c2e0 <netif_do_set_ipaddr+0x34>
 800c2d2:	4b18      	ldr	r3, [pc, #96]	; (800c334 <netif_do_set_ipaddr+0x88>)
 800c2d4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c2d8:	4917      	ldr	r1, [pc, #92]	; (800c338 <netif_do_set_ipaddr+0x8c>)
 800c2da:	4818      	ldr	r0, [pc, #96]	; (800c33c <netif_do_set_ipaddr+0x90>)
 800c2dc:	f00c fb68 	bl	80189b0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	3304      	adds	r3, #4
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d01c      	beq.n	800c328 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	3304      	adds	r3, #4
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c2fe:	f107 0314 	add.w	r3, r7, #20
 800c302:	4619      	mov	r1, r3
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f7ff ffbf 	bl	800c288 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d002      	beq.n	800c316 <netif_do_set_ipaddr+0x6a>
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	e000      	b.n	800c318 <netif_do_set_ipaddr+0x6c>
 800c316:	2300      	movs	r3, #0
 800c318:	68fa      	ldr	r2, [r7, #12]
 800c31a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c31c:	2101      	movs	r1, #1
 800c31e:	68f8      	ldr	r0, [r7, #12]
 800c320:	f000 f8d2 	bl	800c4c8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c324:	2301      	movs	r3, #1
 800c326:	e000      	b.n	800c32a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c328:	2300      	movs	r3, #0
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3718      	adds	r7, #24
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	0801aa68 	.word	0x0801aa68
 800c338:	0801ab80 	.word	0x0801ab80
 800c33c:	0801aab8 	.word	0x0801aab8

0800c340 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	3308      	adds	r3, #8
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	429a      	cmp	r2, r3
 800c358:	d00a      	beq.n	800c370 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d002      	beq.n	800c366 <netif_do_set_netmask+0x26>
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	e000      	b.n	800c368 <netif_do_set_netmask+0x28>
 800c366:	2300      	movs	r3, #0
 800c368:	68fa      	ldr	r2, [r7, #12]
 800c36a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c36c:	2301      	movs	r3, #1
 800c36e:	e000      	b.n	800c372 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c370:	2300      	movs	r3, #0
}
 800c372:	4618      	mov	r0, r3
 800c374:	3714      	adds	r7, #20
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr

0800c37e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c37e:	b480      	push	{r7}
 800c380:	b085      	sub	sp, #20
 800c382:	af00      	add	r7, sp, #0
 800c384:	60f8      	str	r0, [r7, #12]
 800c386:	60b9      	str	r1, [r7, #8]
 800c388:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	330c      	adds	r3, #12
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	429a      	cmp	r2, r3
 800c396:	d00a      	beq.n	800c3ae <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d002      	beq.n	800c3a4 <netif_do_set_gw+0x26>
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	e000      	b.n	800c3a6 <netif_do_set_gw+0x28>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	e000      	b.n	800c3b0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c3ae:	2300      	movs	r3, #0
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3714      	adds	r7, #20
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b088      	sub	sp, #32
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	60b9      	str	r1, [r7, #8]
 800c3c6:	607a      	str	r2, [r7, #4]
 800c3c8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d101      	bne.n	800c3dc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c3d8:	4b1c      	ldr	r3, [pc, #112]	; (800c44c <netif_set_addr+0x90>)
 800c3da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d101      	bne.n	800c3e6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c3e2:	4b1a      	ldr	r3, [pc, #104]	; (800c44c <netif_set_addr+0x90>)
 800c3e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d101      	bne.n	800c3f0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c3ec:	4b17      	ldr	r3, [pc, #92]	; (800c44c <netif_set_addr+0x90>)
 800c3ee:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d003      	beq.n	800c3fe <netif_set_addr+0x42>
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <netif_set_addr+0x46>
 800c3fe:	2301      	movs	r3, #1
 800c400:	e000      	b.n	800c404 <netif_set_addr+0x48>
 800c402:	2300      	movs	r3, #0
 800c404:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d006      	beq.n	800c41a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c40c:	f107 0310 	add.w	r3, r7, #16
 800c410:	461a      	mov	r2, r3
 800c412:	68b9      	ldr	r1, [r7, #8]
 800c414:	68f8      	ldr	r0, [r7, #12]
 800c416:	f7ff ff49 	bl	800c2ac <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c41a:	69fa      	ldr	r2, [r7, #28]
 800c41c:	6879      	ldr	r1, [r7, #4]
 800c41e:	68f8      	ldr	r0, [r7, #12]
 800c420:	f7ff ff8e 	bl	800c340 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c424:	69ba      	ldr	r2, [r7, #24]
 800c426:	6839      	ldr	r1, [r7, #0]
 800c428:	68f8      	ldr	r0, [r7, #12]
 800c42a:	f7ff ffa8 	bl	800c37e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d106      	bne.n	800c442 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c434:	f107 0310 	add.w	r3, r7, #16
 800c438:	461a      	mov	r2, r3
 800c43a:	68b9      	ldr	r1, [r7, #8]
 800c43c:	68f8      	ldr	r0, [r7, #12]
 800c43e:	f7ff ff35 	bl	800c2ac <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c442:	bf00      	nop
 800c444:	3720      	adds	r7, #32
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	080276d4 	.word	0x080276d4

0800c450 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c450:	b480      	push	{r7}
 800c452:	b083      	sub	sp, #12
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c458:	4a04      	ldr	r2, [pc, #16]	; (800c46c <netif_set_default+0x1c>)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c45e:	bf00      	nop
 800c460:	370c      	adds	r7, #12
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr
 800c46a:	bf00      	nop
 800c46c:	20010df8 	.word	0x20010df8

0800c470 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d107      	bne.n	800c48e <netif_set_up+0x1e>
 800c47e:	4b0f      	ldr	r3, [pc, #60]	; (800c4bc <netif_set_up+0x4c>)
 800c480:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c484:	490e      	ldr	r1, [pc, #56]	; (800c4c0 <netif_set_up+0x50>)
 800c486:	480f      	ldr	r0, [pc, #60]	; (800c4c4 <netif_set_up+0x54>)
 800c488:	f00c fa92 	bl	80189b0 <iprintf>
 800c48c:	e013      	b.n	800c4b6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c494:	f003 0301 	and.w	r3, r3, #1
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d10c      	bne.n	800c4b6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c4a2:	f043 0301 	orr.w	r3, r3, #1
 800c4a6:	b2da      	uxtb	r2, r3
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c4ae:	2103      	movs	r1, #3
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 f809 	bl	800c4c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c4b6:	3708      	adds	r7, #8
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	0801aa68 	.word	0x0801aa68
 800c4c0:	0801abf0 	.word	0x0801abf0
 800c4c4:	0801aab8 	.word	0x0801aab8

0800c4c8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d106      	bne.n	800c4e8 <netif_issue_reports+0x20>
 800c4da:	4b18      	ldr	r3, [pc, #96]	; (800c53c <netif_issue_reports+0x74>)
 800c4dc:	f240 326d 	movw	r2, #877	; 0x36d
 800c4e0:	4917      	ldr	r1, [pc, #92]	; (800c540 <netif_issue_reports+0x78>)
 800c4e2:	4818      	ldr	r0, [pc, #96]	; (800c544 <netif_issue_reports+0x7c>)
 800c4e4:	f00c fa64 	bl	80189b0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c4ee:	f003 0304 	and.w	r3, r3, #4
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d01e      	beq.n	800c534 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c4fc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c500:	2b00      	cmp	r3, #0
 800c502:	d017      	beq.n	800c534 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c504:	78fb      	ldrb	r3, [r7, #3]
 800c506:	f003 0301 	and.w	r3, r3, #1
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d013      	beq.n	800c536 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	3304      	adds	r3, #4
 800c512:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c514:	2b00      	cmp	r3, #0
 800c516:	d00e      	beq.n	800c536 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c51e:	f003 0308 	and.w	r3, r3, #8
 800c522:	2b00      	cmp	r3, #0
 800c524:	d007      	beq.n	800c536 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	3304      	adds	r3, #4
 800c52a:	4619      	mov	r1, r3
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f00a fbc5 	bl	8016cbc <etharp_request>
 800c532:	e000      	b.n	800c536 <netif_issue_reports+0x6e>
    return;
 800c534:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c536:	3708      	adds	r7, #8
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	0801aa68 	.word	0x0801aa68
 800c540:	0801ac0c 	.word	0x0801ac0c
 800c544:	0801aab8 	.word	0x0801aab8

0800c548 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d107      	bne.n	800c566 <netif_set_down+0x1e>
 800c556:	4b12      	ldr	r3, [pc, #72]	; (800c5a0 <netif_set_down+0x58>)
 800c558:	f240 329b 	movw	r2, #923	; 0x39b
 800c55c:	4911      	ldr	r1, [pc, #68]	; (800c5a4 <netif_set_down+0x5c>)
 800c55e:	4812      	ldr	r0, [pc, #72]	; (800c5a8 <netif_set_down+0x60>)
 800c560:	f00c fa26 	bl	80189b0 <iprintf>
 800c564:	e019      	b.n	800c59a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c56c:	f003 0301 	and.w	r3, r3, #1
 800c570:	2b00      	cmp	r3, #0
 800c572:	d012      	beq.n	800c59a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c57a:	f023 0301 	bic.w	r3, r3, #1
 800c57e:	b2da      	uxtb	r2, r3
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c58c:	f003 0308 	and.w	r3, r3, #8
 800c590:	2b00      	cmp	r3, #0
 800c592:	d002      	beq.n	800c59a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f009 ff4b 	bl	8016430 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c59a:	3708      	adds	r7, #8
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	0801aa68 	.word	0x0801aa68
 800c5a4:	0801ac30 	.word	0x0801ac30
 800c5a8:	0801aab8 	.word	0x0801aab8

0800c5ac <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d107      	bne.n	800c5ca <netif_set_link_up+0x1e>
 800c5ba:	4b15      	ldr	r3, [pc, #84]	; (800c610 <netif_set_link_up+0x64>)
 800c5bc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c5c0:	4914      	ldr	r1, [pc, #80]	; (800c614 <netif_set_link_up+0x68>)
 800c5c2:	4815      	ldr	r0, [pc, #84]	; (800c618 <netif_set_link_up+0x6c>)
 800c5c4:	f00c f9f4 	bl	80189b0 <iprintf>
 800c5c8:	e01e      	b.n	800c608 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c5d0:	f003 0304 	and.w	r3, r3, #4
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d117      	bne.n	800c608 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c5de:	f043 0304 	orr.w	r3, r3, #4
 800c5e2:	b2da      	uxtb	r2, r3
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f008 f990 	bl	8014910 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c5f0:	2103      	movs	r1, #3
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f7ff ff68 	bl	800c4c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	69db      	ldr	r3, [r3, #28]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d003      	beq.n	800c608 <netif_set_link_up+0x5c>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	69db      	ldr	r3, [r3, #28]
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c608:	3708      	adds	r7, #8
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	0801aa68 	.word	0x0801aa68
 800c614:	0801ac50 	.word	0x0801ac50
 800c618:	0801aab8 	.word	0x0801aab8

0800c61c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d107      	bne.n	800c63a <netif_set_link_down+0x1e>
 800c62a:	4b11      	ldr	r3, [pc, #68]	; (800c670 <netif_set_link_down+0x54>)
 800c62c:	f240 4206 	movw	r2, #1030	; 0x406
 800c630:	4910      	ldr	r1, [pc, #64]	; (800c674 <netif_set_link_down+0x58>)
 800c632:	4811      	ldr	r0, [pc, #68]	; (800c678 <netif_set_link_down+0x5c>)
 800c634:	f00c f9bc 	bl	80189b0 <iprintf>
 800c638:	e017      	b.n	800c66a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c640:	f003 0304 	and.w	r3, r3, #4
 800c644:	2b00      	cmp	r3, #0
 800c646:	d010      	beq.n	800c66a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c64e:	f023 0304 	bic.w	r3, r3, #4
 800c652:	b2da      	uxtb	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	69db      	ldr	r3, [r3, #28]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d003      	beq.n	800c66a <netif_set_link_down+0x4e>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	69db      	ldr	r3, [r3, #28]
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c66a:	3708      	adds	r7, #8
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	0801aa68 	.word	0x0801aa68
 800c674:	0801ac74 	.word	0x0801ac74
 800c678:	0801aab8 	.word	0x0801aab8

0800c67c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b083      	sub	sp, #12
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d002      	beq.n	800c692 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	683a      	ldr	r2, [r7, #0]
 800c690:	61da      	str	r2, [r3, #28]
  }
}
 800c692:	bf00      	nop
 800c694:	370c      	adds	r7, #12
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr

0800c69e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c69e:	b480      	push	{r7}
 800c6a0:	b085      	sub	sp, #20
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	60f8      	str	r0, [r7, #12]
 800c6a6:	60b9      	str	r1, [r7, #8]
 800c6a8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c6aa:	f06f 030b 	mvn.w	r3, #11
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3714      	adds	r7, #20
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr
	...

0800c6bc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b085      	sub	sp, #20
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c6c6:	79fb      	ldrb	r3, [r7, #7]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d013      	beq.n	800c6f4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c6cc:	4b0d      	ldr	r3, [pc, #52]	; (800c704 <netif_get_by_index+0x48>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	60fb      	str	r3, [r7, #12]
 800c6d2:	e00c      	b.n	800c6ee <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c6da:	3301      	adds	r3, #1
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	79fa      	ldrb	r2, [r7, #7]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d101      	bne.n	800c6e8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	e006      	b.n	800c6f6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	60fb      	str	r3, [r7, #12]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d1ef      	bne.n	800c6d4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c6f4:	2300      	movs	r3, #0
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3714      	adds	r7, #20
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	20010df4 	.word	0x20010df4

0800c708 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c70e:	f00c f843 	bl	8018798 <sys_arch_protect>
 800c712:	6038      	str	r0, [r7, #0]
 800c714:	4b0d      	ldr	r3, [pc, #52]	; (800c74c <pbuf_free_ooseq+0x44>)
 800c716:	2200      	movs	r2, #0
 800c718:	701a      	strb	r2, [r3, #0]
 800c71a:	6838      	ldr	r0, [r7, #0]
 800c71c:	f00c f84a 	bl	80187b4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c720:	4b0b      	ldr	r3, [pc, #44]	; (800c750 <pbuf_free_ooseq+0x48>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	607b      	str	r3, [r7, #4]
 800c726:	e00a      	b.n	800c73e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d003      	beq.n	800c738 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f002 fc83 	bl	800f03c <tcp_free_ooseq>
      return;
 800c736:	e005      	b.n	800c744 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	607b      	str	r3, [r7, #4]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d1f1      	bne.n	800c728 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c744:	3708      	adds	r7, #8
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	20010dfd 	.word	0x20010dfd
 800c750:	20010e0c 	.word	0x20010e0c

0800c754 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c75c:	f7ff ffd4 	bl	800c708 <pbuf_free_ooseq>
}
 800c760:	bf00      	nop
 800c762:	3708      	adds	r7, #8
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c76e:	f00c f813 	bl	8018798 <sys_arch_protect>
 800c772:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c774:	4b0f      	ldr	r3, [pc, #60]	; (800c7b4 <pbuf_pool_is_empty+0x4c>)
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c77a:	4b0e      	ldr	r3, [pc, #56]	; (800c7b4 <pbuf_pool_is_empty+0x4c>)
 800c77c:	2201      	movs	r2, #1
 800c77e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f00c f817 	bl	80187b4 <sys_arch_unprotect>

  if (!queued) {
 800c786:	78fb      	ldrb	r3, [r7, #3]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d10f      	bne.n	800c7ac <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c78c:	2100      	movs	r1, #0
 800c78e:	480a      	ldr	r0, [pc, #40]	; (800c7b8 <pbuf_pool_is_empty+0x50>)
 800c790:	f7fe f834 	bl	800a7fc <tcpip_try_callback>
 800c794:	4603      	mov	r3, r0
 800c796:	2b00      	cmp	r3, #0
 800c798:	d008      	beq.n	800c7ac <pbuf_pool_is_empty+0x44>
 800c79a:	f00b fffd 	bl	8018798 <sys_arch_protect>
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	4b04      	ldr	r3, [pc, #16]	; (800c7b4 <pbuf_pool_is_empty+0x4c>)
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	701a      	strb	r2, [r3, #0]
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f00c f804 	bl	80187b4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c7ac:	bf00      	nop
 800c7ae:	3708      	adds	r7, #8
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	20010dfd 	.word	0x20010dfd
 800c7b8:	0800c755 	.word	0x0800c755

0800c7bc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b085      	sub	sp, #20
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	4611      	mov	r1, r2
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	80fb      	strh	r3, [r7, #6]
 800c7ce:	4613      	mov	r3, r2
 800c7d0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	68ba      	ldr	r2, [r7, #8]
 800c7dc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	88fa      	ldrh	r2, [r7, #6]
 800c7e2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	88ba      	ldrh	r2, [r7, #4]
 800c7e8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c7ea:	8b3b      	ldrh	r3, [r7, #24]
 800c7ec:	b2da      	uxtb	r2, r3
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	7f3a      	ldrb	r2, [r7, #28]
 800c7f6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2200      	movs	r2, #0
 800c802:	73da      	strb	r2, [r3, #15]
}
 800c804:	bf00      	nop
 800c806:	3714      	adds	r7, #20
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b08c      	sub	sp, #48	; 0x30
 800c814:	af02      	add	r7, sp, #8
 800c816:	4603      	mov	r3, r0
 800c818:	71fb      	strb	r3, [r7, #7]
 800c81a:	460b      	mov	r3, r1
 800c81c:	80bb      	strh	r3, [r7, #4]
 800c81e:	4613      	mov	r3, r2
 800c820:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c822:	79fb      	ldrb	r3, [r7, #7]
 800c824:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c826:	887b      	ldrh	r3, [r7, #2]
 800c828:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c82c:	d07f      	beq.n	800c92e <pbuf_alloc+0x11e>
 800c82e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c832:	f300 80c8 	bgt.w	800c9c6 <pbuf_alloc+0x1b6>
 800c836:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c83a:	d010      	beq.n	800c85e <pbuf_alloc+0x4e>
 800c83c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c840:	f300 80c1 	bgt.w	800c9c6 <pbuf_alloc+0x1b6>
 800c844:	2b01      	cmp	r3, #1
 800c846:	d002      	beq.n	800c84e <pbuf_alloc+0x3e>
 800c848:	2b41      	cmp	r3, #65	; 0x41
 800c84a:	f040 80bc 	bne.w	800c9c6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c84e:	887a      	ldrh	r2, [r7, #2]
 800c850:	88bb      	ldrh	r3, [r7, #4]
 800c852:	4619      	mov	r1, r3
 800c854:	2000      	movs	r0, #0
 800c856:	f000 f8d1 	bl	800c9fc <pbuf_alloc_reference>
 800c85a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c85c:	e0bd      	b.n	800c9da <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c85e:	2300      	movs	r3, #0
 800c860:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c862:	2300      	movs	r3, #0
 800c864:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c866:	88bb      	ldrh	r3, [r7, #4]
 800c868:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c86a:	200c      	movs	r0, #12
 800c86c:	f7ff fb8e 	bl	800bf8c <memp_malloc>
 800c870:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d109      	bne.n	800c88c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c878:	f7ff ff76 	bl	800c768 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d002      	beq.n	800c888 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c882:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c884:	f000 faa8 	bl	800cdd8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c888:	2300      	movs	r3, #0
 800c88a:	e0a7      	b.n	800c9dc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c88c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c88e:	3303      	adds	r3, #3
 800c890:	b29b      	uxth	r3, r3
 800c892:	f023 0303 	bic.w	r3, r3, #3
 800c896:	b29b      	uxth	r3, r3
 800c898:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	8b7a      	ldrh	r2, [r7, #26]
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	bf28      	it	cs
 800c8a4:	4613      	movcs	r3, r2
 800c8a6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c8a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8aa:	3310      	adds	r3, #16
 800c8ac:	693a      	ldr	r2, [r7, #16]
 800c8ae:	4413      	add	r3, r2
 800c8b0:	3303      	adds	r3, #3
 800c8b2:	f023 0303 	bic.w	r3, r3, #3
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	89f9      	ldrh	r1, [r7, #14]
 800c8ba:	8b7a      	ldrh	r2, [r7, #26]
 800c8bc:	2300      	movs	r3, #0
 800c8be:	9301      	str	r3, [sp, #4]
 800c8c0:	887b      	ldrh	r3, [r7, #2]
 800c8c2:	9300      	str	r3, [sp, #0]
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	4601      	mov	r1, r0
 800c8c8:	6938      	ldr	r0, [r7, #16]
 800c8ca:	f7ff ff77 	bl	800c7bc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	f003 0303 	and.w	r3, r3, #3
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d006      	beq.n	800c8e8 <pbuf_alloc+0xd8>
 800c8da:	4b42      	ldr	r3, [pc, #264]	; (800c9e4 <pbuf_alloc+0x1d4>)
 800c8dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c8e0:	4941      	ldr	r1, [pc, #260]	; (800c9e8 <pbuf_alloc+0x1d8>)
 800c8e2:	4842      	ldr	r0, [pc, #264]	; (800c9ec <pbuf_alloc+0x1dc>)
 800c8e4:	f00c f864 	bl	80189b0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c8e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8ea:	3303      	adds	r3, #3
 800c8ec:	f023 0303 	bic.w	r3, r3, #3
 800c8f0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c8f4:	d106      	bne.n	800c904 <pbuf_alloc+0xf4>
 800c8f6:	4b3b      	ldr	r3, [pc, #236]	; (800c9e4 <pbuf_alloc+0x1d4>)
 800c8f8:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c8fc:	493c      	ldr	r1, [pc, #240]	; (800c9f0 <pbuf_alloc+0x1e0>)
 800c8fe:	483b      	ldr	r0, [pc, #236]	; (800c9ec <pbuf_alloc+0x1dc>)
 800c900:	f00c f856 	bl	80189b0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c906:	2b00      	cmp	r3, #0
 800c908:	d102      	bne.n	800c910 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	627b      	str	r3, [r7, #36]	; 0x24
 800c90e:	e002      	b.n	800c916 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	693a      	ldr	r2, [r7, #16]
 800c914:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c91a:	8b7a      	ldrh	r2, [r7, #26]
 800c91c:	89fb      	ldrh	r3, [r7, #14]
 800c91e:	1ad3      	subs	r3, r2, r3
 800c920:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c922:	2300      	movs	r3, #0
 800c924:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c926:	8b7b      	ldrh	r3, [r7, #26]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d19e      	bne.n	800c86a <pbuf_alloc+0x5a>
      break;
 800c92c:	e055      	b.n	800c9da <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c92e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c930:	3303      	adds	r3, #3
 800c932:	b29b      	uxth	r3, r3
 800c934:	f023 0303 	bic.w	r3, r3, #3
 800c938:	b29a      	uxth	r2, r3
 800c93a:	88bb      	ldrh	r3, [r7, #4]
 800c93c:	3303      	adds	r3, #3
 800c93e:	b29b      	uxth	r3, r3
 800c940:	f023 0303 	bic.w	r3, r3, #3
 800c944:	b29b      	uxth	r3, r3
 800c946:	4413      	add	r3, r2
 800c948:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c94a:	8b3b      	ldrh	r3, [r7, #24]
 800c94c:	3310      	adds	r3, #16
 800c94e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c950:	8b3a      	ldrh	r2, [r7, #24]
 800c952:	88bb      	ldrh	r3, [r7, #4]
 800c954:	3303      	adds	r3, #3
 800c956:	f023 0303 	bic.w	r3, r3, #3
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d306      	bcc.n	800c96c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c95e:	8afa      	ldrh	r2, [r7, #22]
 800c960:	88bb      	ldrh	r3, [r7, #4]
 800c962:	3303      	adds	r3, #3
 800c964:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c968:	429a      	cmp	r2, r3
 800c96a:	d201      	bcs.n	800c970 <pbuf_alloc+0x160>
        return NULL;
 800c96c:	2300      	movs	r3, #0
 800c96e:	e035      	b.n	800c9dc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c970:	8afb      	ldrh	r3, [r7, #22]
 800c972:	4618      	mov	r0, r3
 800c974:	f7ff f966 	bl	800bc44 <mem_malloc>
 800c978:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d101      	bne.n	800c984 <pbuf_alloc+0x174>
        return NULL;
 800c980:	2300      	movs	r3, #0
 800c982:	e02b      	b.n	800c9dc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c984:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c986:	3310      	adds	r3, #16
 800c988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c98a:	4413      	add	r3, r2
 800c98c:	3303      	adds	r3, #3
 800c98e:	f023 0303 	bic.w	r3, r3, #3
 800c992:	4618      	mov	r0, r3
 800c994:	88b9      	ldrh	r1, [r7, #4]
 800c996:	88ba      	ldrh	r2, [r7, #4]
 800c998:	2300      	movs	r3, #0
 800c99a:	9301      	str	r3, [sp, #4]
 800c99c:	887b      	ldrh	r3, [r7, #2]
 800c99e:	9300      	str	r3, [sp, #0]
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	4601      	mov	r1, r0
 800c9a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9a6:	f7ff ff09 	bl	800c7bc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	f003 0303 	and.w	r3, r3, #3
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d010      	beq.n	800c9d8 <pbuf_alloc+0x1c8>
 800c9b6:	4b0b      	ldr	r3, [pc, #44]	; (800c9e4 <pbuf_alloc+0x1d4>)
 800c9b8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800c9bc:	490d      	ldr	r1, [pc, #52]	; (800c9f4 <pbuf_alloc+0x1e4>)
 800c9be:	480b      	ldr	r0, [pc, #44]	; (800c9ec <pbuf_alloc+0x1dc>)
 800c9c0:	f00b fff6 	bl	80189b0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c9c4:	e008      	b.n	800c9d8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c9c6:	4b07      	ldr	r3, [pc, #28]	; (800c9e4 <pbuf_alloc+0x1d4>)
 800c9c8:	f240 1227 	movw	r2, #295	; 0x127
 800c9cc:	490a      	ldr	r1, [pc, #40]	; (800c9f8 <pbuf_alloc+0x1e8>)
 800c9ce:	4807      	ldr	r0, [pc, #28]	; (800c9ec <pbuf_alloc+0x1dc>)
 800c9d0:	f00b ffee 	bl	80189b0 <iprintf>
      return NULL;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	e001      	b.n	800c9dc <pbuf_alloc+0x1cc>
      break;
 800c9d8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3728      	adds	r7, #40	; 0x28
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	0801ac98 	.word	0x0801ac98
 800c9e8:	0801acc8 	.word	0x0801acc8
 800c9ec:	0801acf8 	.word	0x0801acf8
 800c9f0:	0801ad20 	.word	0x0801ad20
 800c9f4:	0801ad54 	.word	0x0801ad54
 800c9f8:	0801ad80 	.word	0x0801ad80

0800c9fc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b086      	sub	sp, #24
 800ca00:	af02      	add	r7, sp, #8
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	460b      	mov	r3, r1
 800ca06:	807b      	strh	r3, [r7, #2]
 800ca08:	4613      	mov	r3, r2
 800ca0a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ca0c:	883b      	ldrh	r3, [r7, #0]
 800ca0e:	2b41      	cmp	r3, #65	; 0x41
 800ca10:	d009      	beq.n	800ca26 <pbuf_alloc_reference+0x2a>
 800ca12:	883b      	ldrh	r3, [r7, #0]
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d006      	beq.n	800ca26 <pbuf_alloc_reference+0x2a>
 800ca18:	4b0f      	ldr	r3, [pc, #60]	; (800ca58 <pbuf_alloc_reference+0x5c>)
 800ca1a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ca1e:	490f      	ldr	r1, [pc, #60]	; (800ca5c <pbuf_alloc_reference+0x60>)
 800ca20:	480f      	ldr	r0, [pc, #60]	; (800ca60 <pbuf_alloc_reference+0x64>)
 800ca22:	f00b ffc5 	bl	80189b0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ca26:	200b      	movs	r0, #11
 800ca28:	f7ff fab0 	bl	800bf8c <memp_malloc>
 800ca2c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d101      	bne.n	800ca38 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ca34:	2300      	movs	r3, #0
 800ca36:	e00b      	b.n	800ca50 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ca38:	8879      	ldrh	r1, [r7, #2]
 800ca3a:	887a      	ldrh	r2, [r7, #2]
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	9301      	str	r3, [sp, #4]
 800ca40:	883b      	ldrh	r3, [r7, #0]
 800ca42:	9300      	str	r3, [sp, #0]
 800ca44:	460b      	mov	r3, r1
 800ca46:	6879      	ldr	r1, [r7, #4]
 800ca48:	68f8      	ldr	r0, [r7, #12]
 800ca4a:	f7ff feb7 	bl	800c7bc <pbuf_init_alloced_pbuf>
  return p;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3710      	adds	r7, #16
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}
 800ca58:	0801ac98 	.word	0x0801ac98
 800ca5c:	0801ad9c 	.word	0x0801ad9c
 800ca60:	0801acf8 	.word	0x0801acf8

0800ca64 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b088      	sub	sp, #32
 800ca68:	af02      	add	r7, sp, #8
 800ca6a:	607b      	str	r3, [r7, #4]
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	73fb      	strb	r3, [r7, #15]
 800ca70:	460b      	mov	r3, r1
 800ca72:	81bb      	strh	r3, [r7, #12]
 800ca74:	4613      	mov	r3, r2
 800ca76:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ca78:	7bfb      	ldrb	r3, [r7, #15]
 800ca7a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ca7c:	8a7b      	ldrh	r3, [r7, #18]
 800ca7e:	3303      	adds	r3, #3
 800ca80:	f023 0203 	bic.w	r2, r3, #3
 800ca84:	89bb      	ldrh	r3, [r7, #12]
 800ca86:	441a      	add	r2, r3
 800ca88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d901      	bls.n	800ca92 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	e018      	b.n	800cac4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ca92:	6a3b      	ldr	r3, [r7, #32]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d007      	beq.n	800caa8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ca98:	8a7b      	ldrh	r3, [r7, #18]
 800ca9a:	3303      	adds	r3, #3
 800ca9c:	f023 0303 	bic.w	r3, r3, #3
 800caa0:	6a3a      	ldr	r2, [r7, #32]
 800caa2:	4413      	add	r3, r2
 800caa4:	617b      	str	r3, [r7, #20]
 800caa6:	e001      	b.n	800caac <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800caa8:	2300      	movs	r3, #0
 800caaa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	89b9      	ldrh	r1, [r7, #12]
 800cab0:	89ba      	ldrh	r2, [r7, #12]
 800cab2:	2302      	movs	r3, #2
 800cab4:	9301      	str	r3, [sp, #4]
 800cab6:	897b      	ldrh	r3, [r7, #10]
 800cab8:	9300      	str	r3, [sp, #0]
 800caba:	460b      	mov	r3, r1
 800cabc:	6979      	ldr	r1, [r7, #20]
 800cabe:	f7ff fe7d 	bl	800c7bc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cac2:	687b      	ldr	r3, [r7, #4]
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3718      	adds	r7, #24
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	460b      	mov	r3, r1
 800cad6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d106      	bne.n	800caec <pbuf_realloc+0x20>
 800cade:	4b3a      	ldr	r3, [pc, #232]	; (800cbc8 <pbuf_realloc+0xfc>)
 800cae0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cae4:	4939      	ldr	r1, [pc, #228]	; (800cbcc <pbuf_realloc+0x100>)
 800cae6:	483a      	ldr	r0, [pc, #232]	; (800cbd0 <pbuf_realloc+0x104>)
 800cae8:	f00b ff62 	bl	80189b0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	891b      	ldrh	r3, [r3, #8]
 800caf0:	887a      	ldrh	r2, [r7, #2]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d263      	bcs.n	800cbbe <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	891a      	ldrh	r2, [r3, #8]
 800cafa:	887b      	ldrh	r3, [r7, #2]
 800cafc:	1ad3      	subs	r3, r2, r3
 800cafe:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cb00:	887b      	ldrh	r3, [r7, #2]
 800cb02:	817b      	strh	r3, [r7, #10]
  q = p;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cb08:	e018      	b.n	800cb3c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	895b      	ldrh	r3, [r3, #10]
 800cb0e:	897a      	ldrh	r2, [r7, #10]
 800cb10:	1ad3      	subs	r3, r2, r3
 800cb12:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	891a      	ldrh	r2, [r3, #8]
 800cb18:	893b      	ldrh	r3, [r7, #8]
 800cb1a:	1ad3      	subs	r3, r2, r3
 800cb1c:	b29a      	uxth	r2, r3
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d106      	bne.n	800cb3c <pbuf_realloc+0x70>
 800cb2e:	4b26      	ldr	r3, [pc, #152]	; (800cbc8 <pbuf_realloc+0xfc>)
 800cb30:	f240 12af 	movw	r2, #431	; 0x1af
 800cb34:	4927      	ldr	r1, [pc, #156]	; (800cbd4 <pbuf_realloc+0x108>)
 800cb36:	4826      	ldr	r0, [pc, #152]	; (800cbd0 <pbuf_realloc+0x104>)
 800cb38:	f00b ff3a 	bl	80189b0 <iprintf>
  while (rem_len > q->len) {
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	895b      	ldrh	r3, [r3, #10]
 800cb40:	897a      	ldrh	r2, [r7, #10]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d8e1      	bhi.n	800cb0a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	7b1b      	ldrb	r3, [r3, #12]
 800cb4a:	f003 030f 	and.w	r3, r3, #15
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d121      	bne.n	800cb96 <pbuf_realloc+0xca>
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	895b      	ldrh	r3, [r3, #10]
 800cb56:	897a      	ldrh	r2, [r7, #10]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d01c      	beq.n	800cb96 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	7b5b      	ldrb	r3, [r3, #13]
 800cb60:	f003 0302 	and.w	r3, r3, #2
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d116      	bne.n	800cb96 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	685a      	ldr	r2, [r3, #4]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	1ad3      	subs	r3, r2, r3
 800cb70:	b29a      	uxth	r2, r3
 800cb72:	897b      	ldrh	r3, [r7, #10]
 800cb74:	4413      	add	r3, r2
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	4619      	mov	r1, r3
 800cb7a:	68f8      	ldr	r0, [r7, #12]
 800cb7c:	f7fe ff58 	bl	800ba30 <mem_trim>
 800cb80:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d106      	bne.n	800cb96 <pbuf_realloc+0xca>
 800cb88:	4b0f      	ldr	r3, [pc, #60]	; (800cbc8 <pbuf_realloc+0xfc>)
 800cb8a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cb8e:	4912      	ldr	r1, [pc, #72]	; (800cbd8 <pbuf_realloc+0x10c>)
 800cb90:	480f      	ldr	r0, [pc, #60]	; (800cbd0 <pbuf_realloc+0x104>)
 800cb92:	f00b ff0d 	bl	80189b0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	897a      	ldrh	r2, [r7, #10]
 800cb9a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	895a      	ldrh	r2, [r3, #10]
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d004      	beq.n	800cbb6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f000 f911 	bl	800cdd8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	601a      	str	r2, [r3, #0]
 800cbbc:	e000      	b.n	800cbc0 <pbuf_realloc+0xf4>
    return;
 800cbbe:	bf00      	nop

}
 800cbc0:	3710      	adds	r7, #16
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	0801ac98 	.word	0x0801ac98
 800cbcc:	0801adb0 	.word	0x0801adb0
 800cbd0:	0801acf8 	.word	0x0801acf8
 800cbd4:	0801adc8 	.word	0x0801adc8
 800cbd8:	0801ade0 	.word	0x0801ade0

0800cbdc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b086      	sub	sp, #24
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	60f8      	str	r0, [r7, #12]
 800cbe4:	60b9      	str	r1, [r7, #8]
 800cbe6:	4613      	mov	r3, r2
 800cbe8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d106      	bne.n	800cbfe <pbuf_add_header_impl+0x22>
 800cbf0:	4b2b      	ldr	r3, [pc, #172]	; (800cca0 <pbuf_add_header_impl+0xc4>)
 800cbf2:	f240 12df 	movw	r2, #479	; 0x1df
 800cbf6:	492b      	ldr	r1, [pc, #172]	; (800cca4 <pbuf_add_header_impl+0xc8>)
 800cbf8:	482b      	ldr	r0, [pc, #172]	; (800cca8 <pbuf_add_header_impl+0xcc>)
 800cbfa:	f00b fed9 	bl	80189b0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d003      	beq.n	800cc0c <pbuf_add_header_impl+0x30>
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc0a:	d301      	bcc.n	800cc10 <pbuf_add_header_impl+0x34>
    return 1;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	e043      	b.n	800cc98 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d101      	bne.n	800cc1a <pbuf_add_header_impl+0x3e>
    return 0;
 800cc16:	2300      	movs	r3, #0
 800cc18:	e03e      	b.n	800cc98 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	891a      	ldrh	r2, [r3, #8]
 800cc22:	8a7b      	ldrh	r3, [r7, #18]
 800cc24:	4413      	add	r3, r2
 800cc26:	b29b      	uxth	r3, r3
 800cc28:	8a7a      	ldrh	r2, [r7, #18]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d901      	bls.n	800cc32 <pbuf_add_header_impl+0x56>
    return 1;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	e032      	b.n	800cc98 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	7b1b      	ldrb	r3, [r3, #12]
 800cc36:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cc38:	8a3b      	ldrh	r3, [r7, #16]
 800cc3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d00c      	beq.n	800cc5c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	685a      	ldr	r2, [r3, #4]
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	425b      	negs	r3, r3
 800cc4a:	4413      	add	r3, r2
 800cc4c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	3310      	adds	r3, #16
 800cc52:	697a      	ldr	r2, [r7, #20]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d20d      	bcs.n	800cc74 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	e01d      	b.n	800cc98 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800cc5c:	79fb      	ldrb	r3, [r7, #7]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d006      	beq.n	800cc70 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	685a      	ldr	r2, [r3, #4]
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	425b      	negs	r3, r3
 800cc6a:	4413      	add	r3, r2
 800cc6c:	617b      	str	r3, [r7, #20]
 800cc6e:	e001      	b.n	800cc74 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cc70:	2301      	movs	r3, #1
 800cc72:	e011      	b.n	800cc98 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	697a      	ldr	r2, [r7, #20]
 800cc78:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	895a      	ldrh	r2, [r3, #10]
 800cc7e:	8a7b      	ldrh	r3, [r7, #18]
 800cc80:	4413      	add	r3, r2
 800cc82:	b29a      	uxth	r2, r3
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	891a      	ldrh	r2, [r3, #8]
 800cc8c:	8a7b      	ldrh	r3, [r7, #18]
 800cc8e:	4413      	add	r3, r2
 800cc90:	b29a      	uxth	r2, r3
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	811a      	strh	r2, [r3, #8]


  return 0;
 800cc96:	2300      	movs	r3, #0
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3718      	adds	r7, #24
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	0801ac98 	.word	0x0801ac98
 800cca4:	0801adfc 	.word	0x0801adfc
 800cca8:	0801acf8 	.word	0x0801acf8

0800ccac <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	6839      	ldr	r1, [r7, #0]
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f7ff ff8e 	bl	800cbdc <pbuf_add_header_impl>
 800ccc0:	4603      	mov	r3, r0
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3708      	adds	r7, #8
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
	...

0800cccc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d106      	bne.n	800ccea <pbuf_remove_header+0x1e>
 800ccdc:	4b20      	ldr	r3, [pc, #128]	; (800cd60 <pbuf_remove_header+0x94>)
 800ccde:	f240 224b 	movw	r2, #587	; 0x24b
 800cce2:	4920      	ldr	r1, [pc, #128]	; (800cd64 <pbuf_remove_header+0x98>)
 800cce4:	4820      	ldr	r0, [pc, #128]	; (800cd68 <pbuf_remove_header+0x9c>)
 800cce6:	f00b fe63 	bl	80189b0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d003      	beq.n	800ccf8 <pbuf_remove_header+0x2c>
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccf6:	d301      	bcc.n	800ccfc <pbuf_remove_header+0x30>
    return 1;
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	e02c      	b.n	800cd56 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d101      	bne.n	800cd06 <pbuf_remove_header+0x3a>
    return 0;
 800cd02:	2300      	movs	r3, #0
 800cd04:	e027      	b.n	800cd56 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	895b      	ldrh	r3, [r3, #10]
 800cd0e:	89fa      	ldrh	r2, [r7, #14]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d908      	bls.n	800cd26 <pbuf_remove_header+0x5a>
 800cd14:	4b12      	ldr	r3, [pc, #72]	; (800cd60 <pbuf_remove_header+0x94>)
 800cd16:	f240 2255 	movw	r2, #597	; 0x255
 800cd1a:	4914      	ldr	r1, [pc, #80]	; (800cd6c <pbuf_remove_header+0xa0>)
 800cd1c:	4812      	ldr	r0, [pc, #72]	; (800cd68 <pbuf_remove_header+0x9c>)
 800cd1e:	f00b fe47 	bl	80189b0 <iprintf>
 800cd22:	2301      	movs	r3, #1
 800cd24:	e017      	b.n	800cd56 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	685a      	ldr	r2, [r3, #4]
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	441a      	add	r2, r3
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	895a      	ldrh	r2, [r3, #10]
 800cd3c:	89fb      	ldrh	r3, [r7, #14]
 800cd3e:	1ad3      	subs	r3, r2, r3
 800cd40:	b29a      	uxth	r2, r3
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	891a      	ldrh	r2, [r3, #8]
 800cd4a:	89fb      	ldrh	r3, [r7, #14]
 800cd4c:	1ad3      	subs	r3, r2, r3
 800cd4e:	b29a      	uxth	r2, r3
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cd54:	2300      	movs	r3, #0
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	0801ac98 	.word	0x0801ac98
 800cd64:	0801adfc 	.word	0x0801adfc
 800cd68:	0801acf8 	.word	0x0801acf8
 800cd6c:	0801ae08 	.word	0x0801ae08

0800cd70 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	460b      	mov	r3, r1
 800cd7a:	807b      	strh	r3, [r7, #2]
 800cd7c:	4613      	mov	r3, r2
 800cd7e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cd80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	da08      	bge.n	800cd9a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cd88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd8c:	425b      	negs	r3, r3
 800cd8e:	4619      	mov	r1, r3
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f7ff ff9b 	bl	800cccc <pbuf_remove_header>
 800cd96:	4603      	mov	r3, r0
 800cd98:	e007      	b.n	800cdaa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cd9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd9e:	787a      	ldrb	r2, [r7, #1]
 800cda0:	4619      	mov	r1, r3
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f7ff ff1a 	bl	800cbdc <pbuf_add_header_impl>
 800cda8:	4603      	mov	r3, r0
  }
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3708      	adds	r7, #8
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b082      	sub	sp, #8
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
 800cdba:	460b      	mov	r3, r1
 800cdbc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cdbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f7ff ffd2 	bl	800cd70 <pbuf_header_impl>
 800cdcc:	4603      	mov	r3, r0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3708      	adds	r7, #8
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
	...

0800cdd8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b088      	sub	sp, #32
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d10b      	bne.n	800cdfe <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d106      	bne.n	800cdfa <pbuf_free+0x22>
 800cdec:	4b3b      	ldr	r3, [pc, #236]	; (800cedc <pbuf_free+0x104>)
 800cdee:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800cdf2:	493b      	ldr	r1, [pc, #236]	; (800cee0 <pbuf_free+0x108>)
 800cdf4:	483b      	ldr	r0, [pc, #236]	; (800cee4 <pbuf_free+0x10c>)
 800cdf6:	f00b fddb 	bl	80189b0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	e069      	b.n	800ced2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ce02:	e062      	b.n	800ceca <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ce04:	f00b fcc8 	bl	8018798 <sys_arch_protect>
 800ce08:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	7b9b      	ldrb	r3, [r3, #14]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d106      	bne.n	800ce20 <pbuf_free+0x48>
 800ce12:	4b32      	ldr	r3, [pc, #200]	; (800cedc <pbuf_free+0x104>)
 800ce14:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ce18:	4933      	ldr	r1, [pc, #204]	; (800cee8 <pbuf_free+0x110>)
 800ce1a:	4832      	ldr	r0, [pc, #200]	; (800cee4 <pbuf_free+0x10c>)
 800ce1c:	f00b fdc8 	bl	80189b0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	7b9b      	ldrb	r3, [r3, #14]
 800ce24:	3b01      	subs	r3, #1
 800ce26:	b2da      	uxtb	r2, r3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	739a      	strb	r2, [r3, #14]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	7b9b      	ldrb	r3, [r3, #14]
 800ce30:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ce32:	69b8      	ldr	r0, [r7, #24]
 800ce34:	f00b fcbe 	bl	80187b4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ce38:	7dfb      	ldrb	r3, [r7, #23]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d143      	bne.n	800cec6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	7b1b      	ldrb	r3, [r3, #12]
 800ce48:	f003 030f 	and.w	r3, r3, #15
 800ce4c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	7b5b      	ldrb	r3, [r3, #13]
 800ce52:	f003 0302 	and.w	r3, r3, #2
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d011      	beq.n	800ce7e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	691b      	ldr	r3, [r3, #16]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d106      	bne.n	800ce74 <pbuf_free+0x9c>
 800ce66:	4b1d      	ldr	r3, [pc, #116]	; (800cedc <pbuf_free+0x104>)
 800ce68:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ce6c:	491f      	ldr	r1, [pc, #124]	; (800ceec <pbuf_free+0x114>)
 800ce6e:	481d      	ldr	r0, [pc, #116]	; (800cee4 <pbuf_free+0x10c>)
 800ce70:	f00b fd9e 	bl	80189b0 <iprintf>
        pc->custom_free_function(p);
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	691b      	ldr	r3, [r3, #16]
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	4798      	blx	r3
 800ce7c:	e01d      	b.n	800ceba <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ce7e:	7bfb      	ldrb	r3, [r7, #15]
 800ce80:	2b02      	cmp	r3, #2
 800ce82:	d104      	bne.n	800ce8e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ce84:	6879      	ldr	r1, [r7, #4]
 800ce86:	200c      	movs	r0, #12
 800ce88:	f7ff f8f6 	bl	800c078 <memp_free>
 800ce8c:	e015      	b.n	800ceba <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ce8e:	7bfb      	ldrb	r3, [r7, #15]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d104      	bne.n	800ce9e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ce94:	6879      	ldr	r1, [r7, #4]
 800ce96:	200b      	movs	r0, #11
 800ce98:	f7ff f8ee 	bl	800c078 <memp_free>
 800ce9c:	e00d      	b.n	800ceba <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ce9e:	7bfb      	ldrb	r3, [r7, #15]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d103      	bne.n	800ceac <pbuf_free+0xd4>
          mem_free(p);
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f7fe fd33 	bl	800b910 <mem_free>
 800ceaa:	e006      	b.n	800ceba <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ceac:	4b0b      	ldr	r3, [pc, #44]	; (800cedc <pbuf_free+0x104>)
 800ceae:	f240 320f 	movw	r2, #783	; 0x30f
 800ceb2:	490f      	ldr	r1, [pc, #60]	; (800cef0 <pbuf_free+0x118>)
 800ceb4:	480b      	ldr	r0, [pc, #44]	; (800cee4 <pbuf_free+0x10c>)
 800ceb6:	f00b fd7b 	bl	80189b0 <iprintf>
        }
      }
      count++;
 800ceba:	7ffb      	ldrb	r3, [r7, #31]
 800cebc:	3301      	adds	r3, #1
 800cebe:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	607b      	str	r3, [r7, #4]
 800cec4:	e001      	b.n	800ceca <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800cec6:	2300      	movs	r3, #0
 800cec8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d199      	bne.n	800ce04 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ced0:	7ffb      	ldrb	r3, [r7, #31]
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3720      	adds	r7, #32
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	0801ac98 	.word	0x0801ac98
 800cee0:	0801adfc 	.word	0x0801adfc
 800cee4:	0801acf8 	.word	0x0801acf8
 800cee8:	0801ae28 	.word	0x0801ae28
 800ceec:	0801ae40 	.word	0x0801ae40
 800cef0:	0801ae64 	.word	0x0801ae64

0800cef4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b085      	sub	sp, #20
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800cefc:	2300      	movs	r3, #0
 800cefe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cf00:	e005      	b.n	800cf0e <pbuf_clen+0x1a>
    ++len;
 800cf02:	89fb      	ldrh	r3, [r7, #14]
 800cf04:	3301      	adds	r3, #1
 800cf06:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d1f6      	bne.n	800cf02 <pbuf_clen+0xe>
  }
  return len;
 800cf14:	89fb      	ldrh	r3, [r7, #14]
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3714      	adds	r7, #20
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf20:	4770      	bx	lr
	...

0800cf24 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d016      	beq.n	800cf60 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cf32:	f00b fc31 	bl	8018798 <sys_arch_protect>
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	7b9b      	ldrb	r3, [r3, #14]
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	b2da      	uxtb	r2, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	739a      	strb	r2, [r3, #14]
 800cf44:	68f8      	ldr	r0, [r7, #12]
 800cf46:	f00b fc35 	bl	80187b4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	7b9b      	ldrb	r3, [r3, #14]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d106      	bne.n	800cf60 <pbuf_ref+0x3c>
 800cf52:	4b05      	ldr	r3, [pc, #20]	; (800cf68 <pbuf_ref+0x44>)
 800cf54:	f240 3242 	movw	r2, #834	; 0x342
 800cf58:	4904      	ldr	r1, [pc, #16]	; (800cf6c <pbuf_ref+0x48>)
 800cf5a:	4805      	ldr	r0, [pc, #20]	; (800cf70 <pbuf_ref+0x4c>)
 800cf5c:	f00b fd28 	bl	80189b0 <iprintf>
  }
}
 800cf60:	bf00      	nop
 800cf62:	3710      	adds	r7, #16
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	0801ac98 	.word	0x0801ac98
 800cf6c:	0801ae78 	.word	0x0801ae78
 800cf70:	0801acf8 	.word	0x0801acf8

0800cf74 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d002      	beq.n	800cf8a <pbuf_cat+0x16>
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d107      	bne.n	800cf9a <pbuf_cat+0x26>
 800cf8a:	4b20      	ldr	r3, [pc, #128]	; (800d00c <pbuf_cat+0x98>)
 800cf8c:	f240 3259 	movw	r2, #857	; 0x359
 800cf90:	491f      	ldr	r1, [pc, #124]	; (800d010 <pbuf_cat+0x9c>)
 800cf92:	4820      	ldr	r0, [pc, #128]	; (800d014 <pbuf_cat+0xa0>)
 800cf94:	f00b fd0c 	bl	80189b0 <iprintf>
 800cf98:	e034      	b.n	800d004 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	60fb      	str	r3, [r7, #12]
 800cf9e:	e00a      	b.n	800cfb6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	891a      	ldrh	r2, [r3, #8]
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	891b      	ldrh	r3, [r3, #8]
 800cfa8:	4413      	add	r3, r2
 800cfaa:	b29a      	uxth	r2, r3
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	60fb      	str	r3, [r7, #12]
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d1f0      	bne.n	800cfa0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	891a      	ldrh	r2, [r3, #8]
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	895b      	ldrh	r3, [r3, #10]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d006      	beq.n	800cfd8 <pbuf_cat+0x64>
 800cfca:	4b10      	ldr	r3, [pc, #64]	; (800d00c <pbuf_cat+0x98>)
 800cfcc:	f240 3262 	movw	r2, #866	; 0x362
 800cfd0:	4911      	ldr	r1, [pc, #68]	; (800d018 <pbuf_cat+0xa4>)
 800cfd2:	4810      	ldr	r0, [pc, #64]	; (800d014 <pbuf_cat+0xa0>)
 800cfd4:	f00b fcec 	bl	80189b0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d006      	beq.n	800cfee <pbuf_cat+0x7a>
 800cfe0:	4b0a      	ldr	r3, [pc, #40]	; (800d00c <pbuf_cat+0x98>)
 800cfe2:	f240 3263 	movw	r2, #867	; 0x363
 800cfe6:	490d      	ldr	r1, [pc, #52]	; (800d01c <pbuf_cat+0xa8>)
 800cfe8:	480a      	ldr	r0, [pc, #40]	; (800d014 <pbuf_cat+0xa0>)
 800cfea:	f00b fce1 	bl	80189b0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	891a      	ldrh	r2, [r3, #8]
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	891b      	ldrh	r3, [r3, #8]
 800cff6:	4413      	add	r3, r2
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	683a      	ldr	r2, [r7, #0]
 800d002:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d004:	3710      	adds	r7, #16
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	bf00      	nop
 800d00c:	0801ac98 	.word	0x0801ac98
 800d010:	0801ae8c 	.word	0x0801ae8c
 800d014:	0801acf8 	.word	0x0801acf8
 800d018:	0801aec4 	.word	0x0801aec4
 800d01c:	0801aef4 	.word	0x0801aef4

0800d020 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d02a:	6839      	ldr	r1, [r7, #0]
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f7ff ffa1 	bl	800cf74 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d032:	6838      	ldr	r0, [r7, #0]
 800d034:	f7ff ff76 	bl	800cf24 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d038:	bf00      	nop
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b086      	sub	sp, #24
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d04a:	2300      	movs	r3, #0
 800d04c:	617b      	str	r3, [r7, #20]
 800d04e:	2300      	movs	r3, #0
 800d050:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d008      	beq.n	800d06a <pbuf_copy+0x2a>
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d005      	beq.n	800d06a <pbuf_copy+0x2a>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	891a      	ldrh	r2, [r3, #8]
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	891b      	ldrh	r3, [r3, #8]
 800d066:	429a      	cmp	r2, r3
 800d068:	d209      	bcs.n	800d07e <pbuf_copy+0x3e>
 800d06a:	4b57      	ldr	r3, [pc, #348]	; (800d1c8 <pbuf_copy+0x188>)
 800d06c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d070:	4956      	ldr	r1, [pc, #344]	; (800d1cc <pbuf_copy+0x18c>)
 800d072:	4857      	ldr	r0, [pc, #348]	; (800d1d0 <pbuf_copy+0x190>)
 800d074:	f00b fc9c 	bl	80189b0 <iprintf>
 800d078:	f06f 030f 	mvn.w	r3, #15
 800d07c:	e09f      	b.n	800d1be <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	895b      	ldrh	r3, [r3, #10]
 800d082:	461a      	mov	r2, r3
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	1ad2      	subs	r2, r2, r3
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	895b      	ldrh	r3, [r3, #10]
 800d08c:	4619      	mov	r1, r3
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	1acb      	subs	r3, r1, r3
 800d092:	429a      	cmp	r2, r3
 800d094:	d306      	bcc.n	800d0a4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	895b      	ldrh	r3, [r3, #10]
 800d09a:	461a      	mov	r2, r3
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	1ad3      	subs	r3, r2, r3
 800d0a0:	60fb      	str	r3, [r7, #12]
 800d0a2:	e005      	b.n	800d0b0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	895b      	ldrh	r3, [r3, #10]
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	1ad3      	subs	r3, r2, r3
 800d0ae:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	685a      	ldr	r2, [r3, #4]
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	18d0      	adds	r0, r2, r3
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	685a      	ldr	r2, [r3, #4]
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	4413      	add	r3, r2
 800d0c0:	68fa      	ldr	r2, [r7, #12]
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	f00b fdc2 	bl	8018c4c <memcpy>
    offset_to += len;
 800d0c8:	697a      	ldr	r2, [r7, #20]
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	4413      	add	r3, r2
 800d0ce:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d0d0:	693a      	ldr	r2, [r7, #16]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	895b      	ldrh	r3, [r3, #10]
 800d0dc:	461a      	mov	r2, r3
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d906      	bls.n	800d0f2 <pbuf_copy+0xb2>
 800d0e4:	4b38      	ldr	r3, [pc, #224]	; (800d1c8 <pbuf_copy+0x188>)
 800d0e6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d0ea:	493a      	ldr	r1, [pc, #232]	; (800d1d4 <pbuf_copy+0x194>)
 800d0ec:	4838      	ldr	r0, [pc, #224]	; (800d1d0 <pbuf_copy+0x190>)
 800d0ee:	f00b fc5f 	bl	80189b0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	895b      	ldrh	r3, [r3, #10]
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d906      	bls.n	800d10c <pbuf_copy+0xcc>
 800d0fe:	4b32      	ldr	r3, [pc, #200]	; (800d1c8 <pbuf_copy+0x188>)
 800d100:	f240 32da 	movw	r2, #986	; 0x3da
 800d104:	4934      	ldr	r1, [pc, #208]	; (800d1d8 <pbuf_copy+0x198>)
 800d106:	4832      	ldr	r0, [pc, #200]	; (800d1d0 <pbuf_copy+0x190>)
 800d108:	f00b fc52 	bl	80189b0 <iprintf>
    if (offset_from >= p_from->len) {
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	895b      	ldrh	r3, [r3, #10]
 800d110:	461a      	mov	r2, r3
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	4293      	cmp	r3, r2
 800d116:	d304      	bcc.n	800d122 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d118:	2300      	movs	r3, #0
 800d11a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	895b      	ldrh	r3, [r3, #10]
 800d126:	461a      	mov	r2, r3
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d114      	bne.n	800d158 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d12e:	2300      	movs	r3, #0
 800d130:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d10c      	bne.n	800d158 <pbuf_copy+0x118>
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d009      	beq.n	800d158 <pbuf_copy+0x118>
 800d144:	4b20      	ldr	r3, [pc, #128]	; (800d1c8 <pbuf_copy+0x188>)
 800d146:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d14a:	4924      	ldr	r1, [pc, #144]	; (800d1dc <pbuf_copy+0x19c>)
 800d14c:	4820      	ldr	r0, [pc, #128]	; (800d1d0 <pbuf_copy+0x190>)
 800d14e:	f00b fc2f 	bl	80189b0 <iprintf>
 800d152:	f06f 030f 	mvn.w	r3, #15
 800d156:	e032      	b.n	800d1be <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d013      	beq.n	800d186 <pbuf_copy+0x146>
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	895a      	ldrh	r2, [r3, #10]
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	891b      	ldrh	r3, [r3, #8]
 800d166:	429a      	cmp	r2, r3
 800d168:	d10d      	bne.n	800d186 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d009      	beq.n	800d186 <pbuf_copy+0x146>
 800d172:	4b15      	ldr	r3, [pc, #84]	; (800d1c8 <pbuf_copy+0x188>)
 800d174:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d178:	4919      	ldr	r1, [pc, #100]	; (800d1e0 <pbuf_copy+0x1a0>)
 800d17a:	4815      	ldr	r0, [pc, #84]	; (800d1d0 <pbuf_copy+0x190>)
 800d17c:	f00b fc18 	bl	80189b0 <iprintf>
 800d180:	f06f 0305 	mvn.w	r3, #5
 800d184:	e01b      	b.n	800d1be <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d013      	beq.n	800d1b4 <pbuf_copy+0x174>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	895a      	ldrh	r2, [r3, #10]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	891b      	ldrh	r3, [r3, #8]
 800d194:	429a      	cmp	r2, r3
 800d196:	d10d      	bne.n	800d1b4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d009      	beq.n	800d1b4 <pbuf_copy+0x174>
 800d1a0:	4b09      	ldr	r3, [pc, #36]	; (800d1c8 <pbuf_copy+0x188>)
 800d1a2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d1a6:	490e      	ldr	r1, [pc, #56]	; (800d1e0 <pbuf_copy+0x1a0>)
 800d1a8:	4809      	ldr	r0, [pc, #36]	; (800d1d0 <pbuf_copy+0x190>)
 800d1aa:	f00b fc01 	bl	80189b0 <iprintf>
 800d1ae:	f06f 0305 	mvn.w	r3, #5
 800d1b2:	e004      	b.n	800d1be <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	f47f af61 	bne.w	800d07e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d1bc:	2300      	movs	r3, #0
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3718      	adds	r7, #24
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	0801ac98 	.word	0x0801ac98
 800d1cc:	0801af40 	.word	0x0801af40
 800d1d0:	0801acf8 	.word	0x0801acf8
 800d1d4:	0801af70 	.word	0x0801af70
 800d1d8:	0801af88 	.word	0x0801af88
 800d1dc:	0801afa4 	.word	0x0801afa4
 800d1e0:	0801afb4 	.word	0x0801afb4

0800d1e4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b088      	sub	sp, #32
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	4611      	mov	r1, r2
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	80fb      	strh	r3, [r7, #6]
 800d1f6:	4613      	mov	r3, r2
 800d1f8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d1fe:	2300      	movs	r3, #0
 800d200:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d108      	bne.n	800d21a <pbuf_copy_partial+0x36>
 800d208:	4b2b      	ldr	r3, [pc, #172]	; (800d2b8 <pbuf_copy_partial+0xd4>)
 800d20a:	f240 420a 	movw	r2, #1034	; 0x40a
 800d20e:	492b      	ldr	r1, [pc, #172]	; (800d2bc <pbuf_copy_partial+0xd8>)
 800d210:	482b      	ldr	r0, [pc, #172]	; (800d2c0 <pbuf_copy_partial+0xdc>)
 800d212:	f00b fbcd 	bl	80189b0 <iprintf>
 800d216:	2300      	movs	r3, #0
 800d218:	e04a      	b.n	800d2b0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d108      	bne.n	800d232 <pbuf_copy_partial+0x4e>
 800d220:	4b25      	ldr	r3, [pc, #148]	; (800d2b8 <pbuf_copy_partial+0xd4>)
 800d222:	f240 420b 	movw	r2, #1035	; 0x40b
 800d226:	4927      	ldr	r1, [pc, #156]	; (800d2c4 <pbuf_copy_partial+0xe0>)
 800d228:	4825      	ldr	r0, [pc, #148]	; (800d2c0 <pbuf_copy_partial+0xdc>)
 800d22a:	f00b fbc1 	bl	80189b0 <iprintf>
 800d22e:	2300      	movs	r3, #0
 800d230:	e03e      	b.n	800d2b0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	61fb      	str	r3, [r7, #28]
 800d236:	e034      	b.n	800d2a2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d238:	88bb      	ldrh	r3, [r7, #4]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d00a      	beq.n	800d254 <pbuf_copy_partial+0x70>
 800d23e:	69fb      	ldr	r3, [r7, #28]
 800d240:	895b      	ldrh	r3, [r3, #10]
 800d242:	88ba      	ldrh	r2, [r7, #4]
 800d244:	429a      	cmp	r2, r3
 800d246:	d305      	bcc.n	800d254 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	895b      	ldrh	r3, [r3, #10]
 800d24c:	88ba      	ldrh	r2, [r7, #4]
 800d24e:	1ad3      	subs	r3, r2, r3
 800d250:	80bb      	strh	r3, [r7, #4]
 800d252:	e023      	b.n	800d29c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	895a      	ldrh	r2, [r3, #10]
 800d258:	88bb      	ldrh	r3, [r7, #4]
 800d25a:	1ad3      	subs	r3, r2, r3
 800d25c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d25e:	8b3a      	ldrh	r2, [r7, #24]
 800d260:	88fb      	ldrh	r3, [r7, #6]
 800d262:	429a      	cmp	r2, r3
 800d264:	d901      	bls.n	800d26a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d266:	88fb      	ldrh	r3, [r7, #6]
 800d268:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d26a:	8b7b      	ldrh	r3, [r7, #26]
 800d26c:	68ba      	ldr	r2, [r7, #8]
 800d26e:	18d0      	adds	r0, r2, r3
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	685a      	ldr	r2, [r3, #4]
 800d274:	88bb      	ldrh	r3, [r7, #4]
 800d276:	4413      	add	r3, r2
 800d278:	8b3a      	ldrh	r2, [r7, #24]
 800d27a:	4619      	mov	r1, r3
 800d27c:	f00b fce6 	bl	8018c4c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d280:	8afa      	ldrh	r2, [r7, #22]
 800d282:	8b3b      	ldrh	r3, [r7, #24]
 800d284:	4413      	add	r3, r2
 800d286:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d288:	8b7a      	ldrh	r2, [r7, #26]
 800d28a:	8b3b      	ldrh	r3, [r7, #24]
 800d28c:	4413      	add	r3, r2
 800d28e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d290:	88fa      	ldrh	r2, [r7, #6]
 800d292:	8b3b      	ldrh	r3, [r7, #24]
 800d294:	1ad3      	subs	r3, r2, r3
 800d296:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d298:	2300      	movs	r3, #0
 800d29a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d29c:	69fb      	ldr	r3, [r7, #28]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	61fb      	str	r3, [r7, #28]
 800d2a2:	88fb      	ldrh	r3, [r7, #6]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d002      	beq.n	800d2ae <pbuf_copy_partial+0xca>
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d1c4      	bne.n	800d238 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d2ae:	8afb      	ldrh	r3, [r7, #22]
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3720      	adds	r7, #32
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	0801ac98 	.word	0x0801ac98
 800d2bc:	0801afe0 	.word	0x0801afe0
 800d2c0:	0801acf8 	.word	0x0801acf8
 800d2c4:	0801b000 	.word	0x0801b000

0800d2c8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b084      	sub	sp, #16
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	603a      	str	r2, [r7, #0]
 800d2d2:	71fb      	strb	r3, [r7, #7]
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	8919      	ldrh	r1, [r3, #8]
 800d2dc:	88ba      	ldrh	r2, [r7, #4]
 800d2de:	79fb      	ldrb	r3, [r7, #7]
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7ff fa95 	bl	800c810 <pbuf_alloc>
 800d2e6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d101      	bne.n	800d2f2 <pbuf_clone+0x2a>
    return NULL;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	e011      	b.n	800d316 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d2f2:	6839      	ldr	r1, [r7, #0]
 800d2f4:	68f8      	ldr	r0, [r7, #12]
 800d2f6:	f7ff fea3 	bl	800d040 <pbuf_copy>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d2fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d006      	beq.n	800d314 <pbuf_clone+0x4c>
 800d306:	4b06      	ldr	r3, [pc, #24]	; (800d320 <pbuf_clone+0x58>)
 800d308:	f240 5224 	movw	r2, #1316	; 0x524
 800d30c:	4905      	ldr	r1, [pc, #20]	; (800d324 <pbuf_clone+0x5c>)
 800d30e:	4806      	ldr	r0, [pc, #24]	; (800d328 <pbuf_clone+0x60>)
 800d310:	f00b fb4e 	bl	80189b0 <iprintf>
  return q;
 800d314:	68fb      	ldr	r3, [r7, #12]
}
 800d316:	4618      	mov	r0, r3
 800d318:	3710      	adds	r7, #16
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop
 800d320:	0801ac98 	.word	0x0801ac98
 800d324:	0801b10c 	.word	0x0801b10c
 800d328:	0801acf8 	.word	0x0801acf8

0800d32c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d330:	f00b fa50 	bl	80187d4 <rand>
 800d334:	4603      	mov	r3, r0
 800d336:	b29b      	uxth	r3, r3
 800d338:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d342:	b29a      	uxth	r2, r3
 800d344:	4b01      	ldr	r3, [pc, #4]	; (800d34c <tcp_init+0x20>)
 800d346:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d348:	bf00      	nop
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	20000024 	.word	0x20000024

0800d350 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	7d1b      	ldrb	r3, [r3, #20]
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	d105      	bne.n	800d36c <tcp_free+0x1c>
 800d360:	4b06      	ldr	r3, [pc, #24]	; (800d37c <tcp_free+0x2c>)
 800d362:	22d4      	movs	r2, #212	; 0xd4
 800d364:	4906      	ldr	r1, [pc, #24]	; (800d380 <tcp_free+0x30>)
 800d366:	4807      	ldr	r0, [pc, #28]	; (800d384 <tcp_free+0x34>)
 800d368:	f00b fb22 	bl	80189b0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d36c:	6879      	ldr	r1, [r7, #4]
 800d36e:	2001      	movs	r0, #1
 800d370:	f7fe fe82 	bl	800c078 <memp_free>
}
 800d374:	bf00      	nop
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	0801b198 	.word	0x0801b198
 800d380:	0801b1c8 	.word	0x0801b1c8
 800d384:	0801b1dc 	.word	0x0801b1dc

0800d388 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	7d1b      	ldrb	r3, [r3, #20]
 800d394:	2b01      	cmp	r3, #1
 800d396:	d105      	bne.n	800d3a4 <tcp_free_listen+0x1c>
 800d398:	4b06      	ldr	r3, [pc, #24]	; (800d3b4 <tcp_free_listen+0x2c>)
 800d39a:	22df      	movs	r2, #223	; 0xdf
 800d39c:	4906      	ldr	r1, [pc, #24]	; (800d3b8 <tcp_free_listen+0x30>)
 800d39e:	4807      	ldr	r0, [pc, #28]	; (800d3bc <tcp_free_listen+0x34>)
 800d3a0:	f00b fb06 	bl	80189b0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d3a4:	6879      	ldr	r1, [r7, #4]
 800d3a6:	2002      	movs	r0, #2
 800d3a8:	f7fe fe66 	bl	800c078 <memp_free>
}
 800d3ac:	bf00      	nop
 800d3ae:	3708      	adds	r7, #8
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	0801b198 	.word	0x0801b198
 800d3b8:	0801b204 	.word	0x0801b204
 800d3bc:	0801b1dc 	.word	0x0801b1dc

0800d3c0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d3c4:	f001 f8b8 	bl	800e538 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d3c8:	4b07      	ldr	r3, [pc, #28]	; (800d3e8 <tcp_tmr+0x28>)
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	b2da      	uxtb	r2, r3
 800d3d0:	4b05      	ldr	r3, [pc, #20]	; (800d3e8 <tcp_tmr+0x28>)
 800d3d2:	701a      	strb	r2, [r3, #0]
 800d3d4:	4b04      	ldr	r3, [pc, #16]	; (800d3e8 <tcp_tmr+0x28>)
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	f003 0301 	and.w	r3, r3, #1
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d001      	beq.n	800d3e4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d3e0:	f000 fd6a 	bl	800deb8 <tcp_slowtmr>
  }
}
 800d3e4:	bf00      	nop
 800d3e6:	bd80      	pop	{r7, pc}
 800d3e8:	20010e15 	.word	0x20010e15

0800d3ec <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d105      	bne.n	800d408 <tcp_remove_listener+0x1c>
 800d3fc:	4b0d      	ldr	r3, [pc, #52]	; (800d434 <tcp_remove_listener+0x48>)
 800d3fe:	22ff      	movs	r2, #255	; 0xff
 800d400:	490d      	ldr	r1, [pc, #52]	; (800d438 <tcp_remove_listener+0x4c>)
 800d402:	480e      	ldr	r0, [pc, #56]	; (800d43c <tcp_remove_listener+0x50>)
 800d404:	f00b fad4 	bl	80189b0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	60fb      	str	r3, [r7, #12]
 800d40c:	e00a      	b.n	800d424 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d412:	683a      	ldr	r2, [r7, #0]
 800d414:	429a      	cmp	r2, r3
 800d416:	d102      	bne.n	800d41e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	2200      	movs	r2, #0
 800d41c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	68db      	ldr	r3, [r3, #12]
 800d422:	60fb      	str	r3, [r7, #12]
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d1f1      	bne.n	800d40e <tcp_remove_listener+0x22>
    }
  }
}
 800d42a:	bf00      	nop
 800d42c:	bf00      	nop
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	0801b198 	.word	0x0801b198
 800d438:	0801b220 	.word	0x0801b220
 800d43c:	0801b1dc 	.word	0x0801b1dc

0800d440 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d106      	bne.n	800d45c <tcp_listen_closed+0x1c>
 800d44e:	4b14      	ldr	r3, [pc, #80]	; (800d4a0 <tcp_listen_closed+0x60>)
 800d450:	f240 1211 	movw	r2, #273	; 0x111
 800d454:	4913      	ldr	r1, [pc, #76]	; (800d4a4 <tcp_listen_closed+0x64>)
 800d456:	4814      	ldr	r0, [pc, #80]	; (800d4a8 <tcp_listen_closed+0x68>)
 800d458:	f00b faaa 	bl	80189b0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	7d1b      	ldrb	r3, [r3, #20]
 800d460:	2b01      	cmp	r3, #1
 800d462:	d006      	beq.n	800d472 <tcp_listen_closed+0x32>
 800d464:	4b0e      	ldr	r3, [pc, #56]	; (800d4a0 <tcp_listen_closed+0x60>)
 800d466:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d46a:	4910      	ldr	r1, [pc, #64]	; (800d4ac <tcp_listen_closed+0x6c>)
 800d46c:	480e      	ldr	r0, [pc, #56]	; (800d4a8 <tcp_listen_closed+0x68>)
 800d46e:	f00b fa9f 	bl	80189b0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d472:	2301      	movs	r3, #1
 800d474:	60fb      	str	r3, [r7, #12]
 800d476:	e00b      	b.n	800d490 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d478:	4a0d      	ldr	r2, [pc, #52]	; (800d4b0 <tcp_listen_closed+0x70>)
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	6879      	ldr	r1, [r7, #4]
 800d484:	4618      	mov	r0, r3
 800d486:	f7ff ffb1 	bl	800d3ec <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	3301      	adds	r3, #1
 800d48e:	60fb      	str	r3, [r7, #12]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2b03      	cmp	r3, #3
 800d494:	d9f0      	bls.n	800d478 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d496:	bf00      	nop
 800d498:	bf00      	nop
 800d49a:	3710      	adds	r7, #16
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	0801b198 	.word	0x0801b198
 800d4a4:	0801b248 	.word	0x0801b248
 800d4a8:	0801b1dc 	.word	0x0801b1dc
 800d4ac:	0801b254 	.word	0x0801b254
 800d4b0:	0802769c 	.word	0x0802769c

0800d4b4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d4b4:	b5b0      	push	{r4, r5, r7, lr}
 800d4b6:	b088      	sub	sp, #32
 800d4b8:	af04      	add	r7, sp, #16
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	460b      	mov	r3, r1
 800d4be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d106      	bne.n	800d4d4 <tcp_close_shutdown+0x20>
 800d4c6:	4b63      	ldr	r3, [pc, #396]	; (800d654 <tcp_close_shutdown+0x1a0>)
 800d4c8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d4cc:	4962      	ldr	r1, [pc, #392]	; (800d658 <tcp_close_shutdown+0x1a4>)
 800d4ce:	4863      	ldr	r0, [pc, #396]	; (800d65c <tcp_close_shutdown+0x1a8>)
 800d4d0:	f00b fa6e 	bl	80189b0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d4d4:	78fb      	ldrb	r3, [r7, #3]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d066      	beq.n	800d5a8 <tcp_close_shutdown+0xf4>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	7d1b      	ldrb	r3, [r3, #20]
 800d4de:	2b04      	cmp	r3, #4
 800d4e0:	d003      	beq.n	800d4ea <tcp_close_shutdown+0x36>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	7d1b      	ldrb	r3, [r3, #20]
 800d4e6:	2b07      	cmp	r3, #7
 800d4e8:	d15e      	bne.n	800d5a8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d104      	bne.n	800d4fc <tcp_close_shutdown+0x48>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d4fa:	d055      	beq.n	800d5a8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	8b5b      	ldrh	r3, [r3, #26]
 800d500:	f003 0310 	and.w	r3, r3, #16
 800d504:	2b00      	cmp	r3, #0
 800d506:	d106      	bne.n	800d516 <tcp_close_shutdown+0x62>
 800d508:	4b52      	ldr	r3, [pc, #328]	; (800d654 <tcp_close_shutdown+0x1a0>)
 800d50a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d50e:	4954      	ldr	r1, [pc, #336]	; (800d660 <tcp_close_shutdown+0x1ac>)
 800d510:	4852      	ldr	r0, [pc, #328]	; (800d65c <tcp_close_shutdown+0x1a8>)
 800d512:	f00b fa4d 	bl	80189b0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d51e:	687d      	ldr	r5, [r7, #4]
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	3304      	adds	r3, #4
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	8ad2      	ldrh	r2, [r2, #22]
 800d528:	6879      	ldr	r1, [r7, #4]
 800d52a:	8b09      	ldrh	r1, [r1, #24]
 800d52c:	9102      	str	r1, [sp, #8]
 800d52e:	9201      	str	r2, [sp, #4]
 800d530:	9300      	str	r3, [sp, #0]
 800d532:	462b      	mov	r3, r5
 800d534:	4622      	mov	r2, r4
 800d536:	4601      	mov	r1, r0
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f005 fdeb 	bl	8013114 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f001 fbc8 	bl	800ecd4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d544:	4b47      	ldr	r3, [pc, #284]	; (800d664 <tcp_close_shutdown+0x1b0>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	687a      	ldr	r2, [r7, #4]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d105      	bne.n	800d55a <tcp_close_shutdown+0xa6>
 800d54e:	4b45      	ldr	r3, [pc, #276]	; (800d664 <tcp_close_shutdown+0x1b0>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	68db      	ldr	r3, [r3, #12]
 800d554:	4a43      	ldr	r2, [pc, #268]	; (800d664 <tcp_close_shutdown+0x1b0>)
 800d556:	6013      	str	r3, [r2, #0]
 800d558:	e013      	b.n	800d582 <tcp_close_shutdown+0xce>
 800d55a:	4b42      	ldr	r3, [pc, #264]	; (800d664 <tcp_close_shutdown+0x1b0>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	60fb      	str	r3, [r7, #12]
 800d560:	e00c      	b.n	800d57c <tcp_close_shutdown+0xc8>
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	68db      	ldr	r3, [r3, #12]
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	429a      	cmp	r2, r3
 800d56a:	d104      	bne.n	800d576 <tcp_close_shutdown+0xc2>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	68da      	ldr	r2, [r3, #12]
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	60da      	str	r2, [r3, #12]
 800d574:	e005      	b.n	800d582 <tcp_close_shutdown+0xce>
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	68db      	ldr	r3, [r3, #12]
 800d57a:	60fb      	str	r3, [r7, #12]
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d1ef      	bne.n	800d562 <tcp_close_shutdown+0xae>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2200      	movs	r2, #0
 800d586:	60da      	str	r2, [r3, #12]
 800d588:	4b37      	ldr	r3, [pc, #220]	; (800d668 <tcp_close_shutdown+0x1b4>)
 800d58a:	2201      	movs	r2, #1
 800d58c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d58e:	4b37      	ldr	r3, [pc, #220]	; (800d66c <tcp_close_shutdown+0x1b8>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	687a      	ldr	r2, [r7, #4]
 800d594:	429a      	cmp	r2, r3
 800d596:	d102      	bne.n	800d59e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d598:	f004 f860 	bl	801165c <tcp_trigger_input_pcb_close>
 800d59c:	e002      	b.n	800d5a4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f7ff fed6 	bl	800d350 <tcp_free>
      }
      return ERR_OK;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	e050      	b.n	800d64a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	7d1b      	ldrb	r3, [r3, #20]
 800d5ac:	2b02      	cmp	r3, #2
 800d5ae:	d03b      	beq.n	800d628 <tcp_close_shutdown+0x174>
 800d5b0:	2b02      	cmp	r3, #2
 800d5b2:	dc44      	bgt.n	800d63e <tcp_close_shutdown+0x18a>
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d002      	beq.n	800d5be <tcp_close_shutdown+0x10a>
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	d02a      	beq.n	800d612 <tcp_close_shutdown+0x15e>
 800d5bc:	e03f      	b.n	800d63e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	8adb      	ldrh	r3, [r3, #22]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d021      	beq.n	800d60a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d5c6:	4b2a      	ldr	r3, [pc, #168]	; (800d670 <tcp_close_shutdown+0x1bc>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d105      	bne.n	800d5dc <tcp_close_shutdown+0x128>
 800d5d0:	4b27      	ldr	r3, [pc, #156]	; (800d670 <tcp_close_shutdown+0x1bc>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	68db      	ldr	r3, [r3, #12]
 800d5d6:	4a26      	ldr	r2, [pc, #152]	; (800d670 <tcp_close_shutdown+0x1bc>)
 800d5d8:	6013      	str	r3, [r2, #0]
 800d5da:	e013      	b.n	800d604 <tcp_close_shutdown+0x150>
 800d5dc:	4b24      	ldr	r3, [pc, #144]	; (800d670 <tcp_close_shutdown+0x1bc>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	60bb      	str	r3, [r7, #8]
 800d5e2:	e00c      	b.n	800d5fe <tcp_close_shutdown+0x14a>
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d104      	bne.n	800d5f8 <tcp_close_shutdown+0x144>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	68da      	ldr	r2, [r3, #12]
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	60da      	str	r2, [r3, #12]
 800d5f6:	e005      	b.n	800d604 <tcp_close_shutdown+0x150>
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	68db      	ldr	r3, [r3, #12]
 800d5fc:	60bb      	str	r3, [r7, #8]
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d1ef      	bne.n	800d5e4 <tcp_close_shutdown+0x130>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2200      	movs	r2, #0
 800d608:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f7ff fea0 	bl	800d350 <tcp_free>
      break;
 800d610:	e01a      	b.n	800d648 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f7ff ff14 	bl	800d440 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d618:	6879      	ldr	r1, [r7, #4]
 800d61a:	4816      	ldr	r0, [pc, #88]	; (800d674 <tcp_close_shutdown+0x1c0>)
 800d61c:	f001 fbaa 	bl	800ed74 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f7ff feb1 	bl	800d388 <tcp_free_listen>
      break;
 800d626:	e00f      	b.n	800d648 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d628:	6879      	ldr	r1, [r7, #4]
 800d62a:	480e      	ldr	r0, [pc, #56]	; (800d664 <tcp_close_shutdown+0x1b0>)
 800d62c:	f001 fba2 	bl	800ed74 <tcp_pcb_remove>
 800d630:	4b0d      	ldr	r3, [pc, #52]	; (800d668 <tcp_close_shutdown+0x1b4>)
 800d632:	2201      	movs	r2, #1
 800d634:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f7ff fe8a 	bl	800d350 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d63c:	e004      	b.n	800d648 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 f81a 	bl	800d678 <tcp_close_shutdown_fin>
 800d644:	4603      	mov	r3, r0
 800d646:	e000      	b.n	800d64a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d648:	2300      	movs	r3, #0
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3710      	adds	r7, #16
 800d64e:	46bd      	mov	sp, r7
 800d650:	bdb0      	pop	{r4, r5, r7, pc}
 800d652:	bf00      	nop
 800d654:	0801b198 	.word	0x0801b198
 800d658:	0801b26c 	.word	0x0801b26c
 800d65c:	0801b1dc 	.word	0x0801b1dc
 800d660:	0801b28c 	.word	0x0801b28c
 800d664:	20010e0c 	.word	0x20010e0c
 800d668:	20010e14 	.word	0x20010e14
 800d66c:	20010e4c 	.word	0x20010e4c
 800d670:	20010e04 	.word	0x20010e04
 800d674:	20010e08 	.word	0x20010e08

0800d678 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d106      	bne.n	800d694 <tcp_close_shutdown_fin+0x1c>
 800d686:	4b2e      	ldr	r3, [pc, #184]	; (800d740 <tcp_close_shutdown_fin+0xc8>)
 800d688:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d68c:	492d      	ldr	r1, [pc, #180]	; (800d744 <tcp_close_shutdown_fin+0xcc>)
 800d68e:	482e      	ldr	r0, [pc, #184]	; (800d748 <tcp_close_shutdown_fin+0xd0>)
 800d690:	f00b f98e 	bl	80189b0 <iprintf>

  switch (pcb->state) {
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	7d1b      	ldrb	r3, [r3, #20]
 800d698:	2b07      	cmp	r3, #7
 800d69a:	d020      	beq.n	800d6de <tcp_close_shutdown_fin+0x66>
 800d69c:	2b07      	cmp	r3, #7
 800d69e:	dc2b      	bgt.n	800d6f8 <tcp_close_shutdown_fin+0x80>
 800d6a0:	2b03      	cmp	r3, #3
 800d6a2:	d002      	beq.n	800d6aa <tcp_close_shutdown_fin+0x32>
 800d6a4:	2b04      	cmp	r3, #4
 800d6a6:	d00d      	beq.n	800d6c4 <tcp_close_shutdown_fin+0x4c>
 800d6a8:	e026      	b.n	800d6f8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f004 fe40 	bl	8012330 <tcp_send_fin>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d6b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d11f      	bne.n	800d6fc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2205      	movs	r2, #5
 800d6c0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d6c2:	e01b      	b.n	800d6fc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f004 fe33 	bl	8012330 <tcp_send_fin>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d6ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d114      	bne.n	800d700 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2205      	movs	r2, #5
 800d6da:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d6dc:	e010      	b.n	800d700 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f004 fe26 	bl	8012330 <tcp_send_fin>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d6e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d109      	bne.n	800d704 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2209      	movs	r2, #9
 800d6f4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d6f6:	e005      	b.n	800d704 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	e01c      	b.n	800d736 <tcp_close_shutdown_fin+0xbe>
      break;
 800d6fc:	bf00      	nop
 800d6fe:	e002      	b.n	800d706 <tcp_close_shutdown_fin+0x8e>
      break;
 800d700:	bf00      	nop
 800d702:	e000      	b.n	800d706 <tcp_close_shutdown_fin+0x8e>
      break;
 800d704:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d103      	bne.n	800d716 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f004 ff4c 	bl	80125ac <tcp_output>
 800d714:	e00d      	b.n	800d732 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d71e:	d108      	bne.n	800d732 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	8b5b      	ldrh	r3, [r3, #26]
 800d724:	f043 0308 	orr.w	r3, r3, #8
 800d728:	b29a      	uxth	r2, r3
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d72e:	2300      	movs	r3, #0
 800d730:	e001      	b.n	800d736 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d732:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d736:	4618      	mov	r0, r3
 800d738:	3710      	adds	r7, #16
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	0801b198 	.word	0x0801b198
 800d744:	0801b248 	.word	0x0801b248
 800d748:	0801b1dc 	.word	0x0801b1dc

0800d74c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d109      	bne.n	800d76e <tcp_close+0x22>
 800d75a:	4b0f      	ldr	r3, [pc, #60]	; (800d798 <tcp_close+0x4c>)
 800d75c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d760:	490e      	ldr	r1, [pc, #56]	; (800d79c <tcp_close+0x50>)
 800d762:	480f      	ldr	r0, [pc, #60]	; (800d7a0 <tcp_close+0x54>)
 800d764:	f00b f924 	bl	80189b0 <iprintf>
 800d768:	f06f 030f 	mvn.w	r3, #15
 800d76c:	e00f      	b.n	800d78e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	7d1b      	ldrb	r3, [r3, #20]
 800d772:	2b01      	cmp	r3, #1
 800d774:	d006      	beq.n	800d784 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	8b5b      	ldrh	r3, [r3, #26]
 800d77a:	f043 0310 	orr.w	r3, r3, #16
 800d77e:	b29a      	uxth	r2, r3
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d784:	2101      	movs	r1, #1
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f7ff fe94 	bl	800d4b4 <tcp_close_shutdown>
 800d78c:	4603      	mov	r3, r0
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3708      	adds	r7, #8
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	0801b198 	.word	0x0801b198
 800d79c:	0801b2a8 	.word	0x0801b2a8
 800d7a0:	0801b1dc 	.word	0x0801b1dc

0800d7a4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b084      	sub	sp, #16
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	60f8      	str	r0, [r7, #12]
 800d7ac:	60b9      	str	r1, [r7, #8]
 800d7ae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d109      	bne.n	800d7ca <tcp_shutdown+0x26>
 800d7b6:	4b26      	ldr	r3, [pc, #152]	; (800d850 <tcp_shutdown+0xac>)
 800d7b8:	f240 2207 	movw	r2, #519	; 0x207
 800d7bc:	4925      	ldr	r1, [pc, #148]	; (800d854 <tcp_shutdown+0xb0>)
 800d7be:	4826      	ldr	r0, [pc, #152]	; (800d858 <tcp_shutdown+0xb4>)
 800d7c0:	f00b f8f6 	bl	80189b0 <iprintf>
 800d7c4:	f06f 030f 	mvn.w	r3, #15
 800d7c8:	e03d      	b.n	800d846 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	7d1b      	ldrb	r3, [r3, #20]
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d102      	bne.n	800d7d8 <tcp_shutdown+0x34>
    return ERR_CONN;
 800d7d2:	f06f 030a 	mvn.w	r3, #10
 800d7d6:	e036      	b.n	800d846 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d01b      	beq.n	800d816 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	8b5b      	ldrh	r3, [r3, #26]
 800d7e2:	f043 0310 	orr.w	r3, r3, #16
 800d7e6:	b29a      	uxth	r2, r3
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d005      	beq.n	800d7fe <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d7f2:	2101      	movs	r1, #1
 800d7f4:	68f8      	ldr	r0, [r7, #12]
 800d7f6:	f7ff fe5d 	bl	800d4b4 <tcp_close_shutdown>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	e023      	b.n	800d846 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d802:	2b00      	cmp	r3, #0
 800d804:	d007      	beq.n	800d816 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7ff fae4 	bl	800cdd8 <pbuf_free>
      pcb->refused_data = NULL;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2200      	movs	r2, #0
 800d814:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d013      	beq.n	800d844 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	7d1b      	ldrb	r3, [r3, #20]
 800d820:	2b04      	cmp	r3, #4
 800d822:	dc02      	bgt.n	800d82a <tcp_shutdown+0x86>
 800d824:	2b03      	cmp	r3, #3
 800d826:	da02      	bge.n	800d82e <tcp_shutdown+0x8a>
 800d828:	e009      	b.n	800d83e <tcp_shutdown+0x9a>
 800d82a:	2b07      	cmp	r3, #7
 800d82c:	d107      	bne.n	800d83e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	b2db      	uxtb	r3, r3
 800d832:	4619      	mov	r1, r3
 800d834:	68f8      	ldr	r0, [r7, #12]
 800d836:	f7ff fe3d 	bl	800d4b4 <tcp_close_shutdown>
 800d83a:	4603      	mov	r3, r0
 800d83c:	e003      	b.n	800d846 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d83e:	f06f 030a 	mvn.w	r3, #10
 800d842:	e000      	b.n	800d846 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d844:	2300      	movs	r3, #0
}
 800d846:	4618      	mov	r0, r3
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
 800d84e:	bf00      	nop
 800d850:	0801b198 	.word	0x0801b198
 800d854:	0801b2c0 	.word	0x0801b2c0
 800d858:	0801b1dc 	.word	0x0801b1dc

0800d85c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b08e      	sub	sp, #56	; 0x38
 800d860:	af04      	add	r7, sp, #16
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d107      	bne.n	800d87c <tcp_abandon+0x20>
 800d86c:	4b52      	ldr	r3, [pc, #328]	; (800d9b8 <tcp_abandon+0x15c>)
 800d86e:	f240 223d 	movw	r2, #573	; 0x23d
 800d872:	4952      	ldr	r1, [pc, #328]	; (800d9bc <tcp_abandon+0x160>)
 800d874:	4852      	ldr	r0, [pc, #328]	; (800d9c0 <tcp_abandon+0x164>)
 800d876:	f00b f89b 	bl	80189b0 <iprintf>
 800d87a:	e099      	b.n	800d9b0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	7d1b      	ldrb	r3, [r3, #20]
 800d880:	2b01      	cmp	r3, #1
 800d882:	d106      	bne.n	800d892 <tcp_abandon+0x36>
 800d884:	4b4c      	ldr	r3, [pc, #304]	; (800d9b8 <tcp_abandon+0x15c>)
 800d886:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d88a:	494e      	ldr	r1, [pc, #312]	; (800d9c4 <tcp_abandon+0x168>)
 800d88c:	484c      	ldr	r0, [pc, #304]	; (800d9c0 <tcp_abandon+0x164>)
 800d88e:	f00b f88f 	bl	80189b0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	7d1b      	ldrb	r3, [r3, #20]
 800d896:	2b0a      	cmp	r3, #10
 800d898:	d107      	bne.n	800d8aa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d89a:	6879      	ldr	r1, [r7, #4]
 800d89c:	484a      	ldr	r0, [pc, #296]	; (800d9c8 <tcp_abandon+0x16c>)
 800d89e:	f001 fa69 	bl	800ed74 <tcp_pcb_remove>
    tcp_free(pcb);
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f7ff fd54 	bl	800d350 <tcp_free>
 800d8a8:	e082      	b.n	800d9b0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8b6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8bc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8c4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	691b      	ldr	r3, [r3, #16]
 800d8ca:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	7d1b      	ldrb	r3, [r3, #20]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d126      	bne.n	800d922 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	8adb      	ldrh	r3, [r3, #22]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d02e      	beq.n	800d93a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d8dc:	4b3b      	ldr	r3, [pc, #236]	; (800d9cc <tcp_abandon+0x170>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	687a      	ldr	r2, [r7, #4]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d105      	bne.n	800d8f2 <tcp_abandon+0x96>
 800d8e6:	4b39      	ldr	r3, [pc, #228]	; (800d9cc <tcp_abandon+0x170>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	4a37      	ldr	r2, [pc, #220]	; (800d9cc <tcp_abandon+0x170>)
 800d8ee:	6013      	str	r3, [r2, #0]
 800d8f0:	e013      	b.n	800d91a <tcp_abandon+0xbe>
 800d8f2:	4b36      	ldr	r3, [pc, #216]	; (800d9cc <tcp_abandon+0x170>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	61fb      	str	r3, [r7, #28]
 800d8f8:	e00c      	b.n	800d914 <tcp_abandon+0xb8>
 800d8fa:	69fb      	ldr	r3, [r7, #28]
 800d8fc:	68db      	ldr	r3, [r3, #12]
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	429a      	cmp	r2, r3
 800d902:	d104      	bne.n	800d90e <tcp_abandon+0xb2>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	68da      	ldr	r2, [r3, #12]
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	60da      	str	r2, [r3, #12]
 800d90c:	e005      	b.n	800d91a <tcp_abandon+0xbe>
 800d90e:	69fb      	ldr	r3, [r7, #28]
 800d910:	68db      	ldr	r3, [r3, #12]
 800d912:	61fb      	str	r3, [r7, #28]
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d1ef      	bne.n	800d8fa <tcp_abandon+0x9e>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2200      	movs	r2, #0
 800d91e:	60da      	str	r2, [r3, #12]
 800d920:	e00b      	b.n	800d93a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	8adb      	ldrh	r3, [r3, #22]
 800d92a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d92c:	6879      	ldr	r1, [r7, #4]
 800d92e:	4828      	ldr	r0, [pc, #160]	; (800d9d0 <tcp_abandon+0x174>)
 800d930:	f001 fa20 	bl	800ed74 <tcp_pcb_remove>
 800d934:	4b27      	ldr	r3, [pc, #156]	; (800d9d4 <tcp_abandon+0x178>)
 800d936:	2201      	movs	r2, #1
 800d938:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d004      	beq.n	800d94c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d946:	4618      	mov	r0, r3
 800d948:	f000 fed6 	bl	800e6f8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d950:	2b00      	cmp	r3, #0
 800d952:	d004      	beq.n	800d95e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d958:	4618      	mov	r0, r3
 800d95a:	f000 fecd 	bl	800e6f8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d962:	2b00      	cmp	r3, #0
 800d964:	d004      	beq.n	800d970 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d96a:	4618      	mov	r0, r3
 800d96c:	f000 fec4 	bl	800e6f8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d972:	2b00      	cmp	r3, #0
 800d974:	d00e      	beq.n	800d994 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d976:	6879      	ldr	r1, [r7, #4]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	3304      	adds	r3, #4
 800d97c:	687a      	ldr	r2, [r7, #4]
 800d97e:	8b12      	ldrh	r2, [r2, #24]
 800d980:	9202      	str	r2, [sp, #8]
 800d982:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d984:	9201      	str	r2, [sp, #4]
 800d986:	9300      	str	r3, [sp, #0]
 800d988:	460b      	mov	r3, r1
 800d98a:	697a      	ldr	r2, [r7, #20]
 800d98c:	69b9      	ldr	r1, [r7, #24]
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f005 fbc0 	bl	8013114 <tcp_rst>
    }
    last_state = pcb->state;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	7d1b      	ldrb	r3, [r3, #20]
 800d998:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f7ff fcd8 	bl	800d350 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d004      	beq.n	800d9b0 <tcp_abandon+0x154>
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	f06f 010c 	mvn.w	r1, #12
 800d9ac:	68f8      	ldr	r0, [r7, #12]
 800d9ae:	4798      	blx	r3
  }
}
 800d9b0:	3728      	adds	r7, #40	; 0x28
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	0801b198 	.word	0x0801b198
 800d9bc:	0801b2dc 	.word	0x0801b2dc
 800d9c0:	0801b1dc 	.word	0x0801b1dc
 800d9c4:	0801b2f8 	.word	0x0801b2f8
 800d9c8:	20010e10 	.word	0x20010e10
 800d9cc:	20010e04 	.word	0x20010e04
 800d9d0:	20010e0c 	.word	0x20010e0c
 800d9d4:	20010e14 	.word	0x20010e14

0800d9d8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d9e0:	2101      	movs	r1, #1
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f7ff ff3a 	bl	800d85c <tcp_abandon>
}
 800d9e8:	bf00      	nop
 800d9ea:	3708      	adds	r7, #8
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}

0800d9f0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b088      	sub	sp, #32
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	60f8      	str	r0, [r7, #12]
 800d9f8:	60b9      	str	r1, [r7, #8]
 800d9fa:	4613      	mov	r3, r2
 800d9fc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d9fe:	2304      	movs	r3, #4
 800da00:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d101      	bne.n	800da0c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800da08:	4b3e      	ldr	r3, [pc, #248]	; (800db04 <tcp_bind+0x114>)
 800da0a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d109      	bne.n	800da26 <tcp_bind+0x36>
 800da12:	4b3d      	ldr	r3, [pc, #244]	; (800db08 <tcp_bind+0x118>)
 800da14:	f240 22a9 	movw	r2, #681	; 0x2a9
 800da18:	493c      	ldr	r1, [pc, #240]	; (800db0c <tcp_bind+0x11c>)
 800da1a:	483d      	ldr	r0, [pc, #244]	; (800db10 <tcp_bind+0x120>)
 800da1c:	f00a ffc8 	bl	80189b0 <iprintf>
 800da20:	f06f 030f 	mvn.w	r3, #15
 800da24:	e06a      	b.n	800dafc <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	7d1b      	ldrb	r3, [r3, #20]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d009      	beq.n	800da42 <tcp_bind+0x52>
 800da2e:	4b36      	ldr	r3, [pc, #216]	; (800db08 <tcp_bind+0x118>)
 800da30:	f240 22ab 	movw	r2, #683	; 0x2ab
 800da34:	4937      	ldr	r1, [pc, #220]	; (800db14 <tcp_bind+0x124>)
 800da36:	4836      	ldr	r0, [pc, #216]	; (800db10 <tcp_bind+0x120>)
 800da38:	f00a ffba 	bl	80189b0 <iprintf>
 800da3c:	f06f 0305 	mvn.w	r3, #5
 800da40:	e05c      	b.n	800dafc <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800da42:	88fb      	ldrh	r3, [r7, #6]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d109      	bne.n	800da5c <tcp_bind+0x6c>
    port = tcp_new_port();
 800da48:	f000 f9f0 	bl	800de2c <tcp_new_port>
 800da4c:	4603      	mov	r3, r0
 800da4e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800da50:	88fb      	ldrh	r3, [r7, #6]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d135      	bne.n	800dac2 <tcp_bind+0xd2>
      return ERR_BUF;
 800da56:	f06f 0301 	mvn.w	r3, #1
 800da5a:	e04f      	b.n	800dafc <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800da5c:	2300      	movs	r3, #0
 800da5e:	61fb      	str	r3, [r7, #28]
 800da60:	e02b      	b.n	800daba <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800da62:	4a2d      	ldr	r2, [pc, #180]	; (800db18 <tcp_bind+0x128>)
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	61bb      	str	r3, [r7, #24]
 800da6e:	e01e      	b.n	800daae <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800da70:	69bb      	ldr	r3, [r7, #24]
 800da72:	8adb      	ldrh	r3, [r3, #22]
 800da74:	88fa      	ldrh	r2, [r7, #6]
 800da76:	429a      	cmp	r2, r3
 800da78:	d116      	bne.n	800daa8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800da7a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d010      	beq.n	800daa2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800da80:	69bb      	ldr	r3, [r7, #24]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d00c      	beq.n	800daa2 <tcp_bind+0xb2>
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d009      	beq.n	800daa2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d005      	beq.n	800daa2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800da96:	69bb      	ldr	r3, [r7, #24]
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d102      	bne.n	800daa8 <tcp_bind+0xb8>
              return ERR_USE;
 800daa2:	f06f 0307 	mvn.w	r3, #7
 800daa6:	e029      	b.n	800dafc <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	68db      	ldr	r3, [r3, #12]
 800daac:	61bb      	str	r3, [r7, #24]
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d1dd      	bne.n	800da70 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	3301      	adds	r3, #1
 800dab8:	61fb      	str	r3, [r7, #28]
 800daba:	69fa      	ldr	r2, [r7, #28]
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	dbcf      	blt.n	800da62 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d00c      	beq.n	800dae2 <tcp_bind+0xf2>
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d008      	beq.n	800dae2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d002      	beq.n	800dadc <tcp_bind+0xec>
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	e000      	b.n	800dade <tcp_bind+0xee>
 800dadc:	2300      	movs	r3, #0
 800dade:	68fa      	ldr	r2, [r7, #12]
 800dae0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	88fa      	ldrh	r2, [r7, #6]
 800dae6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800dae8:	4b0c      	ldr	r3, [pc, #48]	; (800db1c <tcp_bind+0x12c>)
 800daea:	681a      	ldr	r2, [r3, #0]
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	60da      	str	r2, [r3, #12]
 800daf0:	4a0a      	ldr	r2, [pc, #40]	; (800db1c <tcp_bind+0x12c>)
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	6013      	str	r3, [r2, #0]
 800daf6:	f005 fccf 	bl	8013498 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800dafa:	2300      	movs	r3, #0
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3720      	adds	r7, #32
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}
 800db04:	080276d4 	.word	0x080276d4
 800db08:	0801b198 	.word	0x0801b198
 800db0c:	0801b32c 	.word	0x0801b32c
 800db10:	0801b1dc 	.word	0x0801b1dc
 800db14:	0801b344 	.word	0x0801b344
 800db18:	0802769c 	.word	0x0802769c
 800db1c:	20010e04 	.word	0x20010e04

0800db20 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b084      	sub	sp, #16
 800db24:	af00      	add	r7, sp, #0
 800db26:	60f8      	str	r0, [r7, #12]
 800db28:	60b9      	str	r1, [r7, #8]
 800db2a:	4613      	mov	r3, r2
 800db2c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d106      	bne.n	800db42 <tcp_accept_null+0x22>
 800db34:	4b07      	ldr	r3, [pc, #28]	; (800db54 <tcp_accept_null+0x34>)
 800db36:	f240 320f 	movw	r2, #783	; 0x30f
 800db3a:	4907      	ldr	r1, [pc, #28]	; (800db58 <tcp_accept_null+0x38>)
 800db3c:	4807      	ldr	r0, [pc, #28]	; (800db5c <tcp_accept_null+0x3c>)
 800db3e:	f00a ff37 	bl	80189b0 <iprintf>

  tcp_abort(pcb);
 800db42:	68b8      	ldr	r0, [r7, #8]
 800db44:	f7ff ff48 	bl	800d9d8 <tcp_abort>

  return ERR_ABRT;
 800db48:	f06f 030c 	mvn.w	r3, #12
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3710      	adds	r7, #16
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}
 800db54:	0801b198 	.word	0x0801b198
 800db58:	0801b36c 	.word	0x0801b36c
 800db5c:	0801b1dc 	.word	0x0801b1dc

0800db60 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	460b      	mov	r3, r1
 800db6a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800db6c:	78fb      	ldrb	r3, [r7, #3]
 800db6e:	2200      	movs	r2, #0
 800db70:	4619      	mov	r1, r3
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 f806 	bl	800db84 <tcp_listen_with_backlog_and_err>
 800db78:	4603      	mov	r3, r0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3708      	adds	r7, #8
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
	...

0800db84 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b088      	sub	sp, #32
 800db88:	af00      	add	r7, sp, #0
 800db8a:	60f8      	str	r0, [r7, #12]
 800db8c:	460b      	mov	r3, r1
 800db8e:	607a      	str	r2, [r7, #4]
 800db90:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800db92:	2300      	movs	r3, #0
 800db94:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d109      	bne.n	800dbb0 <tcp_listen_with_backlog_and_err+0x2c>
 800db9c:	4b47      	ldr	r3, [pc, #284]	; (800dcbc <tcp_listen_with_backlog_and_err+0x138>)
 800db9e:	f240 3259 	movw	r2, #857	; 0x359
 800dba2:	4947      	ldr	r1, [pc, #284]	; (800dcc0 <tcp_listen_with_backlog_and_err+0x13c>)
 800dba4:	4847      	ldr	r0, [pc, #284]	; (800dcc4 <tcp_listen_with_backlog_and_err+0x140>)
 800dba6:	f00a ff03 	bl	80189b0 <iprintf>
 800dbaa:	23f0      	movs	r3, #240	; 0xf0
 800dbac:	76fb      	strb	r3, [r7, #27]
 800dbae:	e079      	b.n	800dca4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	7d1b      	ldrb	r3, [r3, #20]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d009      	beq.n	800dbcc <tcp_listen_with_backlog_and_err+0x48>
 800dbb8:	4b40      	ldr	r3, [pc, #256]	; (800dcbc <tcp_listen_with_backlog_and_err+0x138>)
 800dbba:	f240 325a 	movw	r2, #858	; 0x35a
 800dbbe:	4942      	ldr	r1, [pc, #264]	; (800dcc8 <tcp_listen_with_backlog_and_err+0x144>)
 800dbc0:	4840      	ldr	r0, [pc, #256]	; (800dcc4 <tcp_listen_with_backlog_and_err+0x140>)
 800dbc2:	f00a fef5 	bl	80189b0 <iprintf>
 800dbc6:	23f1      	movs	r3, #241	; 0xf1
 800dbc8:	76fb      	strb	r3, [r7, #27]
 800dbca:	e06b      	b.n	800dca4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	7d1b      	ldrb	r3, [r3, #20]
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d104      	bne.n	800dbde <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800dbd8:	23f7      	movs	r3, #247	; 0xf7
 800dbda:	76fb      	strb	r3, [r7, #27]
    goto done;
 800dbdc:	e062      	b.n	800dca4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800dbde:	2002      	movs	r0, #2
 800dbe0:	f7fe f9d4 	bl	800bf8c <memp_malloc>
 800dbe4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800dbe6:	69fb      	ldr	r3, [r7, #28]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d102      	bne.n	800dbf2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800dbec:	23ff      	movs	r3, #255	; 0xff
 800dbee:	76fb      	strb	r3, [r7, #27]
    goto done;
 800dbf0:	e058      	b.n	800dca4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	691a      	ldr	r2, [r3, #16]
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	8ada      	ldrh	r2, [r3, #22]
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800dc02:	69fb      	ldr	r3, [r7, #28]
 800dc04:	2201      	movs	r2, #1
 800dc06:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	7d5a      	ldrb	r2, [r3, #21]
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	7a5a      	ldrb	r2, [r3, #9]
 800dc14:	69fb      	ldr	r3, [r7, #28]
 800dc16:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	7ada      	ldrb	r2, [r3, #11]
 800dc22:	69fb      	ldr	r3, [r7, #28]
 800dc24:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	7a9a      	ldrb	r2, [r3, #10]
 800dc2a:	69fb      	ldr	r3, [r7, #28]
 800dc2c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681a      	ldr	r2, [r3, #0]
 800dc32:	69fb      	ldr	r3, [r7, #28]
 800dc34:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	8adb      	ldrh	r3, [r3, #22]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d021      	beq.n	800dc82 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800dc3e:	4b23      	ldr	r3, [pc, #140]	; (800dccc <tcp_listen_with_backlog_and_err+0x148>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	68fa      	ldr	r2, [r7, #12]
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d105      	bne.n	800dc54 <tcp_listen_with_backlog_and_err+0xd0>
 800dc48:	4b20      	ldr	r3, [pc, #128]	; (800dccc <tcp_listen_with_backlog_and_err+0x148>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	4a1f      	ldr	r2, [pc, #124]	; (800dccc <tcp_listen_with_backlog_and_err+0x148>)
 800dc50:	6013      	str	r3, [r2, #0]
 800dc52:	e013      	b.n	800dc7c <tcp_listen_with_backlog_and_err+0xf8>
 800dc54:	4b1d      	ldr	r3, [pc, #116]	; (800dccc <tcp_listen_with_backlog_and_err+0x148>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	617b      	str	r3, [r7, #20]
 800dc5a:	e00c      	b.n	800dc76 <tcp_listen_with_backlog_and_err+0xf2>
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	68db      	ldr	r3, [r3, #12]
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d104      	bne.n	800dc70 <tcp_listen_with_backlog_and_err+0xec>
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	68da      	ldr	r2, [r3, #12]
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	60da      	str	r2, [r3, #12]
 800dc6e:	e005      	b.n	800dc7c <tcp_listen_with_backlog_and_err+0xf8>
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	68db      	ldr	r3, [r3, #12]
 800dc74:	617b      	str	r3, [r7, #20]
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d1ef      	bne.n	800dc5c <tcp_listen_with_backlog_and_err+0xd8>
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800dc82:	68f8      	ldr	r0, [r7, #12]
 800dc84:	f7ff fb64 	bl	800d350 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800dc88:	69fb      	ldr	r3, [r7, #28]
 800dc8a:	4a11      	ldr	r2, [pc, #68]	; (800dcd0 <tcp_listen_with_backlog_and_err+0x14c>)
 800dc8c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800dc8e:	4b11      	ldr	r3, [pc, #68]	; (800dcd4 <tcp_listen_with_backlog_and_err+0x150>)
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	69fb      	ldr	r3, [r7, #28]
 800dc94:	60da      	str	r2, [r3, #12]
 800dc96:	4a0f      	ldr	r2, [pc, #60]	; (800dcd4 <tcp_listen_with_backlog_and_err+0x150>)
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	6013      	str	r3, [r2, #0]
 800dc9c:	f005 fbfc 	bl	8013498 <tcp_timer_needed>
  res = ERR_OK;
 800dca0:	2300      	movs	r3, #0
 800dca2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d002      	beq.n	800dcb0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	7efa      	ldrb	r2, [r7, #27]
 800dcae:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800dcb0:	69fb      	ldr	r3, [r7, #28]
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3720      	adds	r7, #32
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}
 800dcba:	bf00      	nop
 800dcbc:	0801b198 	.word	0x0801b198
 800dcc0:	0801b38c 	.word	0x0801b38c
 800dcc4:	0801b1dc 	.word	0x0801b1dc
 800dcc8:	0801b3bc 	.word	0x0801b3bc
 800dccc:	20010e04 	.word	0x20010e04
 800dcd0:	0800db21 	.word	0x0800db21
 800dcd4:	20010e08 	.word	0x20010e08

0800dcd8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d106      	bne.n	800dcf4 <tcp_update_rcv_ann_wnd+0x1c>
 800dce6:	4b25      	ldr	r3, [pc, #148]	; (800dd7c <tcp_update_rcv_ann_wnd+0xa4>)
 800dce8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dcec:	4924      	ldr	r1, [pc, #144]	; (800dd80 <tcp_update_rcv_ann_wnd+0xa8>)
 800dcee:	4825      	ldr	r0, [pc, #148]	; (800dd84 <tcp_update_rcv_ann_wnd+0xac>)
 800dcf0:	f00a fe5e 	bl	80189b0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dcfc:	4413      	add	r3, r2
 800dcfe:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd04:	687a      	ldr	r2, [r7, #4]
 800dd06:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800dd08:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800dd0c:	bf28      	it	cs
 800dd0e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800dd12:	b292      	uxth	r2, r2
 800dd14:	4413      	add	r3, r2
 800dd16:	68fa      	ldr	r2, [r7, #12]
 800dd18:	1ad3      	subs	r3, r2, r3
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	db08      	blt.n	800dd30 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd2a:	68fa      	ldr	r2, [r7, #12]
 800dd2c:	1ad3      	subs	r3, r2, r3
 800dd2e:	e020      	b.n	800dd72 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd38:	1ad3      	subs	r3, r2, r3
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	dd03      	ble.n	800dd46 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2200      	movs	r2, #0
 800dd42:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dd44:	e014      	b.n	800dd70 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd4e:	1ad3      	subs	r3, r2, r3
 800dd50:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd58:	d306      	bcc.n	800dd68 <tcp_update_rcv_ann_wnd+0x90>
 800dd5a:	4b08      	ldr	r3, [pc, #32]	; (800dd7c <tcp_update_rcv_ann_wnd+0xa4>)
 800dd5c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800dd60:	4909      	ldr	r1, [pc, #36]	; (800dd88 <tcp_update_rcv_ann_wnd+0xb0>)
 800dd62:	4808      	ldr	r0, [pc, #32]	; (800dd84 <tcp_update_rcv_ann_wnd+0xac>)
 800dd64:	f00a fe24 	bl	80189b0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	b29a      	uxth	r2, r3
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800dd70:	2300      	movs	r3, #0
  }
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3710      	adds	r7, #16
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	0801b198 	.word	0x0801b198
 800dd80:	0801b3f4 	.word	0x0801b3f4
 800dd84:	0801b1dc 	.word	0x0801b1dc
 800dd88:	0801b418 	.word	0x0801b418

0800dd8c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b084      	sub	sp, #16
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	460b      	mov	r3, r1
 800dd96:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d107      	bne.n	800ddae <tcp_recved+0x22>
 800dd9e:	4b1f      	ldr	r3, [pc, #124]	; (800de1c <tcp_recved+0x90>)
 800dda0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800dda4:	491e      	ldr	r1, [pc, #120]	; (800de20 <tcp_recved+0x94>)
 800dda6:	481f      	ldr	r0, [pc, #124]	; (800de24 <tcp_recved+0x98>)
 800dda8:	f00a fe02 	bl	80189b0 <iprintf>
 800ddac:	e032      	b.n	800de14 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	7d1b      	ldrb	r3, [r3, #20]
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d106      	bne.n	800ddc4 <tcp_recved+0x38>
 800ddb6:	4b19      	ldr	r3, [pc, #100]	; (800de1c <tcp_recved+0x90>)
 800ddb8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ddbc:	491a      	ldr	r1, [pc, #104]	; (800de28 <tcp_recved+0x9c>)
 800ddbe:	4819      	ldr	r0, [pc, #100]	; (800de24 <tcp_recved+0x98>)
 800ddc0:	f00a fdf6 	bl	80189b0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ddc8:	887b      	ldrh	r3, [r7, #2]
 800ddca:	4413      	add	r3, r2
 800ddcc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ddce:	89fb      	ldrh	r3, [r7, #14]
 800ddd0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ddd4:	d804      	bhi.n	800dde0 <tcp_recved+0x54>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddda:	89fa      	ldrh	r2, [r7, #14]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d204      	bcs.n	800ddea <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dde6:	851a      	strh	r2, [r3, #40]	; 0x28
 800dde8:	e002      	b.n	800ddf0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	89fa      	ldrh	r2, [r7, #14]
 800ddee:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f7ff ff71 	bl	800dcd8 <tcp_update_rcv_ann_wnd>
 800ddf6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ddfe:	d309      	bcc.n	800de14 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	8b5b      	ldrh	r3, [r3, #26]
 800de04:	f043 0302 	orr.w	r3, r3, #2
 800de08:	b29a      	uxth	r2, r3
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f004 fbcc 	bl	80125ac <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800de14:	3710      	adds	r7, #16
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	0801b198 	.word	0x0801b198
 800de20:	0801b434 	.word	0x0801b434
 800de24:	0801b1dc 	.word	0x0801b1dc
 800de28:	0801b44c 	.word	0x0801b44c

0800de2c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800de2c:	b480      	push	{r7}
 800de2e:	b083      	sub	sp, #12
 800de30:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800de32:	2300      	movs	r3, #0
 800de34:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800de36:	4b1e      	ldr	r3, [pc, #120]	; (800deb0 <tcp_new_port+0x84>)
 800de38:	881b      	ldrh	r3, [r3, #0]
 800de3a:	3301      	adds	r3, #1
 800de3c:	b29a      	uxth	r2, r3
 800de3e:	4b1c      	ldr	r3, [pc, #112]	; (800deb0 <tcp_new_port+0x84>)
 800de40:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800de42:	4b1b      	ldr	r3, [pc, #108]	; (800deb0 <tcp_new_port+0x84>)
 800de44:	881b      	ldrh	r3, [r3, #0]
 800de46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d103      	bne.n	800de56 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800de4e:	4b18      	ldr	r3, [pc, #96]	; (800deb0 <tcp_new_port+0x84>)
 800de50:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800de54:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800de56:	2300      	movs	r3, #0
 800de58:	71fb      	strb	r3, [r7, #7]
 800de5a:	e01e      	b.n	800de9a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800de5c:	79fb      	ldrb	r3, [r7, #7]
 800de5e:	4a15      	ldr	r2, [pc, #84]	; (800deb4 <tcp_new_port+0x88>)
 800de60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	603b      	str	r3, [r7, #0]
 800de68:	e011      	b.n	800de8e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	8ada      	ldrh	r2, [r3, #22]
 800de6e:	4b10      	ldr	r3, [pc, #64]	; (800deb0 <tcp_new_port+0x84>)
 800de70:	881b      	ldrh	r3, [r3, #0]
 800de72:	429a      	cmp	r2, r3
 800de74:	d108      	bne.n	800de88 <tcp_new_port+0x5c>
        n++;
 800de76:	88bb      	ldrh	r3, [r7, #4]
 800de78:	3301      	adds	r3, #1
 800de7a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800de7c:	88bb      	ldrh	r3, [r7, #4]
 800de7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de82:	d3d8      	bcc.n	800de36 <tcp_new_port+0xa>
          return 0;
 800de84:	2300      	movs	r3, #0
 800de86:	e00d      	b.n	800dea4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	68db      	ldr	r3, [r3, #12]
 800de8c:	603b      	str	r3, [r7, #0]
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d1ea      	bne.n	800de6a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800de94:	79fb      	ldrb	r3, [r7, #7]
 800de96:	3301      	adds	r3, #1
 800de98:	71fb      	strb	r3, [r7, #7]
 800de9a:	79fb      	ldrb	r3, [r7, #7]
 800de9c:	2b03      	cmp	r3, #3
 800de9e:	d9dd      	bls.n	800de5c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800dea0:	4b03      	ldr	r3, [pc, #12]	; (800deb0 <tcp_new_port+0x84>)
 800dea2:	881b      	ldrh	r3, [r3, #0]
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	370c      	adds	r7, #12
 800dea8:	46bd      	mov	sp, r7
 800deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deae:	4770      	bx	lr
 800deb0:	20000024 	.word	0x20000024
 800deb4:	0802769c 	.word	0x0802769c

0800deb8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800deb8:	b5b0      	push	{r4, r5, r7, lr}
 800deba:	b090      	sub	sp, #64	; 0x40
 800debc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800debe:	2300      	movs	r3, #0
 800dec0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800dec4:	4b94      	ldr	r3, [pc, #592]	; (800e118 <tcp_slowtmr+0x260>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	3301      	adds	r3, #1
 800deca:	4a93      	ldr	r2, [pc, #588]	; (800e118 <tcp_slowtmr+0x260>)
 800decc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800dece:	4b93      	ldr	r3, [pc, #588]	; (800e11c <tcp_slowtmr+0x264>)
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	3301      	adds	r3, #1
 800ded4:	b2da      	uxtb	r2, r3
 800ded6:	4b91      	ldr	r3, [pc, #580]	; (800e11c <tcp_slowtmr+0x264>)
 800ded8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800deda:	2300      	movs	r3, #0
 800dedc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800dede:	4b90      	ldr	r3, [pc, #576]	; (800e120 <tcp_slowtmr+0x268>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800dee4:	e29f      	b.n	800e426 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800dee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee8:	7d1b      	ldrb	r3, [r3, #20]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d106      	bne.n	800defc <tcp_slowtmr+0x44>
 800deee:	4b8d      	ldr	r3, [pc, #564]	; (800e124 <tcp_slowtmr+0x26c>)
 800def0:	f240 42be 	movw	r2, #1214	; 0x4be
 800def4:	498c      	ldr	r1, [pc, #560]	; (800e128 <tcp_slowtmr+0x270>)
 800def6:	488d      	ldr	r0, [pc, #564]	; (800e12c <tcp_slowtmr+0x274>)
 800def8:	f00a fd5a 	bl	80189b0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800defc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defe:	7d1b      	ldrb	r3, [r3, #20]
 800df00:	2b01      	cmp	r3, #1
 800df02:	d106      	bne.n	800df12 <tcp_slowtmr+0x5a>
 800df04:	4b87      	ldr	r3, [pc, #540]	; (800e124 <tcp_slowtmr+0x26c>)
 800df06:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800df0a:	4989      	ldr	r1, [pc, #548]	; (800e130 <tcp_slowtmr+0x278>)
 800df0c:	4887      	ldr	r0, [pc, #540]	; (800e12c <tcp_slowtmr+0x274>)
 800df0e:	f00a fd4f 	bl	80189b0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800df12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df14:	7d1b      	ldrb	r3, [r3, #20]
 800df16:	2b0a      	cmp	r3, #10
 800df18:	d106      	bne.n	800df28 <tcp_slowtmr+0x70>
 800df1a:	4b82      	ldr	r3, [pc, #520]	; (800e124 <tcp_slowtmr+0x26c>)
 800df1c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800df20:	4984      	ldr	r1, [pc, #528]	; (800e134 <tcp_slowtmr+0x27c>)
 800df22:	4882      	ldr	r0, [pc, #520]	; (800e12c <tcp_slowtmr+0x274>)
 800df24:	f00a fd44 	bl	80189b0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800df28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2a:	7f9a      	ldrb	r2, [r3, #30]
 800df2c:	4b7b      	ldr	r3, [pc, #492]	; (800e11c <tcp_slowtmr+0x264>)
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	429a      	cmp	r2, r3
 800df32:	d105      	bne.n	800df40 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800df34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df36:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800df38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800df3e:	e272      	b.n	800e426 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800df40:	4b76      	ldr	r3, [pc, #472]	; (800e11c <tcp_slowtmr+0x264>)
 800df42:	781a      	ldrb	r2, [r3, #0]
 800df44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df46:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800df48:	2300      	movs	r3, #0
 800df4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800df4e:	2300      	movs	r3, #0
 800df50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800df54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df56:	7d1b      	ldrb	r3, [r3, #20]
 800df58:	2b02      	cmp	r3, #2
 800df5a:	d10a      	bne.n	800df72 <tcp_slowtmr+0xba>
 800df5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df62:	2b05      	cmp	r3, #5
 800df64:	d905      	bls.n	800df72 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800df66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df6a:	3301      	adds	r3, #1
 800df6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df70:	e11e      	b.n	800e1b0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800df72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800df78:	2b0b      	cmp	r3, #11
 800df7a:	d905      	bls.n	800df88 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800df7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df80:	3301      	adds	r3, #1
 800df82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df86:	e113      	b.n	800e1b0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800df88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d075      	beq.n	800e07e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800df92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df96:	2b00      	cmp	r3, #0
 800df98:	d006      	beq.n	800dfa8 <tcp_slowtmr+0xf0>
 800df9a:	4b62      	ldr	r3, [pc, #392]	; (800e124 <tcp_slowtmr+0x26c>)
 800df9c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800dfa0:	4965      	ldr	r1, [pc, #404]	; (800e138 <tcp_slowtmr+0x280>)
 800dfa2:	4862      	ldr	r0, [pc, #392]	; (800e12c <tcp_slowtmr+0x274>)
 800dfa4:	f00a fd04 	bl	80189b0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800dfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d106      	bne.n	800dfbe <tcp_slowtmr+0x106>
 800dfb0:	4b5c      	ldr	r3, [pc, #368]	; (800e124 <tcp_slowtmr+0x26c>)
 800dfb2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800dfb6:	4961      	ldr	r1, [pc, #388]	; (800e13c <tcp_slowtmr+0x284>)
 800dfb8:	485c      	ldr	r0, [pc, #368]	; (800e12c <tcp_slowtmr+0x274>)
 800dfba:	f00a fcf9 	bl	80189b0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800dfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dfc4:	2b0b      	cmp	r3, #11
 800dfc6:	d905      	bls.n	800dfd4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800dfc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfcc:	3301      	adds	r3, #1
 800dfce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dfd2:	e0ed      	b.n	800e1b0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800dfd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dfda:	3b01      	subs	r3, #1
 800dfdc:	4a58      	ldr	r2, [pc, #352]	; (800e140 <tcp_slowtmr+0x288>)
 800dfde:	5cd3      	ldrb	r3, [r2, r3]
 800dfe0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800dfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dfe8:	7c7a      	ldrb	r2, [r7, #17]
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d907      	bls.n	800dffe <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800dfee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dff4:	3301      	adds	r3, #1
 800dff6:	b2da      	uxtb	r2, r3
 800dff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dffa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800dffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e000:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e004:	7c7a      	ldrb	r2, [r7, #17]
 800e006:	429a      	cmp	r2, r3
 800e008:	f200 80d2 	bhi.w	800e1b0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e00c:	2301      	movs	r3, #1
 800e00e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e012:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e016:	2b00      	cmp	r3, #0
 800e018:	d108      	bne.n	800e02c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e01a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e01c:	f005 f96e 	bl	80132fc <tcp_zero_window_probe>
 800e020:	4603      	mov	r3, r0
 800e022:	2b00      	cmp	r3, #0
 800e024:	d014      	beq.n	800e050 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e026:	2300      	movs	r3, #0
 800e028:	623b      	str	r3, [r7, #32]
 800e02a:	e011      	b.n	800e050 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e032:	4619      	mov	r1, r3
 800e034:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e036:	f004 f833 	bl	80120a0 <tcp_split_unsent_seg>
 800e03a:	4603      	mov	r3, r0
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d107      	bne.n	800e050 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e040:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e042:	f004 fab3 	bl	80125ac <tcp_output>
 800e046:	4603      	mov	r3, r0
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d101      	bne.n	800e050 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e04c:	2300      	movs	r3, #0
 800e04e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e050:	6a3b      	ldr	r3, [r7, #32]
 800e052:	2b00      	cmp	r3, #0
 800e054:	f000 80ac 	beq.w	800e1b0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e05a:	2200      	movs	r2, #0
 800e05c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e062:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e066:	2b06      	cmp	r3, #6
 800e068:	f200 80a2 	bhi.w	800e1b0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e06e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e072:	3301      	adds	r3, #1
 800e074:	b2da      	uxtb	r2, r3
 800e076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e078:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e07c:	e098      	b.n	800e1b0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e080:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e084:	2b00      	cmp	r3, #0
 800e086:	db0f      	blt.n	800e0a8 <tcp_slowtmr+0x1f0>
 800e088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e08a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e08e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e092:	4293      	cmp	r3, r2
 800e094:	d008      	beq.n	800e0a8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e098:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	3301      	adds	r3, #1
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	b21a      	sxth	r2, r3
 800e0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0aa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	db7b      	blt.n	800e1b0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e0b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0ba:	f004 fd6b 	bl	8012b94 <tcp_rexmit_rto_prepare>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d007      	beq.n	800e0d4 <tcp_slowtmr+0x21c>
 800e0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d171      	bne.n	800e1b0 <tcp_slowtmr+0x2f8>
 800e0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d06d      	beq.n	800e1b0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d6:	7d1b      	ldrb	r3, [r3, #20]
 800e0d8:	2b02      	cmp	r3, #2
 800e0da:	d03a      	beq.n	800e152 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e0e2:	2b0c      	cmp	r3, #12
 800e0e4:	bf28      	it	cs
 800e0e6:	230c      	movcs	r3, #12
 800e0e8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e0f0:	10db      	asrs	r3, r3, #3
 800e0f2:	b21b      	sxth	r3, r3
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e0fc:	4413      	add	r3, r2
 800e0fe:	7efa      	ldrb	r2, [r7, #27]
 800e100:	4910      	ldr	r1, [pc, #64]	; (800e144 <tcp_slowtmr+0x28c>)
 800e102:	5c8a      	ldrb	r2, [r1, r2]
 800e104:	4093      	lsls	r3, r2
 800e106:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e108:	697b      	ldr	r3, [r7, #20]
 800e10a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e10e:	4293      	cmp	r3, r2
 800e110:	dc1a      	bgt.n	800e148 <tcp_slowtmr+0x290>
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	b21a      	sxth	r2, r3
 800e116:	e019      	b.n	800e14c <tcp_slowtmr+0x294>
 800e118:	20010e00 	.word	0x20010e00
 800e11c:	20010e16 	.word	0x20010e16
 800e120:	20010e0c 	.word	0x20010e0c
 800e124:	0801b198 	.word	0x0801b198
 800e128:	0801b4dc 	.word	0x0801b4dc
 800e12c:	0801b1dc 	.word	0x0801b1dc
 800e130:	0801b508 	.word	0x0801b508
 800e134:	0801b534 	.word	0x0801b534
 800e138:	0801b564 	.word	0x0801b564
 800e13c:	0801b598 	.word	0x0801b598
 800e140:	08027694 	.word	0x08027694
 800e144:	08027684 	.word	0x08027684
 800e148:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e14e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e154:	2200      	movs	r2, #0
 800e156:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e160:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e164:	4293      	cmp	r3, r2
 800e166:	bf28      	it	cs
 800e168:	4613      	movcs	r3, r2
 800e16a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e16c:	8a7b      	ldrh	r3, [r7, #18]
 800e16e:	085b      	lsrs	r3, r3, #1
 800e170:	b29a      	uxth	r2, r3
 800e172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e174:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e180:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e182:	005b      	lsls	r3, r3, #1
 800e184:	b29b      	uxth	r3, r3
 800e186:	429a      	cmp	r2, r3
 800e188:	d206      	bcs.n	800e198 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e18e:	005b      	lsls	r3, r3, #1
 800e190:	b29a      	uxth	r2, r3
 800e192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e194:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e1aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1ac:	f004 fd62 	bl	8012c74 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b2:	7d1b      	ldrb	r3, [r3, #20]
 800e1b4:	2b06      	cmp	r3, #6
 800e1b6:	d111      	bne.n	800e1dc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ba:	8b5b      	ldrh	r3, [r3, #26]
 800e1bc:	f003 0310 	and.w	r3, r3, #16
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d00b      	beq.n	800e1dc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e1c4:	4b9d      	ldr	r3, [pc, #628]	; (800e43c <tcp_slowtmr+0x584>)
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ca:	6a1b      	ldr	r3, [r3, #32]
 800e1cc:	1ad3      	subs	r3, r2, r3
 800e1ce:	2b28      	cmp	r3, #40	; 0x28
 800e1d0:	d904      	bls.n	800e1dc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e1d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1de:	7a5b      	ldrb	r3, [r3, #9]
 800e1e0:	f003 0308 	and.w	r3, r3, #8
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d04c      	beq.n	800e282 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ea:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e1ec:	2b04      	cmp	r3, #4
 800e1ee:	d003      	beq.n	800e1f8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e1f4:	2b07      	cmp	r3, #7
 800e1f6:	d144      	bne.n	800e282 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e1f8:	4b90      	ldr	r3, [pc, #576]	; (800e43c <tcp_slowtmr+0x584>)
 800e1fa:	681a      	ldr	r2, [r3, #0]
 800e1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fe:	6a1b      	ldr	r3, [r3, #32]
 800e200:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e208:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e20c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e210:	498b      	ldr	r1, [pc, #556]	; (800e440 <tcp_slowtmr+0x588>)
 800e212:	fba1 1303 	umull	r1, r3, r1, r3
 800e216:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e218:	429a      	cmp	r2, r3
 800e21a:	d90a      	bls.n	800e232 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e21c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e220:	3301      	adds	r3, #1
 800e222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e226:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e22a:	3301      	adds	r3, #1
 800e22c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e230:	e027      	b.n	800e282 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e232:	4b82      	ldr	r3, [pc, #520]	; (800e43c <tcp_slowtmr+0x584>)
 800e234:	681a      	ldr	r2, [r3, #0]
 800e236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e238:	6a1b      	ldr	r3, [r3, #32]
 800e23a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e244:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e248:	4618      	mov	r0, r3
 800e24a:	4b7e      	ldr	r3, [pc, #504]	; (800e444 <tcp_slowtmr+0x58c>)
 800e24c:	fb00 f303 	mul.w	r3, r0, r3
 800e250:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e252:	497b      	ldr	r1, [pc, #492]	; (800e440 <tcp_slowtmr+0x588>)
 800e254:	fba1 1303 	umull	r1, r3, r1, r3
 800e258:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d911      	bls.n	800e282 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e25e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e260:	f005 f80c 	bl	801327c <tcp_keepalive>
 800e264:	4603      	mov	r3, r0
 800e266:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e26a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d107      	bne.n	800e282 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e274:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e278:	3301      	adds	r3, #1
 800e27a:	b2da      	uxtb	r2, r3
 800e27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e286:	2b00      	cmp	r3, #0
 800e288:	d011      	beq.n	800e2ae <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e28a:	4b6c      	ldr	r3, [pc, #432]	; (800e43c <tcp_slowtmr+0x584>)
 800e28c:	681a      	ldr	r2, [r3, #0]
 800e28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e290:	6a1b      	ldr	r3, [r3, #32]
 800e292:	1ad2      	subs	r2, r2, r3
 800e294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e296:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e29a:	4619      	mov	r1, r3
 800e29c:	460b      	mov	r3, r1
 800e29e:	005b      	lsls	r3, r3, #1
 800e2a0:	440b      	add	r3, r1
 800e2a2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d302      	bcc.n	800e2ae <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e2a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2aa:	f000 fec7 	bl	800f03c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b0:	7d1b      	ldrb	r3, [r3, #20]
 800e2b2:	2b03      	cmp	r3, #3
 800e2b4:	d10b      	bne.n	800e2ce <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e2b6:	4b61      	ldr	r3, [pc, #388]	; (800e43c <tcp_slowtmr+0x584>)
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2bc:	6a1b      	ldr	r3, [r3, #32]
 800e2be:	1ad3      	subs	r3, r2, r3
 800e2c0:	2b28      	cmp	r3, #40	; 0x28
 800e2c2:	d904      	bls.n	800e2ce <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e2c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2c8:	3301      	adds	r3, #1
 800e2ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d0:	7d1b      	ldrb	r3, [r3, #20]
 800e2d2:	2b09      	cmp	r3, #9
 800e2d4:	d10b      	bne.n	800e2ee <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e2d6:	4b59      	ldr	r3, [pc, #356]	; (800e43c <tcp_slowtmr+0x584>)
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2dc:	6a1b      	ldr	r3, [r3, #32]
 800e2de:	1ad3      	subs	r3, r2, r3
 800e2e0:	2bf0      	cmp	r3, #240	; 0xf0
 800e2e2:	d904      	bls.n	800e2ee <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e2e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2e8:	3301      	adds	r3, #1
 800e2ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e2ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d060      	beq.n	800e3b8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2fc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e2fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e300:	f000 fce8 	bl	800ecd4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e306:	2b00      	cmp	r3, #0
 800e308:	d010      	beq.n	800e32c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e30a:	4b4f      	ldr	r3, [pc, #316]	; (800e448 <tcp_slowtmr+0x590>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e310:	429a      	cmp	r2, r3
 800e312:	d106      	bne.n	800e322 <tcp_slowtmr+0x46a>
 800e314:	4b4d      	ldr	r3, [pc, #308]	; (800e44c <tcp_slowtmr+0x594>)
 800e316:	f240 526d 	movw	r2, #1389	; 0x56d
 800e31a:	494d      	ldr	r1, [pc, #308]	; (800e450 <tcp_slowtmr+0x598>)
 800e31c:	484d      	ldr	r0, [pc, #308]	; (800e454 <tcp_slowtmr+0x59c>)
 800e31e:	f00a fb47 	bl	80189b0 <iprintf>
        prev->next = pcb->next;
 800e322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e324:	68da      	ldr	r2, [r3, #12]
 800e326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e328:	60da      	str	r2, [r3, #12]
 800e32a:	e00f      	b.n	800e34c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e32c:	4b46      	ldr	r3, [pc, #280]	; (800e448 <tcp_slowtmr+0x590>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e332:	429a      	cmp	r2, r3
 800e334:	d006      	beq.n	800e344 <tcp_slowtmr+0x48c>
 800e336:	4b45      	ldr	r3, [pc, #276]	; (800e44c <tcp_slowtmr+0x594>)
 800e338:	f240 5271 	movw	r2, #1393	; 0x571
 800e33c:	4946      	ldr	r1, [pc, #280]	; (800e458 <tcp_slowtmr+0x5a0>)
 800e33e:	4845      	ldr	r0, [pc, #276]	; (800e454 <tcp_slowtmr+0x59c>)
 800e340:	f00a fb36 	bl	80189b0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	4a3f      	ldr	r2, [pc, #252]	; (800e448 <tcp_slowtmr+0x590>)
 800e34a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e34c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e350:	2b00      	cmp	r3, #0
 800e352:	d013      	beq.n	800e37c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e356:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e35c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e360:	3304      	adds	r3, #4
 800e362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e364:	8ad2      	ldrh	r2, [r2, #22]
 800e366:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e368:	8b09      	ldrh	r1, [r1, #24]
 800e36a:	9102      	str	r1, [sp, #8]
 800e36c:	9201      	str	r2, [sp, #4]
 800e36e:	9300      	str	r3, [sp, #0]
 800e370:	462b      	mov	r3, r5
 800e372:	4622      	mov	r2, r4
 800e374:	4601      	mov	r1, r0
 800e376:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e378:	f004 fecc 	bl	8013114 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37e:	691b      	ldr	r3, [r3, #16]
 800e380:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e384:	7d1b      	ldrb	r3, [r3, #20]
 800e386:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e38a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e38e:	68db      	ldr	r3, [r3, #12]
 800e390:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e392:	6838      	ldr	r0, [r7, #0]
 800e394:	f7fe ffdc 	bl	800d350 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e398:	4b30      	ldr	r3, [pc, #192]	; (800e45c <tcp_slowtmr+0x5a4>)
 800e39a:	2200      	movs	r2, #0
 800e39c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d004      	beq.n	800e3ae <tcp_slowtmr+0x4f6>
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	f06f 010c 	mvn.w	r1, #12
 800e3aa:	68b8      	ldr	r0, [r7, #8]
 800e3ac:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e3ae:	4b2b      	ldr	r3, [pc, #172]	; (800e45c <tcp_slowtmr+0x5a4>)
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d037      	beq.n	800e426 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e3b6:	e590      	b.n	800deda <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3be:	68db      	ldr	r3, [r3, #12]
 800e3c0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c4:	7f1b      	ldrb	r3, [r3, #28]
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	b2da      	uxtb	r2, r3
 800e3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3cc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d0:	7f1a      	ldrb	r2, [r3, #28]
 800e3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d4:	7f5b      	ldrb	r3, [r3, #29]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d325      	bcc.n	800e426 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3dc:	2200      	movs	r2, #0
 800e3de:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e3e0:	4b1e      	ldr	r3, [pc, #120]	; (800e45c <tcp_slowtmr+0x5a4>)
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d00b      	beq.n	800e408 <tcp_slowtmr+0x550>
 800e3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3f8:	6912      	ldr	r2, [r2, #16]
 800e3fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3fc:	4610      	mov	r0, r2
 800e3fe:	4798      	blx	r3
 800e400:	4603      	mov	r3, r0
 800e402:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e406:	e002      	b.n	800e40e <tcp_slowtmr+0x556>
 800e408:	2300      	movs	r3, #0
 800e40a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e40e:	4b13      	ldr	r3, [pc, #76]	; (800e45c <tcp_slowtmr+0x5a4>)
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d000      	beq.n	800e418 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e416:	e560      	b.n	800deda <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e418:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d102      	bne.n	800e426 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e422:	f004 f8c3 	bl	80125ac <tcp_output>
  while (pcb != NULL) {
 800e426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e428:	2b00      	cmp	r3, #0
 800e42a:	f47f ad5c 	bne.w	800dee6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e42e:	2300      	movs	r3, #0
 800e430:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e432:	4b0b      	ldr	r3, [pc, #44]	; (800e460 <tcp_slowtmr+0x5a8>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e438:	e067      	b.n	800e50a <tcp_slowtmr+0x652>
 800e43a:	bf00      	nop
 800e43c:	20010e00 	.word	0x20010e00
 800e440:	10624dd3 	.word	0x10624dd3
 800e444:	000124f8 	.word	0x000124f8
 800e448:	20010e0c 	.word	0x20010e0c
 800e44c:	0801b198 	.word	0x0801b198
 800e450:	0801b5d0 	.word	0x0801b5d0
 800e454:	0801b1dc 	.word	0x0801b1dc
 800e458:	0801b5fc 	.word	0x0801b5fc
 800e45c:	20010e14 	.word	0x20010e14
 800e460:	20010e10 	.word	0x20010e10
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e466:	7d1b      	ldrb	r3, [r3, #20]
 800e468:	2b0a      	cmp	r3, #10
 800e46a:	d006      	beq.n	800e47a <tcp_slowtmr+0x5c2>
 800e46c:	4b2b      	ldr	r3, [pc, #172]	; (800e51c <tcp_slowtmr+0x664>)
 800e46e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e472:	492b      	ldr	r1, [pc, #172]	; (800e520 <tcp_slowtmr+0x668>)
 800e474:	482b      	ldr	r0, [pc, #172]	; (800e524 <tcp_slowtmr+0x66c>)
 800e476:	f00a fa9b 	bl	80189b0 <iprintf>
    pcb_remove = 0;
 800e47a:	2300      	movs	r3, #0
 800e47c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e480:	4b29      	ldr	r3, [pc, #164]	; (800e528 <tcp_slowtmr+0x670>)
 800e482:	681a      	ldr	r2, [r3, #0]
 800e484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e486:	6a1b      	ldr	r3, [r3, #32]
 800e488:	1ad3      	subs	r3, r2, r3
 800e48a:	2bf0      	cmp	r3, #240	; 0xf0
 800e48c:	d904      	bls.n	800e498 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e48e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e492:	3301      	adds	r3, #1
 800e494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d02f      	beq.n	800e500 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e4a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4a2:	f000 fc17 	bl	800ecd4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d010      	beq.n	800e4ce <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e4ac:	4b1f      	ldr	r3, [pc, #124]	; (800e52c <tcp_slowtmr+0x674>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d106      	bne.n	800e4c4 <tcp_slowtmr+0x60c>
 800e4b6:	4b19      	ldr	r3, [pc, #100]	; (800e51c <tcp_slowtmr+0x664>)
 800e4b8:	f240 52af 	movw	r2, #1455	; 0x5af
 800e4bc:	491c      	ldr	r1, [pc, #112]	; (800e530 <tcp_slowtmr+0x678>)
 800e4be:	4819      	ldr	r0, [pc, #100]	; (800e524 <tcp_slowtmr+0x66c>)
 800e4c0:	f00a fa76 	bl	80189b0 <iprintf>
        prev->next = pcb->next;
 800e4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c6:	68da      	ldr	r2, [r3, #12]
 800e4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ca:	60da      	str	r2, [r3, #12]
 800e4cc:	e00f      	b.n	800e4ee <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e4ce:	4b17      	ldr	r3, [pc, #92]	; (800e52c <tcp_slowtmr+0x674>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	d006      	beq.n	800e4e6 <tcp_slowtmr+0x62e>
 800e4d8:	4b10      	ldr	r3, [pc, #64]	; (800e51c <tcp_slowtmr+0x664>)
 800e4da:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e4de:	4915      	ldr	r1, [pc, #84]	; (800e534 <tcp_slowtmr+0x67c>)
 800e4e0:	4810      	ldr	r0, [pc, #64]	; (800e524 <tcp_slowtmr+0x66c>)
 800e4e2:	f00a fa65 	bl	80189b0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e8:	68db      	ldr	r3, [r3, #12]
 800e4ea:	4a10      	ldr	r2, [pc, #64]	; (800e52c <tcp_slowtmr+0x674>)
 800e4ec:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f4:	68db      	ldr	r3, [r3, #12]
 800e4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e4f8:	69f8      	ldr	r0, [r7, #28]
 800e4fa:	f7fe ff29 	bl	800d350 <tcp_free>
 800e4fe:	e004      	b.n	800e50a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e502:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e506:	68db      	ldr	r3, [r3, #12]
 800e508:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d1a9      	bne.n	800e464 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e510:	bf00      	nop
 800e512:	bf00      	nop
 800e514:	3730      	adds	r7, #48	; 0x30
 800e516:	46bd      	mov	sp, r7
 800e518:	bdb0      	pop	{r4, r5, r7, pc}
 800e51a:	bf00      	nop
 800e51c:	0801b198 	.word	0x0801b198
 800e520:	0801b628 	.word	0x0801b628
 800e524:	0801b1dc 	.word	0x0801b1dc
 800e528:	20010e00 	.word	0x20010e00
 800e52c:	20010e10 	.word	0x20010e10
 800e530:	0801b658 	.word	0x0801b658
 800e534:	0801b680 	.word	0x0801b680

0800e538 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b082      	sub	sp, #8
 800e53c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e53e:	4b2d      	ldr	r3, [pc, #180]	; (800e5f4 <tcp_fasttmr+0xbc>)
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	3301      	adds	r3, #1
 800e544:	b2da      	uxtb	r2, r3
 800e546:	4b2b      	ldr	r3, [pc, #172]	; (800e5f4 <tcp_fasttmr+0xbc>)
 800e548:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e54a:	4b2b      	ldr	r3, [pc, #172]	; (800e5f8 <tcp_fasttmr+0xc0>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e550:	e048      	b.n	800e5e4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	7f9a      	ldrb	r2, [r3, #30]
 800e556:	4b27      	ldr	r3, [pc, #156]	; (800e5f4 <tcp_fasttmr+0xbc>)
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d03f      	beq.n	800e5de <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e55e:	4b25      	ldr	r3, [pc, #148]	; (800e5f4 <tcp_fasttmr+0xbc>)
 800e560:	781a      	ldrb	r2, [r3, #0]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	8b5b      	ldrh	r3, [r3, #26]
 800e56a:	f003 0301 	and.w	r3, r3, #1
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d010      	beq.n	800e594 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	8b5b      	ldrh	r3, [r3, #26]
 800e576:	f043 0302 	orr.w	r3, r3, #2
 800e57a:	b29a      	uxth	r2, r3
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f004 f813 	bl	80125ac <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	8b5b      	ldrh	r3, [r3, #26]
 800e58a:	f023 0303 	bic.w	r3, r3, #3
 800e58e:	b29a      	uxth	r2, r3
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	8b5b      	ldrh	r3, [r3, #26]
 800e598:	f003 0308 	and.w	r3, r3, #8
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d009      	beq.n	800e5b4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	8b5b      	ldrh	r3, [r3, #26]
 800e5a4:	f023 0308 	bic.w	r3, r3, #8
 800e5a8:	b29a      	uxth	r2, r3
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f7ff f862 	bl	800d678 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	68db      	ldr	r3, [r3, #12]
 800e5b8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d00a      	beq.n	800e5d8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e5c2:	4b0e      	ldr	r3, [pc, #56]	; (800e5fc <tcp_fasttmr+0xc4>)
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f000 f819 	bl	800e600 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e5ce:	4b0b      	ldr	r3, [pc, #44]	; (800e5fc <tcp_fasttmr+0xc4>)
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d000      	beq.n	800e5d8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e5d6:	e7b8      	b.n	800e54a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	607b      	str	r3, [r7, #4]
 800e5dc:	e002      	b.n	800e5e4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	68db      	ldr	r3, [r3, #12]
 800e5e2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d1b3      	bne.n	800e552 <tcp_fasttmr+0x1a>
    }
  }
}
 800e5ea:	bf00      	nop
 800e5ec:	bf00      	nop
 800e5ee:	3708      	adds	r7, #8
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}
 800e5f4:	20010e16 	.word	0x20010e16
 800e5f8:	20010e0c 	.word	0x20010e0c
 800e5fc:	20010e14 	.word	0x20010e14

0800e600 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e600:	b590      	push	{r4, r7, lr}
 800e602:	b085      	sub	sp, #20
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d109      	bne.n	800e622 <tcp_process_refused_data+0x22>
 800e60e:	4b37      	ldr	r3, [pc, #220]	; (800e6ec <tcp_process_refused_data+0xec>)
 800e610:	f240 6209 	movw	r2, #1545	; 0x609
 800e614:	4936      	ldr	r1, [pc, #216]	; (800e6f0 <tcp_process_refused_data+0xf0>)
 800e616:	4837      	ldr	r0, [pc, #220]	; (800e6f4 <tcp_process_refused_data+0xf4>)
 800e618:	f00a f9ca 	bl	80189b0 <iprintf>
 800e61c:	f06f 030f 	mvn.w	r3, #15
 800e620:	e060      	b.n	800e6e4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e626:	7b5b      	ldrb	r3, [r3, #13]
 800e628:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e62e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2200      	movs	r2, #0
 800e634:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d00b      	beq.n	800e658 <tcp_process_refused_data+0x58>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6918      	ldr	r0, [r3, #16]
 800e64a:	2300      	movs	r3, #0
 800e64c:	68ba      	ldr	r2, [r7, #8]
 800e64e:	6879      	ldr	r1, [r7, #4]
 800e650:	47a0      	blx	r4
 800e652:	4603      	mov	r3, r0
 800e654:	73fb      	strb	r3, [r7, #15]
 800e656:	e007      	b.n	800e668 <tcp_process_refused_data+0x68>
 800e658:	2300      	movs	r3, #0
 800e65a:	68ba      	ldr	r2, [r7, #8]
 800e65c:	6879      	ldr	r1, [r7, #4]
 800e65e:	2000      	movs	r0, #0
 800e660:	f000 f8c2 	bl	800e7e8 <tcp_recv_null>
 800e664:	4603      	mov	r3, r0
 800e666:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d12a      	bne.n	800e6c6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e670:	7bbb      	ldrb	r3, [r7, #14]
 800e672:	f003 0320 	and.w	r3, r3, #32
 800e676:	2b00      	cmp	r3, #0
 800e678:	d033      	beq.n	800e6e2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e67e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e682:	d005      	beq.n	800e690 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e688:	3301      	adds	r3, #1
 800e68a:	b29a      	uxth	r2, r3
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e696:	2b00      	cmp	r3, #0
 800e698:	d00b      	beq.n	800e6b2 <tcp_process_refused_data+0xb2>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6918      	ldr	r0, [r3, #16]
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	6879      	ldr	r1, [r7, #4]
 800e6aa:	47a0      	blx	r4
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	73fb      	strb	r3, [r7, #15]
 800e6b0:	e001      	b.n	800e6b6 <tcp_process_refused_data+0xb6>
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e6b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6ba:	f113 0f0d 	cmn.w	r3, #13
 800e6be:	d110      	bne.n	800e6e2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e6c0:	f06f 030c 	mvn.w	r3, #12
 800e6c4:	e00e      	b.n	800e6e4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e6c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6ca:	f113 0f0d 	cmn.w	r3, #13
 800e6ce:	d102      	bne.n	800e6d6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e6d0:	f06f 030c 	mvn.w	r3, #12
 800e6d4:	e006      	b.n	800e6e4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	68ba      	ldr	r2, [r7, #8]
 800e6da:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e6dc:	f06f 0304 	mvn.w	r3, #4
 800e6e0:	e000      	b.n	800e6e4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e6e2:	2300      	movs	r3, #0
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3714      	adds	r7, #20
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd90      	pop	{r4, r7, pc}
 800e6ec:	0801b198 	.word	0x0801b198
 800e6f0:	0801b6a8 	.word	0x0801b6a8
 800e6f4:	0801b1dc 	.word	0x0801b1dc

0800e6f8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e700:	e007      	b.n	800e712 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f000 f80a 	bl	800e722 <tcp_seg_free>
    seg = next;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d1f4      	bne.n	800e702 <tcp_segs_free+0xa>
  }
}
 800e718:	bf00      	nop
 800e71a:	bf00      	nop
 800e71c:	3710      	adds	r7, #16
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}

0800e722 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e722:	b580      	push	{r7, lr}
 800e724:	b082      	sub	sp, #8
 800e726:	af00      	add	r7, sp, #0
 800e728:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d00c      	beq.n	800e74a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d004      	beq.n	800e742 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	685b      	ldr	r3, [r3, #4]
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7fe fb4b 	bl	800cdd8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e742:	6879      	ldr	r1, [r7, #4]
 800e744:	2003      	movs	r0, #3
 800e746:	f7fd fc97 	bl	800c078 <memp_free>
  }
}
 800e74a:	bf00      	nop
 800e74c:	3708      	adds	r7, #8
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
	...

0800e754 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	460b      	mov	r3, r1
 800e75e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d107      	bne.n	800e776 <tcp_setprio+0x22>
 800e766:	4b07      	ldr	r3, [pc, #28]	; (800e784 <tcp_setprio+0x30>)
 800e768:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800e76c:	4906      	ldr	r1, [pc, #24]	; (800e788 <tcp_setprio+0x34>)
 800e76e:	4807      	ldr	r0, [pc, #28]	; (800e78c <tcp_setprio+0x38>)
 800e770:	f00a f91e 	bl	80189b0 <iprintf>
 800e774:	e002      	b.n	800e77c <tcp_setprio+0x28>

  pcb->prio = prio;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	78fa      	ldrb	r2, [r7, #3]
 800e77a:	755a      	strb	r2, [r3, #21]
}
 800e77c:	3708      	adds	r7, #8
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	0801b198 	.word	0x0801b198
 800e788:	0801b6d0 	.word	0x0801b6d0
 800e78c:	0801b1dc 	.word	0x0801b1dc

0800e790 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d106      	bne.n	800e7ac <tcp_seg_copy+0x1c>
 800e79e:	4b0f      	ldr	r3, [pc, #60]	; (800e7dc <tcp_seg_copy+0x4c>)
 800e7a0:	f240 6282 	movw	r2, #1666	; 0x682
 800e7a4:	490e      	ldr	r1, [pc, #56]	; (800e7e0 <tcp_seg_copy+0x50>)
 800e7a6:	480f      	ldr	r0, [pc, #60]	; (800e7e4 <tcp_seg_copy+0x54>)
 800e7a8:	f00a f902 	bl	80189b0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e7ac:	2003      	movs	r0, #3
 800e7ae:	f7fd fbed 	bl	800bf8c <memp_malloc>
 800e7b2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d101      	bne.n	800e7be <tcp_seg_copy+0x2e>
    return NULL;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	e00a      	b.n	800e7d4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e7be:	2210      	movs	r2, #16
 800e7c0:	6879      	ldr	r1, [r7, #4]
 800e7c2:	68f8      	ldr	r0, [r7, #12]
 800e7c4:	f00a fa42 	bl	8018c4c <memcpy>
  pbuf_ref(cseg->p);
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7fe fba9 	bl	800cf24 <pbuf_ref>
  return cseg;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3710      	adds	r7, #16
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}
 800e7dc:	0801b198 	.word	0x0801b198
 800e7e0:	0801b6ec 	.word	0x0801b6ec
 800e7e4:	0801b1dc 	.word	0x0801b1dc

0800e7e8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	60f8      	str	r0, [r7, #12]
 800e7f0:	60b9      	str	r1, [r7, #8]
 800e7f2:	607a      	str	r2, [r7, #4]
 800e7f4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d109      	bne.n	800e810 <tcp_recv_null+0x28>
 800e7fc:	4b12      	ldr	r3, [pc, #72]	; (800e848 <tcp_recv_null+0x60>)
 800e7fe:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e802:	4912      	ldr	r1, [pc, #72]	; (800e84c <tcp_recv_null+0x64>)
 800e804:	4812      	ldr	r0, [pc, #72]	; (800e850 <tcp_recv_null+0x68>)
 800e806:	f00a f8d3 	bl	80189b0 <iprintf>
 800e80a:	f06f 030f 	mvn.w	r3, #15
 800e80e:	e016      	b.n	800e83e <tcp_recv_null+0x56>

  if (p != NULL) {
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d009      	beq.n	800e82a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	891b      	ldrh	r3, [r3, #8]
 800e81a:	4619      	mov	r1, r3
 800e81c:	68b8      	ldr	r0, [r7, #8]
 800e81e:	f7ff fab5 	bl	800dd8c <tcp_recved>
    pbuf_free(p);
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f7fe fad8 	bl	800cdd8 <pbuf_free>
 800e828:	e008      	b.n	800e83c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e82a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d104      	bne.n	800e83c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e832:	68b8      	ldr	r0, [r7, #8]
 800e834:	f7fe ff8a 	bl	800d74c <tcp_close>
 800e838:	4603      	mov	r3, r0
 800e83a:	e000      	b.n	800e83e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e83c:	2300      	movs	r3, #0
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3710      	adds	r7, #16
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
 800e846:	bf00      	nop
 800e848:	0801b198 	.word	0x0801b198
 800e84c:	0801b708 	.word	0x0801b708
 800e850:	0801b1dc 	.word	0x0801b1dc

0800e854 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b086      	sub	sp, #24
 800e858:	af00      	add	r7, sp, #0
 800e85a:	4603      	mov	r3, r0
 800e85c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e85e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e862:	2b00      	cmp	r3, #0
 800e864:	db01      	blt.n	800e86a <tcp_kill_prio+0x16>
 800e866:	79fb      	ldrb	r3, [r7, #7]
 800e868:	e000      	b.n	800e86c <tcp_kill_prio+0x18>
 800e86a:	237f      	movs	r3, #127	; 0x7f
 800e86c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e86e:	7afb      	ldrb	r3, [r7, #11]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d034      	beq.n	800e8de <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e874:	7afb      	ldrb	r3, [r7, #11]
 800e876:	3b01      	subs	r3, #1
 800e878:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e87a:	2300      	movs	r3, #0
 800e87c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e87e:	2300      	movs	r3, #0
 800e880:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e882:	4b19      	ldr	r3, [pc, #100]	; (800e8e8 <tcp_kill_prio+0x94>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	617b      	str	r3, [r7, #20]
 800e888:	e01f      	b.n	800e8ca <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	7d5b      	ldrb	r3, [r3, #21]
 800e88e:	7afa      	ldrb	r2, [r7, #11]
 800e890:	429a      	cmp	r2, r3
 800e892:	d80c      	bhi.n	800e8ae <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e898:	7afa      	ldrb	r2, [r7, #11]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d112      	bne.n	800e8c4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e89e:	4b13      	ldr	r3, [pc, #76]	; (800e8ec <tcp_kill_prio+0x98>)
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	6a1b      	ldr	r3, [r3, #32]
 800e8a6:	1ad3      	subs	r3, r2, r3
 800e8a8:	68fa      	ldr	r2, [r7, #12]
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d80a      	bhi.n	800e8c4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e8ae:	4b0f      	ldr	r3, [pc, #60]	; (800e8ec <tcp_kill_prio+0x98>)
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	6a1b      	ldr	r3, [r3, #32]
 800e8b6:	1ad3      	subs	r3, r2, r3
 800e8b8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	7d5b      	ldrb	r3, [r3, #21]
 800e8c2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	617b      	str	r3, [r7, #20]
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d1dc      	bne.n	800e88a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d004      	beq.n	800e8e0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e8d6:	6938      	ldr	r0, [r7, #16]
 800e8d8:	f7ff f87e 	bl	800d9d8 <tcp_abort>
 800e8dc:	e000      	b.n	800e8e0 <tcp_kill_prio+0x8c>
    return;
 800e8de:	bf00      	nop
  }
}
 800e8e0:	3718      	adds	r7, #24
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	20010e0c 	.word	0x20010e0c
 800e8ec:	20010e00 	.word	0x20010e00

0800e8f0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b086      	sub	sp, #24
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e8fa:	79fb      	ldrb	r3, [r7, #7]
 800e8fc:	2b08      	cmp	r3, #8
 800e8fe:	d009      	beq.n	800e914 <tcp_kill_state+0x24>
 800e900:	79fb      	ldrb	r3, [r7, #7]
 800e902:	2b09      	cmp	r3, #9
 800e904:	d006      	beq.n	800e914 <tcp_kill_state+0x24>
 800e906:	4b1a      	ldr	r3, [pc, #104]	; (800e970 <tcp_kill_state+0x80>)
 800e908:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e90c:	4919      	ldr	r1, [pc, #100]	; (800e974 <tcp_kill_state+0x84>)
 800e90e:	481a      	ldr	r0, [pc, #104]	; (800e978 <tcp_kill_state+0x88>)
 800e910:	f00a f84e 	bl	80189b0 <iprintf>

  inactivity = 0;
 800e914:	2300      	movs	r3, #0
 800e916:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e918:	2300      	movs	r3, #0
 800e91a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e91c:	4b17      	ldr	r3, [pc, #92]	; (800e97c <tcp_kill_state+0x8c>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	617b      	str	r3, [r7, #20]
 800e922:	e017      	b.n	800e954 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	7d1b      	ldrb	r3, [r3, #20]
 800e928:	79fa      	ldrb	r2, [r7, #7]
 800e92a:	429a      	cmp	r2, r3
 800e92c:	d10f      	bne.n	800e94e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e92e:	4b14      	ldr	r3, [pc, #80]	; (800e980 <tcp_kill_state+0x90>)
 800e930:	681a      	ldr	r2, [r3, #0]
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	6a1b      	ldr	r3, [r3, #32]
 800e936:	1ad3      	subs	r3, r2, r3
 800e938:	68fa      	ldr	r2, [r7, #12]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d807      	bhi.n	800e94e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e93e:	4b10      	ldr	r3, [pc, #64]	; (800e980 <tcp_kill_state+0x90>)
 800e940:	681a      	ldr	r2, [r3, #0]
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	6a1b      	ldr	r3, [r3, #32]
 800e946:	1ad3      	subs	r3, r2, r3
 800e948:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	617b      	str	r3, [r7, #20]
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d1e4      	bne.n	800e924 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d003      	beq.n	800e968 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e960:	2100      	movs	r1, #0
 800e962:	6938      	ldr	r0, [r7, #16]
 800e964:	f7fe ff7a 	bl	800d85c <tcp_abandon>
  }
}
 800e968:	bf00      	nop
 800e96a:	3718      	adds	r7, #24
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}
 800e970:	0801b198 	.word	0x0801b198
 800e974:	0801b724 	.word	0x0801b724
 800e978:	0801b1dc 	.word	0x0801b1dc
 800e97c:	20010e0c 	.word	0x20010e0c
 800e980:	20010e00 	.word	0x20010e00

0800e984 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e98a:	2300      	movs	r3, #0
 800e98c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e98e:	2300      	movs	r3, #0
 800e990:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e992:	4b12      	ldr	r3, [pc, #72]	; (800e9dc <tcp_kill_timewait+0x58>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	60fb      	str	r3, [r7, #12]
 800e998:	e012      	b.n	800e9c0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e99a:	4b11      	ldr	r3, [pc, #68]	; (800e9e0 <tcp_kill_timewait+0x5c>)
 800e99c:	681a      	ldr	r2, [r3, #0]
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	6a1b      	ldr	r3, [r3, #32]
 800e9a2:	1ad3      	subs	r3, r2, r3
 800e9a4:	687a      	ldr	r2, [r7, #4]
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	d807      	bhi.n	800e9ba <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e9aa:	4b0d      	ldr	r3, [pc, #52]	; (800e9e0 <tcp_kill_timewait+0x5c>)
 800e9ac:	681a      	ldr	r2, [r3, #0]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	6a1b      	ldr	r3, [r3, #32]
 800e9b2:	1ad3      	subs	r3, r2, r3
 800e9b4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	68db      	ldr	r3, [r3, #12]
 800e9be:	60fb      	str	r3, [r7, #12]
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d1e9      	bne.n	800e99a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d002      	beq.n	800e9d2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e9cc:	68b8      	ldr	r0, [r7, #8]
 800e9ce:	f7ff f803 	bl	800d9d8 <tcp_abort>
  }
}
 800e9d2:	bf00      	nop
 800e9d4:	3710      	adds	r7, #16
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	20010e10 	.word	0x20010e10
 800e9e0:	20010e00 	.word	0x20010e00

0800e9e4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e9ea:	4b10      	ldr	r3, [pc, #64]	; (800ea2c <tcp_handle_closepend+0x48>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e9f0:	e014      	b.n	800ea1c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	68db      	ldr	r3, [r3, #12]
 800e9f6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	8b5b      	ldrh	r3, [r3, #26]
 800e9fc:	f003 0308 	and.w	r3, r3, #8
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d009      	beq.n	800ea18 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	8b5b      	ldrh	r3, [r3, #26]
 800ea08:	f023 0308 	bic.w	r3, r3, #8
 800ea0c:	b29a      	uxth	r2, r3
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f7fe fe30 	bl	800d678 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d1e7      	bne.n	800e9f2 <tcp_handle_closepend+0xe>
  }
}
 800ea22:	bf00      	nop
 800ea24:	bf00      	nop
 800ea26:	3708      	adds	r7, #8
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	20010e0c 	.word	0x20010e0c

0800ea30 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	4603      	mov	r3, r0
 800ea38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea3a:	2001      	movs	r0, #1
 800ea3c:	f7fd faa6 	bl	800bf8c <memp_malloc>
 800ea40:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d126      	bne.n	800ea96 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ea48:	f7ff ffcc 	bl	800e9e4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ea4c:	f7ff ff9a 	bl	800e984 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea50:	2001      	movs	r0, #1
 800ea52:	f7fd fa9b 	bl	800bf8c <memp_malloc>
 800ea56:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d11b      	bne.n	800ea96 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ea5e:	2009      	movs	r0, #9
 800ea60:	f7ff ff46 	bl	800e8f0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea64:	2001      	movs	r0, #1
 800ea66:	f7fd fa91 	bl	800bf8c <memp_malloc>
 800ea6a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d111      	bne.n	800ea96 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ea72:	2008      	movs	r0, #8
 800ea74:	f7ff ff3c 	bl	800e8f0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea78:	2001      	movs	r0, #1
 800ea7a:	f7fd fa87 	bl	800bf8c <memp_malloc>
 800ea7e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d107      	bne.n	800ea96 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ea86:	79fb      	ldrb	r3, [r7, #7]
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7ff fee3 	bl	800e854 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ea8e:	2001      	movs	r0, #1
 800ea90:	f7fd fa7c 	bl	800bf8c <memp_malloc>
 800ea94:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d03f      	beq.n	800eb1c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ea9c:	229c      	movs	r2, #156	; 0x9c
 800ea9e:	2100      	movs	r1, #0
 800eaa0:	68f8      	ldr	r0, [r7, #12]
 800eaa2:	f009 ffea 	bl	8018a7a <memset>
    pcb->prio = prio;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	79fa      	ldrb	r2, [r7, #7]
 800eaaa:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800eab2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800eabc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	22ff      	movs	r2, #255	; 0xff
 800eaca:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ead2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2206      	movs	r2, #6
 800ead8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2206      	movs	r2, #6
 800eae0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eae8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2201      	movs	r2, #1
 800eaee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800eaf2:	4b0d      	ldr	r3, [pc, #52]	; (800eb28 <tcp_alloc+0xf8>)
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800eafa:	4b0c      	ldr	r3, [pc, #48]	; (800eb2c <tcp_alloc+0xfc>)
 800eafc:	781a      	ldrb	r2, [r3, #0]
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800eb08:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	4a08      	ldr	r2, [pc, #32]	; (800eb30 <tcp_alloc+0x100>)
 800eb10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	4a07      	ldr	r2, [pc, #28]	; (800eb34 <tcp_alloc+0x104>)
 800eb18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3710      	adds	r7, #16
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}
 800eb26:	bf00      	nop
 800eb28:	20010e00 	.word	0x20010e00
 800eb2c:	20010e16 	.word	0x20010e16
 800eb30:	0800e7e9 	.word	0x0800e7e9
 800eb34:	006ddd00 	.word	0x006ddd00

0800eb38 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	4603      	mov	r3, r0
 800eb40:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800eb42:	2040      	movs	r0, #64	; 0x40
 800eb44:	f7ff ff74 	bl	800ea30 <tcp_alloc>
 800eb48:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3710      	adds	r7, #16
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}

0800eb54 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800eb54:	b480      	push	{r7}
 800eb56:	b083      	sub	sp, #12
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d002      	beq.n	800eb6a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	683a      	ldr	r2, [r7, #0]
 800eb68:	611a      	str	r2, [r3, #16]
  }
}
 800eb6a:	bf00      	nop
 800eb6c:	370c      	adds	r7, #12
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr
	...

0800eb78 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d00e      	beq.n	800eba6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	7d1b      	ldrb	r3, [r3, #20]
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d106      	bne.n	800eb9e <tcp_recv+0x26>
 800eb90:	4b07      	ldr	r3, [pc, #28]	; (800ebb0 <tcp_recv+0x38>)
 800eb92:	f240 72df 	movw	r2, #2015	; 0x7df
 800eb96:	4907      	ldr	r1, [pc, #28]	; (800ebb4 <tcp_recv+0x3c>)
 800eb98:	4807      	ldr	r0, [pc, #28]	; (800ebb8 <tcp_recv+0x40>)
 800eb9a:	f009 ff09 	bl	80189b0 <iprintf>
    pcb->recv = recv;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	683a      	ldr	r2, [r7, #0]
 800eba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800eba6:	bf00      	nop
 800eba8:	3708      	adds	r7, #8
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	0801b198 	.word	0x0801b198
 800ebb4:	0801b734 	.word	0x0801b734
 800ebb8:	0801b1dc 	.word	0x0801b1dc

0800ebbc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d00e      	beq.n	800ebea <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	7d1b      	ldrb	r3, [r3, #20]
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d106      	bne.n	800ebe2 <tcp_sent+0x26>
 800ebd4:	4b07      	ldr	r3, [pc, #28]	; (800ebf4 <tcp_sent+0x38>)
 800ebd6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ebda:	4907      	ldr	r1, [pc, #28]	; (800ebf8 <tcp_sent+0x3c>)
 800ebdc:	4807      	ldr	r0, [pc, #28]	; (800ebfc <tcp_sent+0x40>)
 800ebde:	f009 fee7 	bl	80189b0 <iprintf>
    pcb->sent = sent;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	683a      	ldr	r2, [r7, #0]
 800ebe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ebea:	bf00      	nop
 800ebec:	3708      	adds	r7, #8
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	0801b198 	.word	0x0801b198
 800ebf8:	0801b75c 	.word	0x0801b75c
 800ebfc:	0801b1dc 	.word	0x0801b1dc

0800ec00 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d00e      	beq.n	800ec2e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	7d1b      	ldrb	r3, [r3, #20]
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	d106      	bne.n	800ec26 <tcp_err+0x26>
 800ec18:	4b07      	ldr	r3, [pc, #28]	; (800ec38 <tcp_err+0x38>)
 800ec1a:	f640 020d 	movw	r2, #2061	; 0x80d
 800ec1e:	4907      	ldr	r1, [pc, #28]	; (800ec3c <tcp_err+0x3c>)
 800ec20:	4807      	ldr	r0, [pc, #28]	; (800ec40 <tcp_err+0x40>)
 800ec22:	f009 fec5 	bl	80189b0 <iprintf>
    pcb->errf = err;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	683a      	ldr	r2, [r7, #0]
 800ec2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800ec2e:	bf00      	nop
 800ec30:	3708      	adds	r7, #8
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	0801b198 	.word	0x0801b198
 800ec3c:	0801b784 	.word	0x0801b784
 800ec40:	0801b1dc 	.word	0x0801b1dc

0800ec44 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ec44:	b480      	push	{r7}
 800ec46:	b085      	sub	sp, #20
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d008      	beq.n	800ec66 <tcp_accept+0x22>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	7d1b      	ldrb	r3, [r3, #20]
 800ec58:	2b01      	cmp	r3, #1
 800ec5a:	d104      	bne.n	800ec66 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	683a      	ldr	r2, [r7, #0]
 800ec64:	619a      	str	r2, [r3, #24]
  }
}
 800ec66:	bf00      	nop
 800ec68:	3714      	adds	r7, #20
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr
	...

0800ec74 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b084      	sub	sp, #16
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	60b9      	str	r1, [r7, #8]
 800ec7e:	4613      	mov	r3, r2
 800ec80:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d107      	bne.n	800ec98 <tcp_poll+0x24>
 800ec88:	4b0e      	ldr	r3, [pc, #56]	; (800ecc4 <tcp_poll+0x50>)
 800ec8a:	f640 023d 	movw	r2, #2109	; 0x83d
 800ec8e:	490e      	ldr	r1, [pc, #56]	; (800ecc8 <tcp_poll+0x54>)
 800ec90:	480e      	ldr	r0, [pc, #56]	; (800eccc <tcp_poll+0x58>)
 800ec92:	f009 fe8d 	bl	80189b0 <iprintf>
 800ec96:	e011      	b.n	800ecbc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	7d1b      	ldrb	r3, [r3, #20]
 800ec9c:	2b01      	cmp	r3, #1
 800ec9e:	d106      	bne.n	800ecae <tcp_poll+0x3a>
 800eca0:	4b08      	ldr	r3, [pc, #32]	; (800ecc4 <tcp_poll+0x50>)
 800eca2:	f640 023e 	movw	r2, #2110	; 0x83e
 800eca6:	490a      	ldr	r1, [pc, #40]	; (800ecd0 <tcp_poll+0x5c>)
 800eca8:	4808      	ldr	r0, [pc, #32]	; (800eccc <tcp_poll+0x58>)
 800ecaa:	f009 fe81 	bl	80189b0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	68ba      	ldr	r2, [r7, #8]
 800ecb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	79fa      	ldrb	r2, [r7, #7]
 800ecba:	775a      	strb	r2, [r3, #29]
}
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	bf00      	nop
 800ecc4:	0801b198 	.word	0x0801b198
 800ecc8:	0801b7ac 	.word	0x0801b7ac
 800eccc:	0801b1dc 	.word	0x0801b1dc
 800ecd0:	0801b7c4 	.word	0x0801b7c4

0800ecd4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d107      	bne.n	800ecf2 <tcp_pcb_purge+0x1e>
 800ece2:	4b21      	ldr	r3, [pc, #132]	; (800ed68 <tcp_pcb_purge+0x94>)
 800ece4:	f640 0251 	movw	r2, #2129	; 0x851
 800ece8:	4920      	ldr	r1, [pc, #128]	; (800ed6c <tcp_pcb_purge+0x98>)
 800ecea:	4821      	ldr	r0, [pc, #132]	; (800ed70 <tcp_pcb_purge+0x9c>)
 800ecec:	f009 fe60 	bl	80189b0 <iprintf>
 800ecf0:	e037      	b.n	800ed62 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	7d1b      	ldrb	r3, [r3, #20]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d033      	beq.n	800ed62 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ecfe:	2b0a      	cmp	r3, #10
 800ed00:	d02f      	beq.n	800ed62 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ed06:	2b01      	cmp	r3, #1
 800ed08:	d02b      	beq.n	800ed62 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d007      	beq.n	800ed22 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7fe f85e 	bl	800cdd8 <pbuf_free>
      pcb->refused_data = NULL;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d002      	beq.n	800ed30 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f000 f986 	bl	800f03c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed36:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7ff fcdb 	bl	800e6f8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7ff fcd6 	bl	800e6f8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	66da      	str	r2, [r3, #108]	; 0x6c
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ed62:	3708      	adds	r7, #8
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}
 800ed68:	0801b198 	.word	0x0801b198
 800ed6c:	0801b7e4 	.word	0x0801b7e4
 800ed70:	0801b1dc 	.word	0x0801b1dc

0800ed74 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b084      	sub	sp, #16
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d106      	bne.n	800ed92 <tcp_pcb_remove+0x1e>
 800ed84:	4b3e      	ldr	r3, [pc, #248]	; (800ee80 <tcp_pcb_remove+0x10c>)
 800ed86:	f640 0283 	movw	r2, #2179	; 0x883
 800ed8a:	493e      	ldr	r1, [pc, #248]	; (800ee84 <tcp_pcb_remove+0x110>)
 800ed8c:	483e      	ldr	r0, [pc, #248]	; (800ee88 <tcp_pcb_remove+0x114>)
 800ed8e:	f009 fe0f 	bl	80189b0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d106      	bne.n	800eda6 <tcp_pcb_remove+0x32>
 800ed98:	4b39      	ldr	r3, [pc, #228]	; (800ee80 <tcp_pcb_remove+0x10c>)
 800ed9a:	f640 0284 	movw	r2, #2180	; 0x884
 800ed9e:	493b      	ldr	r1, [pc, #236]	; (800ee8c <tcp_pcb_remove+0x118>)
 800eda0:	4839      	ldr	r0, [pc, #228]	; (800ee88 <tcp_pcb_remove+0x114>)
 800eda2:	f009 fe05 	bl	80189b0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	683a      	ldr	r2, [r7, #0]
 800edac:	429a      	cmp	r2, r3
 800edae:	d105      	bne.n	800edbc <tcp_pcb_remove+0x48>
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	68da      	ldr	r2, [r3, #12]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	601a      	str	r2, [r3, #0]
 800edba:	e013      	b.n	800ede4 <tcp_pcb_remove+0x70>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	60fb      	str	r3, [r7, #12]
 800edc2:	e00c      	b.n	800edde <tcp_pcb_remove+0x6a>
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	68db      	ldr	r3, [r3, #12]
 800edc8:	683a      	ldr	r2, [r7, #0]
 800edca:	429a      	cmp	r2, r3
 800edcc:	d104      	bne.n	800edd8 <tcp_pcb_remove+0x64>
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	68da      	ldr	r2, [r3, #12]
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	60da      	str	r2, [r3, #12]
 800edd6:	e005      	b.n	800ede4 <tcp_pcb_remove+0x70>
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	68db      	ldr	r3, [r3, #12]
 800eddc:	60fb      	str	r3, [r7, #12]
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d1ef      	bne.n	800edc4 <tcp_pcb_remove+0x50>
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	2200      	movs	r2, #0
 800ede8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800edea:	6838      	ldr	r0, [r7, #0]
 800edec:	f7ff ff72 	bl	800ecd4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	7d1b      	ldrb	r3, [r3, #20]
 800edf4:	2b0a      	cmp	r3, #10
 800edf6:	d013      	beq.n	800ee20 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d00f      	beq.n	800ee20 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	8b5b      	ldrh	r3, [r3, #26]
 800ee04:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d009      	beq.n	800ee20 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	8b5b      	ldrh	r3, [r3, #26]
 800ee10:	f043 0302 	orr.w	r3, r3, #2
 800ee14:	b29a      	uxth	r2, r3
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ee1a:	6838      	ldr	r0, [r7, #0]
 800ee1c:	f003 fbc6 	bl	80125ac <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	7d1b      	ldrb	r3, [r3, #20]
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d020      	beq.n	800ee6a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d006      	beq.n	800ee3e <tcp_pcb_remove+0xca>
 800ee30:	4b13      	ldr	r3, [pc, #76]	; (800ee80 <tcp_pcb_remove+0x10c>)
 800ee32:	f640 0293 	movw	r2, #2195	; 0x893
 800ee36:	4916      	ldr	r1, [pc, #88]	; (800ee90 <tcp_pcb_remove+0x11c>)
 800ee38:	4813      	ldr	r0, [pc, #76]	; (800ee88 <tcp_pcb_remove+0x114>)
 800ee3a:	f009 fdb9 	bl	80189b0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d006      	beq.n	800ee54 <tcp_pcb_remove+0xe0>
 800ee46:	4b0e      	ldr	r3, [pc, #56]	; (800ee80 <tcp_pcb_remove+0x10c>)
 800ee48:	f640 0294 	movw	r2, #2196	; 0x894
 800ee4c:	4911      	ldr	r1, [pc, #68]	; (800ee94 <tcp_pcb_remove+0x120>)
 800ee4e:	480e      	ldr	r0, [pc, #56]	; (800ee88 <tcp_pcb_remove+0x114>)
 800ee50:	f009 fdae 	bl	80189b0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d006      	beq.n	800ee6a <tcp_pcb_remove+0xf6>
 800ee5c:	4b08      	ldr	r3, [pc, #32]	; (800ee80 <tcp_pcb_remove+0x10c>)
 800ee5e:	f640 0296 	movw	r2, #2198	; 0x896
 800ee62:	490d      	ldr	r1, [pc, #52]	; (800ee98 <tcp_pcb_remove+0x124>)
 800ee64:	4808      	ldr	r0, [pc, #32]	; (800ee88 <tcp_pcb_remove+0x114>)
 800ee66:	f009 fda3 	bl	80189b0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	2200      	movs	r2, #0
 800ee74:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ee76:	bf00      	nop
 800ee78:	3710      	adds	r7, #16
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	0801b198 	.word	0x0801b198
 800ee84:	0801b800 	.word	0x0801b800
 800ee88:	0801b1dc 	.word	0x0801b1dc
 800ee8c:	0801b81c 	.word	0x0801b81c
 800ee90:	0801b83c 	.word	0x0801b83c
 800ee94:	0801b854 	.word	0x0801b854
 800ee98:	0801b870 	.word	0x0801b870

0800ee9c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d106      	bne.n	800eeb8 <tcp_next_iss+0x1c>
 800eeaa:	4b0a      	ldr	r3, [pc, #40]	; (800eed4 <tcp_next_iss+0x38>)
 800eeac:	f640 02af 	movw	r2, #2223	; 0x8af
 800eeb0:	4909      	ldr	r1, [pc, #36]	; (800eed8 <tcp_next_iss+0x3c>)
 800eeb2:	480a      	ldr	r0, [pc, #40]	; (800eedc <tcp_next_iss+0x40>)
 800eeb4:	f009 fd7c 	bl	80189b0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800eeb8:	4b09      	ldr	r3, [pc, #36]	; (800eee0 <tcp_next_iss+0x44>)
 800eeba:	681a      	ldr	r2, [r3, #0]
 800eebc:	4b09      	ldr	r3, [pc, #36]	; (800eee4 <tcp_next_iss+0x48>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	4413      	add	r3, r2
 800eec2:	4a07      	ldr	r2, [pc, #28]	; (800eee0 <tcp_next_iss+0x44>)
 800eec4:	6013      	str	r3, [r2, #0]
  return iss;
 800eec6:	4b06      	ldr	r3, [pc, #24]	; (800eee0 <tcp_next_iss+0x44>)
 800eec8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3708      	adds	r7, #8
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	0801b198 	.word	0x0801b198
 800eed8:	0801b888 	.word	0x0801b888
 800eedc:	0801b1dc 	.word	0x0801b1dc
 800eee0:	20000028 	.word	0x20000028
 800eee4:	20010e00 	.word	0x20010e00

0800eee8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b086      	sub	sp, #24
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	4603      	mov	r3, r0
 800eef0:	60b9      	str	r1, [r7, #8]
 800eef2:	607a      	str	r2, [r7, #4]
 800eef4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d106      	bne.n	800ef0a <tcp_eff_send_mss_netif+0x22>
 800eefc:	4b14      	ldr	r3, [pc, #80]	; (800ef50 <tcp_eff_send_mss_netif+0x68>)
 800eefe:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ef02:	4914      	ldr	r1, [pc, #80]	; (800ef54 <tcp_eff_send_mss_netif+0x6c>)
 800ef04:	4814      	ldr	r0, [pc, #80]	; (800ef58 <tcp_eff_send_mss_netif+0x70>)
 800ef06:	f009 fd53 	bl	80189b0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d101      	bne.n	800ef14 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ef10:	89fb      	ldrh	r3, [r7, #14]
 800ef12:	e019      	b.n	800ef48 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef18:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ef1a:	8afb      	ldrh	r3, [r7, #22]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d012      	beq.n	800ef46 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ef20:	2328      	movs	r3, #40	; 0x28
 800ef22:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ef24:	8afa      	ldrh	r2, [r7, #22]
 800ef26:	8abb      	ldrh	r3, [r7, #20]
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d904      	bls.n	800ef36 <tcp_eff_send_mss_netif+0x4e>
 800ef2c:	8afa      	ldrh	r2, [r7, #22]
 800ef2e:	8abb      	ldrh	r3, [r7, #20]
 800ef30:	1ad3      	subs	r3, r2, r3
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	e000      	b.n	800ef38 <tcp_eff_send_mss_netif+0x50>
 800ef36:	2300      	movs	r3, #0
 800ef38:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ef3a:	8a7a      	ldrh	r2, [r7, #18]
 800ef3c:	89fb      	ldrh	r3, [r7, #14]
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	bf28      	it	cs
 800ef42:	4613      	movcs	r3, r2
 800ef44:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ef46:	89fb      	ldrh	r3, [r7, #14]
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3718      	adds	r7, #24
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}
 800ef50:	0801b198 	.word	0x0801b198
 800ef54:	0801b8a4 	.word	0x0801b8a4
 800ef58:	0801b1dc 	.word	0x0801b1dc

0800ef5c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d119      	bne.n	800efa4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ef70:	4b10      	ldr	r3, [pc, #64]	; (800efb4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ef72:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ef76:	4910      	ldr	r1, [pc, #64]	; (800efb8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ef78:	4810      	ldr	r0, [pc, #64]	; (800efbc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ef7a:	f009 fd19 	bl	80189b0 <iprintf>

  while (pcb != NULL) {
 800ef7e:	e011      	b.n	800efa4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681a      	ldr	r2, [r3, #0]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d108      	bne.n	800ef9e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	68db      	ldr	r3, [r3, #12]
 800ef90:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ef92:	68f8      	ldr	r0, [r7, #12]
 800ef94:	f7fe fd20 	bl	800d9d8 <tcp_abort>
      pcb = next;
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	60fb      	str	r3, [r7, #12]
 800ef9c:	e002      	b.n	800efa4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	68db      	ldr	r3, [r3, #12]
 800efa2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d1ea      	bne.n	800ef80 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800efaa:	bf00      	nop
 800efac:	bf00      	nop
 800efae:	3710      	adds	r7, #16
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	0801b198 	.word	0x0801b198
 800efb8:	0801b8cc 	.word	0x0801b8cc
 800efbc:	0801b1dc 	.word	0x0801b1dc

0800efc0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b084      	sub	sp, #16
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d02a      	beq.n	800f026 <tcp_netif_ip_addr_changed+0x66>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d026      	beq.n	800f026 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800efd8:	4b15      	ldr	r3, [pc, #84]	; (800f030 <tcp_netif_ip_addr_changed+0x70>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4619      	mov	r1, r3
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f7ff ffbc 	bl	800ef5c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800efe4:	4b13      	ldr	r3, [pc, #76]	; (800f034 <tcp_netif_ip_addr_changed+0x74>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	4619      	mov	r1, r3
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f7ff ffb6 	bl	800ef5c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d017      	beq.n	800f026 <tcp_netif_ip_addr_changed+0x66>
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d013      	beq.n	800f026 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800effe:	4b0e      	ldr	r3, [pc, #56]	; (800f038 <tcp_netif_ip_addr_changed+0x78>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	60fb      	str	r3, [r7, #12]
 800f004:	e00c      	b.n	800f020 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d103      	bne.n	800f01a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	681a      	ldr	r2, [r3, #0]
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	68db      	ldr	r3, [r3, #12]
 800f01e:	60fb      	str	r3, [r7, #12]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d1ef      	bne.n	800f006 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f026:	bf00      	nop
 800f028:	3710      	adds	r7, #16
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	bf00      	nop
 800f030:	20010e0c 	.word	0x20010e0c
 800f034:	20010e04 	.word	0x20010e04
 800f038:	20010e08 	.word	0x20010e08

0800f03c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b082      	sub	sp, #8
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d007      	beq.n	800f05c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f050:	4618      	mov	r0, r3
 800f052:	f7ff fb51 	bl	800e6f8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2200      	movs	r2, #0
 800f05a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f05c:	bf00      	nop
 800f05e:	3708      	adds	r7, #8
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f064:	b590      	push	{r4, r7, lr}
 800f066:	b08d      	sub	sp, #52	; 0x34
 800f068:	af04      	add	r7, sp, #16
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d105      	bne.n	800f080 <tcp_input+0x1c>
 800f074:	4b9b      	ldr	r3, [pc, #620]	; (800f2e4 <tcp_input+0x280>)
 800f076:	2283      	movs	r2, #131	; 0x83
 800f078:	499b      	ldr	r1, [pc, #620]	; (800f2e8 <tcp_input+0x284>)
 800f07a:	489c      	ldr	r0, [pc, #624]	; (800f2ec <tcp_input+0x288>)
 800f07c:	f009 fc98 	bl	80189b0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	4a9a      	ldr	r2, [pc, #616]	; (800f2f0 <tcp_input+0x28c>)
 800f086:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	895b      	ldrh	r3, [r3, #10]
 800f08c:	2b13      	cmp	r3, #19
 800f08e:	f240 83d1 	bls.w	800f834 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f092:	4b98      	ldr	r3, [pc, #608]	; (800f2f4 <tcp_input+0x290>)
 800f094:	695b      	ldr	r3, [r3, #20]
 800f096:	4a97      	ldr	r2, [pc, #604]	; (800f2f4 <tcp_input+0x290>)
 800f098:	6812      	ldr	r2, [r2, #0]
 800f09a:	4611      	mov	r1, r2
 800f09c:	4618      	mov	r0, r3
 800f09e:	f008 fa61 	bl	8017564 <ip4_addr_isbroadcast_u32>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	f040 83c7 	bne.w	800f838 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f0aa:	4b92      	ldr	r3, [pc, #584]	; (800f2f4 <tcp_input+0x290>)
 800f0ac:	695b      	ldr	r3, [r3, #20]
 800f0ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f0b2:	2be0      	cmp	r3, #224	; 0xe0
 800f0b4:	f000 83c0 	beq.w	800f838 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f0b8:	4b8d      	ldr	r3, [pc, #564]	; (800f2f0 <tcp_input+0x28c>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	899b      	ldrh	r3, [r3, #12]
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7fc fa55 	bl	800b570 <lwip_htons>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	0b1b      	lsrs	r3, r3, #12
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	b2db      	uxtb	r3, r3
 800f0ce:	009b      	lsls	r3, r3, #2
 800f0d0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f0d2:	7cbb      	ldrb	r3, [r7, #18]
 800f0d4:	2b13      	cmp	r3, #19
 800f0d6:	f240 83b1 	bls.w	800f83c <tcp_input+0x7d8>
 800f0da:	7cbb      	ldrb	r3, [r7, #18]
 800f0dc:	b29a      	uxth	r2, r3
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	891b      	ldrh	r3, [r3, #8]
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	f200 83aa 	bhi.w	800f83c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f0e8:	7cbb      	ldrb	r3, [r7, #18]
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	3b14      	subs	r3, #20
 800f0ee:	b29a      	uxth	r2, r3
 800f0f0:	4b81      	ldr	r3, [pc, #516]	; (800f2f8 <tcp_input+0x294>)
 800f0f2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f0f4:	4b81      	ldr	r3, [pc, #516]	; (800f2fc <tcp_input+0x298>)
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	895a      	ldrh	r2, [r3, #10]
 800f0fe:	7cbb      	ldrb	r3, [r7, #18]
 800f100:	b29b      	uxth	r3, r3
 800f102:	429a      	cmp	r2, r3
 800f104:	d309      	bcc.n	800f11a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f106:	4b7c      	ldr	r3, [pc, #496]	; (800f2f8 <tcp_input+0x294>)
 800f108:	881a      	ldrh	r2, [r3, #0]
 800f10a:	4b7d      	ldr	r3, [pc, #500]	; (800f300 <tcp_input+0x29c>)
 800f10c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f10e:	7cbb      	ldrb	r3, [r7, #18]
 800f110:	4619      	mov	r1, r3
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f7fd fdda 	bl	800cccc <pbuf_remove_header>
 800f118:	e04e      	b.n	800f1b8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d105      	bne.n	800f12e <tcp_input+0xca>
 800f122:	4b70      	ldr	r3, [pc, #448]	; (800f2e4 <tcp_input+0x280>)
 800f124:	22c2      	movs	r2, #194	; 0xc2
 800f126:	4977      	ldr	r1, [pc, #476]	; (800f304 <tcp_input+0x2a0>)
 800f128:	4870      	ldr	r0, [pc, #448]	; (800f2ec <tcp_input+0x288>)
 800f12a:	f009 fc41 	bl	80189b0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f12e:	2114      	movs	r1, #20
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f7fd fdcb 	bl	800cccc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	895a      	ldrh	r2, [r3, #10]
 800f13a:	4b71      	ldr	r3, [pc, #452]	; (800f300 <tcp_input+0x29c>)
 800f13c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f13e:	4b6e      	ldr	r3, [pc, #440]	; (800f2f8 <tcp_input+0x294>)
 800f140:	881a      	ldrh	r2, [r3, #0]
 800f142:	4b6f      	ldr	r3, [pc, #444]	; (800f300 <tcp_input+0x29c>)
 800f144:	881b      	ldrh	r3, [r3, #0]
 800f146:	1ad3      	subs	r3, r2, r3
 800f148:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f14a:	4b6d      	ldr	r3, [pc, #436]	; (800f300 <tcp_input+0x29c>)
 800f14c:	881b      	ldrh	r3, [r3, #0]
 800f14e:	4619      	mov	r1, r3
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f7fd fdbb 	bl	800cccc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	895b      	ldrh	r3, [r3, #10]
 800f15c:	8a3a      	ldrh	r2, [r7, #16]
 800f15e:	429a      	cmp	r2, r3
 800f160:	f200 836e 	bhi.w	800f840 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	4a64      	ldr	r2, [pc, #400]	; (800f2fc <tcp_input+0x298>)
 800f16c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	8a3a      	ldrh	r2, [r7, #16]
 800f174:	4611      	mov	r1, r2
 800f176:	4618      	mov	r0, r3
 800f178:	f7fd fda8 	bl	800cccc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	891a      	ldrh	r2, [r3, #8]
 800f180:	8a3b      	ldrh	r3, [r7, #16]
 800f182:	1ad3      	subs	r3, r2, r3
 800f184:	b29a      	uxth	r2, r3
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	895b      	ldrh	r3, [r3, #10]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d005      	beq.n	800f19e <tcp_input+0x13a>
 800f192:	4b54      	ldr	r3, [pc, #336]	; (800f2e4 <tcp_input+0x280>)
 800f194:	22df      	movs	r2, #223	; 0xdf
 800f196:	495c      	ldr	r1, [pc, #368]	; (800f308 <tcp_input+0x2a4>)
 800f198:	4854      	ldr	r0, [pc, #336]	; (800f2ec <tcp_input+0x288>)
 800f19a:	f009 fc09 	bl	80189b0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	891a      	ldrh	r2, [r3, #8]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	891b      	ldrh	r3, [r3, #8]
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	d005      	beq.n	800f1b8 <tcp_input+0x154>
 800f1ac:	4b4d      	ldr	r3, [pc, #308]	; (800f2e4 <tcp_input+0x280>)
 800f1ae:	22e0      	movs	r2, #224	; 0xe0
 800f1b0:	4956      	ldr	r1, [pc, #344]	; (800f30c <tcp_input+0x2a8>)
 800f1b2:	484e      	ldr	r0, [pc, #312]	; (800f2ec <tcp_input+0x288>)
 800f1b4:	f009 fbfc 	bl	80189b0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f1b8:	4b4d      	ldr	r3, [pc, #308]	; (800f2f0 <tcp_input+0x28c>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	881b      	ldrh	r3, [r3, #0]
 800f1be:	b29b      	uxth	r3, r3
 800f1c0:	4a4b      	ldr	r2, [pc, #300]	; (800f2f0 <tcp_input+0x28c>)
 800f1c2:	6814      	ldr	r4, [r2, #0]
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f7fc f9d3 	bl	800b570 <lwip_htons>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f1ce:	4b48      	ldr	r3, [pc, #288]	; (800f2f0 <tcp_input+0x28c>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	885b      	ldrh	r3, [r3, #2]
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	4a46      	ldr	r2, [pc, #280]	; (800f2f0 <tcp_input+0x28c>)
 800f1d8:	6814      	ldr	r4, [r2, #0]
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7fc f9c8 	bl	800b570 <lwip_htons>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f1e4:	4b42      	ldr	r3, [pc, #264]	; (800f2f0 <tcp_input+0x28c>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	685b      	ldr	r3, [r3, #4]
 800f1ea:	4a41      	ldr	r2, [pc, #260]	; (800f2f0 <tcp_input+0x28c>)
 800f1ec:	6814      	ldr	r4, [r2, #0]
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7fc f9d3 	bl	800b59a <lwip_htonl>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	6063      	str	r3, [r4, #4]
 800f1f8:	6863      	ldr	r3, [r4, #4]
 800f1fa:	4a45      	ldr	r2, [pc, #276]	; (800f310 <tcp_input+0x2ac>)
 800f1fc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f1fe:	4b3c      	ldr	r3, [pc, #240]	; (800f2f0 <tcp_input+0x28c>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	689b      	ldr	r3, [r3, #8]
 800f204:	4a3a      	ldr	r2, [pc, #232]	; (800f2f0 <tcp_input+0x28c>)
 800f206:	6814      	ldr	r4, [r2, #0]
 800f208:	4618      	mov	r0, r3
 800f20a:	f7fc f9c6 	bl	800b59a <lwip_htonl>
 800f20e:	4603      	mov	r3, r0
 800f210:	60a3      	str	r3, [r4, #8]
 800f212:	68a3      	ldr	r3, [r4, #8]
 800f214:	4a3f      	ldr	r2, [pc, #252]	; (800f314 <tcp_input+0x2b0>)
 800f216:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f218:	4b35      	ldr	r3, [pc, #212]	; (800f2f0 <tcp_input+0x28c>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	89db      	ldrh	r3, [r3, #14]
 800f21e:	b29b      	uxth	r3, r3
 800f220:	4a33      	ldr	r2, [pc, #204]	; (800f2f0 <tcp_input+0x28c>)
 800f222:	6814      	ldr	r4, [r2, #0]
 800f224:	4618      	mov	r0, r3
 800f226:	f7fc f9a3 	bl	800b570 <lwip_htons>
 800f22a:	4603      	mov	r3, r0
 800f22c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f22e:	4b30      	ldr	r3, [pc, #192]	; (800f2f0 <tcp_input+0x28c>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	899b      	ldrh	r3, [r3, #12]
 800f234:	b29b      	uxth	r3, r3
 800f236:	4618      	mov	r0, r3
 800f238:	f7fc f99a 	bl	800b570 <lwip_htons>
 800f23c:	4603      	mov	r3, r0
 800f23e:	b2db      	uxtb	r3, r3
 800f240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f244:	b2da      	uxtb	r2, r3
 800f246:	4b34      	ldr	r3, [pc, #208]	; (800f318 <tcp_input+0x2b4>)
 800f248:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	891a      	ldrh	r2, [r3, #8]
 800f24e:	4b33      	ldr	r3, [pc, #204]	; (800f31c <tcp_input+0x2b8>)
 800f250:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f252:	4b31      	ldr	r3, [pc, #196]	; (800f318 <tcp_input+0x2b4>)
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	f003 0303 	and.w	r3, r3, #3
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d00c      	beq.n	800f278 <tcp_input+0x214>
    tcplen++;
 800f25e:	4b2f      	ldr	r3, [pc, #188]	; (800f31c <tcp_input+0x2b8>)
 800f260:	881b      	ldrh	r3, [r3, #0]
 800f262:	3301      	adds	r3, #1
 800f264:	b29a      	uxth	r2, r3
 800f266:	4b2d      	ldr	r3, [pc, #180]	; (800f31c <tcp_input+0x2b8>)
 800f268:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	891a      	ldrh	r2, [r3, #8]
 800f26e:	4b2b      	ldr	r3, [pc, #172]	; (800f31c <tcp_input+0x2b8>)
 800f270:	881b      	ldrh	r3, [r3, #0]
 800f272:	429a      	cmp	r2, r3
 800f274:	f200 82e6 	bhi.w	800f844 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f278:	2300      	movs	r3, #0
 800f27a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f27c:	4b28      	ldr	r3, [pc, #160]	; (800f320 <tcp_input+0x2bc>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	61fb      	str	r3, [r7, #28]
 800f282:	e09d      	b.n	800f3c0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f284:	69fb      	ldr	r3, [r7, #28]
 800f286:	7d1b      	ldrb	r3, [r3, #20]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d105      	bne.n	800f298 <tcp_input+0x234>
 800f28c:	4b15      	ldr	r3, [pc, #84]	; (800f2e4 <tcp_input+0x280>)
 800f28e:	22fb      	movs	r2, #251	; 0xfb
 800f290:	4924      	ldr	r1, [pc, #144]	; (800f324 <tcp_input+0x2c0>)
 800f292:	4816      	ldr	r0, [pc, #88]	; (800f2ec <tcp_input+0x288>)
 800f294:	f009 fb8c 	bl	80189b0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f298:	69fb      	ldr	r3, [r7, #28]
 800f29a:	7d1b      	ldrb	r3, [r3, #20]
 800f29c:	2b0a      	cmp	r3, #10
 800f29e:	d105      	bne.n	800f2ac <tcp_input+0x248>
 800f2a0:	4b10      	ldr	r3, [pc, #64]	; (800f2e4 <tcp_input+0x280>)
 800f2a2:	22fc      	movs	r2, #252	; 0xfc
 800f2a4:	4920      	ldr	r1, [pc, #128]	; (800f328 <tcp_input+0x2c4>)
 800f2a6:	4811      	ldr	r0, [pc, #68]	; (800f2ec <tcp_input+0x288>)
 800f2a8:	f009 fb82 	bl	80189b0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f2ac:	69fb      	ldr	r3, [r7, #28]
 800f2ae:	7d1b      	ldrb	r3, [r3, #20]
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	d105      	bne.n	800f2c0 <tcp_input+0x25c>
 800f2b4:	4b0b      	ldr	r3, [pc, #44]	; (800f2e4 <tcp_input+0x280>)
 800f2b6:	22fd      	movs	r2, #253	; 0xfd
 800f2b8:	491c      	ldr	r1, [pc, #112]	; (800f32c <tcp_input+0x2c8>)
 800f2ba:	480c      	ldr	r0, [pc, #48]	; (800f2ec <tcp_input+0x288>)
 800f2bc:	f009 fb78 	bl	80189b0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f2c0:	69fb      	ldr	r3, [r7, #28]
 800f2c2:	7a1b      	ldrb	r3, [r3, #8]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d033      	beq.n	800f330 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f2c8:	69fb      	ldr	r3, [r7, #28]
 800f2ca:	7a1a      	ldrb	r2, [r3, #8]
 800f2cc:	4b09      	ldr	r3, [pc, #36]	; (800f2f4 <tcp_input+0x290>)
 800f2ce:	685b      	ldr	r3, [r3, #4]
 800f2d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d029      	beq.n	800f330 <tcp_input+0x2cc>
      prev = pcb;
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	61bb      	str	r3, [r7, #24]
      continue;
 800f2e0:	e06b      	b.n	800f3ba <tcp_input+0x356>
 800f2e2:	bf00      	nop
 800f2e4:	0801b900 	.word	0x0801b900
 800f2e8:	0801b934 	.word	0x0801b934
 800f2ec:	0801b94c 	.word	0x0801b94c
 800f2f0:	20010e28 	.word	0x20010e28
 800f2f4:	2000d68c 	.word	0x2000d68c
 800f2f8:	20010e2c 	.word	0x20010e2c
 800f2fc:	20010e30 	.word	0x20010e30
 800f300:	20010e2e 	.word	0x20010e2e
 800f304:	0801b974 	.word	0x0801b974
 800f308:	0801b984 	.word	0x0801b984
 800f30c:	0801b990 	.word	0x0801b990
 800f310:	20010e38 	.word	0x20010e38
 800f314:	20010e3c 	.word	0x20010e3c
 800f318:	20010e44 	.word	0x20010e44
 800f31c:	20010e42 	.word	0x20010e42
 800f320:	20010e0c 	.word	0x20010e0c
 800f324:	0801b9b0 	.word	0x0801b9b0
 800f328:	0801b9d8 	.word	0x0801b9d8
 800f32c:	0801ba04 	.word	0x0801ba04
    }

    if (pcb->remote_port == tcphdr->src &&
 800f330:	69fb      	ldr	r3, [r7, #28]
 800f332:	8b1a      	ldrh	r2, [r3, #24]
 800f334:	4b72      	ldr	r3, [pc, #456]	; (800f500 <tcp_input+0x49c>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	881b      	ldrh	r3, [r3, #0]
 800f33a:	b29b      	uxth	r3, r3
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d13a      	bne.n	800f3b6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f340:	69fb      	ldr	r3, [r7, #28]
 800f342:	8ada      	ldrh	r2, [r3, #22]
 800f344:	4b6e      	ldr	r3, [pc, #440]	; (800f500 <tcp_input+0x49c>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	885b      	ldrh	r3, [r3, #2]
 800f34a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d132      	bne.n	800f3b6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f350:	69fb      	ldr	r3, [r7, #28]
 800f352:	685a      	ldr	r2, [r3, #4]
 800f354:	4b6b      	ldr	r3, [pc, #428]	; (800f504 <tcp_input+0x4a0>)
 800f356:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f358:	429a      	cmp	r2, r3
 800f35a:	d12c      	bne.n	800f3b6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f35c:	69fb      	ldr	r3, [r7, #28]
 800f35e:	681a      	ldr	r2, [r3, #0]
 800f360:	4b68      	ldr	r3, [pc, #416]	; (800f504 <tcp_input+0x4a0>)
 800f362:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f364:	429a      	cmp	r2, r3
 800f366:	d126      	bne.n	800f3b6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f368:	69fb      	ldr	r3, [r7, #28]
 800f36a:	68db      	ldr	r3, [r3, #12]
 800f36c:	69fa      	ldr	r2, [r7, #28]
 800f36e:	429a      	cmp	r2, r3
 800f370:	d106      	bne.n	800f380 <tcp_input+0x31c>
 800f372:	4b65      	ldr	r3, [pc, #404]	; (800f508 <tcp_input+0x4a4>)
 800f374:	f240 120d 	movw	r2, #269	; 0x10d
 800f378:	4964      	ldr	r1, [pc, #400]	; (800f50c <tcp_input+0x4a8>)
 800f37a:	4865      	ldr	r0, [pc, #404]	; (800f510 <tcp_input+0x4ac>)
 800f37c:	f009 fb18 	bl	80189b0 <iprintf>
      if (prev != NULL) {
 800f380:	69bb      	ldr	r3, [r7, #24]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d00a      	beq.n	800f39c <tcp_input+0x338>
        prev->next = pcb->next;
 800f386:	69fb      	ldr	r3, [r7, #28]
 800f388:	68da      	ldr	r2, [r3, #12]
 800f38a:	69bb      	ldr	r3, [r7, #24]
 800f38c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f38e:	4b61      	ldr	r3, [pc, #388]	; (800f514 <tcp_input+0x4b0>)
 800f390:	681a      	ldr	r2, [r3, #0]
 800f392:	69fb      	ldr	r3, [r7, #28]
 800f394:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f396:	4a5f      	ldr	r2, [pc, #380]	; (800f514 <tcp_input+0x4b0>)
 800f398:	69fb      	ldr	r3, [r7, #28]
 800f39a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f39c:	69fb      	ldr	r3, [r7, #28]
 800f39e:	68db      	ldr	r3, [r3, #12]
 800f3a0:	69fa      	ldr	r2, [r7, #28]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d111      	bne.n	800f3ca <tcp_input+0x366>
 800f3a6:	4b58      	ldr	r3, [pc, #352]	; (800f508 <tcp_input+0x4a4>)
 800f3a8:	f240 1215 	movw	r2, #277	; 0x115
 800f3ac:	495a      	ldr	r1, [pc, #360]	; (800f518 <tcp_input+0x4b4>)
 800f3ae:	4858      	ldr	r0, [pc, #352]	; (800f510 <tcp_input+0x4ac>)
 800f3b0:	f009 fafe 	bl	80189b0 <iprintf>
      break;
 800f3b4:	e009      	b.n	800f3ca <tcp_input+0x366>
    }
    prev = pcb;
 800f3b6:	69fb      	ldr	r3, [r7, #28]
 800f3b8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3ba:	69fb      	ldr	r3, [r7, #28]
 800f3bc:	68db      	ldr	r3, [r3, #12]
 800f3be:	61fb      	str	r3, [r7, #28]
 800f3c0:	69fb      	ldr	r3, [r7, #28]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	f47f af5e 	bne.w	800f284 <tcp_input+0x220>
 800f3c8:	e000      	b.n	800f3cc <tcp_input+0x368>
      break;
 800f3ca:	bf00      	nop
  }

  if (pcb == NULL) {
 800f3cc:	69fb      	ldr	r3, [r7, #28]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	f040 80aa 	bne.w	800f528 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3d4:	4b51      	ldr	r3, [pc, #324]	; (800f51c <tcp_input+0x4b8>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	61fb      	str	r3, [r7, #28]
 800f3da:	e03f      	b.n	800f45c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f3dc:	69fb      	ldr	r3, [r7, #28]
 800f3de:	7d1b      	ldrb	r3, [r3, #20]
 800f3e0:	2b0a      	cmp	r3, #10
 800f3e2:	d006      	beq.n	800f3f2 <tcp_input+0x38e>
 800f3e4:	4b48      	ldr	r3, [pc, #288]	; (800f508 <tcp_input+0x4a4>)
 800f3e6:	f240 121f 	movw	r2, #287	; 0x11f
 800f3ea:	494d      	ldr	r1, [pc, #308]	; (800f520 <tcp_input+0x4bc>)
 800f3ec:	4848      	ldr	r0, [pc, #288]	; (800f510 <tcp_input+0x4ac>)
 800f3ee:	f009 fadf 	bl	80189b0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f3f2:	69fb      	ldr	r3, [r7, #28]
 800f3f4:	7a1b      	ldrb	r3, [r3, #8]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d009      	beq.n	800f40e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f3fa:	69fb      	ldr	r3, [r7, #28]
 800f3fc:	7a1a      	ldrb	r2, [r3, #8]
 800f3fe:	4b41      	ldr	r3, [pc, #260]	; (800f504 <tcp_input+0x4a0>)
 800f400:	685b      	ldr	r3, [r3, #4]
 800f402:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f406:	3301      	adds	r3, #1
 800f408:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d122      	bne.n	800f454 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f40e:	69fb      	ldr	r3, [r7, #28]
 800f410:	8b1a      	ldrh	r2, [r3, #24]
 800f412:	4b3b      	ldr	r3, [pc, #236]	; (800f500 <tcp_input+0x49c>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	881b      	ldrh	r3, [r3, #0]
 800f418:	b29b      	uxth	r3, r3
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d11b      	bne.n	800f456 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	8ada      	ldrh	r2, [r3, #22]
 800f422:	4b37      	ldr	r3, [pc, #220]	; (800f500 <tcp_input+0x49c>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	885b      	ldrh	r3, [r3, #2]
 800f428:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d113      	bne.n	800f456 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f42e:	69fb      	ldr	r3, [r7, #28]
 800f430:	685a      	ldr	r2, [r3, #4]
 800f432:	4b34      	ldr	r3, [pc, #208]	; (800f504 <tcp_input+0x4a0>)
 800f434:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f436:	429a      	cmp	r2, r3
 800f438:	d10d      	bne.n	800f456 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f43a:	69fb      	ldr	r3, [r7, #28]
 800f43c:	681a      	ldr	r2, [r3, #0]
 800f43e:	4b31      	ldr	r3, [pc, #196]	; (800f504 <tcp_input+0x4a0>)
 800f440:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f442:	429a      	cmp	r2, r3
 800f444:	d107      	bne.n	800f456 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f446:	69f8      	ldr	r0, [r7, #28]
 800f448:	f000 fb56 	bl	800faf8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f7fd fcc3 	bl	800cdd8 <pbuf_free>
        return;
 800f452:	e1fd      	b.n	800f850 <tcp_input+0x7ec>
        continue;
 800f454:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f456:	69fb      	ldr	r3, [r7, #28]
 800f458:	68db      	ldr	r3, [r3, #12]
 800f45a:	61fb      	str	r3, [r7, #28]
 800f45c:	69fb      	ldr	r3, [r7, #28]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d1bc      	bne.n	800f3dc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f462:	2300      	movs	r3, #0
 800f464:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f466:	4b2f      	ldr	r3, [pc, #188]	; (800f524 <tcp_input+0x4c0>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	617b      	str	r3, [r7, #20]
 800f46c:	e02a      	b.n	800f4c4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	7a1b      	ldrb	r3, [r3, #8]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d00c      	beq.n	800f490 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	7a1a      	ldrb	r2, [r3, #8]
 800f47a:	4b22      	ldr	r3, [pc, #136]	; (800f504 <tcp_input+0x4a0>)
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f482:	3301      	adds	r3, #1
 800f484:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f486:	429a      	cmp	r2, r3
 800f488:	d002      	beq.n	800f490 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f48a:	697b      	ldr	r3, [r7, #20]
 800f48c:	61bb      	str	r3, [r7, #24]
        continue;
 800f48e:	e016      	b.n	800f4be <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	8ada      	ldrh	r2, [r3, #22]
 800f494:	4b1a      	ldr	r3, [pc, #104]	; (800f500 <tcp_input+0x49c>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	885b      	ldrh	r3, [r3, #2]
 800f49a:	b29b      	uxth	r3, r3
 800f49c:	429a      	cmp	r2, r3
 800f49e:	d10c      	bne.n	800f4ba <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	681a      	ldr	r2, [r3, #0]
 800f4a4:	4b17      	ldr	r3, [pc, #92]	; (800f504 <tcp_input+0x4a0>)
 800f4a6:	695b      	ldr	r3, [r3, #20]
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d00f      	beq.n	800f4cc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d00d      	beq.n	800f4ce <tcp_input+0x46a>
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d009      	beq.n	800f4ce <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	68db      	ldr	r3, [r3, #12]
 800f4c2:	617b      	str	r3, [r7, #20]
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d1d1      	bne.n	800f46e <tcp_input+0x40a>
 800f4ca:	e000      	b.n	800f4ce <tcp_input+0x46a>
            break;
 800f4cc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d029      	beq.n	800f528 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f4d4:	69bb      	ldr	r3, [r7, #24]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d00a      	beq.n	800f4f0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	68da      	ldr	r2, [r3, #12]
 800f4de:	69bb      	ldr	r3, [r7, #24]
 800f4e0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f4e2:	4b10      	ldr	r3, [pc, #64]	; (800f524 <tcp_input+0x4c0>)
 800f4e4:	681a      	ldr	r2, [r3, #0]
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f4ea:	4a0e      	ldr	r2, [pc, #56]	; (800f524 <tcp_input+0x4c0>)
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f4f0:	6978      	ldr	r0, [r7, #20]
 800f4f2:	f000 fa03 	bl	800f8fc <tcp_listen_input>
      }
      pbuf_free(p);
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f7fd fc6e 	bl	800cdd8 <pbuf_free>
      return;
 800f4fc:	e1a8      	b.n	800f850 <tcp_input+0x7ec>
 800f4fe:	bf00      	nop
 800f500:	20010e28 	.word	0x20010e28
 800f504:	2000d68c 	.word	0x2000d68c
 800f508:	0801b900 	.word	0x0801b900
 800f50c:	0801ba2c 	.word	0x0801ba2c
 800f510:	0801b94c 	.word	0x0801b94c
 800f514:	20010e0c 	.word	0x20010e0c
 800f518:	0801ba58 	.word	0x0801ba58
 800f51c:	20010e10 	.word	0x20010e10
 800f520:	0801ba84 	.word	0x0801ba84
 800f524:	20010e08 	.word	0x20010e08
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	f000 8158 	beq.w	800f7e0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f530:	4b95      	ldr	r3, [pc, #596]	; (800f788 <tcp_input+0x724>)
 800f532:	2200      	movs	r2, #0
 800f534:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	891a      	ldrh	r2, [r3, #8]
 800f53a:	4b93      	ldr	r3, [pc, #588]	; (800f788 <tcp_input+0x724>)
 800f53c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f53e:	4a92      	ldr	r2, [pc, #584]	; (800f788 <tcp_input+0x724>)
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f544:	4b91      	ldr	r3, [pc, #580]	; (800f78c <tcp_input+0x728>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	4a8f      	ldr	r2, [pc, #572]	; (800f788 <tcp_input+0x724>)
 800f54a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f54c:	4b90      	ldr	r3, [pc, #576]	; (800f790 <tcp_input+0x72c>)
 800f54e:	2200      	movs	r2, #0
 800f550:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f552:	4b90      	ldr	r3, [pc, #576]	; (800f794 <tcp_input+0x730>)
 800f554:	2200      	movs	r2, #0
 800f556:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f558:	4b8f      	ldr	r3, [pc, #572]	; (800f798 <tcp_input+0x734>)
 800f55a:	2200      	movs	r2, #0
 800f55c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f55e:	4b8f      	ldr	r3, [pc, #572]	; (800f79c <tcp_input+0x738>)
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	f003 0308 	and.w	r3, r3, #8
 800f566:	2b00      	cmp	r3, #0
 800f568:	d006      	beq.n	800f578 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	7b5b      	ldrb	r3, [r3, #13]
 800f56e:	f043 0301 	orr.w	r3, r3, #1
 800f572:	b2da      	uxtb	r2, r3
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d017      	beq.n	800f5b0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f580:	69f8      	ldr	r0, [r7, #28]
 800f582:	f7ff f83d 	bl	800e600 <tcp_process_refused_data>
 800f586:	4603      	mov	r3, r0
 800f588:	f113 0f0d 	cmn.w	r3, #13
 800f58c:	d007      	beq.n	800f59e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f58e:	69fb      	ldr	r3, [r7, #28]
 800f590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f592:	2b00      	cmp	r3, #0
 800f594:	d00c      	beq.n	800f5b0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f596:	4b82      	ldr	r3, [pc, #520]	; (800f7a0 <tcp_input+0x73c>)
 800f598:	881b      	ldrh	r3, [r3, #0]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d008      	beq.n	800f5b0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f59e:	69fb      	ldr	r3, [r7, #28]
 800f5a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	f040 80e3 	bne.w	800f76e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f5a8:	69f8      	ldr	r0, [r7, #28]
 800f5aa:	f003 fe05 	bl	80131b8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f5ae:	e0de      	b.n	800f76e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f5b0:	4a7c      	ldr	r2, [pc, #496]	; (800f7a4 <tcp_input+0x740>)
 800f5b2:	69fb      	ldr	r3, [r7, #28]
 800f5b4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f5b6:	69f8      	ldr	r0, [r7, #28]
 800f5b8:	f000 fb18 	bl	800fbec <tcp_process>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f5c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f5c4:	f113 0f0d 	cmn.w	r3, #13
 800f5c8:	f000 80d3 	beq.w	800f772 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f5cc:	4b71      	ldr	r3, [pc, #452]	; (800f794 <tcp_input+0x730>)
 800f5ce:	781b      	ldrb	r3, [r3, #0]
 800f5d0:	f003 0308 	and.w	r3, r3, #8
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d015      	beq.n	800f604 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f5d8:	69fb      	ldr	r3, [r7, #28]
 800f5da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d008      	beq.n	800f5f4 <tcp_input+0x590>
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5e8:	69fa      	ldr	r2, [r7, #28]
 800f5ea:	6912      	ldr	r2, [r2, #16]
 800f5ec:	f06f 010d 	mvn.w	r1, #13
 800f5f0:	4610      	mov	r0, r2
 800f5f2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f5f4:	69f9      	ldr	r1, [r7, #28]
 800f5f6:	486c      	ldr	r0, [pc, #432]	; (800f7a8 <tcp_input+0x744>)
 800f5f8:	f7ff fbbc 	bl	800ed74 <tcp_pcb_remove>
        tcp_free(pcb);
 800f5fc:	69f8      	ldr	r0, [r7, #28]
 800f5fe:	f7fd fea7 	bl	800d350 <tcp_free>
 800f602:	e0da      	b.n	800f7ba <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f604:	2300      	movs	r3, #0
 800f606:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f608:	4b63      	ldr	r3, [pc, #396]	; (800f798 <tcp_input+0x734>)
 800f60a:	881b      	ldrh	r3, [r3, #0]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d01d      	beq.n	800f64c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f610:	4b61      	ldr	r3, [pc, #388]	; (800f798 <tcp_input+0x734>)
 800f612:	881b      	ldrh	r3, [r3, #0]
 800f614:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f616:	69fb      	ldr	r3, [r7, #28]
 800f618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d00a      	beq.n	800f636 <tcp_input+0x5d2>
 800f620:	69fb      	ldr	r3, [r7, #28]
 800f622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f626:	69fa      	ldr	r2, [r7, #28]
 800f628:	6910      	ldr	r0, [r2, #16]
 800f62a:	89fa      	ldrh	r2, [r7, #14]
 800f62c:	69f9      	ldr	r1, [r7, #28]
 800f62e:	4798      	blx	r3
 800f630:	4603      	mov	r3, r0
 800f632:	74fb      	strb	r3, [r7, #19]
 800f634:	e001      	b.n	800f63a <tcp_input+0x5d6>
 800f636:	2300      	movs	r3, #0
 800f638:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f63a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f63e:	f113 0f0d 	cmn.w	r3, #13
 800f642:	f000 8098 	beq.w	800f776 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f646:	4b54      	ldr	r3, [pc, #336]	; (800f798 <tcp_input+0x734>)
 800f648:	2200      	movs	r2, #0
 800f64a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f64c:	69f8      	ldr	r0, [r7, #28]
 800f64e:	f000 f915 	bl	800f87c <tcp_input_delayed_close>
 800f652:	4603      	mov	r3, r0
 800f654:	2b00      	cmp	r3, #0
 800f656:	f040 8090 	bne.w	800f77a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f65a:	4b4d      	ldr	r3, [pc, #308]	; (800f790 <tcp_input+0x72c>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d041      	beq.n	800f6e6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f662:	69fb      	ldr	r3, [r7, #28]
 800f664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f666:	2b00      	cmp	r3, #0
 800f668:	d006      	beq.n	800f678 <tcp_input+0x614>
 800f66a:	4b50      	ldr	r3, [pc, #320]	; (800f7ac <tcp_input+0x748>)
 800f66c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f670:	494f      	ldr	r1, [pc, #316]	; (800f7b0 <tcp_input+0x74c>)
 800f672:	4850      	ldr	r0, [pc, #320]	; (800f7b4 <tcp_input+0x750>)
 800f674:	f009 f99c 	bl	80189b0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f678:	69fb      	ldr	r3, [r7, #28]
 800f67a:	8b5b      	ldrh	r3, [r3, #26]
 800f67c:	f003 0310 	and.w	r3, r3, #16
 800f680:	2b00      	cmp	r3, #0
 800f682:	d008      	beq.n	800f696 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f684:	4b42      	ldr	r3, [pc, #264]	; (800f790 <tcp_input+0x72c>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	4618      	mov	r0, r3
 800f68a:	f7fd fba5 	bl	800cdd8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f68e:	69f8      	ldr	r0, [r7, #28]
 800f690:	f7fe f9a2 	bl	800d9d8 <tcp_abort>
            goto aborted;
 800f694:	e091      	b.n	800f7ba <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f696:	69fb      	ldr	r3, [r7, #28]
 800f698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d00c      	beq.n	800f6ba <tcp_input+0x656>
 800f6a0:	69fb      	ldr	r3, [r7, #28]
 800f6a2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f6a6:	69fb      	ldr	r3, [r7, #28]
 800f6a8:	6918      	ldr	r0, [r3, #16]
 800f6aa:	4b39      	ldr	r3, [pc, #228]	; (800f790 <tcp_input+0x72c>)
 800f6ac:	681a      	ldr	r2, [r3, #0]
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	69f9      	ldr	r1, [r7, #28]
 800f6b2:	47a0      	blx	r4
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	74fb      	strb	r3, [r7, #19]
 800f6b8:	e008      	b.n	800f6cc <tcp_input+0x668>
 800f6ba:	4b35      	ldr	r3, [pc, #212]	; (800f790 <tcp_input+0x72c>)
 800f6bc:	681a      	ldr	r2, [r3, #0]
 800f6be:	2300      	movs	r3, #0
 800f6c0:	69f9      	ldr	r1, [r7, #28]
 800f6c2:	2000      	movs	r0, #0
 800f6c4:	f7ff f890 	bl	800e7e8 <tcp_recv_null>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f6cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f6d0:	f113 0f0d 	cmn.w	r3, #13
 800f6d4:	d053      	beq.n	800f77e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f6d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d003      	beq.n	800f6e6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f6de:	4b2c      	ldr	r3, [pc, #176]	; (800f790 <tcp_input+0x72c>)
 800f6e0:	681a      	ldr	r2, [r3, #0]
 800f6e2:	69fb      	ldr	r3, [r7, #28]
 800f6e4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f6e6:	4b2b      	ldr	r3, [pc, #172]	; (800f794 <tcp_input+0x730>)
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	f003 0320 	and.w	r3, r3, #32
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d030      	beq.n	800f754 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f6f2:	69fb      	ldr	r3, [r7, #28]
 800f6f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d009      	beq.n	800f70e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f6fa:	69fb      	ldr	r3, [r7, #28]
 800f6fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6fe:	7b5a      	ldrb	r2, [r3, #13]
 800f700:	69fb      	ldr	r3, [r7, #28]
 800f702:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f704:	f042 0220 	orr.w	r2, r2, #32
 800f708:	b2d2      	uxtb	r2, r2
 800f70a:	735a      	strb	r2, [r3, #13]
 800f70c:	e022      	b.n	800f754 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f70e:	69fb      	ldr	r3, [r7, #28]
 800f710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f712:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f716:	d005      	beq.n	800f724 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f718:	69fb      	ldr	r3, [r7, #28]
 800f71a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f71c:	3301      	adds	r3, #1
 800f71e:	b29a      	uxth	r2, r3
 800f720:	69fb      	ldr	r3, [r7, #28]
 800f722:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f724:	69fb      	ldr	r3, [r7, #28]
 800f726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d00b      	beq.n	800f746 <tcp_input+0x6e2>
 800f72e:	69fb      	ldr	r3, [r7, #28]
 800f730:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f734:	69fb      	ldr	r3, [r7, #28]
 800f736:	6918      	ldr	r0, [r3, #16]
 800f738:	2300      	movs	r3, #0
 800f73a:	2200      	movs	r2, #0
 800f73c:	69f9      	ldr	r1, [r7, #28]
 800f73e:	47a0      	blx	r4
 800f740:	4603      	mov	r3, r0
 800f742:	74fb      	strb	r3, [r7, #19]
 800f744:	e001      	b.n	800f74a <tcp_input+0x6e6>
 800f746:	2300      	movs	r3, #0
 800f748:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f74a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f74e:	f113 0f0d 	cmn.w	r3, #13
 800f752:	d016      	beq.n	800f782 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f754:	4b13      	ldr	r3, [pc, #76]	; (800f7a4 <tcp_input+0x740>)
 800f756:	2200      	movs	r2, #0
 800f758:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f75a:	69f8      	ldr	r0, [r7, #28]
 800f75c:	f000 f88e 	bl	800f87c <tcp_input_delayed_close>
 800f760:	4603      	mov	r3, r0
 800f762:	2b00      	cmp	r3, #0
 800f764:	d128      	bne.n	800f7b8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f766:	69f8      	ldr	r0, [r7, #28]
 800f768:	f002 ff20 	bl	80125ac <tcp_output>
 800f76c:	e025      	b.n	800f7ba <tcp_input+0x756>
        goto aborted;
 800f76e:	bf00      	nop
 800f770:	e023      	b.n	800f7ba <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f772:	bf00      	nop
 800f774:	e021      	b.n	800f7ba <tcp_input+0x756>
              goto aborted;
 800f776:	bf00      	nop
 800f778:	e01f      	b.n	800f7ba <tcp_input+0x756>
          goto aborted;
 800f77a:	bf00      	nop
 800f77c:	e01d      	b.n	800f7ba <tcp_input+0x756>
            goto aborted;
 800f77e:	bf00      	nop
 800f780:	e01b      	b.n	800f7ba <tcp_input+0x756>
              goto aborted;
 800f782:	bf00      	nop
 800f784:	e019      	b.n	800f7ba <tcp_input+0x756>
 800f786:	bf00      	nop
 800f788:	20010e18 	.word	0x20010e18
 800f78c:	20010e28 	.word	0x20010e28
 800f790:	20010e48 	.word	0x20010e48
 800f794:	20010e45 	.word	0x20010e45
 800f798:	20010e40 	.word	0x20010e40
 800f79c:	20010e44 	.word	0x20010e44
 800f7a0:	20010e42 	.word	0x20010e42
 800f7a4:	20010e4c 	.word	0x20010e4c
 800f7a8:	20010e0c 	.word	0x20010e0c
 800f7ac:	0801b900 	.word	0x0801b900
 800f7b0:	0801bab4 	.word	0x0801bab4
 800f7b4:	0801b94c 	.word	0x0801b94c
          goto aborted;
 800f7b8:	bf00      	nop
    tcp_input_pcb = NULL;
 800f7ba:	4b27      	ldr	r3, [pc, #156]	; (800f858 <tcp_input+0x7f4>)
 800f7bc:	2200      	movs	r2, #0
 800f7be:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f7c0:	4b26      	ldr	r3, [pc, #152]	; (800f85c <tcp_input+0x7f8>)
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f7c6:	4b26      	ldr	r3, [pc, #152]	; (800f860 <tcp_input+0x7fc>)
 800f7c8:	685b      	ldr	r3, [r3, #4]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d03f      	beq.n	800f84e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f7ce:	4b24      	ldr	r3, [pc, #144]	; (800f860 <tcp_input+0x7fc>)
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7fd fb00 	bl	800cdd8 <pbuf_free>
      inseg.p = NULL;
 800f7d8:	4b21      	ldr	r3, [pc, #132]	; (800f860 <tcp_input+0x7fc>)
 800f7da:	2200      	movs	r2, #0
 800f7dc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f7de:	e036      	b.n	800f84e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f7e0:	4b20      	ldr	r3, [pc, #128]	; (800f864 <tcp_input+0x800>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	899b      	ldrh	r3, [r3, #12]
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7fb fec1 	bl	800b570 <lwip_htons>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	b2db      	uxtb	r3, r3
 800f7f2:	f003 0304 	and.w	r3, r3, #4
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d118      	bne.n	800f82c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7fa:	4b1b      	ldr	r3, [pc, #108]	; (800f868 <tcp_input+0x804>)
 800f7fc:	6819      	ldr	r1, [r3, #0]
 800f7fe:	4b1b      	ldr	r3, [pc, #108]	; (800f86c <tcp_input+0x808>)
 800f800:	881b      	ldrh	r3, [r3, #0]
 800f802:	461a      	mov	r2, r3
 800f804:	4b1a      	ldr	r3, [pc, #104]	; (800f870 <tcp_input+0x80c>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f80a:	4b16      	ldr	r3, [pc, #88]	; (800f864 <tcp_input+0x800>)
 800f80c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f80e:	885b      	ldrh	r3, [r3, #2]
 800f810:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f812:	4a14      	ldr	r2, [pc, #80]	; (800f864 <tcp_input+0x800>)
 800f814:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f816:	8812      	ldrh	r2, [r2, #0]
 800f818:	b292      	uxth	r2, r2
 800f81a:	9202      	str	r2, [sp, #8]
 800f81c:	9301      	str	r3, [sp, #4]
 800f81e:	4b15      	ldr	r3, [pc, #84]	; (800f874 <tcp_input+0x810>)
 800f820:	9300      	str	r3, [sp, #0]
 800f822:	4b15      	ldr	r3, [pc, #84]	; (800f878 <tcp_input+0x814>)
 800f824:	4602      	mov	r2, r0
 800f826:	2000      	movs	r0, #0
 800f828:	f003 fc74 	bl	8013114 <tcp_rst>
    pbuf_free(p);
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f7fd fad3 	bl	800cdd8 <pbuf_free>
  return;
 800f832:	e00c      	b.n	800f84e <tcp_input+0x7ea>
    goto dropped;
 800f834:	bf00      	nop
 800f836:	e006      	b.n	800f846 <tcp_input+0x7e2>
    goto dropped;
 800f838:	bf00      	nop
 800f83a:	e004      	b.n	800f846 <tcp_input+0x7e2>
    goto dropped;
 800f83c:	bf00      	nop
 800f83e:	e002      	b.n	800f846 <tcp_input+0x7e2>
      goto dropped;
 800f840:	bf00      	nop
 800f842:	e000      	b.n	800f846 <tcp_input+0x7e2>
      goto dropped;
 800f844:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f7fd fac6 	bl	800cdd8 <pbuf_free>
 800f84c:	e000      	b.n	800f850 <tcp_input+0x7ec>
  return;
 800f84e:	bf00      	nop
}
 800f850:	3724      	adds	r7, #36	; 0x24
 800f852:	46bd      	mov	sp, r7
 800f854:	bd90      	pop	{r4, r7, pc}
 800f856:	bf00      	nop
 800f858:	20010e4c 	.word	0x20010e4c
 800f85c:	20010e48 	.word	0x20010e48
 800f860:	20010e18 	.word	0x20010e18
 800f864:	20010e28 	.word	0x20010e28
 800f868:	20010e3c 	.word	0x20010e3c
 800f86c:	20010e42 	.word	0x20010e42
 800f870:	20010e38 	.word	0x20010e38
 800f874:	2000d69c 	.word	0x2000d69c
 800f878:	2000d6a0 	.word	0x2000d6a0

0800f87c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d106      	bne.n	800f898 <tcp_input_delayed_close+0x1c>
 800f88a:	4b17      	ldr	r3, [pc, #92]	; (800f8e8 <tcp_input_delayed_close+0x6c>)
 800f88c:	f240 225a 	movw	r2, #602	; 0x25a
 800f890:	4916      	ldr	r1, [pc, #88]	; (800f8ec <tcp_input_delayed_close+0x70>)
 800f892:	4817      	ldr	r0, [pc, #92]	; (800f8f0 <tcp_input_delayed_close+0x74>)
 800f894:	f009 f88c 	bl	80189b0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f898:	4b16      	ldr	r3, [pc, #88]	; (800f8f4 <tcp_input_delayed_close+0x78>)
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	f003 0310 	and.w	r3, r3, #16
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d01c      	beq.n	800f8de <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	8b5b      	ldrh	r3, [r3, #26]
 800f8a8:	f003 0310 	and.w	r3, r3, #16
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d10d      	bne.n	800f8cc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d008      	beq.n	800f8cc <tcp_input_delayed_close+0x50>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8c0:	687a      	ldr	r2, [r7, #4]
 800f8c2:	6912      	ldr	r2, [r2, #16]
 800f8c4:	f06f 010e 	mvn.w	r1, #14
 800f8c8:	4610      	mov	r0, r2
 800f8ca:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f8cc:	6879      	ldr	r1, [r7, #4]
 800f8ce:	480a      	ldr	r0, [pc, #40]	; (800f8f8 <tcp_input_delayed_close+0x7c>)
 800f8d0:	f7ff fa50 	bl	800ed74 <tcp_pcb_remove>
    tcp_free(pcb);
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f7fd fd3b 	bl	800d350 <tcp_free>
    return 1;
 800f8da:	2301      	movs	r3, #1
 800f8dc:	e000      	b.n	800f8e0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f8de:	2300      	movs	r3, #0
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3708      	adds	r7, #8
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}
 800f8e8:	0801b900 	.word	0x0801b900
 800f8ec:	0801bad0 	.word	0x0801bad0
 800f8f0:	0801b94c 	.word	0x0801b94c
 800f8f4:	20010e45 	.word	0x20010e45
 800f8f8:	20010e0c 	.word	0x20010e0c

0800f8fc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f8fc:	b590      	push	{r4, r7, lr}
 800f8fe:	b08b      	sub	sp, #44	; 0x2c
 800f900:	af04      	add	r7, sp, #16
 800f902:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f904:	4b6f      	ldr	r3, [pc, #444]	; (800fac4 <tcp_listen_input+0x1c8>)
 800f906:	781b      	ldrb	r3, [r3, #0]
 800f908:	f003 0304 	and.w	r3, r3, #4
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	f040 80d2 	bne.w	800fab6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d106      	bne.n	800f926 <tcp_listen_input+0x2a>
 800f918:	4b6b      	ldr	r3, [pc, #428]	; (800fac8 <tcp_listen_input+0x1cc>)
 800f91a:	f240 2281 	movw	r2, #641	; 0x281
 800f91e:	496b      	ldr	r1, [pc, #428]	; (800facc <tcp_listen_input+0x1d0>)
 800f920:	486b      	ldr	r0, [pc, #428]	; (800fad0 <tcp_listen_input+0x1d4>)
 800f922:	f009 f845 	bl	80189b0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f926:	4b67      	ldr	r3, [pc, #412]	; (800fac4 <tcp_listen_input+0x1c8>)
 800f928:	781b      	ldrb	r3, [r3, #0]
 800f92a:	f003 0310 	and.w	r3, r3, #16
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d019      	beq.n	800f966 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f932:	4b68      	ldr	r3, [pc, #416]	; (800fad4 <tcp_listen_input+0x1d8>)
 800f934:	6819      	ldr	r1, [r3, #0]
 800f936:	4b68      	ldr	r3, [pc, #416]	; (800fad8 <tcp_listen_input+0x1dc>)
 800f938:	881b      	ldrh	r3, [r3, #0]
 800f93a:	461a      	mov	r2, r3
 800f93c:	4b67      	ldr	r3, [pc, #412]	; (800fadc <tcp_listen_input+0x1e0>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f942:	4b67      	ldr	r3, [pc, #412]	; (800fae0 <tcp_listen_input+0x1e4>)
 800f944:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f946:	885b      	ldrh	r3, [r3, #2]
 800f948:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f94a:	4a65      	ldr	r2, [pc, #404]	; (800fae0 <tcp_listen_input+0x1e4>)
 800f94c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f94e:	8812      	ldrh	r2, [r2, #0]
 800f950:	b292      	uxth	r2, r2
 800f952:	9202      	str	r2, [sp, #8]
 800f954:	9301      	str	r3, [sp, #4]
 800f956:	4b63      	ldr	r3, [pc, #396]	; (800fae4 <tcp_listen_input+0x1e8>)
 800f958:	9300      	str	r3, [sp, #0]
 800f95a:	4b63      	ldr	r3, [pc, #396]	; (800fae8 <tcp_listen_input+0x1ec>)
 800f95c:	4602      	mov	r2, r0
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f003 fbd8 	bl	8013114 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f964:	e0a9      	b.n	800faba <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f966:	4b57      	ldr	r3, [pc, #348]	; (800fac4 <tcp_listen_input+0x1c8>)
 800f968:	781b      	ldrb	r3, [r3, #0]
 800f96a:	f003 0302 	and.w	r3, r3, #2
 800f96e:	2b00      	cmp	r3, #0
 800f970:	f000 80a3 	beq.w	800faba <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	7d5b      	ldrb	r3, [r3, #21]
 800f978:	4618      	mov	r0, r3
 800f97a:	f7ff f859 	bl	800ea30 <tcp_alloc>
 800f97e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d111      	bne.n	800f9aa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	699b      	ldr	r3, [r3, #24]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d00a      	beq.n	800f9a4 <tcp_listen_input+0xa8>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	699b      	ldr	r3, [r3, #24]
 800f992:	687a      	ldr	r2, [r7, #4]
 800f994:	6910      	ldr	r0, [r2, #16]
 800f996:	f04f 32ff 	mov.w	r2, #4294967295
 800f99a:	2100      	movs	r1, #0
 800f99c:	4798      	blx	r3
 800f99e:	4603      	mov	r3, r0
 800f9a0:	73bb      	strb	r3, [r7, #14]
      return;
 800f9a2:	e08b      	b.n	800fabc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f9a4:	23f0      	movs	r3, #240	; 0xf0
 800f9a6:	73bb      	strb	r3, [r7, #14]
      return;
 800f9a8:	e088      	b.n	800fabc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f9aa:	4b50      	ldr	r3, [pc, #320]	; (800faec <tcp_listen_input+0x1f0>)
 800f9ac:	695a      	ldr	r2, [r3, #20]
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f9b2:	4b4e      	ldr	r3, [pc, #312]	; (800faec <tcp_listen_input+0x1f0>)
 800f9b4:	691a      	ldr	r2, [r3, #16]
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	8ada      	ldrh	r2, [r3, #22]
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f9c2:	4b47      	ldr	r3, [pc, #284]	; (800fae0 <tcp_listen_input+0x1e4>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	881b      	ldrh	r3, [r3, #0]
 800f9c8:	b29a      	uxth	r2, r3
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	2203      	movs	r2, #3
 800f9d2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f9d4:	4b41      	ldr	r3, [pc, #260]	; (800fadc <tcp_listen_input+0x1e0>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	1c5a      	adds	r2, r3, #1
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f9e6:	6978      	ldr	r0, [r7, #20]
 800f9e8:	f7ff fa58 	bl	800ee9c <tcp_next_iss>
 800f9ec:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	693a      	ldr	r2, [r7, #16]
 800f9f2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	693a      	ldr	r2, [r7, #16]
 800f9f8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	693a      	ldr	r2, [r7, #16]
 800f9fe:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	693a      	ldr	r2, [r7, #16]
 800fa04:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fa06:	4b35      	ldr	r3, [pc, #212]	; (800fadc <tcp_listen_input+0x1e0>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	1e5a      	subs	r2, r3, #1
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	691a      	ldr	r2, [r3, #16]
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	687a      	ldr	r2, [r7, #4]
 800fa1c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	7a5b      	ldrb	r3, [r3, #9]
 800fa22:	f003 030c 	and.w	r3, r3, #12
 800fa26:	b2da      	uxtb	r2, r3
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	7a1a      	ldrb	r2, [r3, #8]
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fa34:	4b2e      	ldr	r3, [pc, #184]	; (800faf0 <tcp_listen_input+0x1f4>)
 800fa36:	681a      	ldr	r2, [r3, #0]
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	60da      	str	r2, [r3, #12]
 800fa3c:	4a2c      	ldr	r2, [pc, #176]	; (800faf0 <tcp_listen_input+0x1f4>)
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	6013      	str	r3, [r2, #0]
 800fa42:	f003 fd29 	bl	8013498 <tcp_timer_needed>
 800fa46:	4b2b      	ldr	r3, [pc, #172]	; (800faf4 <tcp_listen_input+0x1f8>)
 800fa48:	2201      	movs	r2, #1
 800fa4a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fa4c:	6978      	ldr	r0, [r7, #20]
 800fa4e:	f001 fd8f 	bl	8011570 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fa52:	4b23      	ldr	r3, [pc, #140]	; (800fae0 <tcp_listen_input+0x1e4>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	89db      	ldrh	r3, [r3, #14]
 800fa58:	b29a      	uxth	r2, r3
 800fa5a:	697b      	ldr	r3, [r7, #20]
 800fa5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	3304      	adds	r3, #4
 800fa74:	4618      	mov	r0, r3
 800fa76:	f007 fac1 	bl	8016ffc <ip4_route>
 800fa7a:	4601      	mov	r1, r0
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	3304      	adds	r3, #4
 800fa80:	461a      	mov	r2, r3
 800fa82:	4620      	mov	r0, r4
 800fa84:	f7ff fa30 	bl	800eee8 <tcp_eff_send_mss_netif>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fa90:	2112      	movs	r1, #18
 800fa92:	6978      	ldr	r0, [r7, #20]
 800fa94:	f002 fc9c 	bl	80123d0 <tcp_enqueue_flags>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fa9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d004      	beq.n	800faae <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800faa4:	2100      	movs	r1, #0
 800faa6:	6978      	ldr	r0, [r7, #20]
 800faa8:	f7fd fed8 	bl	800d85c <tcp_abandon>
      return;
 800faac:	e006      	b.n	800fabc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800faae:	6978      	ldr	r0, [r7, #20]
 800fab0:	f002 fd7c 	bl	80125ac <tcp_output>
  return;
 800fab4:	e001      	b.n	800faba <tcp_listen_input+0x1be>
    return;
 800fab6:	bf00      	nop
 800fab8:	e000      	b.n	800fabc <tcp_listen_input+0x1c0>
  return;
 800faba:	bf00      	nop
}
 800fabc:	371c      	adds	r7, #28
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd90      	pop	{r4, r7, pc}
 800fac2:	bf00      	nop
 800fac4:	20010e44 	.word	0x20010e44
 800fac8:	0801b900 	.word	0x0801b900
 800facc:	0801baf8 	.word	0x0801baf8
 800fad0:	0801b94c 	.word	0x0801b94c
 800fad4:	20010e3c 	.word	0x20010e3c
 800fad8:	20010e42 	.word	0x20010e42
 800fadc:	20010e38 	.word	0x20010e38
 800fae0:	20010e28 	.word	0x20010e28
 800fae4:	2000d69c 	.word	0x2000d69c
 800fae8:	2000d6a0 	.word	0x2000d6a0
 800faec:	2000d68c 	.word	0x2000d68c
 800faf0:	20010e0c 	.word	0x20010e0c
 800faf4:	20010e14 	.word	0x20010e14

0800faf8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b086      	sub	sp, #24
 800fafc:	af04      	add	r7, sp, #16
 800fafe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fb00:	4b2f      	ldr	r3, [pc, #188]	; (800fbc0 <tcp_timewait_input+0xc8>)
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	f003 0304 	and.w	r3, r3, #4
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d153      	bne.n	800fbb4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d106      	bne.n	800fb20 <tcp_timewait_input+0x28>
 800fb12:	4b2c      	ldr	r3, [pc, #176]	; (800fbc4 <tcp_timewait_input+0xcc>)
 800fb14:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fb18:	492b      	ldr	r1, [pc, #172]	; (800fbc8 <tcp_timewait_input+0xd0>)
 800fb1a:	482c      	ldr	r0, [pc, #176]	; (800fbcc <tcp_timewait_input+0xd4>)
 800fb1c:	f008 ff48 	bl	80189b0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fb20:	4b27      	ldr	r3, [pc, #156]	; (800fbc0 <tcp_timewait_input+0xc8>)
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	f003 0302 	and.w	r3, r3, #2
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d02a      	beq.n	800fb82 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fb2c:	4b28      	ldr	r3, [pc, #160]	; (800fbd0 <tcp_timewait_input+0xd8>)
 800fb2e:	681a      	ldr	r2, [r3, #0]
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb34:	1ad3      	subs	r3, r2, r3
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	db2d      	blt.n	800fb96 <tcp_timewait_input+0x9e>
 800fb3a:	4b25      	ldr	r3, [pc, #148]	; (800fbd0 <tcp_timewait_input+0xd8>)
 800fb3c:	681a      	ldr	r2, [r3, #0]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb42:	6879      	ldr	r1, [r7, #4]
 800fb44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fb46:	440b      	add	r3, r1
 800fb48:	1ad3      	subs	r3, r2, r3
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	dc23      	bgt.n	800fb96 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb4e:	4b21      	ldr	r3, [pc, #132]	; (800fbd4 <tcp_timewait_input+0xdc>)
 800fb50:	6819      	ldr	r1, [r3, #0]
 800fb52:	4b21      	ldr	r3, [pc, #132]	; (800fbd8 <tcp_timewait_input+0xe0>)
 800fb54:	881b      	ldrh	r3, [r3, #0]
 800fb56:	461a      	mov	r2, r3
 800fb58:	4b1d      	ldr	r3, [pc, #116]	; (800fbd0 <tcp_timewait_input+0xd8>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb5e:	4b1f      	ldr	r3, [pc, #124]	; (800fbdc <tcp_timewait_input+0xe4>)
 800fb60:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb62:	885b      	ldrh	r3, [r3, #2]
 800fb64:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb66:	4a1d      	ldr	r2, [pc, #116]	; (800fbdc <tcp_timewait_input+0xe4>)
 800fb68:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb6a:	8812      	ldrh	r2, [r2, #0]
 800fb6c:	b292      	uxth	r2, r2
 800fb6e:	9202      	str	r2, [sp, #8]
 800fb70:	9301      	str	r3, [sp, #4]
 800fb72:	4b1b      	ldr	r3, [pc, #108]	; (800fbe0 <tcp_timewait_input+0xe8>)
 800fb74:	9300      	str	r3, [sp, #0]
 800fb76:	4b1b      	ldr	r3, [pc, #108]	; (800fbe4 <tcp_timewait_input+0xec>)
 800fb78:	4602      	mov	r2, r0
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	f003 faca 	bl	8013114 <tcp_rst>
      return;
 800fb80:	e01b      	b.n	800fbba <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fb82:	4b0f      	ldr	r3, [pc, #60]	; (800fbc0 <tcp_timewait_input+0xc8>)
 800fb84:	781b      	ldrb	r3, [r3, #0]
 800fb86:	f003 0301 	and.w	r3, r3, #1
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d003      	beq.n	800fb96 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fb8e:	4b16      	ldr	r3, [pc, #88]	; (800fbe8 <tcp_timewait_input+0xf0>)
 800fb90:	681a      	ldr	r2, [r3, #0]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fb96:	4b10      	ldr	r3, [pc, #64]	; (800fbd8 <tcp_timewait_input+0xe0>)
 800fb98:	881b      	ldrh	r3, [r3, #0]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d00c      	beq.n	800fbb8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	8b5b      	ldrh	r3, [r3, #26]
 800fba2:	f043 0302 	orr.w	r3, r3, #2
 800fba6:	b29a      	uxth	r2, r3
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f002 fcfd 	bl	80125ac <tcp_output>
  }
  return;
 800fbb2:	e001      	b.n	800fbb8 <tcp_timewait_input+0xc0>
    return;
 800fbb4:	bf00      	nop
 800fbb6:	e000      	b.n	800fbba <tcp_timewait_input+0xc2>
  return;
 800fbb8:	bf00      	nop
}
 800fbba:	3708      	adds	r7, #8
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}
 800fbc0:	20010e44 	.word	0x20010e44
 800fbc4:	0801b900 	.word	0x0801b900
 800fbc8:	0801bb18 	.word	0x0801bb18
 800fbcc:	0801b94c 	.word	0x0801b94c
 800fbd0:	20010e38 	.word	0x20010e38
 800fbd4:	20010e3c 	.word	0x20010e3c
 800fbd8:	20010e42 	.word	0x20010e42
 800fbdc:	20010e28 	.word	0x20010e28
 800fbe0:	2000d69c 	.word	0x2000d69c
 800fbe4:	2000d6a0 	.word	0x2000d6a0
 800fbe8:	20010e00 	.word	0x20010e00

0800fbec <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fbec:	b590      	push	{r4, r7, lr}
 800fbee:	b08d      	sub	sp, #52	; 0x34
 800fbf0:	af04      	add	r7, sp, #16
 800fbf2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d106      	bne.n	800fc10 <tcp_process+0x24>
 800fc02:	4b9d      	ldr	r3, [pc, #628]	; (800fe78 <tcp_process+0x28c>)
 800fc04:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fc08:	499c      	ldr	r1, [pc, #624]	; (800fe7c <tcp_process+0x290>)
 800fc0a:	489d      	ldr	r0, [pc, #628]	; (800fe80 <tcp_process+0x294>)
 800fc0c:	f008 fed0 	bl	80189b0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fc10:	4b9c      	ldr	r3, [pc, #624]	; (800fe84 <tcp_process+0x298>)
 800fc12:	781b      	ldrb	r3, [r3, #0]
 800fc14:	f003 0304 	and.w	r3, r3, #4
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d04e      	beq.n	800fcba <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	7d1b      	ldrb	r3, [r3, #20]
 800fc20:	2b02      	cmp	r3, #2
 800fc22:	d108      	bne.n	800fc36 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fc28:	4b97      	ldr	r3, [pc, #604]	; (800fe88 <tcp_process+0x29c>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d123      	bne.n	800fc78 <tcp_process+0x8c>
        acceptable = 1;
 800fc30:	2301      	movs	r3, #1
 800fc32:	76fb      	strb	r3, [r7, #27]
 800fc34:	e020      	b.n	800fc78 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc3a:	4b94      	ldr	r3, [pc, #592]	; (800fe8c <tcp_process+0x2a0>)
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	429a      	cmp	r2, r3
 800fc40:	d102      	bne.n	800fc48 <tcp_process+0x5c>
        acceptable = 1;
 800fc42:	2301      	movs	r3, #1
 800fc44:	76fb      	strb	r3, [r7, #27]
 800fc46:	e017      	b.n	800fc78 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fc48:	4b90      	ldr	r3, [pc, #576]	; (800fe8c <tcp_process+0x2a0>)
 800fc4a:	681a      	ldr	r2, [r3, #0]
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc50:	1ad3      	subs	r3, r2, r3
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	db10      	blt.n	800fc78 <tcp_process+0x8c>
 800fc56:	4b8d      	ldr	r3, [pc, #564]	; (800fe8c <tcp_process+0x2a0>)
 800fc58:	681a      	ldr	r2, [r3, #0]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc5e:	6879      	ldr	r1, [r7, #4]
 800fc60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fc62:	440b      	add	r3, r1
 800fc64:	1ad3      	subs	r3, r2, r3
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	dc06      	bgt.n	800fc78 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	8b5b      	ldrh	r3, [r3, #26]
 800fc6e:	f043 0302 	orr.w	r3, r3, #2
 800fc72:	b29a      	uxth	r2, r3
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fc78:	7efb      	ldrb	r3, [r7, #27]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d01b      	beq.n	800fcb6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	7d1b      	ldrb	r3, [r3, #20]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d106      	bne.n	800fc94 <tcp_process+0xa8>
 800fc86:	4b7c      	ldr	r3, [pc, #496]	; (800fe78 <tcp_process+0x28c>)
 800fc88:	f44f 724e 	mov.w	r2, #824	; 0x338
 800fc8c:	4980      	ldr	r1, [pc, #512]	; (800fe90 <tcp_process+0x2a4>)
 800fc8e:	487c      	ldr	r0, [pc, #496]	; (800fe80 <tcp_process+0x294>)
 800fc90:	f008 fe8e 	bl	80189b0 <iprintf>
      recv_flags |= TF_RESET;
 800fc94:	4b7f      	ldr	r3, [pc, #508]	; (800fe94 <tcp_process+0x2a8>)
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	f043 0308 	orr.w	r3, r3, #8
 800fc9c:	b2da      	uxtb	r2, r3
 800fc9e:	4b7d      	ldr	r3, [pc, #500]	; (800fe94 <tcp_process+0x2a8>)
 800fca0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	8b5b      	ldrh	r3, [r3, #26]
 800fca6:	f023 0301 	bic.w	r3, r3, #1
 800fcaa:	b29a      	uxth	r2, r3
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fcb0:	f06f 030d 	mvn.w	r3, #13
 800fcb4:	e37a      	b.n	80103ac <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	e378      	b.n	80103ac <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fcba:	4b72      	ldr	r3, [pc, #456]	; (800fe84 <tcp_process+0x298>)
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	f003 0302 	and.w	r3, r3, #2
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d010      	beq.n	800fce8 <tcp_process+0xfc>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	7d1b      	ldrb	r3, [r3, #20]
 800fcca:	2b02      	cmp	r3, #2
 800fccc:	d00c      	beq.n	800fce8 <tcp_process+0xfc>
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	7d1b      	ldrb	r3, [r3, #20]
 800fcd2:	2b03      	cmp	r3, #3
 800fcd4:	d008      	beq.n	800fce8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	8b5b      	ldrh	r3, [r3, #26]
 800fcda:	f043 0302 	orr.w	r3, r3, #2
 800fcde:	b29a      	uxth	r2, r3
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fce4:	2300      	movs	r3, #0
 800fce6:	e361      	b.n	80103ac <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	8b5b      	ldrh	r3, [r3, #26]
 800fcec:	f003 0310 	and.w	r3, r3, #16
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d103      	bne.n	800fcfc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fcf4:	4b68      	ldr	r3, [pc, #416]	; (800fe98 <tcp_process+0x2ac>)
 800fcf6:	681a      	ldr	r2, [r3, #0]
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2200      	movs	r2, #0
 800fd08:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f001 fc2f 	bl	8011570 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	7d1b      	ldrb	r3, [r3, #20]
 800fd16:	3b02      	subs	r3, #2
 800fd18:	2b07      	cmp	r3, #7
 800fd1a:	f200 8337 	bhi.w	801038c <tcp_process+0x7a0>
 800fd1e:	a201      	add	r2, pc, #4	; (adr r2, 800fd24 <tcp_process+0x138>)
 800fd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd24:	0800fd45 	.word	0x0800fd45
 800fd28:	0800ff75 	.word	0x0800ff75
 800fd2c:	080100ed 	.word	0x080100ed
 800fd30:	08010117 	.word	0x08010117
 800fd34:	0801023b 	.word	0x0801023b
 800fd38:	080100ed 	.word	0x080100ed
 800fd3c:	080102c7 	.word	0x080102c7
 800fd40:	08010357 	.word	0x08010357
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fd44:	4b4f      	ldr	r3, [pc, #316]	; (800fe84 <tcp_process+0x298>)
 800fd46:	781b      	ldrb	r3, [r3, #0]
 800fd48:	f003 0310 	and.w	r3, r3, #16
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	f000 80e4 	beq.w	800ff1a <tcp_process+0x32e>
 800fd52:	4b4c      	ldr	r3, [pc, #304]	; (800fe84 <tcp_process+0x298>)
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	f003 0302 	and.w	r3, r3, #2
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	f000 80dd 	beq.w	800ff1a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd64:	1c5a      	adds	r2, r3, #1
 800fd66:	4b48      	ldr	r3, [pc, #288]	; (800fe88 <tcp_process+0x29c>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	f040 80d5 	bne.w	800ff1a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fd70:	4b46      	ldr	r3, [pc, #280]	; (800fe8c <tcp_process+0x2a0>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	1c5a      	adds	r2, r3, #1
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800fd82:	4b41      	ldr	r3, [pc, #260]	; (800fe88 <tcp_process+0x29c>)
 800fd84:	681a      	ldr	r2, [r3, #0]
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800fd8a:	4b44      	ldr	r3, [pc, #272]	; (800fe9c <tcp_process+0x2b0>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	89db      	ldrh	r3, [r3, #14]
 800fd90:	b29a      	uxth	r2, r3
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fda4:	4b39      	ldr	r3, [pc, #228]	; (800fe8c <tcp_process+0x2a0>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	1e5a      	subs	r2, r3, #1
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2204      	movs	r2, #4
 800fdb2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	3304      	adds	r3, #4
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f007 f91d 	bl	8016ffc <ip4_route>
 800fdc2:	4601      	mov	r1, r0
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	3304      	adds	r3, #4
 800fdc8:	461a      	mov	r2, r3
 800fdca:	4620      	mov	r0, r4
 800fdcc:	f7ff f88c 	bl	800eee8 <tcp_eff_send_mss_netif>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fddc:	009a      	lsls	r2, r3, #2
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fde2:	005b      	lsls	r3, r3, #1
 800fde4:	f241 111c 	movw	r1, #4380	; 0x111c
 800fde8:	428b      	cmp	r3, r1
 800fdea:	bf38      	it	cc
 800fdec:	460b      	movcc	r3, r1
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	d204      	bcs.n	800fdfc <tcp_process+0x210>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fdf6:	009b      	lsls	r3, r3, #2
 800fdf8:	b29b      	uxth	r3, r3
 800fdfa:	e00d      	b.n	800fe18 <tcp_process+0x22c>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe00:	005b      	lsls	r3, r3, #1
 800fe02:	f241 121c 	movw	r2, #4380	; 0x111c
 800fe06:	4293      	cmp	r3, r2
 800fe08:	d904      	bls.n	800fe14 <tcp_process+0x228>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe0e:	005b      	lsls	r3, r3, #1
 800fe10:	b29b      	uxth	r3, r3
 800fe12:	e001      	b.n	800fe18 <tcp_process+0x22c>
 800fe14:	f241 131c 	movw	r3, #4380	; 0x111c
 800fe18:	687a      	ldr	r2, [r7, #4]
 800fe1a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d106      	bne.n	800fe36 <tcp_process+0x24a>
 800fe28:	4b13      	ldr	r3, [pc, #76]	; (800fe78 <tcp_process+0x28c>)
 800fe2a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800fe2e:	491c      	ldr	r1, [pc, #112]	; (800fea0 <tcp_process+0x2b4>)
 800fe30:	4813      	ldr	r0, [pc, #76]	; (800fe80 <tcp_process+0x294>)
 800fe32:	f008 fdbd 	bl	80189b0 <iprintf>
        --pcb->snd_queuelen;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe3c:	3b01      	subs	r3, #1
 800fe3e:	b29a      	uxth	r2, r3
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe4a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fe4c:	69fb      	ldr	r3, [r7, #28]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d12a      	bne.n	800fea8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe56:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fe58:	69fb      	ldr	r3, [r7, #28]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d106      	bne.n	800fe6c <tcp_process+0x280>
 800fe5e:	4b06      	ldr	r3, [pc, #24]	; (800fe78 <tcp_process+0x28c>)
 800fe60:	f44f 725d 	mov.w	r2, #884	; 0x374
 800fe64:	490f      	ldr	r1, [pc, #60]	; (800fea4 <tcp_process+0x2b8>)
 800fe66:	4806      	ldr	r0, [pc, #24]	; (800fe80 <tcp_process+0x294>)
 800fe68:	f008 fda2 	bl	80189b0 <iprintf>
          pcb->unsent = rseg->next;
 800fe6c:	69fb      	ldr	r3, [r7, #28]
 800fe6e:	681a      	ldr	r2, [r3, #0]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	66da      	str	r2, [r3, #108]	; 0x6c
 800fe74:	e01c      	b.n	800feb0 <tcp_process+0x2c4>
 800fe76:	bf00      	nop
 800fe78:	0801b900 	.word	0x0801b900
 800fe7c:	0801bb38 	.word	0x0801bb38
 800fe80:	0801b94c 	.word	0x0801b94c
 800fe84:	20010e44 	.word	0x20010e44
 800fe88:	20010e3c 	.word	0x20010e3c
 800fe8c:	20010e38 	.word	0x20010e38
 800fe90:	0801bb54 	.word	0x0801bb54
 800fe94:	20010e45 	.word	0x20010e45
 800fe98:	20010e00 	.word	0x20010e00
 800fe9c:	20010e28 	.word	0x20010e28
 800fea0:	0801bb74 	.word	0x0801bb74
 800fea4:	0801bb8c 	.word	0x0801bb8c
        } else {
          pcb->unacked = rseg->next;
 800fea8:	69fb      	ldr	r3, [r7, #28]
 800feaa:	681a      	ldr	r2, [r3, #0]
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800feb0:	69f8      	ldr	r0, [r7, #28]
 800feb2:	f7fe fc36 	bl	800e722 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800feba:	2b00      	cmp	r3, #0
 800febc:	d104      	bne.n	800fec8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fec4:	861a      	strh	r2, [r3, #48]	; 0x30
 800fec6:	e006      	b.n	800fed6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2200      	movs	r2, #0
 800fecc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2200      	movs	r2, #0
 800fed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d00a      	beq.n	800fef6 <tcp_process+0x30a>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fee6:	687a      	ldr	r2, [r7, #4]
 800fee8:	6910      	ldr	r0, [r2, #16]
 800feea:	2200      	movs	r2, #0
 800feec:	6879      	ldr	r1, [r7, #4]
 800feee:	4798      	blx	r3
 800fef0:	4603      	mov	r3, r0
 800fef2:	76bb      	strb	r3, [r7, #26]
 800fef4:	e001      	b.n	800fefa <tcp_process+0x30e>
 800fef6:	2300      	movs	r3, #0
 800fef8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fefa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fefe:	f113 0f0d 	cmn.w	r3, #13
 800ff02:	d102      	bne.n	800ff0a <tcp_process+0x31e>
          return ERR_ABRT;
 800ff04:	f06f 030c 	mvn.w	r3, #12
 800ff08:	e250      	b.n	80103ac <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	8b5b      	ldrh	r3, [r3, #26]
 800ff0e:	f043 0302 	orr.w	r3, r3, #2
 800ff12:	b29a      	uxth	r2, r3
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ff18:	e23a      	b.n	8010390 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ff1a:	4b98      	ldr	r3, [pc, #608]	; (801017c <tcp_process+0x590>)
 800ff1c:	781b      	ldrb	r3, [r3, #0]
 800ff1e:	f003 0310 	and.w	r3, r3, #16
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	f000 8234 	beq.w	8010390 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff28:	4b95      	ldr	r3, [pc, #596]	; (8010180 <tcp_process+0x594>)
 800ff2a:	6819      	ldr	r1, [r3, #0]
 800ff2c:	4b95      	ldr	r3, [pc, #596]	; (8010184 <tcp_process+0x598>)
 800ff2e:	881b      	ldrh	r3, [r3, #0]
 800ff30:	461a      	mov	r2, r3
 800ff32:	4b95      	ldr	r3, [pc, #596]	; (8010188 <tcp_process+0x59c>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff38:	4b94      	ldr	r3, [pc, #592]	; (801018c <tcp_process+0x5a0>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff3c:	885b      	ldrh	r3, [r3, #2]
 800ff3e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff40:	4a92      	ldr	r2, [pc, #584]	; (801018c <tcp_process+0x5a0>)
 800ff42:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff44:	8812      	ldrh	r2, [r2, #0]
 800ff46:	b292      	uxth	r2, r2
 800ff48:	9202      	str	r2, [sp, #8]
 800ff4a:	9301      	str	r3, [sp, #4]
 800ff4c:	4b90      	ldr	r3, [pc, #576]	; (8010190 <tcp_process+0x5a4>)
 800ff4e:	9300      	str	r3, [sp, #0]
 800ff50:	4b90      	ldr	r3, [pc, #576]	; (8010194 <tcp_process+0x5a8>)
 800ff52:	4602      	mov	r2, r0
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f003 f8dd 	bl	8013114 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ff60:	2b05      	cmp	r3, #5
 800ff62:	f200 8215 	bhi.w	8010390 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f002 fea9 	bl	8012cc4 <tcp_rexmit_rto>
      break;
 800ff72:	e20d      	b.n	8010390 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ff74:	4b81      	ldr	r3, [pc, #516]	; (801017c <tcp_process+0x590>)
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	f003 0310 	and.w	r3, r3, #16
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	f000 80a1 	beq.w	80100c4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ff82:	4b7f      	ldr	r3, [pc, #508]	; (8010180 <tcp_process+0x594>)
 800ff84:	681a      	ldr	r2, [r3, #0]
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff8a:	1ad3      	subs	r3, r2, r3
 800ff8c:	3b01      	subs	r3, #1
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	db7e      	blt.n	8010090 <tcp_process+0x4a4>
 800ff92:	4b7b      	ldr	r3, [pc, #492]	; (8010180 <tcp_process+0x594>)
 800ff94:	681a      	ldr	r2, [r3, #0]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff9a:	1ad3      	subs	r3, r2, r3
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	dc77      	bgt.n	8010090 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2204      	movs	r2, #4
 800ffa4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d102      	bne.n	800ffb4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ffae:	23fa      	movs	r3, #250	; 0xfa
 800ffb0:	76bb      	strb	r3, [r7, #26]
 800ffb2:	e01d      	b.n	800fff0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffb8:	699b      	ldr	r3, [r3, #24]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d106      	bne.n	800ffcc <tcp_process+0x3e0>
 800ffbe:	4b76      	ldr	r3, [pc, #472]	; (8010198 <tcp_process+0x5ac>)
 800ffc0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ffc4:	4975      	ldr	r1, [pc, #468]	; (801019c <tcp_process+0x5b0>)
 800ffc6:	4876      	ldr	r0, [pc, #472]	; (80101a0 <tcp_process+0x5b4>)
 800ffc8:	f008 fcf2 	bl	80189b0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffd0:	699b      	ldr	r3, [r3, #24]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d00a      	beq.n	800ffec <tcp_process+0x400>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffda:	699b      	ldr	r3, [r3, #24]
 800ffdc:	687a      	ldr	r2, [r7, #4]
 800ffde:	6910      	ldr	r0, [r2, #16]
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	6879      	ldr	r1, [r7, #4]
 800ffe4:	4798      	blx	r3
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	76bb      	strb	r3, [r7, #26]
 800ffea:	e001      	b.n	800fff0 <tcp_process+0x404>
 800ffec:	23f0      	movs	r3, #240	; 0xf0
 800ffee:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fff0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d00a      	beq.n	801000e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fff8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fffc:	f113 0f0d 	cmn.w	r3, #13
 8010000:	d002      	beq.n	8010008 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f7fd fce8 	bl	800d9d8 <tcp_abort>
            }
            return ERR_ABRT;
 8010008:	f06f 030c 	mvn.w	r3, #12
 801000c:	e1ce      	b.n	80103ac <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f000 fae0 	bl	80105d4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010014:	4b63      	ldr	r3, [pc, #396]	; (80101a4 <tcp_process+0x5b8>)
 8010016:	881b      	ldrh	r3, [r3, #0]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d005      	beq.n	8010028 <tcp_process+0x43c>
            recv_acked--;
 801001c:	4b61      	ldr	r3, [pc, #388]	; (80101a4 <tcp_process+0x5b8>)
 801001e:	881b      	ldrh	r3, [r3, #0]
 8010020:	3b01      	subs	r3, #1
 8010022:	b29a      	uxth	r2, r3
 8010024:	4b5f      	ldr	r3, [pc, #380]	; (80101a4 <tcp_process+0x5b8>)
 8010026:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801002c:	009a      	lsls	r2, r3, #2
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010032:	005b      	lsls	r3, r3, #1
 8010034:	f241 111c 	movw	r1, #4380	; 0x111c
 8010038:	428b      	cmp	r3, r1
 801003a:	bf38      	it	cc
 801003c:	460b      	movcc	r3, r1
 801003e:	429a      	cmp	r2, r3
 8010040:	d204      	bcs.n	801004c <tcp_process+0x460>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	b29b      	uxth	r3, r3
 801004a:	e00d      	b.n	8010068 <tcp_process+0x47c>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010050:	005b      	lsls	r3, r3, #1
 8010052:	f241 121c 	movw	r2, #4380	; 0x111c
 8010056:	4293      	cmp	r3, r2
 8010058:	d904      	bls.n	8010064 <tcp_process+0x478>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801005e:	005b      	lsls	r3, r3, #1
 8010060:	b29b      	uxth	r3, r3
 8010062:	e001      	b.n	8010068 <tcp_process+0x47c>
 8010064:	f241 131c 	movw	r3, #4380	; 0x111c
 8010068:	687a      	ldr	r2, [r7, #4]
 801006a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801006e:	4b4e      	ldr	r3, [pc, #312]	; (80101a8 <tcp_process+0x5bc>)
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	f003 0320 	and.w	r3, r3, #32
 8010076:	2b00      	cmp	r3, #0
 8010078:	d037      	beq.n	80100ea <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	8b5b      	ldrh	r3, [r3, #26]
 801007e:	f043 0302 	orr.w	r3, r3, #2
 8010082:	b29a      	uxth	r2, r3
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2207      	movs	r2, #7
 801008c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801008e:	e02c      	b.n	80100ea <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010090:	4b3b      	ldr	r3, [pc, #236]	; (8010180 <tcp_process+0x594>)
 8010092:	6819      	ldr	r1, [r3, #0]
 8010094:	4b3b      	ldr	r3, [pc, #236]	; (8010184 <tcp_process+0x598>)
 8010096:	881b      	ldrh	r3, [r3, #0]
 8010098:	461a      	mov	r2, r3
 801009a:	4b3b      	ldr	r3, [pc, #236]	; (8010188 <tcp_process+0x59c>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100a0:	4b3a      	ldr	r3, [pc, #232]	; (801018c <tcp_process+0x5a0>)
 80100a2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100a4:	885b      	ldrh	r3, [r3, #2]
 80100a6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100a8:	4a38      	ldr	r2, [pc, #224]	; (801018c <tcp_process+0x5a0>)
 80100aa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100ac:	8812      	ldrh	r2, [r2, #0]
 80100ae:	b292      	uxth	r2, r2
 80100b0:	9202      	str	r2, [sp, #8]
 80100b2:	9301      	str	r3, [sp, #4]
 80100b4:	4b36      	ldr	r3, [pc, #216]	; (8010190 <tcp_process+0x5a4>)
 80100b6:	9300      	str	r3, [sp, #0]
 80100b8:	4b36      	ldr	r3, [pc, #216]	; (8010194 <tcp_process+0x5a8>)
 80100ba:	4602      	mov	r2, r0
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f003 f829 	bl	8013114 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80100c2:	e167      	b.n	8010394 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80100c4:	4b2d      	ldr	r3, [pc, #180]	; (801017c <tcp_process+0x590>)
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	f003 0302 	and.w	r3, r3, #2
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	f000 8161 	beq.w	8010394 <tcp_process+0x7a8>
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d6:	1e5a      	subs	r2, r3, #1
 80100d8:	4b2b      	ldr	r3, [pc, #172]	; (8010188 <tcp_process+0x59c>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	429a      	cmp	r2, r3
 80100de:	f040 8159 	bne.w	8010394 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f002 fe10 	bl	8012d08 <tcp_rexmit>
      break;
 80100e8:	e154      	b.n	8010394 <tcp_process+0x7a8>
 80100ea:	e153      	b.n	8010394 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f000 fa71 	bl	80105d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80100f2:	4b2d      	ldr	r3, [pc, #180]	; (80101a8 <tcp_process+0x5bc>)
 80100f4:	781b      	ldrb	r3, [r3, #0]
 80100f6:	f003 0320 	and.w	r3, r3, #32
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	f000 814c 	beq.w	8010398 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	8b5b      	ldrh	r3, [r3, #26]
 8010104:	f043 0302 	orr.w	r3, r3, #2
 8010108:	b29a      	uxth	r2, r3
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	2207      	movs	r2, #7
 8010112:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010114:	e140      	b.n	8010398 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f000 fa5c 	bl	80105d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801011c:	4b22      	ldr	r3, [pc, #136]	; (80101a8 <tcp_process+0x5bc>)
 801011e:	781b      	ldrb	r3, [r3, #0]
 8010120:	f003 0320 	and.w	r3, r3, #32
 8010124:	2b00      	cmp	r3, #0
 8010126:	d071      	beq.n	801020c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010128:	4b14      	ldr	r3, [pc, #80]	; (801017c <tcp_process+0x590>)
 801012a:	781b      	ldrb	r3, [r3, #0]
 801012c:	f003 0310 	and.w	r3, r3, #16
 8010130:	2b00      	cmp	r3, #0
 8010132:	d060      	beq.n	80101f6 <tcp_process+0x60a>
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010138:	4b11      	ldr	r3, [pc, #68]	; (8010180 <tcp_process+0x594>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	429a      	cmp	r2, r3
 801013e:	d15a      	bne.n	80101f6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010144:	2b00      	cmp	r3, #0
 8010146:	d156      	bne.n	80101f6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	8b5b      	ldrh	r3, [r3, #26]
 801014c:	f043 0302 	orr.w	r3, r3, #2
 8010150:	b29a      	uxth	r2, r3
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f7fe fdbc 	bl	800ecd4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801015c:	4b13      	ldr	r3, [pc, #76]	; (80101ac <tcp_process+0x5c0>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	687a      	ldr	r2, [r7, #4]
 8010162:	429a      	cmp	r2, r3
 8010164:	d105      	bne.n	8010172 <tcp_process+0x586>
 8010166:	4b11      	ldr	r3, [pc, #68]	; (80101ac <tcp_process+0x5c0>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	68db      	ldr	r3, [r3, #12]
 801016c:	4a0f      	ldr	r2, [pc, #60]	; (80101ac <tcp_process+0x5c0>)
 801016e:	6013      	str	r3, [r2, #0]
 8010170:	e02e      	b.n	80101d0 <tcp_process+0x5e4>
 8010172:	4b0e      	ldr	r3, [pc, #56]	; (80101ac <tcp_process+0x5c0>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	617b      	str	r3, [r7, #20]
 8010178:	e027      	b.n	80101ca <tcp_process+0x5de>
 801017a:	bf00      	nop
 801017c:	20010e44 	.word	0x20010e44
 8010180:	20010e3c 	.word	0x20010e3c
 8010184:	20010e42 	.word	0x20010e42
 8010188:	20010e38 	.word	0x20010e38
 801018c:	20010e28 	.word	0x20010e28
 8010190:	2000d69c 	.word	0x2000d69c
 8010194:	2000d6a0 	.word	0x2000d6a0
 8010198:	0801b900 	.word	0x0801b900
 801019c:	0801bba0 	.word	0x0801bba0
 80101a0:	0801b94c 	.word	0x0801b94c
 80101a4:	20010e40 	.word	0x20010e40
 80101a8:	20010e45 	.word	0x20010e45
 80101ac:	20010e0c 	.word	0x20010e0c
 80101b0:	697b      	ldr	r3, [r7, #20]
 80101b2:	68db      	ldr	r3, [r3, #12]
 80101b4:	687a      	ldr	r2, [r7, #4]
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d104      	bne.n	80101c4 <tcp_process+0x5d8>
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	68da      	ldr	r2, [r3, #12]
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	60da      	str	r2, [r3, #12]
 80101c2:	e005      	b.n	80101d0 <tcp_process+0x5e4>
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	68db      	ldr	r3, [r3, #12]
 80101c8:	617b      	str	r3, [r7, #20]
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d1ef      	bne.n	80101b0 <tcp_process+0x5c4>
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2200      	movs	r2, #0
 80101d4:	60da      	str	r2, [r3, #12]
 80101d6:	4b77      	ldr	r3, [pc, #476]	; (80103b4 <tcp_process+0x7c8>)
 80101d8:	2201      	movs	r2, #1
 80101da:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	220a      	movs	r2, #10
 80101e0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80101e2:	4b75      	ldr	r3, [pc, #468]	; (80103b8 <tcp_process+0x7cc>)
 80101e4:	681a      	ldr	r2, [r3, #0]
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	60da      	str	r2, [r3, #12]
 80101ea:	4a73      	ldr	r2, [pc, #460]	; (80103b8 <tcp_process+0x7cc>)
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6013      	str	r3, [r2, #0]
 80101f0:	f003 f952 	bl	8013498 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80101f4:	e0d2      	b.n	801039c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	8b5b      	ldrh	r3, [r3, #26]
 80101fa:	f043 0302 	orr.w	r3, r3, #2
 80101fe:	b29a      	uxth	r2, r3
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2208      	movs	r2, #8
 8010208:	751a      	strb	r2, [r3, #20]
      break;
 801020a:	e0c7      	b.n	801039c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801020c:	4b6b      	ldr	r3, [pc, #428]	; (80103bc <tcp_process+0x7d0>)
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	f003 0310 	and.w	r3, r3, #16
 8010214:	2b00      	cmp	r3, #0
 8010216:	f000 80c1 	beq.w	801039c <tcp_process+0x7b0>
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801021e:	4b68      	ldr	r3, [pc, #416]	; (80103c0 <tcp_process+0x7d4>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	429a      	cmp	r2, r3
 8010224:	f040 80ba 	bne.w	801039c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801022c:	2b00      	cmp	r3, #0
 801022e:	f040 80b5 	bne.w	801039c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2206      	movs	r2, #6
 8010236:	751a      	strb	r2, [r3, #20]
      break;
 8010238:	e0b0      	b.n	801039c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f000 f9ca 	bl	80105d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010240:	4b60      	ldr	r3, [pc, #384]	; (80103c4 <tcp_process+0x7d8>)
 8010242:	781b      	ldrb	r3, [r3, #0]
 8010244:	f003 0320 	and.w	r3, r3, #32
 8010248:	2b00      	cmp	r3, #0
 801024a:	f000 80a9 	beq.w	80103a0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	8b5b      	ldrh	r3, [r3, #26]
 8010252:	f043 0302 	orr.w	r3, r3, #2
 8010256:	b29a      	uxth	r2, r3
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f7fe fd39 	bl	800ecd4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010262:	4b59      	ldr	r3, [pc, #356]	; (80103c8 <tcp_process+0x7dc>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	429a      	cmp	r2, r3
 801026a:	d105      	bne.n	8010278 <tcp_process+0x68c>
 801026c:	4b56      	ldr	r3, [pc, #344]	; (80103c8 <tcp_process+0x7dc>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	68db      	ldr	r3, [r3, #12]
 8010272:	4a55      	ldr	r2, [pc, #340]	; (80103c8 <tcp_process+0x7dc>)
 8010274:	6013      	str	r3, [r2, #0]
 8010276:	e013      	b.n	80102a0 <tcp_process+0x6b4>
 8010278:	4b53      	ldr	r3, [pc, #332]	; (80103c8 <tcp_process+0x7dc>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	613b      	str	r3, [r7, #16]
 801027e:	e00c      	b.n	801029a <tcp_process+0x6ae>
 8010280:	693b      	ldr	r3, [r7, #16]
 8010282:	68db      	ldr	r3, [r3, #12]
 8010284:	687a      	ldr	r2, [r7, #4]
 8010286:	429a      	cmp	r2, r3
 8010288:	d104      	bne.n	8010294 <tcp_process+0x6a8>
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	68da      	ldr	r2, [r3, #12]
 801028e:	693b      	ldr	r3, [r7, #16]
 8010290:	60da      	str	r2, [r3, #12]
 8010292:	e005      	b.n	80102a0 <tcp_process+0x6b4>
 8010294:	693b      	ldr	r3, [r7, #16]
 8010296:	68db      	ldr	r3, [r3, #12]
 8010298:	613b      	str	r3, [r7, #16]
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d1ef      	bne.n	8010280 <tcp_process+0x694>
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2200      	movs	r2, #0
 80102a4:	60da      	str	r2, [r3, #12]
 80102a6:	4b43      	ldr	r3, [pc, #268]	; (80103b4 <tcp_process+0x7c8>)
 80102a8:	2201      	movs	r2, #1
 80102aa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	220a      	movs	r2, #10
 80102b0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80102b2:	4b41      	ldr	r3, [pc, #260]	; (80103b8 <tcp_process+0x7cc>)
 80102b4:	681a      	ldr	r2, [r3, #0]
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	60da      	str	r2, [r3, #12]
 80102ba:	4a3f      	ldr	r2, [pc, #252]	; (80103b8 <tcp_process+0x7cc>)
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	6013      	str	r3, [r2, #0]
 80102c0:	f003 f8ea 	bl	8013498 <tcp_timer_needed>
      }
      break;
 80102c4:	e06c      	b.n	80103a0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f000 f984 	bl	80105d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80102cc:	4b3b      	ldr	r3, [pc, #236]	; (80103bc <tcp_process+0x7d0>)
 80102ce:	781b      	ldrb	r3, [r3, #0]
 80102d0:	f003 0310 	and.w	r3, r3, #16
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d065      	beq.n	80103a4 <tcp_process+0x7b8>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80102dc:	4b38      	ldr	r3, [pc, #224]	; (80103c0 <tcp_process+0x7d4>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d15f      	bne.n	80103a4 <tcp_process+0x7b8>
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d15b      	bne.n	80103a4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f7fe fcf1 	bl	800ecd4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80102f2:	4b35      	ldr	r3, [pc, #212]	; (80103c8 <tcp_process+0x7dc>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	687a      	ldr	r2, [r7, #4]
 80102f8:	429a      	cmp	r2, r3
 80102fa:	d105      	bne.n	8010308 <tcp_process+0x71c>
 80102fc:	4b32      	ldr	r3, [pc, #200]	; (80103c8 <tcp_process+0x7dc>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	68db      	ldr	r3, [r3, #12]
 8010302:	4a31      	ldr	r2, [pc, #196]	; (80103c8 <tcp_process+0x7dc>)
 8010304:	6013      	str	r3, [r2, #0]
 8010306:	e013      	b.n	8010330 <tcp_process+0x744>
 8010308:	4b2f      	ldr	r3, [pc, #188]	; (80103c8 <tcp_process+0x7dc>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	60fb      	str	r3, [r7, #12]
 801030e:	e00c      	b.n	801032a <tcp_process+0x73e>
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	68db      	ldr	r3, [r3, #12]
 8010314:	687a      	ldr	r2, [r7, #4]
 8010316:	429a      	cmp	r2, r3
 8010318:	d104      	bne.n	8010324 <tcp_process+0x738>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	68da      	ldr	r2, [r3, #12]
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	60da      	str	r2, [r3, #12]
 8010322:	e005      	b.n	8010330 <tcp_process+0x744>
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	68db      	ldr	r3, [r3, #12]
 8010328:	60fb      	str	r3, [r7, #12]
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d1ef      	bne.n	8010310 <tcp_process+0x724>
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2200      	movs	r2, #0
 8010334:	60da      	str	r2, [r3, #12]
 8010336:	4b1f      	ldr	r3, [pc, #124]	; (80103b4 <tcp_process+0x7c8>)
 8010338:	2201      	movs	r2, #1
 801033a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	220a      	movs	r2, #10
 8010340:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010342:	4b1d      	ldr	r3, [pc, #116]	; (80103b8 <tcp_process+0x7cc>)
 8010344:	681a      	ldr	r2, [r3, #0]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	60da      	str	r2, [r3, #12]
 801034a:	4a1b      	ldr	r2, [pc, #108]	; (80103b8 <tcp_process+0x7cc>)
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6013      	str	r3, [r2, #0]
 8010350:	f003 f8a2 	bl	8013498 <tcp_timer_needed>
      }
      break;
 8010354:	e026      	b.n	80103a4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f000 f93c 	bl	80105d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801035c:	4b17      	ldr	r3, [pc, #92]	; (80103bc <tcp_process+0x7d0>)
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	f003 0310 	and.w	r3, r3, #16
 8010364:	2b00      	cmp	r3, #0
 8010366:	d01f      	beq.n	80103a8 <tcp_process+0x7bc>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801036c:	4b14      	ldr	r3, [pc, #80]	; (80103c0 <tcp_process+0x7d4>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	429a      	cmp	r2, r3
 8010372:	d119      	bne.n	80103a8 <tcp_process+0x7bc>
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010378:	2b00      	cmp	r3, #0
 801037a:	d115      	bne.n	80103a8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801037c:	4b11      	ldr	r3, [pc, #68]	; (80103c4 <tcp_process+0x7d8>)
 801037e:	781b      	ldrb	r3, [r3, #0]
 8010380:	f043 0310 	orr.w	r3, r3, #16
 8010384:	b2da      	uxtb	r2, r3
 8010386:	4b0f      	ldr	r3, [pc, #60]	; (80103c4 <tcp_process+0x7d8>)
 8010388:	701a      	strb	r2, [r3, #0]
      }
      break;
 801038a:	e00d      	b.n	80103a8 <tcp_process+0x7bc>
    default:
      break;
 801038c:	bf00      	nop
 801038e:	e00c      	b.n	80103aa <tcp_process+0x7be>
      break;
 8010390:	bf00      	nop
 8010392:	e00a      	b.n	80103aa <tcp_process+0x7be>
      break;
 8010394:	bf00      	nop
 8010396:	e008      	b.n	80103aa <tcp_process+0x7be>
      break;
 8010398:	bf00      	nop
 801039a:	e006      	b.n	80103aa <tcp_process+0x7be>
      break;
 801039c:	bf00      	nop
 801039e:	e004      	b.n	80103aa <tcp_process+0x7be>
      break;
 80103a0:	bf00      	nop
 80103a2:	e002      	b.n	80103aa <tcp_process+0x7be>
      break;
 80103a4:	bf00      	nop
 80103a6:	e000      	b.n	80103aa <tcp_process+0x7be>
      break;
 80103a8:	bf00      	nop
  }
  return ERR_OK;
 80103aa:	2300      	movs	r3, #0
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	3724      	adds	r7, #36	; 0x24
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd90      	pop	{r4, r7, pc}
 80103b4:	20010e14 	.word	0x20010e14
 80103b8:	20010e10 	.word	0x20010e10
 80103bc:	20010e44 	.word	0x20010e44
 80103c0:	20010e3c 	.word	0x20010e3c
 80103c4:	20010e45 	.word	0x20010e45
 80103c8:	20010e0c 	.word	0x20010e0c

080103cc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80103cc:	b590      	push	{r4, r7, lr}
 80103ce:	b085      	sub	sp, #20
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d106      	bne.n	80103ea <tcp_oos_insert_segment+0x1e>
 80103dc:	4b3b      	ldr	r3, [pc, #236]	; (80104cc <tcp_oos_insert_segment+0x100>)
 80103de:	f240 421f 	movw	r2, #1055	; 0x41f
 80103e2:	493b      	ldr	r1, [pc, #236]	; (80104d0 <tcp_oos_insert_segment+0x104>)
 80103e4:	483b      	ldr	r0, [pc, #236]	; (80104d4 <tcp_oos_insert_segment+0x108>)
 80103e6:	f008 fae3 	bl	80189b0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	68db      	ldr	r3, [r3, #12]
 80103ee:	899b      	ldrh	r3, [r3, #12]
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	4618      	mov	r0, r3
 80103f4:	f7fb f8bc 	bl	800b570 <lwip_htons>
 80103f8:	4603      	mov	r3, r0
 80103fa:	b2db      	uxtb	r3, r3
 80103fc:	f003 0301 	and.w	r3, r3, #1
 8010400:	2b00      	cmp	r3, #0
 8010402:	d028      	beq.n	8010456 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010404:	6838      	ldr	r0, [r7, #0]
 8010406:	f7fe f977 	bl	800e6f8 <tcp_segs_free>
    next = NULL;
 801040a:	2300      	movs	r3, #0
 801040c:	603b      	str	r3, [r7, #0]
 801040e:	e056      	b.n	80104be <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	68db      	ldr	r3, [r3, #12]
 8010414:	899b      	ldrh	r3, [r3, #12]
 8010416:	b29b      	uxth	r3, r3
 8010418:	4618      	mov	r0, r3
 801041a:	f7fb f8a9 	bl	800b570 <lwip_htons>
 801041e:	4603      	mov	r3, r0
 8010420:	b2db      	uxtb	r3, r3
 8010422:	f003 0301 	and.w	r3, r3, #1
 8010426:	2b00      	cmp	r3, #0
 8010428:	d00d      	beq.n	8010446 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	68db      	ldr	r3, [r3, #12]
 801042e:	899b      	ldrh	r3, [r3, #12]
 8010430:	b29c      	uxth	r4, r3
 8010432:	2001      	movs	r0, #1
 8010434:	f7fb f89c 	bl	800b570 <lwip_htons>
 8010438:	4603      	mov	r3, r0
 801043a:	461a      	mov	r2, r3
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	68db      	ldr	r3, [r3, #12]
 8010440:	4322      	orrs	r2, r4
 8010442:	b292      	uxth	r2, r2
 8010444:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801044a:	683b      	ldr	r3, [r7, #0]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010450:	68f8      	ldr	r0, [r7, #12]
 8010452:	f7fe f966 	bl	800e722 <tcp_seg_free>
    while (next &&
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d00e      	beq.n	801047a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	891b      	ldrh	r3, [r3, #8]
 8010460:	461a      	mov	r2, r3
 8010462:	4b1d      	ldr	r3, [pc, #116]	; (80104d8 <tcp_oos_insert_segment+0x10c>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	441a      	add	r2, r3
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	68db      	ldr	r3, [r3, #12]
 801046c:	685b      	ldr	r3, [r3, #4]
 801046e:	6839      	ldr	r1, [r7, #0]
 8010470:	8909      	ldrh	r1, [r1, #8]
 8010472:	440b      	add	r3, r1
 8010474:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010476:	2b00      	cmp	r3, #0
 8010478:	daca      	bge.n	8010410 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d01e      	beq.n	80104be <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	891b      	ldrh	r3, [r3, #8]
 8010484:	461a      	mov	r2, r3
 8010486:	4b14      	ldr	r3, [pc, #80]	; (80104d8 <tcp_oos_insert_segment+0x10c>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	441a      	add	r2, r3
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	68db      	ldr	r3, [r3, #12]
 8010490:	685b      	ldr	r3, [r3, #4]
 8010492:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010494:	2b00      	cmp	r3, #0
 8010496:	dd12      	ble.n	80104be <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	68db      	ldr	r3, [r3, #12]
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	b29a      	uxth	r2, r3
 80104a0:	4b0d      	ldr	r3, [pc, #52]	; (80104d8 <tcp_oos_insert_segment+0x10c>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	b29b      	uxth	r3, r3
 80104a6:	1ad3      	subs	r3, r2, r3
 80104a8:	b29a      	uxth	r2, r3
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	685a      	ldr	r2, [r3, #4]
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	891b      	ldrh	r3, [r3, #8]
 80104b6:	4619      	mov	r1, r3
 80104b8:	4610      	mov	r0, r2
 80104ba:	f7fc fb07 	bl	800cacc <pbuf_realloc>
    }
  }
  cseg->next = next;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	683a      	ldr	r2, [r7, #0]
 80104c2:	601a      	str	r2, [r3, #0]
}
 80104c4:	bf00      	nop
 80104c6:	3714      	adds	r7, #20
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd90      	pop	{r4, r7, pc}
 80104cc:	0801b900 	.word	0x0801b900
 80104d0:	0801bbc0 	.word	0x0801bbc0
 80104d4:	0801b94c 	.word	0x0801b94c
 80104d8:	20010e38 	.word	0x20010e38

080104dc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80104dc:	b5b0      	push	{r4, r5, r7, lr}
 80104de:	b086      	sub	sp, #24
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	60f8      	str	r0, [r7, #12]
 80104e4:	60b9      	str	r1, [r7, #8]
 80104e6:	607a      	str	r2, [r7, #4]
 80104e8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80104ea:	e03e      	b.n	801056a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	685b      	ldr	r3, [r3, #4]
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7fc fcfa 	bl	800cef4 <pbuf_clen>
 8010500:	4603      	mov	r3, r0
 8010502:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801050a:	8a7a      	ldrh	r2, [r7, #18]
 801050c:	429a      	cmp	r2, r3
 801050e:	d906      	bls.n	801051e <tcp_free_acked_segments+0x42>
 8010510:	4b2a      	ldr	r3, [pc, #168]	; (80105bc <tcp_free_acked_segments+0xe0>)
 8010512:	f240 4257 	movw	r2, #1111	; 0x457
 8010516:	492a      	ldr	r1, [pc, #168]	; (80105c0 <tcp_free_acked_segments+0xe4>)
 8010518:	482a      	ldr	r0, [pc, #168]	; (80105c4 <tcp_free_acked_segments+0xe8>)
 801051a:	f008 fa49 	bl	80189b0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010524:	8a7b      	ldrh	r3, [r7, #18]
 8010526:	1ad3      	subs	r3, r2, r3
 8010528:	b29a      	uxth	r2, r3
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	891a      	ldrh	r2, [r3, #8]
 8010534:	4b24      	ldr	r3, [pc, #144]	; (80105c8 <tcp_free_acked_segments+0xec>)
 8010536:	881b      	ldrh	r3, [r3, #0]
 8010538:	4413      	add	r3, r2
 801053a:	b29a      	uxth	r2, r3
 801053c:	4b22      	ldr	r3, [pc, #136]	; (80105c8 <tcp_free_acked_segments+0xec>)
 801053e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010540:	6978      	ldr	r0, [r7, #20]
 8010542:	f7fe f8ee 	bl	800e722 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801054c:	2b00      	cmp	r3, #0
 801054e:	d00c      	beq.n	801056a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010550:	68bb      	ldr	r3, [r7, #8]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d109      	bne.n	801056a <tcp_free_acked_segments+0x8e>
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d106      	bne.n	801056a <tcp_free_acked_segments+0x8e>
 801055c:	4b17      	ldr	r3, [pc, #92]	; (80105bc <tcp_free_acked_segments+0xe0>)
 801055e:	f240 4261 	movw	r2, #1121	; 0x461
 8010562:	491a      	ldr	r1, [pc, #104]	; (80105cc <tcp_free_acked_segments+0xf0>)
 8010564:	4817      	ldr	r0, [pc, #92]	; (80105c4 <tcp_free_acked_segments+0xe8>)
 8010566:	f008 fa23 	bl	80189b0 <iprintf>
  while (seg_list != NULL &&
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d020      	beq.n	80105b2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	68db      	ldr	r3, [r3, #12]
 8010574:	685b      	ldr	r3, [r3, #4]
 8010576:	4618      	mov	r0, r3
 8010578:	f7fb f80f 	bl	800b59a <lwip_htonl>
 801057c:	4604      	mov	r4, r0
 801057e:	68bb      	ldr	r3, [r7, #8]
 8010580:	891b      	ldrh	r3, [r3, #8]
 8010582:	461d      	mov	r5, r3
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	68db      	ldr	r3, [r3, #12]
 8010588:	899b      	ldrh	r3, [r3, #12]
 801058a:	b29b      	uxth	r3, r3
 801058c:	4618      	mov	r0, r3
 801058e:	f7fa ffef 	bl	800b570 <lwip_htons>
 8010592:	4603      	mov	r3, r0
 8010594:	b2db      	uxtb	r3, r3
 8010596:	f003 0303 	and.w	r3, r3, #3
 801059a:	2b00      	cmp	r3, #0
 801059c:	d001      	beq.n	80105a2 <tcp_free_acked_segments+0xc6>
 801059e:	2301      	movs	r3, #1
 80105a0:	e000      	b.n	80105a4 <tcp_free_acked_segments+0xc8>
 80105a2:	2300      	movs	r3, #0
 80105a4:	442b      	add	r3, r5
 80105a6:	18e2      	adds	r2, r4, r3
 80105a8:	4b09      	ldr	r3, [pc, #36]	; (80105d0 <tcp_free_acked_segments+0xf4>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	dd9c      	ble.n	80104ec <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80105b2:	68bb      	ldr	r3, [r7, #8]
}
 80105b4:	4618      	mov	r0, r3
 80105b6:	3718      	adds	r7, #24
 80105b8:	46bd      	mov	sp, r7
 80105ba:	bdb0      	pop	{r4, r5, r7, pc}
 80105bc:	0801b900 	.word	0x0801b900
 80105c0:	0801bbe8 	.word	0x0801bbe8
 80105c4:	0801b94c 	.word	0x0801b94c
 80105c8:	20010e40 	.word	0x20010e40
 80105cc:	0801bc10 	.word	0x0801bc10
 80105d0:	20010e3c 	.word	0x20010e3c

080105d4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80105d4:	b5b0      	push	{r4, r5, r7, lr}
 80105d6:	b094      	sub	sp, #80	; 0x50
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80105dc:	2300      	movs	r3, #0
 80105de:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d106      	bne.n	80105f4 <tcp_receive+0x20>
 80105e6:	4b91      	ldr	r3, [pc, #580]	; (801082c <tcp_receive+0x258>)
 80105e8:	f240 427b 	movw	r2, #1147	; 0x47b
 80105ec:	4990      	ldr	r1, [pc, #576]	; (8010830 <tcp_receive+0x25c>)
 80105ee:	4891      	ldr	r0, [pc, #580]	; (8010834 <tcp_receive+0x260>)
 80105f0:	f008 f9de 	bl	80189b0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	7d1b      	ldrb	r3, [r3, #20]
 80105f8:	2b03      	cmp	r3, #3
 80105fa:	d806      	bhi.n	801060a <tcp_receive+0x36>
 80105fc:	4b8b      	ldr	r3, [pc, #556]	; (801082c <tcp_receive+0x258>)
 80105fe:	f240 427c 	movw	r2, #1148	; 0x47c
 8010602:	498d      	ldr	r1, [pc, #564]	; (8010838 <tcp_receive+0x264>)
 8010604:	488b      	ldr	r0, [pc, #556]	; (8010834 <tcp_receive+0x260>)
 8010606:	f008 f9d3 	bl	80189b0 <iprintf>

  if (flags & TCP_ACK) {
 801060a:	4b8c      	ldr	r3, [pc, #560]	; (801083c <tcp_receive+0x268>)
 801060c:	781b      	ldrb	r3, [r3, #0]
 801060e:	f003 0310 	and.w	r3, r3, #16
 8010612:	2b00      	cmp	r3, #0
 8010614:	f000 8264 	beq.w	8010ae0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801061e:	461a      	mov	r2, r3
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010624:	4413      	add	r3, r2
 8010626:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801062c:	4b84      	ldr	r3, [pc, #528]	; (8010840 <tcp_receive+0x26c>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	1ad3      	subs	r3, r2, r3
 8010632:	2b00      	cmp	r3, #0
 8010634:	db1b      	blt.n	801066e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801063a:	4b81      	ldr	r3, [pc, #516]	; (8010840 <tcp_receive+0x26c>)
 801063c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801063e:	429a      	cmp	r2, r3
 8010640:	d106      	bne.n	8010650 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010646:	4b7f      	ldr	r3, [pc, #508]	; (8010844 <tcp_receive+0x270>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	1ad3      	subs	r3, r2, r3
 801064c:	2b00      	cmp	r3, #0
 801064e:	db0e      	blt.n	801066e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010654:	4b7b      	ldr	r3, [pc, #492]	; (8010844 <tcp_receive+0x270>)
 8010656:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010658:	429a      	cmp	r2, r3
 801065a:	d125      	bne.n	80106a8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801065c:	4b7a      	ldr	r3, [pc, #488]	; (8010848 <tcp_receive+0x274>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	89db      	ldrh	r3, [r3, #14]
 8010662:	b29a      	uxth	r2, r3
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801066a:	429a      	cmp	r2, r3
 801066c:	d91c      	bls.n	80106a8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801066e:	4b76      	ldr	r3, [pc, #472]	; (8010848 <tcp_receive+0x274>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	89db      	ldrh	r3, [r3, #14]
 8010674:	b29a      	uxth	r2, r3
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010688:	429a      	cmp	r2, r3
 801068a:	d205      	bcs.n	8010698 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010698:	4b69      	ldr	r3, [pc, #420]	; (8010840 <tcp_receive+0x26c>)
 801069a:	681a      	ldr	r2, [r3, #0]
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80106a0:	4b68      	ldr	r3, [pc, #416]	; (8010844 <tcp_receive+0x270>)
 80106a2:	681a      	ldr	r2, [r3, #0]
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80106a8:	4b66      	ldr	r3, [pc, #408]	; (8010844 <tcp_receive+0x270>)
 80106aa:	681a      	ldr	r2, [r3, #0]
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106b0:	1ad3      	subs	r3, r2, r3
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	dc58      	bgt.n	8010768 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80106b6:	4b65      	ldr	r3, [pc, #404]	; (801084c <tcp_receive+0x278>)
 80106b8:	881b      	ldrh	r3, [r3, #0]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d14b      	bne.n	8010756 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106c2:	687a      	ldr	r2, [r7, #4]
 80106c4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80106c8:	4413      	add	r3, r2
 80106ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106cc:	429a      	cmp	r2, r3
 80106ce:	d142      	bne.n	8010756 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	db3d      	blt.n	8010756 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80106de:	4b59      	ldr	r3, [pc, #356]	; (8010844 <tcp_receive+0x270>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d137      	bne.n	8010756 <tcp_receive+0x182>
              found_dupack = 1;
 80106e6:	2301      	movs	r3, #1
 80106e8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80106f0:	2bff      	cmp	r3, #255	; 0xff
 80106f2:	d007      	beq.n	8010704 <tcp_receive+0x130>
                ++pcb->dupacks;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80106fa:	3301      	adds	r3, #1
 80106fc:	b2da      	uxtb	r2, r3
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801070a:	2b03      	cmp	r3, #3
 801070c:	d91b      	bls.n	8010746 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010718:	4413      	add	r3, r2
 801071a:	b29a      	uxth	r2, r3
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010722:	429a      	cmp	r2, r3
 8010724:	d30a      	bcc.n	801073c <tcp_receive+0x168>
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010730:	4413      	add	r3, r2
 8010732:	b29a      	uxth	r2, r3
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801073a:	e004      	b.n	8010746 <tcp_receive+0x172>
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010742:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801074c:	2b02      	cmp	r3, #2
 801074e:	d902      	bls.n	8010756 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010750:	6878      	ldr	r0, [r7, #4]
 8010752:	f002 fb45 	bl	8012de0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010758:	2b00      	cmp	r3, #0
 801075a:	f040 8161 	bne.w	8010a20 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	2200      	movs	r2, #0
 8010762:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010766:	e15b      	b.n	8010a20 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010768:	4b36      	ldr	r3, [pc, #216]	; (8010844 <tcp_receive+0x270>)
 801076a:	681a      	ldr	r2, [r3, #0]
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010770:	1ad3      	subs	r3, r2, r3
 8010772:	3b01      	subs	r3, #1
 8010774:	2b00      	cmp	r3, #0
 8010776:	f2c0 814e 	blt.w	8010a16 <tcp_receive+0x442>
 801077a:	4b32      	ldr	r3, [pc, #200]	; (8010844 <tcp_receive+0x270>)
 801077c:	681a      	ldr	r2, [r3, #0]
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010782:	1ad3      	subs	r3, r2, r3
 8010784:	2b00      	cmp	r3, #0
 8010786:	f300 8146 	bgt.w	8010a16 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	8b5b      	ldrh	r3, [r3, #26]
 801078e:	f003 0304 	and.w	r3, r3, #4
 8010792:	2b00      	cmp	r3, #0
 8010794:	d010      	beq.n	80107b8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	8b5b      	ldrh	r3, [r3, #26]
 801079a:	f023 0304 	bic.w	r3, r3, #4
 801079e:	b29a      	uxth	r2, r3
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2200      	movs	r2, #0
 80107b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2200      	movs	r2, #0
 80107bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80107c6:	10db      	asrs	r3, r3, #3
 80107c8:	b21b      	sxth	r3, r3
 80107ca:	b29a      	uxth	r2, r3
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80107d2:	b29b      	uxth	r3, r3
 80107d4:	4413      	add	r3, r2
 80107d6:	b29b      	uxth	r3, r3
 80107d8:	b21a      	sxth	r2, r3
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80107e0:	4b18      	ldr	r3, [pc, #96]	; (8010844 <tcp_receive+0x270>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	b29a      	uxth	r2, r3
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107ea:	b29b      	uxth	r3, r3
 80107ec:	1ad3      	subs	r3, r2, r3
 80107ee:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2200      	movs	r2, #0
 80107f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80107f8:	4b12      	ldr	r3, [pc, #72]	; (8010844 <tcp_receive+0x270>)
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	7d1b      	ldrb	r3, [r3, #20]
 8010804:	2b03      	cmp	r3, #3
 8010806:	f240 8097 	bls.w	8010938 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010816:	429a      	cmp	r2, r3
 8010818:	d245      	bcs.n	80108a6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	8b5b      	ldrh	r3, [r3, #26]
 801081e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010822:	2b00      	cmp	r3, #0
 8010824:	d014      	beq.n	8010850 <tcp_receive+0x27c>
 8010826:	2301      	movs	r3, #1
 8010828:	e013      	b.n	8010852 <tcp_receive+0x27e>
 801082a:	bf00      	nop
 801082c:	0801b900 	.word	0x0801b900
 8010830:	0801bc30 	.word	0x0801bc30
 8010834:	0801b94c 	.word	0x0801b94c
 8010838:	0801bc4c 	.word	0x0801bc4c
 801083c:	20010e44 	.word	0x20010e44
 8010840:	20010e38 	.word	0x20010e38
 8010844:	20010e3c 	.word	0x20010e3c
 8010848:	20010e28 	.word	0x20010e28
 801084c:	20010e42 	.word	0x20010e42
 8010850:	2302      	movs	r3, #2
 8010852:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010856:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801085a:	b29a      	uxth	r2, r3
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010860:	fb12 f303 	smulbb	r3, r2, r3
 8010864:	b29b      	uxth	r3, r3
 8010866:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010868:	4293      	cmp	r3, r2
 801086a:	bf28      	it	cs
 801086c:	4613      	movcs	r3, r2
 801086e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010876:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010878:	4413      	add	r3, r2
 801087a:	b29a      	uxth	r2, r3
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010882:	429a      	cmp	r2, r3
 8010884:	d309      	bcc.n	801089a <tcp_receive+0x2c6>
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801088c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801088e:	4413      	add	r3, r2
 8010890:	b29a      	uxth	r2, r3
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010898:	e04e      	b.n	8010938 <tcp_receive+0x364>
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80108a4:	e048      	b.n	8010938 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80108ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80108ae:	4413      	add	r3, r2
 80108b0:	b29a      	uxth	r2, r3
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80108b8:	429a      	cmp	r2, r3
 80108ba:	d309      	bcc.n	80108d0 <tcp_receive+0x2fc>
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80108c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80108c4:	4413      	add	r3, r2
 80108c6:	b29a      	uxth	r2, r3
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80108ce:	e004      	b.n	80108da <tcp_receive+0x306>
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80108e6:	429a      	cmp	r2, r3
 80108e8:	d326      	bcc.n	8010938 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80108f6:	1ad3      	subs	r3, r2, r3
 80108f8:	b29a      	uxth	r2, r3
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801090a:	4413      	add	r3, r2
 801090c:	b29a      	uxth	r2, r3
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010914:	429a      	cmp	r2, r3
 8010916:	d30a      	bcc.n	801092e <tcp_receive+0x35a>
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010922:	4413      	add	r3, r2
 8010924:	b29a      	uxth	r2, r3
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801092c:	e004      	b.n	8010938 <tcp_receive+0x364>
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010934:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010940:	4a98      	ldr	r2, [pc, #608]	; (8010ba4 <tcp_receive+0x5d0>)
 8010942:	6878      	ldr	r0, [r7, #4]
 8010944:	f7ff fdca 	bl	80104dc <tcp_free_acked_segments>
 8010948:	4602      	mov	r2, r0
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010956:	4a94      	ldr	r2, [pc, #592]	; (8010ba8 <tcp_receive+0x5d4>)
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f7ff fdbf 	bl	80104dc <tcp_free_acked_segments>
 801095e:	4602      	mov	r2, r0
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010968:	2b00      	cmp	r3, #0
 801096a:	d104      	bne.n	8010976 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010972:	861a      	strh	r2, [r3, #48]	; 0x30
 8010974:	e002      	b.n	801097c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2200      	movs	r2, #0
 801097a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2200      	movs	r2, #0
 8010980:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010986:	2b00      	cmp	r3, #0
 8010988:	d103      	bne.n	8010992 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	2200      	movs	r2, #0
 801098e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010998:	4b84      	ldr	r3, [pc, #528]	; (8010bac <tcp_receive+0x5d8>)
 801099a:	881b      	ldrh	r3, [r3, #0]
 801099c:	4413      	add	r3, r2
 801099e:	b29a      	uxth	r2, r3
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	8b5b      	ldrh	r3, [r3, #26]
 80109aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d035      	beq.n	8010a1e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d118      	bne.n	80109ec <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d00c      	beq.n	80109dc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109ca:	68db      	ldr	r3, [r3, #12]
 80109cc:	685b      	ldr	r3, [r3, #4]
 80109ce:	4618      	mov	r0, r3
 80109d0:	f7fa fde3 	bl	800b59a <lwip_htonl>
 80109d4:	4603      	mov	r3, r0
 80109d6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80109d8:	2b00      	cmp	r3, #0
 80109da:	dc20      	bgt.n	8010a1e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	8b5b      	ldrh	r3, [r3, #26]
 80109e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80109e4:	b29a      	uxth	r2, r3
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80109ea:	e018      	b.n	8010a1e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109f4:	68db      	ldr	r3, [r3, #12]
 80109f6:	685b      	ldr	r3, [r3, #4]
 80109f8:	4618      	mov	r0, r3
 80109fa:	f7fa fdce 	bl	800b59a <lwip_htonl>
 80109fe:	4603      	mov	r3, r0
 8010a00:	1ae3      	subs	r3, r4, r3
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	dc0b      	bgt.n	8010a1e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	8b5b      	ldrh	r3, [r3, #26]
 8010a0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010a0e:	b29a      	uxth	r2, r3
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010a14:	e003      	b.n	8010a1e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010a16:	6878      	ldr	r0, [r7, #4]
 8010a18:	f002 fbce 	bl	80131b8 <tcp_send_empty_ack>
 8010a1c:	e000      	b.n	8010a20 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010a1e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d05b      	beq.n	8010ae0 <tcp_receive+0x50c>
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a2c:	4b60      	ldr	r3, [pc, #384]	; (8010bb0 <tcp_receive+0x5dc>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	1ad3      	subs	r3, r2, r3
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	da54      	bge.n	8010ae0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010a36:	4b5f      	ldr	r3, [pc, #380]	; (8010bb4 <tcp_receive+0x5e0>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	b29a      	uxth	r2, r3
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a40:	b29b      	uxth	r3, r3
 8010a42:	1ad3      	subs	r3, r2, r3
 8010a44:	b29b      	uxth	r3, r3
 8010a46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010a4a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010a54:	10db      	asrs	r3, r3, #3
 8010a56:	b21b      	sxth	r3, r3
 8010a58:	b29b      	uxth	r3, r3
 8010a5a:	1ad3      	subs	r3, r2, r3
 8010a5c:	b29b      	uxth	r3, r3
 8010a5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010a68:	b29a      	uxth	r2, r3
 8010a6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010a6e:	4413      	add	r3, r2
 8010a70:	b29b      	uxth	r3, r3
 8010a72:	b21a      	sxth	r2, r3
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010a78:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	da05      	bge.n	8010a8c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010a80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010a84:	425b      	negs	r3, r3
 8010a86:	b29b      	uxth	r3, r3
 8010a88:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010a8c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010a96:	109b      	asrs	r3, r3, #2
 8010a98:	b21b      	sxth	r3, r3
 8010a9a:	b29b      	uxth	r3, r3
 8010a9c:	1ad3      	subs	r3, r2, r3
 8010a9e:	b29b      	uxth	r3, r3
 8010aa0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010aaa:	b29a      	uxth	r2, r3
 8010aac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010ab0:	4413      	add	r3, r2
 8010ab2:	b29b      	uxth	r3, r3
 8010ab4:	b21a      	sxth	r2, r3
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010ac0:	10db      	asrs	r3, r3, #3
 8010ac2:	b21b      	sxth	r3, r3
 8010ac4:	b29a      	uxth	r2, r3
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010acc:	b29b      	uxth	r3, r3
 8010ace:	4413      	add	r3, r2
 8010ad0:	b29b      	uxth	r3, r3
 8010ad2:	b21a      	sxth	r2, r3
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2200      	movs	r2, #0
 8010ade:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010ae0:	4b35      	ldr	r3, [pc, #212]	; (8010bb8 <tcp_receive+0x5e4>)
 8010ae2:	881b      	ldrh	r3, [r3, #0]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	f000 84e2 	beq.w	80114ae <tcp_receive+0xeda>
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	7d1b      	ldrb	r3, [r3, #20]
 8010aee:	2b06      	cmp	r3, #6
 8010af0:	f200 84dd 	bhi.w	80114ae <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010af8:	4b30      	ldr	r3, [pc, #192]	; (8010bbc <tcp_receive+0x5e8>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	1ad3      	subs	r3, r2, r3
 8010afe:	3b01      	subs	r3, #1
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	f2c0 808f 	blt.w	8010c24 <tcp_receive+0x650>
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b0a:	4b2b      	ldr	r3, [pc, #172]	; (8010bb8 <tcp_receive+0x5e4>)
 8010b0c:	881b      	ldrh	r3, [r3, #0]
 8010b0e:	4619      	mov	r1, r3
 8010b10:	4b2a      	ldr	r3, [pc, #168]	; (8010bbc <tcp_receive+0x5e8>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	440b      	add	r3, r1
 8010b16:	1ad3      	subs	r3, r2, r3
 8010b18:	3301      	adds	r3, #1
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	f300 8082 	bgt.w	8010c24 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010b20:	4b27      	ldr	r3, [pc, #156]	; (8010bc0 <tcp_receive+0x5ec>)
 8010b22:	685b      	ldr	r3, [r3, #4]
 8010b24:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b2a:	4b24      	ldr	r3, [pc, #144]	; (8010bbc <tcp_receive+0x5e8>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	1ad3      	subs	r3, r2, r3
 8010b30:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010b32:	4b23      	ldr	r3, [pc, #140]	; (8010bc0 <tcp_receive+0x5ec>)
 8010b34:	685b      	ldr	r3, [r3, #4]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d106      	bne.n	8010b48 <tcp_receive+0x574>
 8010b3a:	4b22      	ldr	r3, [pc, #136]	; (8010bc4 <tcp_receive+0x5f0>)
 8010b3c:	f240 5294 	movw	r2, #1428	; 0x594
 8010b40:	4921      	ldr	r1, [pc, #132]	; (8010bc8 <tcp_receive+0x5f4>)
 8010b42:	4822      	ldr	r0, [pc, #136]	; (8010bcc <tcp_receive+0x5f8>)
 8010b44:	f007 ff34 	bl	80189b0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b4a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010b4e:	4293      	cmp	r3, r2
 8010b50:	d906      	bls.n	8010b60 <tcp_receive+0x58c>
 8010b52:	4b1c      	ldr	r3, [pc, #112]	; (8010bc4 <tcp_receive+0x5f0>)
 8010b54:	f240 5295 	movw	r2, #1429	; 0x595
 8010b58:	491d      	ldr	r1, [pc, #116]	; (8010bd0 <tcp_receive+0x5fc>)
 8010b5a:	481c      	ldr	r0, [pc, #112]	; (8010bcc <tcp_receive+0x5f8>)
 8010b5c:	f007 ff28 	bl	80189b0 <iprintf>
      off = (u16_t)off32;
 8010b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010b66:	4b16      	ldr	r3, [pc, #88]	; (8010bc0 <tcp_receive+0x5ec>)
 8010b68:	685b      	ldr	r3, [r3, #4]
 8010b6a:	891b      	ldrh	r3, [r3, #8]
 8010b6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d906      	bls.n	8010b82 <tcp_receive+0x5ae>
 8010b74:	4b13      	ldr	r3, [pc, #76]	; (8010bc4 <tcp_receive+0x5f0>)
 8010b76:	f240 5297 	movw	r2, #1431	; 0x597
 8010b7a:	4916      	ldr	r1, [pc, #88]	; (8010bd4 <tcp_receive+0x600>)
 8010b7c:	4813      	ldr	r0, [pc, #76]	; (8010bcc <tcp_receive+0x5f8>)
 8010b7e:	f007 ff17 	bl	80189b0 <iprintf>
      inseg.len -= off;
 8010b82:	4b0f      	ldr	r3, [pc, #60]	; (8010bc0 <tcp_receive+0x5ec>)
 8010b84:	891a      	ldrh	r2, [r3, #8]
 8010b86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010b8a:	1ad3      	subs	r3, r2, r3
 8010b8c:	b29a      	uxth	r2, r3
 8010b8e:	4b0c      	ldr	r3, [pc, #48]	; (8010bc0 <tcp_receive+0x5ec>)
 8010b90:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010b92:	4b0b      	ldr	r3, [pc, #44]	; (8010bc0 <tcp_receive+0x5ec>)
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	891a      	ldrh	r2, [r3, #8]
 8010b98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010b9c:	1ad3      	subs	r3, r2, r3
 8010b9e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010ba0:	e02a      	b.n	8010bf8 <tcp_receive+0x624>
 8010ba2:	bf00      	nop
 8010ba4:	0801bc68 	.word	0x0801bc68
 8010ba8:	0801bc70 	.word	0x0801bc70
 8010bac:	20010e40 	.word	0x20010e40
 8010bb0:	20010e3c 	.word	0x20010e3c
 8010bb4:	20010e00 	.word	0x20010e00
 8010bb8:	20010e42 	.word	0x20010e42
 8010bbc:	20010e38 	.word	0x20010e38
 8010bc0:	20010e18 	.word	0x20010e18
 8010bc4:	0801b900 	.word	0x0801b900
 8010bc8:	0801bc78 	.word	0x0801bc78
 8010bcc:	0801b94c 	.word	0x0801b94c
 8010bd0:	0801bc88 	.word	0x0801bc88
 8010bd4:	0801bc98 	.word	0x0801bc98
        off -= p->len;
 8010bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bda:	895b      	ldrh	r3, [r3, #10]
 8010bdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010be0:	1ad3      	subs	r3, r2, r3
 8010be2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010be8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010bea:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bee:	2200      	movs	r2, #0
 8010bf0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bfa:	895b      	ldrh	r3, [r3, #10]
 8010bfc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010c00:	429a      	cmp	r2, r3
 8010c02:	d8e9      	bhi.n	8010bd8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010c04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010c08:	4619      	mov	r1, r3
 8010c0a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010c0c:	f7fc f85e 	bl	800cccc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c14:	4a91      	ldr	r2, [pc, #580]	; (8010e5c <tcp_receive+0x888>)
 8010c16:	6013      	str	r3, [r2, #0]
 8010c18:	4b91      	ldr	r3, [pc, #580]	; (8010e60 <tcp_receive+0x88c>)
 8010c1a:	68db      	ldr	r3, [r3, #12]
 8010c1c:	4a8f      	ldr	r2, [pc, #572]	; (8010e5c <tcp_receive+0x888>)
 8010c1e:	6812      	ldr	r2, [r2, #0]
 8010c20:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010c22:	e00d      	b.n	8010c40 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010c24:	4b8d      	ldr	r3, [pc, #564]	; (8010e5c <tcp_receive+0x888>)
 8010c26:	681a      	ldr	r2, [r3, #0]
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c2c:	1ad3      	subs	r3, r2, r3
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	da06      	bge.n	8010c40 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	8b5b      	ldrh	r3, [r3, #26]
 8010c36:	f043 0302 	orr.w	r3, r3, #2
 8010c3a:	b29a      	uxth	r2, r3
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010c40:	4b86      	ldr	r3, [pc, #536]	; (8010e5c <tcp_receive+0x888>)
 8010c42:	681a      	ldr	r2, [r3, #0]
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c48:	1ad3      	subs	r3, r2, r3
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	f2c0 842a 	blt.w	80114a4 <tcp_receive+0xed0>
 8010c50:	4b82      	ldr	r3, [pc, #520]	; (8010e5c <tcp_receive+0x888>)
 8010c52:	681a      	ldr	r2, [r3, #0]
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c58:	6879      	ldr	r1, [r7, #4]
 8010c5a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010c5c:	440b      	add	r3, r1
 8010c5e:	1ad3      	subs	r3, r2, r3
 8010c60:	3301      	adds	r3, #1
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	f300 841e 	bgt.w	80114a4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c6c:	4b7b      	ldr	r3, [pc, #492]	; (8010e5c <tcp_receive+0x888>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	429a      	cmp	r2, r3
 8010c72:	f040 829a 	bne.w	80111aa <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010c76:	4b7a      	ldr	r3, [pc, #488]	; (8010e60 <tcp_receive+0x88c>)
 8010c78:	891c      	ldrh	r4, [r3, #8]
 8010c7a:	4b79      	ldr	r3, [pc, #484]	; (8010e60 <tcp_receive+0x88c>)
 8010c7c:	68db      	ldr	r3, [r3, #12]
 8010c7e:	899b      	ldrh	r3, [r3, #12]
 8010c80:	b29b      	uxth	r3, r3
 8010c82:	4618      	mov	r0, r3
 8010c84:	f7fa fc74 	bl	800b570 <lwip_htons>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	b2db      	uxtb	r3, r3
 8010c8c:	f003 0303 	and.w	r3, r3, #3
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d001      	beq.n	8010c98 <tcp_receive+0x6c4>
 8010c94:	2301      	movs	r3, #1
 8010c96:	e000      	b.n	8010c9a <tcp_receive+0x6c6>
 8010c98:	2300      	movs	r3, #0
 8010c9a:	4423      	add	r3, r4
 8010c9c:	b29a      	uxth	r2, r3
 8010c9e:	4b71      	ldr	r3, [pc, #452]	; (8010e64 <tcp_receive+0x890>)
 8010ca0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ca6:	4b6f      	ldr	r3, [pc, #444]	; (8010e64 <tcp_receive+0x890>)
 8010ca8:	881b      	ldrh	r3, [r3, #0]
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d275      	bcs.n	8010d9a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010cae:	4b6c      	ldr	r3, [pc, #432]	; (8010e60 <tcp_receive+0x88c>)
 8010cb0:	68db      	ldr	r3, [r3, #12]
 8010cb2:	899b      	ldrh	r3, [r3, #12]
 8010cb4:	b29b      	uxth	r3, r3
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7fa fc5a 	bl	800b570 <lwip_htons>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	b2db      	uxtb	r3, r3
 8010cc0:	f003 0301 	and.w	r3, r3, #1
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d01f      	beq.n	8010d08 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010cc8:	4b65      	ldr	r3, [pc, #404]	; (8010e60 <tcp_receive+0x88c>)
 8010cca:	68db      	ldr	r3, [r3, #12]
 8010ccc:	899b      	ldrh	r3, [r3, #12]
 8010cce:	b29b      	uxth	r3, r3
 8010cd0:	b21b      	sxth	r3, r3
 8010cd2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010cd6:	b21c      	sxth	r4, r3
 8010cd8:	4b61      	ldr	r3, [pc, #388]	; (8010e60 <tcp_receive+0x88c>)
 8010cda:	68db      	ldr	r3, [r3, #12]
 8010cdc:	899b      	ldrh	r3, [r3, #12]
 8010cde:	b29b      	uxth	r3, r3
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f7fa fc45 	bl	800b570 <lwip_htons>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	b2db      	uxtb	r3, r3
 8010cea:	b29b      	uxth	r3, r3
 8010cec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010cf0:	b29b      	uxth	r3, r3
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7fa fc3c 	bl	800b570 <lwip_htons>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	b21b      	sxth	r3, r3
 8010cfc:	4323      	orrs	r3, r4
 8010cfe:	b21a      	sxth	r2, r3
 8010d00:	4b57      	ldr	r3, [pc, #348]	; (8010e60 <tcp_receive+0x88c>)
 8010d02:	68db      	ldr	r3, [r3, #12]
 8010d04:	b292      	uxth	r2, r2
 8010d06:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010d0c:	4b54      	ldr	r3, [pc, #336]	; (8010e60 <tcp_receive+0x88c>)
 8010d0e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010d10:	4b53      	ldr	r3, [pc, #332]	; (8010e60 <tcp_receive+0x88c>)
 8010d12:	68db      	ldr	r3, [r3, #12]
 8010d14:	899b      	ldrh	r3, [r3, #12]
 8010d16:	b29b      	uxth	r3, r3
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7fa fc29 	bl	800b570 <lwip_htons>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	b2db      	uxtb	r3, r3
 8010d22:	f003 0302 	and.w	r3, r3, #2
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d005      	beq.n	8010d36 <tcp_receive+0x762>
            inseg.len -= 1;
 8010d2a:	4b4d      	ldr	r3, [pc, #308]	; (8010e60 <tcp_receive+0x88c>)
 8010d2c:	891b      	ldrh	r3, [r3, #8]
 8010d2e:	3b01      	subs	r3, #1
 8010d30:	b29a      	uxth	r2, r3
 8010d32:	4b4b      	ldr	r3, [pc, #300]	; (8010e60 <tcp_receive+0x88c>)
 8010d34:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010d36:	4b4a      	ldr	r3, [pc, #296]	; (8010e60 <tcp_receive+0x88c>)
 8010d38:	685b      	ldr	r3, [r3, #4]
 8010d3a:	4a49      	ldr	r2, [pc, #292]	; (8010e60 <tcp_receive+0x88c>)
 8010d3c:	8912      	ldrh	r2, [r2, #8]
 8010d3e:	4611      	mov	r1, r2
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7fb fec3 	bl	800cacc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010d46:	4b46      	ldr	r3, [pc, #280]	; (8010e60 <tcp_receive+0x88c>)
 8010d48:	891c      	ldrh	r4, [r3, #8]
 8010d4a:	4b45      	ldr	r3, [pc, #276]	; (8010e60 <tcp_receive+0x88c>)
 8010d4c:	68db      	ldr	r3, [r3, #12]
 8010d4e:	899b      	ldrh	r3, [r3, #12]
 8010d50:	b29b      	uxth	r3, r3
 8010d52:	4618      	mov	r0, r3
 8010d54:	f7fa fc0c 	bl	800b570 <lwip_htons>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	b2db      	uxtb	r3, r3
 8010d5c:	f003 0303 	and.w	r3, r3, #3
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d001      	beq.n	8010d68 <tcp_receive+0x794>
 8010d64:	2301      	movs	r3, #1
 8010d66:	e000      	b.n	8010d6a <tcp_receive+0x796>
 8010d68:	2300      	movs	r3, #0
 8010d6a:	4423      	add	r3, r4
 8010d6c:	b29a      	uxth	r2, r3
 8010d6e:	4b3d      	ldr	r3, [pc, #244]	; (8010e64 <tcp_receive+0x890>)
 8010d70:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010d72:	4b3c      	ldr	r3, [pc, #240]	; (8010e64 <tcp_receive+0x890>)
 8010d74:	881b      	ldrh	r3, [r3, #0]
 8010d76:	461a      	mov	r2, r3
 8010d78:	4b38      	ldr	r3, [pc, #224]	; (8010e5c <tcp_receive+0x888>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	441a      	add	r2, r3
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d82:	6879      	ldr	r1, [r7, #4]
 8010d84:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010d86:	440b      	add	r3, r1
 8010d88:	429a      	cmp	r2, r3
 8010d8a:	d006      	beq.n	8010d9a <tcp_receive+0x7c6>
 8010d8c:	4b36      	ldr	r3, [pc, #216]	; (8010e68 <tcp_receive+0x894>)
 8010d8e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010d92:	4936      	ldr	r1, [pc, #216]	; (8010e6c <tcp_receive+0x898>)
 8010d94:	4836      	ldr	r0, [pc, #216]	; (8010e70 <tcp_receive+0x89c>)
 8010d96:	f007 fe0b 	bl	80189b0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	f000 80e7 	beq.w	8010f72 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010da4:	4b2e      	ldr	r3, [pc, #184]	; (8010e60 <tcp_receive+0x88c>)
 8010da6:	68db      	ldr	r3, [r3, #12]
 8010da8:	899b      	ldrh	r3, [r3, #12]
 8010daa:	b29b      	uxth	r3, r3
 8010dac:	4618      	mov	r0, r3
 8010dae:	f7fa fbdf 	bl	800b570 <lwip_htons>
 8010db2:	4603      	mov	r3, r0
 8010db4:	b2db      	uxtb	r3, r3
 8010db6:	f003 0301 	and.w	r3, r3, #1
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d010      	beq.n	8010de0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010dbe:	e00a      	b.n	8010dd6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010dc4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010dca:	681a      	ldr	r2, [r3, #0]
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010dd0:	68f8      	ldr	r0, [r7, #12]
 8010dd2:	f7fd fca6 	bl	800e722 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d1f0      	bne.n	8010dc0 <tcp_receive+0x7ec>
 8010dde:	e0c8      	b.n	8010f72 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010de4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010de6:	e052      	b.n	8010e8e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dea:	68db      	ldr	r3, [r3, #12]
 8010dec:	899b      	ldrh	r3, [r3, #12]
 8010dee:	b29b      	uxth	r3, r3
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7fa fbbd 	bl	800b570 <lwip_htons>
 8010df6:	4603      	mov	r3, r0
 8010df8:	b2db      	uxtb	r3, r3
 8010dfa:	f003 0301 	and.w	r3, r3, #1
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d03d      	beq.n	8010e7e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010e02:	4b17      	ldr	r3, [pc, #92]	; (8010e60 <tcp_receive+0x88c>)
 8010e04:	68db      	ldr	r3, [r3, #12]
 8010e06:	899b      	ldrh	r3, [r3, #12]
 8010e08:	b29b      	uxth	r3, r3
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f7fa fbb0 	bl	800b570 <lwip_htons>
 8010e10:	4603      	mov	r3, r0
 8010e12:	b2db      	uxtb	r3, r3
 8010e14:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d130      	bne.n	8010e7e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010e1c:	4b10      	ldr	r3, [pc, #64]	; (8010e60 <tcp_receive+0x88c>)
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	899b      	ldrh	r3, [r3, #12]
 8010e22:	b29c      	uxth	r4, r3
 8010e24:	2001      	movs	r0, #1
 8010e26:	f7fa fba3 	bl	800b570 <lwip_htons>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	4b0c      	ldr	r3, [pc, #48]	; (8010e60 <tcp_receive+0x88c>)
 8010e30:	68db      	ldr	r3, [r3, #12]
 8010e32:	4322      	orrs	r2, r4
 8010e34:	b292      	uxth	r2, r2
 8010e36:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010e38:	4b09      	ldr	r3, [pc, #36]	; (8010e60 <tcp_receive+0x88c>)
 8010e3a:	891c      	ldrh	r4, [r3, #8]
 8010e3c:	4b08      	ldr	r3, [pc, #32]	; (8010e60 <tcp_receive+0x88c>)
 8010e3e:	68db      	ldr	r3, [r3, #12]
 8010e40:	899b      	ldrh	r3, [r3, #12]
 8010e42:	b29b      	uxth	r3, r3
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7fa fb93 	bl	800b570 <lwip_htons>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	b2db      	uxtb	r3, r3
 8010e4e:	f003 0303 	and.w	r3, r3, #3
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d00e      	beq.n	8010e74 <tcp_receive+0x8a0>
 8010e56:	2301      	movs	r3, #1
 8010e58:	e00d      	b.n	8010e76 <tcp_receive+0x8a2>
 8010e5a:	bf00      	nop
 8010e5c:	20010e38 	.word	0x20010e38
 8010e60:	20010e18 	.word	0x20010e18
 8010e64:	20010e42 	.word	0x20010e42
 8010e68:	0801b900 	.word	0x0801b900
 8010e6c:	0801bca8 	.word	0x0801bca8
 8010e70:	0801b94c 	.word	0x0801b94c
 8010e74:	2300      	movs	r3, #0
 8010e76:	4423      	add	r3, r4
 8010e78:	b29a      	uxth	r2, r3
 8010e7a:	4b98      	ldr	r3, [pc, #608]	; (80110dc <tcp_receive+0xb08>)
 8010e7c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e80:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010e88:	6938      	ldr	r0, [r7, #16]
 8010e8a:	f7fd fc4a 	bl	800e722 <tcp_seg_free>
            while (next &&
 8010e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d00e      	beq.n	8010eb2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010e94:	4b91      	ldr	r3, [pc, #580]	; (80110dc <tcp_receive+0xb08>)
 8010e96:	881b      	ldrh	r3, [r3, #0]
 8010e98:	461a      	mov	r2, r3
 8010e9a:	4b91      	ldr	r3, [pc, #580]	; (80110e0 <tcp_receive+0xb0c>)
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	441a      	add	r2, r3
 8010ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ea2:	68db      	ldr	r3, [r3, #12]
 8010ea4:	685b      	ldr	r3, [r3, #4]
 8010ea6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010ea8:	8909      	ldrh	r1, [r1, #8]
 8010eaa:	440b      	add	r3, r1
 8010eac:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	da9a      	bge.n	8010de8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d059      	beq.n	8010f6c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8010eb8:	4b88      	ldr	r3, [pc, #544]	; (80110dc <tcp_receive+0xb08>)
 8010eba:	881b      	ldrh	r3, [r3, #0]
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	4b88      	ldr	r3, [pc, #544]	; (80110e0 <tcp_receive+0xb0c>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	441a      	add	r2, r3
 8010ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ec6:	68db      	ldr	r3, [r3, #12]
 8010ec8:	685b      	ldr	r3, [r3, #4]
 8010eca:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	dd4d      	ble.n	8010f6c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ed2:	68db      	ldr	r3, [r3, #12]
 8010ed4:	685b      	ldr	r3, [r3, #4]
 8010ed6:	b29a      	uxth	r2, r3
 8010ed8:	4b81      	ldr	r3, [pc, #516]	; (80110e0 <tcp_receive+0xb0c>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	1ad3      	subs	r3, r2, r3
 8010ee0:	b29a      	uxth	r2, r3
 8010ee2:	4b80      	ldr	r3, [pc, #512]	; (80110e4 <tcp_receive+0xb10>)
 8010ee4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010ee6:	4b7f      	ldr	r3, [pc, #508]	; (80110e4 <tcp_receive+0xb10>)
 8010ee8:	68db      	ldr	r3, [r3, #12]
 8010eea:	899b      	ldrh	r3, [r3, #12]
 8010eec:	b29b      	uxth	r3, r3
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f7fa fb3e 	bl	800b570 <lwip_htons>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	b2db      	uxtb	r3, r3
 8010ef8:	f003 0302 	and.w	r3, r3, #2
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d005      	beq.n	8010f0c <tcp_receive+0x938>
                inseg.len -= 1;
 8010f00:	4b78      	ldr	r3, [pc, #480]	; (80110e4 <tcp_receive+0xb10>)
 8010f02:	891b      	ldrh	r3, [r3, #8]
 8010f04:	3b01      	subs	r3, #1
 8010f06:	b29a      	uxth	r2, r3
 8010f08:	4b76      	ldr	r3, [pc, #472]	; (80110e4 <tcp_receive+0xb10>)
 8010f0a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010f0c:	4b75      	ldr	r3, [pc, #468]	; (80110e4 <tcp_receive+0xb10>)
 8010f0e:	685b      	ldr	r3, [r3, #4]
 8010f10:	4a74      	ldr	r2, [pc, #464]	; (80110e4 <tcp_receive+0xb10>)
 8010f12:	8912      	ldrh	r2, [r2, #8]
 8010f14:	4611      	mov	r1, r2
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7fb fdd8 	bl	800cacc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010f1c:	4b71      	ldr	r3, [pc, #452]	; (80110e4 <tcp_receive+0xb10>)
 8010f1e:	891c      	ldrh	r4, [r3, #8]
 8010f20:	4b70      	ldr	r3, [pc, #448]	; (80110e4 <tcp_receive+0xb10>)
 8010f22:	68db      	ldr	r3, [r3, #12]
 8010f24:	899b      	ldrh	r3, [r3, #12]
 8010f26:	b29b      	uxth	r3, r3
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7fa fb21 	bl	800b570 <lwip_htons>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	b2db      	uxtb	r3, r3
 8010f32:	f003 0303 	and.w	r3, r3, #3
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d001      	beq.n	8010f3e <tcp_receive+0x96a>
 8010f3a:	2301      	movs	r3, #1
 8010f3c:	e000      	b.n	8010f40 <tcp_receive+0x96c>
 8010f3e:	2300      	movs	r3, #0
 8010f40:	4423      	add	r3, r4
 8010f42:	b29a      	uxth	r2, r3
 8010f44:	4b65      	ldr	r3, [pc, #404]	; (80110dc <tcp_receive+0xb08>)
 8010f46:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010f48:	4b64      	ldr	r3, [pc, #400]	; (80110dc <tcp_receive+0xb08>)
 8010f4a:	881b      	ldrh	r3, [r3, #0]
 8010f4c:	461a      	mov	r2, r3
 8010f4e:	4b64      	ldr	r3, [pc, #400]	; (80110e0 <tcp_receive+0xb0c>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	441a      	add	r2, r3
 8010f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f56:	68db      	ldr	r3, [r3, #12]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	d006      	beq.n	8010f6c <tcp_receive+0x998>
 8010f5e:	4b62      	ldr	r3, [pc, #392]	; (80110e8 <tcp_receive+0xb14>)
 8010f60:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010f64:	4961      	ldr	r1, [pc, #388]	; (80110ec <tcp_receive+0xb18>)
 8010f66:	4862      	ldr	r0, [pc, #392]	; (80110f0 <tcp_receive+0xb1c>)
 8010f68:	f007 fd22 	bl	80189b0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010f70:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010f72:	4b5a      	ldr	r3, [pc, #360]	; (80110dc <tcp_receive+0xb08>)
 8010f74:	881b      	ldrh	r3, [r3, #0]
 8010f76:	461a      	mov	r2, r3
 8010f78:	4b59      	ldr	r3, [pc, #356]	; (80110e0 <tcp_receive+0xb0c>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	441a      	add	r2, r3
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010f86:	4b55      	ldr	r3, [pc, #340]	; (80110dc <tcp_receive+0xb08>)
 8010f88:	881b      	ldrh	r3, [r3, #0]
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d206      	bcs.n	8010f9c <tcp_receive+0x9c8>
 8010f8e:	4b56      	ldr	r3, [pc, #344]	; (80110e8 <tcp_receive+0xb14>)
 8010f90:	f240 6207 	movw	r2, #1543	; 0x607
 8010f94:	4957      	ldr	r1, [pc, #348]	; (80110f4 <tcp_receive+0xb20>)
 8010f96:	4856      	ldr	r0, [pc, #344]	; (80110f0 <tcp_receive+0xb1c>)
 8010f98:	f007 fd0a 	bl	80189b0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010fa0:	4b4e      	ldr	r3, [pc, #312]	; (80110dc <tcp_receive+0xb08>)
 8010fa2:	881b      	ldrh	r3, [r3, #0]
 8010fa4:	1ad3      	subs	r3, r2, r3
 8010fa6:	b29a      	uxth	r2, r3
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f7fc fe93 	bl	800dcd8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010fb2:	4b4c      	ldr	r3, [pc, #304]	; (80110e4 <tcp_receive+0xb10>)
 8010fb4:	685b      	ldr	r3, [r3, #4]
 8010fb6:	891b      	ldrh	r3, [r3, #8]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d006      	beq.n	8010fca <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8010fbc:	4b49      	ldr	r3, [pc, #292]	; (80110e4 <tcp_receive+0xb10>)
 8010fbe:	685b      	ldr	r3, [r3, #4]
 8010fc0:	4a4d      	ldr	r2, [pc, #308]	; (80110f8 <tcp_receive+0xb24>)
 8010fc2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010fc4:	4b47      	ldr	r3, [pc, #284]	; (80110e4 <tcp_receive+0xb10>)
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010fca:	4b46      	ldr	r3, [pc, #280]	; (80110e4 <tcp_receive+0xb10>)
 8010fcc:	68db      	ldr	r3, [r3, #12]
 8010fce:	899b      	ldrh	r3, [r3, #12]
 8010fd0:	b29b      	uxth	r3, r3
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7fa facc 	bl	800b570 <lwip_htons>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	b2db      	uxtb	r3, r3
 8010fdc:	f003 0301 	and.w	r3, r3, #1
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	f000 80b8 	beq.w	8011156 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010fe6:	4b45      	ldr	r3, [pc, #276]	; (80110fc <tcp_receive+0xb28>)
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	f043 0320 	orr.w	r3, r3, #32
 8010fee:	b2da      	uxtb	r2, r3
 8010ff0:	4b42      	ldr	r3, [pc, #264]	; (80110fc <tcp_receive+0xb28>)
 8010ff2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010ff4:	e0af      	b.n	8011156 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ffa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011000:	68db      	ldr	r3, [r3, #12]
 8011002:	685b      	ldr	r3, [r3, #4]
 8011004:	4a36      	ldr	r2, [pc, #216]	; (80110e0 <tcp_receive+0xb0c>)
 8011006:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	891b      	ldrh	r3, [r3, #8]
 801100c:	461c      	mov	r4, r3
 801100e:	68bb      	ldr	r3, [r7, #8]
 8011010:	68db      	ldr	r3, [r3, #12]
 8011012:	899b      	ldrh	r3, [r3, #12]
 8011014:	b29b      	uxth	r3, r3
 8011016:	4618      	mov	r0, r3
 8011018:	f7fa faaa 	bl	800b570 <lwip_htons>
 801101c:	4603      	mov	r3, r0
 801101e:	b2db      	uxtb	r3, r3
 8011020:	f003 0303 	and.w	r3, r3, #3
 8011024:	2b00      	cmp	r3, #0
 8011026:	d001      	beq.n	801102c <tcp_receive+0xa58>
 8011028:	2301      	movs	r3, #1
 801102a:	e000      	b.n	801102e <tcp_receive+0xa5a>
 801102c:	2300      	movs	r3, #0
 801102e:	191a      	adds	r2, r3, r4
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011034:	441a      	add	r2, r3
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801103e:	461c      	mov	r4, r3
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	891b      	ldrh	r3, [r3, #8]
 8011044:	461d      	mov	r5, r3
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	68db      	ldr	r3, [r3, #12]
 801104a:	899b      	ldrh	r3, [r3, #12]
 801104c:	b29b      	uxth	r3, r3
 801104e:	4618      	mov	r0, r3
 8011050:	f7fa fa8e 	bl	800b570 <lwip_htons>
 8011054:	4603      	mov	r3, r0
 8011056:	b2db      	uxtb	r3, r3
 8011058:	f003 0303 	and.w	r3, r3, #3
 801105c:	2b00      	cmp	r3, #0
 801105e:	d001      	beq.n	8011064 <tcp_receive+0xa90>
 8011060:	2301      	movs	r3, #1
 8011062:	e000      	b.n	8011066 <tcp_receive+0xa92>
 8011064:	2300      	movs	r3, #0
 8011066:	442b      	add	r3, r5
 8011068:	429c      	cmp	r4, r3
 801106a:	d206      	bcs.n	801107a <tcp_receive+0xaa6>
 801106c:	4b1e      	ldr	r3, [pc, #120]	; (80110e8 <tcp_receive+0xb14>)
 801106e:	f240 622b 	movw	r2, #1579	; 0x62b
 8011072:	4923      	ldr	r1, [pc, #140]	; (8011100 <tcp_receive+0xb2c>)
 8011074:	481e      	ldr	r0, [pc, #120]	; (80110f0 <tcp_receive+0xb1c>)
 8011076:	f007 fc9b 	bl	80189b0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	891b      	ldrh	r3, [r3, #8]
 801107e:	461c      	mov	r4, r3
 8011080:	68bb      	ldr	r3, [r7, #8]
 8011082:	68db      	ldr	r3, [r3, #12]
 8011084:	899b      	ldrh	r3, [r3, #12]
 8011086:	b29b      	uxth	r3, r3
 8011088:	4618      	mov	r0, r3
 801108a:	f7fa fa71 	bl	800b570 <lwip_htons>
 801108e:	4603      	mov	r3, r0
 8011090:	b2db      	uxtb	r3, r3
 8011092:	f003 0303 	and.w	r3, r3, #3
 8011096:	2b00      	cmp	r3, #0
 8011098:	d001      	beq.n	801109e <tcp_receive+0xaca>
 801109a:	2301      	movs	r3, #1
 801109c:	e000      	b.n	80110a0 <tcp_receive+0xacc>
 801109e:	2300      	movs	r3, #0
 80110a0:	1919      	adds	r1, r3, r4
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80110a6:	b28b      	uxth	r3, r1
 80110a8:	1ad3      	subs	r3, r2, r3
 80110aa:	b29a      	uxth	r2, r3
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f7fc fe11 	bl	800dcd8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	685b      	ldr	r3, [r3, #4]
 80110ba:	891b      	ldrh	r3, [r3, #8]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d028      	beq.n	8011112 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80110c0:	4b0d      	ldr	r3, [pc, #52]	; (80110f8 <tcp_receive+0xb24>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d01d      	beq.n	8011104 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80110c8:	4b0b      	ldr	r3, [pc, #44]	; (80110f8 <tcp_receive+0xb24>)
 80110ca:	681a      	ldr	r2, [r3, #0]
 80110cc:	68bb      	ldr	r3, [r7, #8]
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	4619      	mov	r1, r3
 80110d2:	4610      	mov	r0, r2
 80110d4:	f7fb ff4e 	bl	800cf74 <pbuf_cat>
 80110d8:	e018      	b.n	801110c <tcp_receive+0xb38>
 80110da:	bf00      	nop
 80110dc:	20010e42 	.word	0x20010e42
 80110e0:	20010e38 	.word	0x20010e38
 80110e4:	20010e18 	.word	0x20010e18
 80110e8:	0801b900 	.word	0x0801b900
 80110ec:	0801bce0 	.word	0x0801bce0
 80110f0:	0801b94c 	.word	0x0801b94c
 80110f4:	0801bd1c 	.word	0x0801bd1c
 80110f8:	20010e48 	.word	0x20010e48
 80110fc:	20010e45 	.word	0x20010e45
 8011100:	0801bd3c 	.word	0x0801bd3c
            } else {
              recv_data = cseg->p;
 8011104:	68bb      	ldr	r3, [r7, #8]
 8011106:	685b      	ldr	r3, [r3, #4]
 8011108:	4a70      	ldr	r2, [pc, #448]	; (80112cc <tcp_receive+0xcf8>)
 801110a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	2200      	movs	r2, #0
 8011110:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	68db      	ldr	r3, [r3, #12]
 8011116:	899b      	ldrh	r3, [r3, #12]
 8011118:	b29b      	uxth	r3, r3
 801111a:	4618      	mov	r0, r3
 801111c:	f7fa fa28 	bl	800b570 <lwip_htons>
 8011120:	4603      	mov	r3, r0
 8011122:	b2db      	uxtb	r3, r3
 8011124:	f003 0301 	and.w	r3, r3, #1
 8011128:	2b00      	cmp	r3, #0
 801112a:	d00d      	beq.n	8011148 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801112c:	4b68      	ldr	r3, [pc, #416]	; (80112d0 <tcp_receive+0xcfc>)
 801112e:	781b      	ldrb	r3, [r3, #0]
 8011130:	f043 0320 	orr.w	r3, r3, #32
 8011134:	b2da      	uxtb	r2, r3
 8011136:	4b66      	ldr	r3, [pc, #408]	; (80112d0 <tcp_receive+0xcfc>)
 8011138:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	7d1b      	ldrb	r3, [r3, #20]
 801113e:	2b04      	cmp	r3, #4
 8011140:	d102      	bne.n	8011148 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	2207      	movs	r2, #7
 8011146:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	681a      	ldr	r2, [r3, #0]
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011150:	68b8      	ldr	r0, [r7, #8]
 8011152:	f7fd fae6 	bl	800e722 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801115a:	2b00      	cmp	r3, #0
 801115c:	d008      	beq.n	8011170 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011162:	68db      	ldr	r3, [r3, #12]
 8011164:	685a      	ldr	r2, [r3, #4]
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801116a:	429a      	cmp	r2, r3
 801116c:	f43f af43 	beq.w	8010ff6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	8b5b      	ldrh	r3, [r3, #26]
 8011174:	f003 0301 	and.w	r3, r3, #1
 8011178:	2b00      	cmp	r3, #0
 801117a:	d00e      	beq.n	801119a <tcp_receive+0xbc6>
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	8b5b      	ldrh	r3, [r3, #26]
 8011180:	f023 0301 	bic.w	r3, r3, #1
 8011184:	b29a      	uxth	r2, r3
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	835a      	strh	r2, [r3, #26]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	8b5b      	ldrh	r3, [r3, #26]
 801118e:	f043 0302 	orr.w	r3, r3, #2
 8011192:	b29a      	uxth	r2, r3
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011198:	e188      	b.n	80114ac <tcp_receive+0xed8>
        tcp_ack(pcb);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	8b5b      	ldrh	r3, [r3, #26]
 801119e:	f043 0301 	orr.w	r3, r3, #1
 80111a2:	b29a      	uxth	r2, r3
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80111a8:	e180      	b.n	80114ac <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d106      	bne.n	80111c0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80111b2:	4848      	ldr	r0, [pc, #288]	; (80112d4 <tcp_receive+0xd00>)
 80111b4:	f7fd faec 	bl	800e790 <tcp_seg_copy>
 80111b8:	4602      	mov	r2, r0
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	675a      	str	r2, [r3, #116]	; 0x74
 80111be:	e16d      	b.n	801149c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80111c0:	2300      	movs	r3, #0
 80111c2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80111ca:	e157      	b.n	801147c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80111cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ce:	68db      	ldr	r3, [r3, #12]
 80111d0:	685a      	ldr	r2, [r3, #4]
 80111d2:	4b41      	ldr	r3, [pc, #260]	; (80112d8 <tcp_receive+0xd04>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	429a      	cmp	r2, r3
 80111d8:	d11d      	bne.n	8011216 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80111da:	4b3e      	ldr	r3, [pc, #248]	; (80112d4 <tcp_receive+0xd00>)
 80111dc:	891a      	ldrh	r2, [r3, #8]
 80111de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e0:	891b      	ldrh	r3, [r3, #8]
 80111e2:	429a      	cmp	r2, r3
 80111e4:	f240 814f 	bls.w	8011486 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80111e8:	483a      	ldr	r0, [pc, #232]	; (80112d4 <tcp_receive+0xd00>)
 80111ea:	f7fd fad1 	bl	800e790 <tcp_seg_copy>
 80111ee:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	f000 8149 	beq.w	801148a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80111f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d003      	beq.n	8011206 <tcp_receive+0xc32>
                    prev->next = cseg;
 80111fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011200:	697a      	ldr	r2, [r7, #20]
 8011202:	601a      	str	r2, [r3, #0]
 8011204:	e002      	b.n	801120c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	697a      	ldr	r2, [r7, #20]
 801120a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801120c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801120e:	6978      	ldr	r0, [r7, #20]
 8011210:	f7ff f8dc 	bl	80103cc <tcp_oos_insert_segment>
                }
                break;
 8011214:	e139      	b.n	801148a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011218:	2b00      	cmp	r3, #0
 801121a:	d117      	bne.n	801124c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801121c:	4b2e      	ldr	r3, [pc, #184]	; (80112d8 <tcp_receive+0xd04>)
 801121e:	681a      	ldr	r2, [r3, #0]
 8011220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011222:	68db      	ldr	r3, [r3, #12]
 8011224:	685b      	ldr	r3, [r3, #4]
 8011226:	1ad3      	subs	r3, r2, r3
 8011228:	2b00      	cmp	r3, #0
 801122a:	da57      	bge.n	80112dc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801122c:	4829      	ldr	r0, [pc, #164]	; (80112d4 <tcp_receive+0xd00>)
 801122e:	f7fd faaf 	bl	800e790 <tcp_seg_copy>
 8011232:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011234:	69bb      	ldr	r3, [r7, #24]
 8011236:	2b00      	cmp	r3, #0
 8011238:	f000 8129 	beq.w	801148e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	69ba      	ldr	r2, [r7, #24]
 8011240:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011242:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011244:	69b8      	ldr	r0, [r7, #24]
 8011246:	f7ff f8c1 	bl	80103cc <tcp_oos_insert_segment>
                  }
                  break;
 801124a:	e120      	b.n	801148e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801124c:	4b22      	ldr	r3, [pc, #136]	; (80112d8 <tcp_receive+0xd04>)
 801124e:	681a      	ldr	r2, [r3, #0]
 8011250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011252:	68db      	ldr	r3, [r3, #12]
 8011254:	685b      	ldr	r3, [r3, #4]
 8011256:	1ad3      	subs	r3, r2, r3
 8011258:	3b01      	subs	r3, #1
 801125a:	2b00      	cmp	r3, #0
 801125c:	db3e      	blt.n	80112dc <tcp_receive+0xd08>
 801125e:	4b1e      	ldr	r3, [pc, #120]	; (80112d8 <tcp_receive+0xd04>)
 8011260:	681a      	ldr	r2, [r3, #0]
 8011262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011264:	68db      	ldr	r3, [r3, #12]
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	1ad3      	subs	r3, r2, r3
 801126a:	3301      	adds	r3, #1
 801126c:	2b00      	cmp	r3, #0
 801126e:	dc35      	bgt.n	80112dc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011270:	4818      	ldr	r0, [pc, #96]	; (80112d4 <tcp_receive+0xd00>)
 8011272:	f7fd fa8d 	bl	800e790 <tcp_seg_copy>
 8011276:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011278:	69fb      	ldr	r3, [r7, #28]
 801127a:	2b00      	cmp	r3, #0
 801127c:	f000 8109 	beq.w	8011492 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011282:	68db      	ldr	r3, [r3, #12]
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011288:	8912      	ldrh	r2, [r2, #8]
 801128a:	441a      	add	r2, r3
 801128c:	4b12      	ldr	r3, [pc, #72]	; (80112d8 <tcp_receive+0xd04>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	1ad3      	subs	r3, r2, r3
 8011292:	2b00      	cmp	r3, #0
 8011294:	dd12      	ble.n	80112bc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011296:	4b10      	ldr	r3, [pc, #64]	; (80112d8 <tcp_receive+0xd04>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	b29a      	uxth	r2, r3
 801129c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801129e:	68db      	ldr	r3, [r3, #12]
 80112a0:	685b      	ldr	r3, [r3, #4]
 80112a2:	b29b      	uxth	r3, r3
 80112a4:	1ad3      	subs	r3, r2, r3
 80112a6:	b29a      	uxth	r2, r3
 80112a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112aa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80112ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ae:	685a      	ldr	r2, [r3, #4]
 80112b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112b2:	891b      	ldrh	r3, [r3, #8]
 80112b4:	4619      	mov	r1, r3
 80112b6:	4610      	mov	r0, r2
 80112b8:	f7fb fc08 	bl	800cacc <pbuf_realloc>
                    }
                    prev->next = cseg;
 80112bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112be:	69fa      	ldr	r2, [r7, #28]
 80112c0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80112c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80112c4:	69f8      	ldr	r0, [r7, #28]
 80112c6:	f7ff f881 	bl	80103cc <tcp_oos_insert_segment>
                  }
                  break;
 80112ca:	e0e2      	b.n	8011492 <tcp_receive+0xebe>
 80112cc:	20010e48 	.word	0x20010e48
 80112d0:	20010e45 	.word	0x20010e45
 80112d4:	20010e18 	.word	0x20010e18
 80112d8:	20010e38 	.word	0x20010e38
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80112dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112de:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80112e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	f040 80c6 	bne.w	8011476 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80112ea:	4b80      	ldr	r3, [pc, #512]	; (80114ec <tcp_receive+0xf18>)
 80112ec:	681a      	ldr	r2, [r3, #0]
 80112ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f0:	68db      	ldr	r3, [r3, #12]
 80112f2:	685b      	ldr	r3, [r3, #4]
 80112f4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	f340 80bd 	ble.w	8011476 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80112fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fe:	68db      	ldr	r3, [r3, #12]
 8011300:	899b      	ldrh	r3, [r3, #12]
 8011302:	b29b      	uxth	r3, r3
 8011304:	4618      	mov	r0, r3
 8011306:	f7fa f933 	bl	800b570 <lwip_htons>
 801130a:	4603      	mov	r3, r0
 801130c:	b2db      	uxtb	r3, r3
 801130e:	f003 0301 	and.w	r3, r3, #1
 8011312:	2b00      	cmp	r3, #0
 8011314:	f040 80bf 	bne.w	8011496 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011318:	4875      	ldr	r0, [pc, #468]	; (80114f0 <tcp_receive+0xf1c>)
 801131a:	f7fd fa39 	bl	800e790 <tcp_seg_copy>
 801131e:	4602      	mov	r2, r0
 8011320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011322:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	2b00      	cmp	r3, #0
 801132a:	f000 80b6 	beq.w	801149a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801132e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011330:	68db      	ldr	r3, [r3, #12]
 8011332:	685b      	ldr	r3, [r3, #4]
 8011334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011336:	8912      	ldrh	r2, [r2, #8]
 8011338:	441a      	add	r2, r3
 801133a:	4b6c      	ldr	r3, [pc, #432]	; (80114ec <tcp_receive+0xf18>)
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	1ad3      	subs	r3, r2, r3
 8011340:	2b00      	cmp	r3, #0
 8011342:	dd12      	ble.n	801136a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011344:	4b69      	ldr	r3, [pc, #420]	; (80114ec <tcp_receive+0xf18>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	b29a      	uxth	r2, r3
 801134a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801134c:	68db      	ldr	r3, [r3, #12]
 801134e:	685b      	ldr	r3, [r3, #4]
 8011350:	b29b      	uxth	r3, r3
 8011352:	1ad3      	subs	r3, r2, r3
 8011354:	b29a      	uxth	r2, r3
 8011356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011358:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801135a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801135c:	685a      	ldr	r2, [r3, #4]
 801135e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011360:	891b      	ldrh	r3, [r3, #8]
 8011362:	4619      	mov	r1, r3
 8011364:	4610      	mov	r0, r2
 8011366:	f7fb fbb1 	bl	800cacc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801136a:	4b62      	ldr	r3, [pc, #392]	; (80114f4 <tcp_receive+0xf20>)
 801136c:	881b      	ldrh	r3, [r3, #0]
 801136e:	461a      	mov	r2, r3
 8011370:	4b5e      	ldr	r3, [pc, #376]	; (80114ec <tcp_receive+0xf18>)
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	441a      	add	r2, r3
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801137a:	6879      	ldr	r1, [r7, #4]
 801137c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801137e:	440b      	add	r3, r1
 8011380:	1ad3      	subs	r3, r2, r3
 8011382:	2b00      	cmp	r3, #0
 8011384:	f340 8089 	ble.w	801149a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	68db      	ldr	r3, [r3, #12]
 801138e:	899b      	ldrh	r3, [r3, #12]
 8011390:	b29b      	uxth	r3, r3
 8011392:	4618      	mov	r0, r3
 8011394:	f7fa f8ec 	bl	800b570 <lwip_htons>
 8011398:	4603      	mov	r3, r0
 801139a:	b2db      	uxtb	r3, r3
 801139c:	f003 0301 	and.w	r3, r3, #1
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d022      	beq.n	80113ea <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80113a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	68db      	ldr	r3, [r3, #12]
 80113aa:	899b      	ldrh	r3, [r3, #12]
 80113ac:	b29b      	uxth	r3, r3
 80113ae:	b21b      	sxth	r3, r3
 80113b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80113b4:	b21c      	sxth	r4, r3
 80113b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	68db      	ldr	r3, [r3, #12]
 80113bc:	899b      	ldrh	r3, [r3, #12]
 80113be:	b29b      	uxth	r3, r3
 80113c0:	4618      	mov	r0, r3
 80113c2:	f7fa f8d5 	bl	800b570 <lwip_htons>
 80113c6:	4603      	mov	r3, r0
 80113c8:	b2db      	uxtb	r3, r3
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80113d0:	b29b      	uxth	r3, r3
 80113d2:	4618      	mov	r0, r3
 80113d4:	f7fa f8cc 	bl	800b570 <lwip_htons>
 80113d8:	4603      	mov	r3, r0
 80113da:	b21b      	sxth	r3, r3
 80113dc:	4323      	orrs	r3, r4
 80113de:	b21a      	sxth	r2, r3
 80113e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	68db      	ldr	r3, [r3, #12]
 80113e6:	b292      	uxth	r2, r2
 80113e8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113ee:	b29a      	uxth	r2, r3
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80113f4:	4413      	add	r3, r2
 80113f6:	b299      	uxth	r1, r3
 80113f8:	4b3c      	ldr	r3, [pc, #240]	; (80114ec <tcp_receive+0xf18>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	b29a      	uxth	r2, r3
 80113fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	1a8a      	subs	r2, r1, r2
 8011404:	b292      	uxth	r2, r2
 8011406:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	685a      	ldr	r2, [r3, #4]
 801140e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	891b      	ldrh	r3, [r3, #8]
 8011414:	4619      	mov	r1, r3
 8011416:	4610      	mov	r0, r2
 8011418:	f7fb fb58 	bl	800cacc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801141c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	891c      	ldrh	r4, [r3, #8]
 8011422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	68db      	ldr	r3, [r3, #12]
 8011428:	899b      	ldrh	r3, [r3, #12]
 801142a:	b29b      	uxth	r3, r3
 801142c:	4618      	mov	r0, r3
 801142e:	f7fa f89f 	bl	800b570 <lwip_htons>
 8011432:	4603      	mov	r3, r0
 8011434:	b2db      	uxtb	r3, r3
 8011436:	f003 0303 	and.w	r3, r3, #3
 801143a:	2b00      	cmp	r3, #0
 801143c:	d001      	beq.n	8011442 <tcp_receive+0xe6e>
 801143e:	2301      	movs	r3, #1
 8011440:	e000      	b.n	8011444 <tcp_receive+0xe70>
 8011442:	2300      	movs	r3, #0
 8011444:	4423      	add	r3, r4
 8011446:	b29a      	uxth	r2, r3
 8011448:	4b2a      	ldr	r3, [pc, #168]	; (80114f4 <tcp_receive+0xf20>)
 801144a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801144c:	4b29      	ldr	r3, [pc, #164]	; (80114f4 <tcp_receive+0xf20>)
 801144e:	881b      	ldrh	r3, [r3, #0]
 8011450:	461a      	mov	r2, r3
 8011452:	4b26      	ldr	r3, [pc, #152]	; (80114ec <tcp_receive+0xf18>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	441a      	add	r2, r3
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801145c:	6879      	ldr	r1, [r7, #4]
 801145e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011460:	440b      	add	r3, r1
 8011462:	429a      	cmp	r2, r3
 8011464:	d019      	beq.n	801149a <tcp_receive+0xec6>
 8011466:	4b24      	ldr	r3, [pc, #144]	; (80114f8 <tcp_receive+0xf24>)
 8011468:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801146c:	4923      	ldr	r1, [pc, #140]	; (80114fc <tcp_receive+0xf28>)
 801146e:	4824      	ldr	r0, [pc, #144]	; (8011500 <tcp_receive+0xf2c>)
 8011470:	f007 fa9e 	bl	80189b0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011474:	e011      	b.n	801149a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	63bb      	str	r3, [r7, #56]	; 0x38
 801147c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801147e:	2b00      	cmp	r3, #0
 8011480:	f47f aea4 	bne.w	80111cc <tcp_receive+0xbf8>
 8011484:	e00a      	b.n	801149c <tcp_receive+0xec8>
                break;
 8011486:	bf00      	nop
 8011488:	e008      	b.n	801149c <tcp_receive+0xec8>
                break;
 801148a:	bf00      	nop
 801148c:	e006      	b.n	801149c <tcp_receive+0xec8>
                  break;
 801148e:	bf00      	nop
 8011490:	e004      	b.n	801149c <tcp_receive+0xec8>
                  break;
 8011492:	bf00      	nop
 8011494:	e002      	b.n	801149c <tcp_receive+0xec8>
                  break;
 8011496:	bf00      	nop
 8011498:	e000      	b.n	801149c <tcp_receive+0xec8>
                break;
 801149a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801149c:	6878      	ldr	r0, [r7, #4]
 801149e:	f001 fe8b 	bl	80131b8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80114a2:	e003      	b.n	80114ac <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f001 fe87 	bl	80131b8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80114aa:	e01a      	b.n	80114e2 <tcp_receive+0xf0e>
 80114ac:	e019      	b.n	80114e2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80114ae:	4b0f      	ldr	r3, [pc, #60]	; (80114ec <tcp_receive+0xf18>)
 80114b0:	681a      	ldr	r2, [r3, #0]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114b6:	1ad3      	subs	r3, r2, r3
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	db0a      	blt.n	80114d2 <tcp_receive+0xefe>
 80114bc:	4b0b      	ldr	r3, [pc, #44]	; (80114ec <tcp_receive+0xf18>)
 80114be:	681a      	ldr	r2, [r3, #0]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114c4:	6879      	ldr	r1, [r7, #4]
 80114c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80114c8:	440b      	add	r3, r1
 80114ca:	1ad3      	subs	r3, r2, r3
 80114cc:	3301      	adds	r3, #1
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	dd07      	ble.n	80114e2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	8b5b      	ldrh	r3, [r3, #26]
 80114d6:	f043 0302 	orr.w	r3, r3, #2
 80114da:	b29a      	uxth	r2, r3
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80114e0:	e7ff      	b.n	80114e2 <tcp_receive+0xf0e>
 80114e2:	bf00      	nop
 80114e4:	3750      	adds	r7, #80	; 0x50
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bdb0      	pop	{r4, r5, r7, pc}
 80114ea:	bf00      	nop
 80114ec:	20010e38 	.word	0x20010e38
 80114f0:	20010e18 	.word	0x20010e18
 80114f4:	20010e42 	.word	0x20010e42
 80114f8:	0801b900 	.word	0x0801b900
 80114fc:	0801bca8 	.word	0x0801bca8
 8011500:	0801b94c 	.word	0x0801b94c

08011504 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011504:	b480      	push	{r7}
 8011506:	b083      	sub	sp, #12
 8011508:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801150a:	4b15      	ldr	r3, [pc, #84]	; (8011560 <tcp_get_next_optbyte+0x5c>)
 801150c:	881b      	ldrh	r3, [r3, #0]
 801150e:	1c5a      	adds	r2, r3, #1
 8011510:	b291      	uxth	r1, r2
 8011512:	4a13      	ldr	r2, [pc, #76]	; (8011560 <tcp_get_next_optbyte+0x5c>)
 8011514:	8011      	strh	r1, [r2, #0]
 8011516:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011518:	4b12      	ldr	r3, [pc, #72]	; (8011564 <tcp_get_next_optbyte+0x60>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d004      	beq.n	801152a <tcp_get_next_optbyte+0x26>
 8011520:	4b11      	ldr	r3, [pc, #68]	; (8011568 <tcp_get_next_optbyte+0x64>)
 8011522:	881b      	ldrh	r3, [r3, #0]
 8011524:	88fa      	ldrh	r2, [r7, #6]
 8011526:	429a      	cmp	r2, r3
 8011528:	d208      	bcs.n	801153c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801152a:	4b10      	ldr	r3, [pc, #64]	; (801156c <tcp_get_next_optbyte+0x68>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	3314      	adds	r3, #20
 8011530:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011532:	88fb      	ldrh	r3, [r7, #6]
 8011534:	683a      	ldr	r2, [r7, #0]
 8011536:	4413      	add	r3, r2
 8011538:	781b      	ldrb	r3, [r3, #0]
 801153a:	e00b      	b.n	8011554 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801153c:	88fb      	ldrh	r3, [r7, #6]
 801153e:	b2da      	uxtb	r2, r3
 8011540:	4b09      	ldr	r3, [pc, #36]	; (8011568 <tcp_get_next_optbyte+0x64>)
 8011542:	881b      	ldrh	r3, [r3, #0]
 8011544:	b2db      	uxtb	r3, r3
 8011546:	1ad3      	subs	r3, r2, r3
 8011548:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801154a:	4b06      	ldr	r3, [pc, #24]	; (8011564 <tcp_get_next_optbyte+0x60>)
 801154c:	681a      	ldr	r2, [r3, #0]
 801154e:	797b      	ldrb	r3, [r7, #5]
 8011550:	4413      	add	r3, r2
 8011552:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011554:	4618      	mov	r0, r3
 8011556:	370c      	adds	r7, #12
 8011558:	46bd      	mov	sp, r7
 801155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155e:	4770      	bx	lr
 8011560:	20010e34 	.word	0x20010e34
 8011564:	20010e30 	.word	0x20010e30
 8011568:	20010e2e 	.word	0x20010e2e
 801156c:	20010e28 	.word	0x20010e28

08011570 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b084      	sub	sp, #16
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d106      	bne.n	801158c <tcp_parseopt+0x1c>
 801157e:	4b32      	ldr	r3, [pc, #200]	; (8011648 <tcp_parseopt+0xd8>)
 8011580:	f240 727d 	movw	r2, #1917	; 0x77d
 8011584:	4931      	ldr	r1, [pc, #196]	; (801164c <tcp_parseopt+0xdc>)
 8011586:	4832      	ldr	r0, [pc, #200]	; (8011650 <tcp_parseopt+0xe0>)
 8011588:	f007 fa12 	bl	80189b0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801158c:	4b31      	ldr	r3, [pc, #196]	; (8011654 <tcp_parseopt+0xe4>)
 801158e:	881b      	ldrh	r3, [r3, #0]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d055      	beq.n	8011640 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011594:	4b30      	ldr	r3, [pc, #192]	; (8011658 <tcp_parseopt+0xe8>)
 8011596:	2200      	movs	r2, #0
 8011598:	801a      	strh	r2, [r3, #0]
 801159a:	e045      	b.n	8011628 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801159c:	f7ff ffb2 	bl	8011504 <tcp_get_next_optbyte>
 80115a0:	4603      	mov	r3, r0
 80115a2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80115a4:	7bfb      	ldrb	r3, [r7, #15]
 80115a6:	2b02      	cmp	r3, #2
 80115a8:	d006      	beq.n	80115b8 <tcp_parseopt+0x48>
 80115aa:	2b02      	cmp	r3, #2
 80115ac:	dc2b      	bgt.n	8011606 <tcp_parseopt+0x96>
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d041      	beq.n	8011636 <tcp_parseopt+0xc6>
 80115b2:	2b01      	cmp	r3, #1
 80115b4:	d127      	bne.n	8011606 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80115b6:	e037      	b.n	8011628 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80115b8:	f7ff ffa4 	bl	8011504 <tcp_get_next_optbyte>
 80115bc:	4603      	mov	r3, r0
 80115be:	2b04      	cmp	r3, #4
 80115c0:	d13b      	bne.n	801163a <tcp_parseopt+0xca>
 80115c2:	4b25      	ldr	r3, [pc, #148]	; (8011658 <tcp_parseopt+0xe8>)
 80115c4:	881b      	ldrh	r3, [r3, #0]
 80115c6:	3301      	adds	r3, #1
 80115c8:	4a22      	ldr	r2, [pc, #136]	; (8011654 <tcp_parseopt+0xe4>)
 80115ca:	8812      	ldrh	r2, [r2, #0]
 80115cc:	4293      	cmp	r3, r2
 80115ce:	da34      	bge.n	801163a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80115d0:	f7ff ff98 	bl	8011504 <tcp_get_next_optbyte>
 80115d4:	4603      	mov	r3, r0
 80115d6:	b29b      	uxth	r3, r3
 80115d8:	021b      	lsls	r3, r3, #8
 80115da:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80115dc:	f7ff ff92 	bl	8011504 <tcp_get_next_optbyte>
 80115e0:	4603      	mov	r3, r0
 80115e2:	b29a      	uxth	r2, r3
 80115e4:	89bb      	ldrh	r3, [r7, #12]
 80115e6:	4313      	orrs	r3, r2
 80115e8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80115ea:	89bb      	ldrh	r3, [r7, #12]
 80115ec:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80115f0:	d804      	bhi.n	80115fc <tcp_parseopt+0x8c>
 80115f2:	89bb      	ldrh	r3, [r7, #12]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d001      	beq.n	80115fc <tcp_parseopt+0x8c>
 80115f8:	89ba      	ldrh	r2, [r7, #12]
 80115fa:	e001      	b.n	8011600 <tcp_parseopt+0x90>
 80115fc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011604:	e010      	b.n	8011628 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011606:	f7ff ff7d 	bl	8011504 <tcp_get_next_optbyte>
 801160a:	4603      	mov	r3, r0
 801160c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801160e:	7afb      	ldrb	r3, [r7, #11]
 8011610:	2b01      	cmp	r3, #1
 8011612:	d914      	bls.n	801163e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011614:	7afb      	ldrb	r3, [r7, #11]
 8011616:	b29a      	uxth	r2, r3
 8011618:	4b0f      	ldr	r3, [pc, #60]	; (8011658 <tcp_parseopt+0xe8>)
 801161a:	881b      	ldrh	r3, [r3, #0]
 801161c:	4413      	add	r3, r2
 801161e:	b29b      	uxth	r3, r3
 8011620:	3b02      	subs	r3, #2
 8011622:	b29a      	uxth	r2, r3
 8011624:	4b0c      	ldr	r3, [pc, #48]	; (8011658 <tcp_parseopt+0xe8>)
 8011626:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011628:	4b0b      	ldr	r3, [pc, #44]	; (8011658 <tcp_parseopt+0xe8>)
 801162a:	881a      	ldrh	r2, [r3, #0]
 801162c:	4b09      	ldr	r3, [pc, #36]	; (8011654 <tcp_parseopt+0xe4>)
 801162e:	881b      	ldrh	r3, [r3, #0]
 8011630:	429a      	cmp	r2, r3
 8011632:	d3b3      	bcc.n	801159c <tcp_parseopt+0x2c>
 8011634:	e004      	b.n	8011640 <tcp_parseopt+0xd0>
          return;
 8011636:	bf00      	nop
 8011638:	e002      	b.n	8011640 <tcp_parseopt+0xd0>
            return;
 801163a:	bf00      	nop
 801163c:	e000      	b.n	8011640 <tcp_parseopt+0xd0>
            return;
 801163e:	bf00      	nop
      }
    }
  }
}
 8011640:	3710      	adds	r7, #16
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}
 8011646:	bf00      	nop
 8011648:	0801b900 	.word	0x0801b900
 801164c:	0801bd64 	.word	0x0801bd64
 8011650:	0801b94c 	.word	0x0801b94c
 8011654:	20010e2c 	.word	0x20010e2c
 8011658:	20010e34 	.word	0x20010e34

0801165c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801165c:	b480      	push	{r7}
 801165e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011660:	4b05      	ldr	r3, [pc, #20]	; (8011678 <tcp_trigger_input_pcb_close+0x1c>)
 8011662:	781b      	ldrb	r3, [r3, #0]
 8011664:	f043 0310 	orr.w	r3, r3, #16
 8011668:	b2da      	uxtb	r2, r3
 801166a:	4b03      	ldr	r3, [pc, #12]	; (8011678 <tcp_trigger_input_pcb_close+0x1c>)
 801166c:	701a      	strb	r2, [r3, #0]
}
 801166e:	bf00      	nop
 8011670:	46bd      	mov	sp, r7
 8011672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011676:	4770      	bx	lr
 8011678:	20010e45 	.word	0x20010e45

0801167c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b084      	sub	sp, #16
 8011680:	af00      	add	r7, sp, #0
 8011682:	60f8      	str	r0, [r7, #12]
 8011684:	60b9      	str	r1, [r7, #8]
 8011686:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d00a      	beq.n	80116a4 <tcp_route+0x28>
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	7a1b      	ldrb	r3, [r3, #8]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d006      	beq.n	80116a4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	7a1b      	ldrb	r3, [r3, #8]
 801169a:	4618      	mov	r0, r3
 801169c:	f7fb f80e 	bl	800c6bc <netif_get_by_index>
 80116a0:	4603      	mov	r3, r0
 80116a2:	e003      	b.n	80116ac <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80116a4:	6878      	ldr	r0, [r7, #4]
 80116a6:	f005 fca9 	bl	8016ffc <ip4_route>
 80116aa:	4603      	mov	r3, r0
  }
}
 80116ac:	4618      	mov	r0, r3
 80116ae:	3710      	adds	r7, #16
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd80      	pop	{r7, pc}

080116b4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80116b4:	b590      	push	{r4, r7, lr}
 80116b6:	b087      	sub	sp, #28
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	60f8      	str	r0, [r7, #12]
 80116bc:	60b9      	str	r1, [r7, #8]
 80116be:	603b      	str	r3, [r7, #0]
 80116c0:	4613      	mov	r3, r2
 80116c2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d105      	bne.n	80116d6 <tcp_create_segment+0x22>
 80116ca:	4b44      	ldr	r3, [pc, #272]	; (80117dc <tcp_create_segment+0x128>)
 80116cc:	22a3      	movs	r2, #163	; 0xa3
 80116ce:	4944      	ldr	r1, [pc, #272]	; (80117e0 <tcp_create_segment+0x12c>)
 80116d0:	4844      	ldr	r0, [pc, #272]	; (80117e4 <tcp_create_segment+0x130>)
 80116d2:	f007 f96d 	bl	80189b0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80116d6:	68bb      	ldr	r3, [r7, #8]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d105      	bne.n	80116e8 <tcp_create_segment+0x34>
 80116dc:	4b3f      	ldr	r3, [pc, #252]	; (80117dc <tcp_create_segment+0x128>)
 80116de:	22a4      	movs	r2, #164	; 0xa4
 80116e0:	4941      	ldr	r1, [pc, #260]	; (80117e8 <tcp_create_segment+0x134>)
 80116e2:	4840      	ldr	r0, [pc, #256]	; (80117e4 <tcp_create_segment+0x130>)
 80116e4:	f007 f964 	bl	80189b0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80116e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80116ec:	009b      	lsls	r3, r3, #2
 80116ee:	b2db      	uxtb	r3, r3
 80116f0:	f003 0304 	and.w	r3, r3, #4
 80116f4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80116f6:	2003      	movs	r0, #3
 80116f8:	f7fa fc48 	bl	800bf8c <memp_malloc>
 80116fc:	6138      	str	r0, [r7, #16]
 80116fe:	693b      	ldr	r3, [r7, #16]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d104      	bne.n	801170e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011704:	68b8      	ldr	r0, [r7, #8]
 8011706:	f7fb fb67 	bl	800cdd8 <pbuf_free>
    return NULL;
 801170a:	2300      	movs	r3, #0
 801170c:	e061      	b.n	80117d2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801170e:	693b      	ldr	r3, [r7, #16]
 8011710:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011714:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011716:	693b      	ldr	r3, [r7, #16]
 8011718:	2200      	movs	r2, #0
 801171a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801171c:	693b      	ldr	r3, [r7, #16]
 801171e:	68ba      	ldr	r2, [r7, #8]
 8011720:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	891a      	ldrh	r2, [r3, #8]
 8011726:	7dfb      	ldrb	r3, [r7, #23]
 8011728:	b29b      	uxth	r3, r3
 801172a:	429a      	cmp	r2, r3
 801172c:	d205      	bcs.n	801173a <tcp_create_segment+0x86>
 801172e:	4b2b      	ldr	r3, [pc, #172]	; (80117dc <tcp_create_segment+0x128>)
 8011730:	22b0      	movs	r2, #176	; 0xb0
 8011732:	492e      	ldr	r1, [pc, #184]	; (80117ec <tcp_create_segment+0x138>)
 8011734:	482b      	ldr	r0, [pc, #172]	; (80117e4 <tcp_create_segment+0x130>)
 8011736:	f007 f93b 	bl	80189b0 <iprintf>
  seg->len = p->tot_len - optlen;
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	891a      	ldrh	r2, [r3, #8]
 801173e:	7dfb      	ldrb	r3, [r7, #23]
 8011740:	b29b      	uxth	r3, r3
 8011742:	1ad3      	subs	r3, r2, r3
 8011744:	b29a      	uxth	r2, r3
 8011746:	693b      	ldr	r3, [r7, #16]
 8011748:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801174a:	2114      	movs	r1, #20
 801174c:	68b8      	ldr	r0, [r7, #8]
 801174e:	f7fb faad 	bl	800ccac <pbuf_add_header>
 8011752:	4603      	mov	r3, r0
 8011754:	2b00      	cmp	r3, #0
 8011756:	d004      	beq.n	8011762 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011758:	6938      	ldr	r0, [r7, #16]
 801175a:	f7fc ffe2 	bl	800e722 <tcp_seg_free>
    return NULL;
 801175e:	2300      	movs	r3, #0
 8011760:	e037      	b.n	80117d2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011762:	693b      	ldr	r3, [r7, #16]
 8011764:	685b      	ldr	r3, [r3, #4]
 8011766:	685a      	ldr	r2, [r3, #4]
 8011768:	693b      	ldr	r3, [r7, #16]
 801176a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	8ada      	ldrh	r2, [r3, #22]
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	68dc      	ldr	r4, [r3, #12]
 8011774:	4610      	mov	r0, r2
 8011776:	f7f9 fefb 	bl	800b570 <lwip_htons>
 801177a:	4603      	mov	r3, r0
 801177c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	8b1a      	ldrh	r2, [r3, #24]
 8011782:	693b      	ldr	r3, [r7, #16]
 8011784:	68dc      	ldr	r4, [r3, #12]
 8011786:	4610      	mov	r0, r2
 8011788:	f7f9 fef2 	bl	800b570 <lwip_htons>
 801178c:	4603      	mov	r3, r0
 801178e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011790:	693b      	ldr	r3, [r7, #16]
 8011792:	68dc      	ldr	r4, [r3, #12]
 8011794:	6838      	ldr	r0, [r7, #0]
 8011796:	f7f9 ff00 	bl	800b59a <lwip_htonl>
 801179a:	4603      	mov	r3, r0
 801179c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801179e:	7dfb      	ldrb	r3, [r7, #23]
 80117a0:	089b      	lsrs	r3, r3, #2
 80117a2:	b2db      	uxtb	r3, r3
 80117a4:	b29b      	uxth	r3, r3
 80117a6:	3305      	adds	r3, #5
 80117a8:	b29b      	uxth	r3, r3
 80117aa:	031b      	lsls	r3, r3, #12
 80117ac:	b29a      	uxth	r2, r3
 80117ae:	79fb      	ldrb	r3, [r7, #7]
 80117b0:	b29b      	uxth	r3, r3
 80117b2:	4313      	orrs	r3, r2
 80117b4:	b29a      	uxth	r2, r3
 80117b6:	693b      	ldr	r3, [r7, #16]
 80117b8:	68dc      	ldr	r4, [r3, #12]
 80117ba:	4610      	mov	r0, r2
 80117bc:	f7f9 fed8 	bl	800b570 <lwip_htons>
 80117c0:	4603      	mov	r3, r0
 80117c2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80117c4:	693b      	ldr	r3, [r7, #16]
 80117c6:	68db      	ldr	r3, [r3, #12]
 80117c8:	2200      	movs	r2, #0
 80117ca:	749a      	strb	r2, [r3, #18]
 80117cc:	2200      	movs	r2, #0
 80117ce:	74da      	strb	r2, [r3, #19]
  return seg;
 80117d0:	693b      	ldr	r3, [r7, #16]
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	371c      	adds	r7, #28
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd90      	pop	{r4, r7, pc}
 80117da:	bf00      	nop
 80117dc:	0801bd80 	.word	0x0801bd80
 80117e0:	0801bdb4 	.word	0x0801bdb4
 80117e4:	0801bdd4 	.word	0x0801bdd4
 80117e8:	0801bdfc 	.word	0x0801bdfc
 80117ec:	0801be20 	.word	0x0801be20

080117f0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b086      	sub	sp, #24
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	607b      	str	r3, [r7, #4]
 80117f8:	4603      	mov	r3, r0
 80117fa:	73fb      	strb	r3, [r7, #15]
 80117fc:	460b      	mov	r3, r1
 80117fe:	81bb      	strh	r3, [r7, #12]
 8011800:	4613      	mov	r3, r2
 8011802:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011804:	89bb      	ldrh	r3, [r7, #12]
 8011806:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d105      	bne.n	801181a <tcp_pbuf_prealloc+0x2a>
 801180e:	4b30      	ldr	r3, [pc, #192]	; (80118d0 <tcp_pbuf_prealloc+0xe0>)
 8011810:	22e8      	movs	r2, #232	; 0xe8
 8011812:	4930      	ldr	r1, [pc, #192]	; (80118d4 <tcp_pbuf_prealloc+0xe4>)
 8011814:	4830      	ldr	r0, [pc, #192]	; (80118d8 <tcp_pbuf_prealloc+0xe8>)
 8011816:	f007 f8cb 	bl	80189b0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801181a:	6a3b      	ldr	r3, [r7, #32]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d105      	bne.n	801182c <tcp_pbuf_prealloc+0x3c>
 8011820:	4b2b      	ldr	r3, [pc, #172]	; (80118d0 <tcp_pbuf_prealloc+0xe0>)
 8011822:	22e9      	movs	r2, #233	; 0xe9
 8011824:	492d      	ldr	r1, [pc, #180]	; (80118dc <tcp_pbuf_prealloc+0xec>)
 8011826:	482c      	ldr	r0, [pc, #176]	; (80118d8 <tcp_pbuf_prealloc+0xe8>)
 8011828:	f007 f8c2 	bl	80189b0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801182c:	89ba      	ldrh	r2, [r7, #12]
 801182e:	897b      	ldrh	r3, [r7, #10]
 8011830:	429a      	cmp	r2, r3
 8011832:	d221      	bcs.n	8011878 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011834:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011838:	f003 0302 	and.w	r3, r3, #2
 801183c:	2b00      	cmp	r3, #0
 801183e:	d111      	bne.n	8011864 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011840:	6a3b      	ldr	r3, [r7, #32]
 8011842:	8b5b      	ldrh	r3, [r3, #26]
 8011844:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011848:	2b00      	cmp	r3, #0
 801184a:	d115      	bne.n	8011878 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801184c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011850:	2b00      	cmp	r3, #0
 8011852:	d007      	beq.n	8011864 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011854:	6a3b      	ldr	r3, [r7, #32]
 8011856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011858:	2b00      	cmp	r3, #0
 801185a:	d103      	bne.n	8011864 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801185c:	6a3b      	ldr	r3, [r7, #32]
 801185e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011860:	2b00      	cmp	r3, #0
 8011862:	d009      	beq.n	8011878 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011864:	89bb      	ldrh	r3, [r7, #12]
 8011866:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801186a:	f023 0203 	bic.w	r2, r3, #3
 801186e:	897b      	ldrh	r3, [r7, #10]
 8011870:	4293      	cmp	r3, r2
 8011872:	bf28      	it	cs
 8011874:	4613      	movcs	r3, r2
 8011876:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011878:	8af9      	ldrh	r1, [r7, #22]
 801187a:	7bfb      	ldrb	r3, [r7, #15]
 801187c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011880:	4618      	mov	r0, r3
 8011882:	f7fa ffc5 	bl	800c810 <pbuf_alloc>
 8011886:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011888:	693b      	ldr	r3, [r7, #16]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d101      	bne.n	8011892 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801188e:	2300      	movs	r3, #0
 8011890:	e019      	b.n	80118c6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d006      	beq.n	80118a8 <tcp_pbuf_prealloc+0xb8>
 801189a:	4b0d      	ldr	r3, [pc, #52]	; (80118d0 <tcp_pbuf_prealloc+0xe0>)
 801189c:	f240 120b 	movw	r2, #267	; 0x10b
 80118a0:	490f      	ldr	r1, [pc, #60]	; (80118e0 <tcp_pbuf_prealloc+0xf0>)
 80118a2:	480d      	ldr	r0, [pc, #52]	; (80118d8 <tcp_pbuf_prealloc+0xe8>)
 80118a4:	f007 f884 	bl	80189b0 <iprintf>
  *oversize = p->len - length;
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	895a      	ldrh	r2, [r3, #10]
 80118ac:	89bb      	ldrh	r3, [r7, #12]
 80118ae:	1ad3      	subs	r3, r2, r3
 80118b0:	b29a      	uxth	r2, r3
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80118b6:	693b      	ldr	r3, [r7, #16]
 80118b8:	89ba      	ldrh	r2, [r7, #12]
 80118ba:	811a      	strh	r2, [r3, #8]
 80118bc:	693b      	ldr	r3, [r7, #16]
 80118be:	891a      	ldrh	r2, [r3, #8]
 80118c0:	693b      	ldr	r3, [r7, #16]
 80118c2:	815a      	strh	r2, [r3, #10]
  return p;
 80118c4:	693b      	ldr	r3, [r7, #16]
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	3718      	adds	r7, #24
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}
 80118ce:	bf00      	nop
 80118d0:	0801bd80 	.word	0x0801bd80
 80118d4:	0801be38 	.word	0x0801be38
 80118d8:	0801bdd4 	.word	0x0801bdd4
 80118dc:	0801be5c 	.word	0x0801be5c
 80118e0:	0801be7c 	.word	0x0801be7c

080118e4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b082      	sub	sp, #8
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
 80118ec:	460b      	mov	r3, r1
 80118ee:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d106      	bne.n	8011904 <tcp_write_checks+0x20>
 80118f6:	4b33      	ldr	r3, [pc, #204]	; (80119c4 <tcp_write_checks+0xe0>)
 80118f8:	f240 1233 	movw	r2, #307	; 0x133
 80118fc:	4932      	ldr	r1, [pc, #200]	; (80119c8 <tcp_write_checks+0xe4>)
 80118fe:	4833      	ldr	r0, [pc, #204]	; (80119cc <tcp_write_checks+0xe8>)
 8011900:	f007 f856 	bl	80189b0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	7d1b      	ldrb	r3, [r3, #20]
 8011908:	2b04      	cmp	r3, #4
 801190a:	d00e      	beq.n	801192a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011910:	2b07      	cmp	r3, #7
 8011912:	d00a      	beq.n	801192a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011918:	2b02      	cmp	r3, #2
 801191a:	d006      	beq.n	801192a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011920:	2b03      	cmp	r3, #3
 8011922:	d002      	beq.n	801192a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011924:	f06f 030a 	mvn.w	r3, #10
 8011928:	e048      	b.n	80119bc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801192a:	887b      	ldrh	r3, [r7, #2]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d101      	bne.n	8011934 <tcp_write_checks+0x50>
    return ERR_OK;
 8011930:	2300      	movs	r3, #0
 8011932:	e043      	b.n	80119bc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801193a:	887a      	ldrh	r2, [r7, #2]
 801193c:	429a      	cmp	r2, r3
 801193e:	d909      	bls.n	8011954 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	8b5b      	ldrh	r3, [r3, #26]
 8011944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011948:	b29a      	uxth	r2, r3
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801194e:	f04f 33ff 	mov.w	r3, #4294967295
 8011952:	e033      	b.n	80119bc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801195a:	2b08      	cmp	r3, #8
 801195c:	d909      	bls.n	8011972 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	8b5b      	ldrh	r3, [r3, #26]
 8011962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011966:	b29a      	uxth	r2, r3
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801196c:	f04f 33ff 	mov.w	r3, #4294967295
 8011970:	e024      	b.n	80119bc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011978:	2b00      	cmp	r3, #0
 801197a:	d00f      	beq.n	801199c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011980:	2b00      	cmp	r3, #0
 8011982:	d11a      	bne.n	80119ba <tcp_write_checks+0xd6>
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011988:	2b00      	cmp	r3, #0
 801198a:	d116      	bne.n	80119ba <tcp_write_checks+0xd6>
 801198c:	4b0d      	ldr	r3, [pc, #52]	; (80119c4 <tcp_write_checks+0xe0>)
 801198e:	f240 1255 	movw	r2, #341	; 0x155
 8011992:	490f      	ldr	r1, [pc, #60]	; (80119d0 <tcp_write_checks+0xec>)
 8011994:	480d      	ldr	r0, [pc, #52]	; (80119cc <tcp_write_checks+0xe8>)
 8011996:	f007 f80b 	bl	80189b0 <iprintf>
 801199a:	e00e      	b.n	80119ba <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d103      	bne.n	80119ac <tcp_write_checks+0xc8>
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d006      	beq.n	80119ba <tcp_write_checks+0xd6>
 80119ac:	4b05      	ldr	r3, [pc, #20]	; (80119c4 <tcp_write_checks+0xe0>)
 80119ae:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80119b2:	4908      	ldr	r1, [pc, #32]	; (80119d4 <tcp_write_checks+0xf0>)
 80119b4:	4805      	ldr	r0, [pc, #20]	; (80119cc <tcp_write_checks+0xe8>)
 80119b6:	f006 fffb 	bl	80189b0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80119ba:	2300      	movs	r3, #0
}
 80119bc:	4618      	mov	r0, r3
 80119be:	3708      	adds	r7, #8
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}
 80119c4:	0801bd80 	.word	0x0801bd80
 80119c8:	0801be90 	.word	0x0801be90
 80119cc:	0801bdd4 	.word	0x0801bdd4
 80119d0:	0801beb0 	.word	0x0801beb0
 80119d4:	0801beec 	.word	0x0801beec

080119d8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80119d8:	b590      	push	{r4, r7, lr}
 80119da:	b09b      	sub	sp, #108	; 0x6c
 80119dc:	af04      	add	r7, sp, #16
 80119de:	60f8      	str	r0, [r7, #12]
 80119e0:	60b9      	str	r1, [r7, #8]
 80119e2:	4611      	mov	r1, r2
 80119e4:	461a      	mov	r2, r3
 80119e6:	460b      	mov	r3, r1
 80119e8:	80fb      	strh	r3, [r7, #6]
 80119ea:	4613      	mov	r3, r2
 80119ec:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80119ee:	2300      	movs	r3, #0
 80119f0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80119f2:	2300      	movs	r3, #0
 80119f4:	653b      	str	r3, [r7, #80]	; 0x50
 80119f6:	2300      	movs	r3, #0
 80119f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80119fa:	2300      	movs	r3, #0
 80119fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80119fe:	2300      	movs	r3, #0
 8011a00:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011a02:	2300      	movs	r3, #0
 8011a04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011a08:	2300      	movs	r3, #0
 8011a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011a0e:	2300      	movs	r3, #0
 8011a10:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011a12:	2300      	movs	r3, #0
 8011a14:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011a16:	2300      	movs	r3, #0
 8011a18:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d109      	bne.n	8011a34 <tcp_write+0x5c>
 8011a20:	4ba4      	ldr	r3, [pc, #656]	; (8011cb4 <tcp_write+0x2dc>)
 8011a22:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011a26:	49a4      	ldr	r1, [pc, #656]	; (8011cb8 <tcp_write+0x2e0>)
 8011a28:	48a4      	ldr	r0, [pc, #656]	; (8011cbc <tcp_write+0x2e4>)
 8011a2a:	f006 ffc1 	bl	80189b0 <iprintf>
 8011a2e:	f06f 030f 	mvn.w	r3, #15
 8011a32:	e32a      	b.n	801208a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011a3a:	085b      	lsrs	r3, r3, #1
 8011a3c:	b29a      	uxth	r2, r3
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a42:	4293      	cmp	r3, r2
 8011a44:	bf28      	it	cs
 8011a46:	4613      	movcs	r3, r2
 8011a48:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011a4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d102      	bne.n	8011a56 <tcp_write+0x7e>
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a54:	e000      	b.n	8011a58 <tcp_write+0x80>
 8011a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a58:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d109      	bne.n	8011a74 <tcp_write+0x9c>
 8011a60:	4b94      	ldr	r3, [pc, #592]	; (8011cb4 <tcp_write+0x2dc>)
 8011a62:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011a66:	4996      	ldr	r1, [pc, #600]	; (8011cc0 <tcp_write+0x2e8>)
 8011a68:	4894      	ldr	r0, [pc, #592]	; (8011cbc <tcp_write+0x2e4>)
 8011a6a:	f006 ffa1 	bl	80189b0 <iprintf>
 8011a6e:	f06f 030f 	mvn.w	r3, #15
 8011a72:	e30a      	b.n	801208a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011a74:	88fb      	ldrh	r3, [r7, #6]
 8011a76:	4619      	mov	r1, r3
 8011a78:	68f8      	ldr	r0, [r7, #12]
 8011a7a:	f7ff ff33 	bl	80118e4 <tcp_write_checks>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011a84:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d002      	beq.n	8011a92 <tcp_write+0xba>
    return err;
 8011a8c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011a90:	e2fb      	b.n	801208a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a98:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	f000 80f6 	beq.w	8011c98 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ab0:	653b      	str	r3, [r7, #80]	; 0x50
 8011ab2:	e002      	b.n	8011aba <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d1f8      	bne.n	8011ab4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ac4:	7a9b      	ldrb	r3, [r3, #10]
 8011ac6:	009b      	lsls	r3, r3, #2
 8011ac8:	b29b      	uxth	r3, r3
 8011aca:	f003 0304 	and.w	r3, r3, #4
 8011ace:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011ad0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ad4:	891b      	ldrh	r3, [r3, #8]
 8011ad6:	4619      	mov	r1, r3
 8011ad8:	8c3b      	ldrh	r3, [r7, #32]
 8011ada:	440b      	add	r3, r1
 8011adc:	429a      	cmp	r2, r3
 8011ade:	da06      	bge.n	8011aee <tcp_write+0x116>
 8011ae0:	4b74      	ldr	r3, [pc, #464]	; (8011cb4 <tcp_write+0x2dc>)
 8011ae2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011ae6:	4977      	ldr	r1, [pc, #476]	; (8011cc4 <tcp_write+0x2ec>)
 8011ae8:	4874      	ldr	r0, [pc, #464]	; (8011cbc <tcp_write+0x2e4>)
 8011aea:	f006 ff61 	bl	80189b0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011af0:	891a      	ldrh	r2, [r3, #8]
 8011af2:	8c3b      	ldrh	r3, [r7, #32]
 8011af4:	4413      	add	r3, r2
 8011af6:	b29b      	uxth	r3, r3
 8011af8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011afa:	1ad3      	subs	r3, r2, r3
 8011afc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011b04:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011b06:	8a7b      	ldrh	r3, [r7, #18]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d026      	beq.n	8011b5a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011b0c:	8a7b      	ldrh	r3, [r7, #18]
 8011b0e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011b10:	429a      	cmp	r2, r3
 8011b12:	d206      	bcs.n	8011b22 <tcp_write+0x14a>
 8011b14:	4b67      	ldr	r3, [pc, #412]	; (8011cb4 <tcp_write+0x2dc>)
 8011b16:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011b1a:	496b      	ldr	r1, [pc, #428]	; (8011cc8 <tcp_write+0x2f0>)
 8011b1c:	4867      	ldr	r0, [pc, #412]	; (8011cbc <tcp_write+0x2e4>)
 8011b1e:	f006 ff47 	bl	80189b0 <iprintf>
      seg = last_unsent;
 8011b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b24:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011b26:	8a7b      	ldrh	r3, [r7, #18]
 8011b28:	88fa      	ldrh	r2, [r7, #6]
 8011b2a:	4293      	cmp	r3, r2
 8011b2c:	bf28      	it	cs
 8011b2e:	4613      	movcs	r3, r2
 8011b30:	b29b      	uxth	r3, r3
 8011b32:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011b34:	4293      	cmp	r3, r2
 8011b36:	bf28      	it	cs
 8011b38:	4613      	movcs	r3, r2
 8011b3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011b3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011b42:	4413      	add	r3, r2
 8011b44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011b48:	8a7a      	ldrh	r2, [r7, #18]
 8011b4a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011b4c:	1ad3      	subs	r3, r2, r3
 8011b4e:	b29b      	uxth	r3, r3
 8011b50:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011b52:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011b54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011b56:	1ad3      	subs	r3, r2, r3
 8011b58:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011b5a:	8a7b      	ldrh	r3, [r7, #18]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d00b      	beq.n	8011b78 <tcp_write+0x1a0>
 8011b60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b64:	88fb      	ldrh	r3, [r7, #6]
 8011b66:	429a      	cmp	r2, r3
 8011b68:	d006      	beq.n	8011b78 <tcp_write+0x1a0>
 8011b6a:	4b52      	ldr	r3, [pc, #328]	; (8011cb4 <tcp_write+0x2dc>)
 8011b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b70:	4956      	ldr	r1, [pc, #344]	; (8011ccc <tcp_write+0x2f4>)
 8011b72:	4852      	ldr	r0, [pc, #328]	; (8011cbc <tcp_write+0x2e4>)
 8011b74:	f006 ff1c 	bl	80189b0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011b78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b7c:	88fb      	ldrh	r3, [r7, #6]
 8011b7e:	429a      	cmp	r2, r3
 8011b80:	f080 8167 	bcs.w	8011e52 <tcp_write+0x47a>
 8011b84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	f000 8163 	beq.w	8011e52 <tcp_write+0x47a>
 8011b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b8e:	891b      	ldrh	r3, [r3, #8]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	f000 815e 	beq.w	8011e52 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011b96:	88fa      	ldrh	r2, [r7, #6]
 8011b98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b9c:	1ad2      	subs	r2, r2, r3
 8011b9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011ba0:	4293      	cmp	r3, r2
 8011ba2:	bfa8      	it	ge
 8011ba4:	4613      	movge	r3, r2
 8011ba6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011baa:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011bac:	797b      	ldrb	r3, [r7, #5]
 8011bae:	f003 0301 	and.w	r3, r3, #1
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d027      	beq.n	8011c06 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011bb6:	f107 0012 	add.w	r0, r7, #18
 8011bba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011bbc:	8bf9      	ldrh	r1, [r7, #30]
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	9302      	str	r3, [sp, #8]
 8011bc2:	797b      	ldrb	r3, [r7, #5]
 8011bc4:	9301      	str	r3, [sp, #4]
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	9300      	str	r3, [sp, #0]
 8011bca:	4603      	mov	r3, r0
 8011bcc:	2000      	movs	r0, #0
 8011bce:	f7ff fe0f 	bl	80117f0 <tcp_pbuf_prealloc>
 8011bd2:	6578      	str	r0, [r7, #84]	; 0x54
 8011bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	f000 8225 	beq.w	8012026 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bde:	6858      	ldr	r0, [r3, #4]
 8011be0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011be4:	68ba      	ldr	r2, [r7, #8]
 8011be6:	4413      	add	r3, r2
 8011be8:	8bfa      	ldrh	r2, [r7, #30]
 8011bea:	4619      	mov	r1, r3
 8011bec:	f007 f82e 	bl	8018c4c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011bf0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011bf2:	f7fb f97f 	bl	800cef4 <pbuf_clen>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	461a      	mov	r2, r3
 8011bfa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011bfe:	4413      	add	r3, r2
 8011c00:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011c04:	e041      	b.n	8011c8a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c08:	685b      	ldr	r3, [r3, #4]
 8011c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8011c0c:	e002      	b.n	8011c14 <tcp_write+0x23c>
 8011c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	637b      	str	r3, [r7, #52]	; 0x34
 8011c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d1f8      	bne.n	8011c0e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c1e:	7b1b      	ldrb	r3, [r3, #12]
 8011c20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d115      	bne.n	8011c54 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c2a:	685b      	ldr	r3, [r3, #4]
 8011c2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c2e:	8952      	ldrh	r2, [r2, #10]
 8011c30:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011c32:	68ba      	ldr	r2, [r7, #8]
 8011c34:	429a      	cmp	r2, r3
 8011c36:	d10d      	bne.n	8011c54 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011c38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d006      	beq.n	8011c4e <tcp_write+0x276>
 8011c40:	4b1c      	ldr	r3, [pc, #112]	; (8011cb4 <tcp_write+0x2dc>)
 8011c42:	f240 2231 	movw	r2, #561	; 0x231
 8011c46:	4922      	ldr	r1, [pc, #136]	; (8011cd0 <tcp_write+0x2f8>)
 8011c48:	481c      	ldr	r0, [pc, #112]	; (8011cbc <tcp_write+0x2e4>)
 8011c4a:	f006 feb1 	bl	80189b0 <iprintf>
          extendlen = seglen;
 8011c4e:	8bfb      	ldrh	r3, [r7, #30]
 8011c50:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011c52:	e01a      	b.n	8011c8a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011c54:	8bfb      	ldrh	r3, [r7, #30]
 8011c56:	2201      	movs	r2, #1
 8011c58:	4619      	mov	r1, r3
 8011c5a:	2000      	movs	r0, #0
 8011c5c:	f7fa fdd8 	bl	800c810 <pbuf_alloc>
 8011c60:	6578      	str	r0, [r7, #84]	; 0x54
 8011c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	f000 81e0 	beq.w	801202a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011c6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c6e:	68ba      	ldr	r2, [r7, #8]
 8011c70:	441a      	add	r2, r3
 8011c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c74:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011c76:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011c78:	f7fb f93c 	bl	800cef4 <pbuf_clen>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	461a      	mov	r2, r3
 8011c80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011c84:	4413      	add	r3, r2
 8011c86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011c8a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011c8e:	8bfb      	ldrh	r3, [r7, #30]
 8011c90:	4413      	add	r3, r2
 8011c92:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011c96:	e0dc      	b.n	8011e52 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	f000 80d7 	beq.w	8011e52 <tcp_write+0x47a>
 8011ca4:	4b03      	ldr	r3, [pc, #12]	; (8011cb4 <tcp_write+0x2dc>)
 8011ca6:	f240 224a 	movw	r2, #586	; 0x24a
 8011caa:	490a      	ldr	r1, [pc, #40]	; (8011cd4 <tcp_write+0x2fc>)
 8011cac:	4803      	ldr	r0, [pc, #12]	; (8011cbc <tcp_write+0x2e4>)
 8011cae:	f006 fe7f 	bl	80189b0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011cb2:	e0ce      	b.n	8011e52 <tcp_write+0x47a>
 8011cb4:	0801bd80 	.word	0x0801bd80
 8011cb8:	0801bf20 	.word	0x0801bf20
 8011cbc:	0801bdd4 	.word	0x0801bdd4
 8011cc0:	0801bf38 	.word	0x0801bf38
 8011cc4:	0801bf6c 	.word	0x0801bf6c
 8011cc8:	0801bf84 	.word	0x0801bf84
 8011ccc:	0801bfa4 	.word	0x0801bfa4
 8011cd0:	0801bfc4 	.word	0x0801bfc4
 8011cd4:	0801bff0 	.word	0x0801bff0
    struct pbuf *p;
    u16_t left = len - pos;
 8011cd8:	88fa      	ldrh	r2, [r7, #6]
 8011cda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011cde:	1ad3      	subs	r3, r2, r3
 8011ce0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011ce2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011ce6:	b29b      	uxth	r3, r3
 8011ce8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011cea:	1ad3      	subs	r3, r2, r3
 8011cec:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011cee:	8b7a      	ldrh	r2, [r7, #26]
 8011cf0:	8bbb      	ldrh	r3, [r7, #28]
 8011cf2:	4293      	cmp	r3, r2
 8011cf4:	bf28      	it	cs
 8011cf6:	4613      	movcs	r3, r2
 8011cf8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011cfa:	797b      	ldrb	r3, [r7, #5]
 8011cfc:	f003 0301 	and.w	r3, r3, #1
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d036      	beq.n	8011d72 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011d04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011d08:	b29a      	uxth	r2, r3
 8011d0a:	8b3b      	ldrh	r3, [r7, #24]
 8011d0c:	4413      	add	r3, r2
 8011d0e:	b299      	uxth	r1, r3
 8011d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	bf0c      	ite	eq
 8011d16:	2301      	moveq	r3, #1
 8011d18:	2300      	movne	r3, #0
 8011d1a:	b2db      	uxtb	r3, r3
 8011d1c:	f107 0012 	add.w	r0, r7, #18
 8011d20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011d22:	9302      	str	r3, [sp, #8]
 8011d24:	797b      	ldrb	r3, [r7, #5]
 8011d26:	9301      	str	r3, [sp, #4]
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	9300      	str	r3, [sp, #0]
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	2036      	movs	r0, #54	; 0x36
 8011d30:	f7ff fd5e 	bl	80117f0 <tcp_pbuf_prealloc>
 8011d34:	6338      	str	r0, [r7, #48]	; 0x30
 8011d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	f000 8178 	beq.w	801202e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d40:	895b      	ldrh	r3, [r3, #10]
 8011d42:	8b3a      	ldrh	r2, [r7, #24]
 8011d44:	429a      	cmp	r2, r3
 8011d46:	d906      	bls.n	8011d56 <tcp_write+0x37e>
 8011d48:	4b8c      	ldr	r3, [pc, #560]	; (8011f7c <tcp_write+0x5a4>)
 8011d4a:	f240 2266 	movw	r2, #614	; 0x266
 8011d4e:	498c      	ldr	r1, [pc, #560]	; (8011f80 <tcp_write+0x5a8>)
 8011d50:	488c      	ldr	r0, [pc, #560]	; (8011f84 <tcp_write+0x5ac>)
 8011d52:	f006 fe2d 	bl	80189b0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d58:	685a      	ldr	r2, [r3, #4]
 8011d5a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011d5e:	18d0      	adds	r0, r2, r3
 8011d60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d64:	68ba      	ldr	r2, [r7, #8]
 8011d66:	4413      	add	r3, r2
 8011d68:	8b3a      	ldrh	r2, [r7, #24]
 8011d6a:	4619      	mov	r1, r3
 8011d6c:	f006 ff6e 	bl	8018c4c <memcpy>
 8011d70:	e02f      	b.n	8011dd2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011d72:	8a7b      	ldrh	r3, [r7, #18]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d006      	beq.n	8011d86 <tcp_write+0x3ae>
 8011d78:	4b80      	ldr	r3, [pc, #512]	; (8011f7c <tcp_write+0x5a4>)
 8011d7a:	f240 2271 	movw	r2, #625	; 0x271
 8011d7e:	4982      	ldr	r1, [pc, #520]	; (8011f88 <tcp_write+0x5b0>)
 8011d80:	4880      	ldr	r0, [pc, #512]	; (8011f84 <tcp_write+0x5ac>)
 8011d82:	f006 fe15 	bl	80189b0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011d86:	8b3b      	ldrh	r3, [r7, #24]
 8011d88:	2201      	movs	r2, #1
 8011d8a:	4619      	mov	r1, r3
 8011d8c:	2036      	movs	r0, #54	; 0x36
 8011d8e:	f7fa fd3f 	bl	800c810 <pbuf_alloc>
 8011d92:	6178      	str	r0, [r7, #20]
 8011d94:	697b      	ldr	r3, [r7, #20]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	f000 814b 	beq.w	8012032 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011d9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011da0:	68ba      	ldr	r2, [r7, #8]
 8011da2:	441a      	add	r2, r3
 8011da4:	697b      	ldr	r3, [r7, #20]
 8011da6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011da8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011dac:	b29b      	uxth	r3, r3
 8011dae:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011db2:	4619      	mov	r1, r3
 8011db4:	2036      	movs	r0, #54	; 0x36
 8011db6:	f7fa fd2b 	bl	800c810 <pbuf_alloc>
 8011dba:	6338      	str	r0, [r7, #48]	; 0x30
 8011dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d103      	bne.n	8011dca <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011dc2:	6978      	ldr	r0, [r7, #20]
 8011dc4:	f7fb f808 	bl	800cdd8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011dc8:	e136      	b.n	8012038 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011dca:	6979      	ldr	r1, [r7, #20]
 8011dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011dce:	f7fb f8d1 	bl	800cf74 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011dd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011dd4:	f7fb f88e 	bl	800cef4 <pbuf_clen>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	461a      	mov	r2, r3
 8011ddc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011de0:	4413      	add	r3, r2
 8011de2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011de6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011dea:	2b09      	cmp	r3, #9
 8011dec:	d903      	bls.n	8011df6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011dee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011df0:	f7fa fff2 	bl	800cdd8 <pbuf_free>
      goto memerr;
 8011df4:	e120      	b.n	8012038 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011dfa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011dfe:	441a      	add	r2, r3
 8011e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e04:	9300      	str	r3, [sp, #0]
 8011e06:	4613      	mov	r3, r2
 8011e08:	2200      	movs	r2, #0
 8011e0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011e0c:	68f8      	ldr	r0, [r7, #12]
 8011e0e:	f7ff fc51 	bl	80116b4 <tcp_create_segment>
 8011e12:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	f000 810d 	beq.w	8012036 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d102      	bne.n	8011e28 <tcp_write+0x450>
      queue = seg;
 8011e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e24:	647b      	str	r3, [r7, #68]	; 0x44
 8011e26:	e00c      	b.n	8011e42 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d106      	bne.n	8011e3c <tcp_write+0x464>
 8011e2e:	4b53      	ldr	r3, [pc, #332]	; (8011f7c <tcp_write+0x5a4>)
 8011e30:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011e34:	4955      	ldr	r1, [pc, #340]	; (8011f8c <tcp_write+0x5b4>)
 8011e36:	4853      	ldr	r0, [pc, #332]	; (8011f84 <tcp_write+0x5ac>)
 8011e38:	f006 fdba 	bl	80189b0 <iprintf>
      prev_seg->next = seg;
 8011e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011e40:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e44:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011e46:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011e4a:	8b3b      	ldrh	r3, [r7, #24]
 8011e4c:	4413      	add	r3, r2
 8011e4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011e52:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011e56:	88fb      	ldrh	r3, [r7, #6]
 8011e58:	429a      	cmp	r2, r3
 8011e5a:	f4ff af3d 	bcc.w	8011cd8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011e5e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d02c      	beq.n	8011ebe <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e66:	685b      	ldr	r3, [r3, #4]
 8011e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011e6a:	e01e      	b.n	8011eaa <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e6e:	891a      	ldrh	r2, [r3, #8]
 8011e70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011e72:	4413      	add	r3, r2
 8011e74:	b29a      	uxth	r2, r3
 8011e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e78:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d110      	bne.n	8011ea4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e84:	685b      	ldr	r3, [r3, #4]
 8011e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e88:	8952      	ldrh	r2, [r2, #10]
 8011e8a:	4413      	add	r3, r2
 8011e8c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011e8e:	68b9      	ldr	r1, [r7, #8]
 8011e90:	4618      	mov	r0, r3
 8011e92:	f006 fedb 	bl	8018c4c <memcpy>
        p->len += oversize_used;
 8011e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e98:	895a      	ldrh	r2, [r3, #10]
 8011e9a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011e9c:	4413      	add	r3, r2
 8011e9e:	b29a      	uxth	r2, r3
 8011ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d1dd      	bne.n	8011e6c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011eb2:	891a      	ldrh	r2, [r3, #8]
 8011eb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011eb6:	4413      	add	r3, r2
 8011eb8:	b29a      	uxth	r2, r3
 8011eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ebc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011ebe:	8a7a      	ldrh	r2, [r7, #18]
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d018      	beq.n	8011efe <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d106      	bne.n	8011ee0 <tcp_write+0x508>
 8011ed2:	4b2a      	ldr	r3, [pc, #168]	; (8011f7c <tcp_write+0x5a4>)
 8011ed4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8011ed8:	492d      	ldr	r1, [pc, #180]	; (8011f90 <tcp_write+0x5b8>)
 8011eda:	482a      	ldr	r0, [pc, #168]	; (8011f84 <tcp_write+0x5ac>)
 8011edc:	f006 fd68 	bl	80189b0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7fb f844 	bl	800cf74 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011eee:	891a      	ldrh	r2, [r3, #8]
 8011ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ef2:	891b      	ldrh	r3, [r3, #8]
 8011ef4:	4413      	add	r3, r2
 8011ef6:	b29a      	uxth	r2, r3
 8011ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011efa:	811a      	strh	r2, [r3, #8]
 8011efc:	e037      	b.n	8011f6e <tcp_write+0x596>
  } else if (extendlen > 0) {
 8011efe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d034      	beq.n	8011f6e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d003      	beq.n	8011f12 <tcp_write+0x53a>
 8011f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f0c:	685b      	ldr	r3, [r3, #4]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d106      	bne.n	8011f20 <tcp_write+0x548>
 8011f12:	4b1a      	ldr	r3, [pc, #104]	; (8011f7c <tcp_write+0x5a4>)
 8011f14:	f240 22e6 	movw	r2, #742	; 0x2e6
 8011f18:	491e      	ldr	r1, [pc, #120]	; (8011f94 <tcp_write+0x5bc>)
 8011f1a:	481a      	ldr	r0, [pc, #104]	; (8011f84 <tcp_write+0x5ac>)
 8011f1c:	f006 fd48 	bl	80189b0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f22:	685b      	ldr	r3, [r3, #4]
 8011f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f26:	e009      	b.n	8011f3c <tcp_write+0x564>
      p->tot_len += extendlen;
 8011f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f2a:	891a      	ldrh	r2, [r3, #8]
 8011f2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011f2e:	4413      	add	r3, r2
 8011f30:	b29a      	uxth	r2, r3
 8011f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f34:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d1f1      	bne.n	8011f28 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f46:	891a      	ldrh	r2, [r3, #8]
 8011f48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011f4a:	4413      	add	r3, r2
 8011f4c:	b29a      	uxth	r2, r3
 8011f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f50:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f54:	895a      	ldrh	r2, [r3, #10]
 8011f56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011f58:	4413      	add	r3, r2
 8011f5a:	b29a      	uxth	r2, r3
 8011f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f5e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f62:	891a      	ldrh	r2, [r3, #8]
 8011f64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011f66:	4413      	add	r3, r2
 8011f68:	b29a      	uxth	r2, r3
 8011f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f6c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d111      	bne.n	8011f98 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011f78:	66da      	str	r2, [r3, #108]	; 0x6c
 8011f7a:	e010      	b.n	8011f9e <tcp_write+0x5c6>
 8011f7c:	0801bd80 	.word	0x0801bd80
 8011f80:	0801c020 	.word	0x0801c020
 8011f84:	0801bdd4 	.word	0x0801bdd4
 8011f88:	0801c060 	.word	0x0801c060
 8011f8c:	0801c070 	.word	0x0801c070
 8011f90:	0801c084 	.word	0x0801c084
 8011f94:	0801c0bc 	.word	0x0801c0bc
  } else {
    last_unsent->next = queue;
 8011f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011f9c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011fa2:	88fb      	ldrh	r3, [r7, #6]
 8011fa4:	441a      	add	r2, r3
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011fb0:	88fb      	ldrh	r3, [r7, #6]
 8011fb2:	1ad3      	subs	r3, r2, r3
 8011fb4:	b29a      	uxth	r2, r3
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011fc2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d00e      	beq.n	8011fee <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d10a      	bne.n	8011fee <tcp_write+0x616>
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d106      	bne.n	8011fee <tcp_write+0x616>
 8011fe0:	4b2c      	ldr	r3, [pc, #176]	; (8012094 <tcp_write+0x6bc>)
 8011fe2:	f240 3212 	movw	r2, #786	; 0x312
 8011fe6:	492c      	ldr	r1, [pc, #176]	; (8012098 <tcp_write+0x6c0>)
 8011fe8:	482c      	ldr	r0, [pc, #176]	; (801209c <tcp_write+0x6c4>)
 8011fea:	f006 fce1 	bl	80189b0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d016      	beq.n	8012022 <tcp_write+0x64a>
 8011ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ff6:	68db      	ldr	r3, [r3, #12]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d012      	beq.n	8012022 <tcp_write+0x64a>
 8011ffc:	797b      	ldrb	r3, [r7, #5]
 8011ffe:	f003 0302 	and.w	r3, r3, #2
 8012002:	2b00      	cmp	r3, #0
 8012004:	d10d      	bne.n	8012022 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012008:	68db      	ldr	r3, [r3, #12]
 801200a:	899b      	ldrh	r3, [r3, #12]
 801200c:	b29c      	uxth	r4, r3
 801200e:	2008      	movs	r0, #8
 8012010:	f7f9 faae 	bl	800b570 <lwip_htons>
 8012014:	4603      	mov	r3, r0
 8012016:	461a      	mov	r2, r3
 8012018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801201a:	68db      	ldr	r3, [r3, #12]
 801201c:	4322      	orrs	r2, r4
 801201e:	b292      	uxth	r2, r2
 8012020:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012022:	2300      	movs	r3, #0
 8012024:	e031      	b.n	801208a <tcp_write+0x6b2>
          goto memerr;
 8012026:	bf00      	nop
 8012028:	e006      	b.n	8012038 <tcp_write+0x660>
            goto memerr;
 801202a:	bf00      	nop
 801202c:	e004      	b.n	8012038 <tcp_write+0x660>
        goto memerr;
 801202e:	bf00      	nop
 8012030:	e002      	b.n	8012038 <tcp_write+0x660>
        goto memerr;
 8012032:	bf00      	nop
 8012034:	e000      	b.n	8012038 <tcp_write+0x660>
      goto memerr;
 8012036:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	8b5b      	ldrh	r3, [r3, #26]
 801203c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012040:	b29a      	uxth	r2, r3
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012048:	2b00      	cmp	r3, #0
 801204a:	d002      	beq.n	8012052 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801204c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801204e:	f7fa fec3 	bl	800cdd8 <pbuf_free>
  }
  if (queue != NULL) {
 8012052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012054:	2b00      	cmp	r3, #0
 8012056:	d002      	beq.n	801205e <tcp_write+0x686>
    tcp_segs_free(queue);
 8012058:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801205a:	f7fc fb4d 	bl	800e6f8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012064:	2b00      	cmp	r3, #0
 8012066:	d00e      	beq.n	8012086 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801206c:	2b00      	cmp	r3, #0
 801206e:	d10a      	bne.n	8012086 <tcp_write+0x6ae>
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012074:	2b00      	cmp	r3, #0
 8012076:	d106      	bne.n	8012086 <tcp_write+0x6ae>
 8012078:	4b06      	ldr	r3, [pc, #24]	; (8012094 <tcp_write+0x6bc>)
 801207a:	f240 3227 	movw	r2, #807	; 0x327
 801207e:	4906      	ldr	r1, [pc, #24]	; (8012098 <tcp_write+0x6c0>)
 8012080:	4806      	ldr	r0, [pc, #24]	; (801209c <tcp_write+0x6c4>)
 8012082:	f006 fc95 	bl	80189b0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012086:	f04f 33ff 	mov.w	r3, #4294967295
}
 801208a:	4618      	mov	r0, r3
 801208c:	375c      	adds	r7, #92	; 0x5c
 801208e:	46bd      	mov	sp, r7
 8012090:	bd90      	pop	{r4, r7, pc}
 8012092:	bf00      	nop
 8012094:	0801bd80 	.word	0x0801bd80
 8012098:	0801c0f4 	.word	0x0801c0f4
 801209c:	0801bdd4 	.word	0x0801bdd4

080120a0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80120a0:	b590      	push	{r4, r7, lr}
 80120a2:	b08b      	sub	sp, #44	; 0x2c
 80120a4:	af02      	add	r7, sp, #8
 80120a6:	6078      	str	r0, [r7, #4]
 80120a8:	460b      	mov	r3, r1
 80120aa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80120ac:	2300      	movs	r3, #0
 80120ae:	61fb      	str	r3, [r7, #28]
 80120b0:	2300      	movs	r3, #0
 80120b2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80120b4:	2300      	movs	r3, #0
 80120b6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d106      	bne.n	80120cc <tcp_split_unsent_seg+0x2c>
 80120be:	4b95      	ldr	r3, [pc, #596]	; (8012314 <tcp_split_unsent_seg+0x274>)
 80120c0:	f240 324b 	movw	r2, #843	; 0x34b
 80120c4:	4994      	ldr	r1, [pc, #592]	; (8012318 <tcp_split_unsent_seg+0x278>)
 80120c6:	4895      	ldr	r0, [pc, #596]	; (801231c <tcp_split_unsent_seg+0x27c>)
 80120c8:	f006 fc72 	bl	80189b0 <iprintf>

  useg = pcb->unsent;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120d0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d102      	bne.n	80120de <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80120d8:	f04f 33ff 	mov.w	r3, #4294967295
 80120dc:	e116      	b.n	801230c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80120de:	887b      	ldrh	r3, [r7, #2]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d109      	bne.n	80120f8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80120e4:	4b8b      	ldr	r3, [pc, #556]	; (8012314 <tcp_split_unsent_seg+0x274>)
 80120e6:	f240 3253 	movw	r2, #851	; 0x353
 80120ea:	498d      	ldr	r1, [pc, #564]	; (8012320 <tcp_split_unsent_seg+0x280>)
 80120ec:	488b      	ldr	r0, [pc, #556]	; (801231c <tcp_split_unsent_seg+0x27c>)
 80120ee:	f006 fc5f 	bl	80189b0 <iprintf>
    return ERR_VAL;
 80120f2:	f06f 0305 	mvn.w	r3, #5
 80120f6:	e109      	b.n	801230c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	891b      	ldrh	r3, [r3, #8]
 80120fc:	887a      	ldrh	r2, [r7, #2]
 80120fe:	429a      	cmp	r2, r3
 8012100:	d301      	bcc.n	8012106 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012102:	2300      	movs	r3, #0
 8012104:	e102      	b.n	801230c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801210a:	887a      	ldrh	r2, [r7, #2]
 801210c:	429a      	cmp	r2, r3
 801210e:	d906      	bls.n	801211e <tcp_split_unsent_seg+0x7e>
 8012110:	4b80      	ldr	r3, [pc, #512]	; (8012314 <tcp_split_unsent_seg+0x274>)
 8012112:	f240 325b 	movw	r2, #859	; 0x35b
 8012116:	4983      	ldr	r1, [pc, #524]	; (8012324 <tcp_split_unsent_seg+0x284>)
 8012118:	4880      	ldr	r0, [pc, #512]	; (801231c <tcp_split_unsent_seg+0x27c>)
 801211a:	f006 fc49 	bl	80189b0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801211e:	697b      	ldr	r3, [r7, #20]
 8012120:	891b      	ldrh	r3, [r3, #8]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d106      	bne.n	8012134 <tcp_split_unsent_seg+0x94>
 8012126:	4b7b      	ldr	r3, [pc, #492]	; (8012314 <tcp_split_unsent_seg+0x274>)
 8012128:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801212c:	497e      	ldr	r1, [pc, #504]	; (8012328 <tcp_split_unsent_seg+0x288>)
 801212e:	487b      	ldr	r0, [pc, #492]	; (801231c <tcp_split_unsent_seg+0x27c>)
 8012130:	f006 fc3e 	bl	80189b0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012134:	697b      	ldr	r3, [r7, #20]
 8012136:	7a9b      	ldrb	r3, [r3, #10]
 8012138:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801213a:	7bfb      	ldrb	r3, [r7, #15]
 801213c:	009b      	lsls	r3, r3, #2
 801213e:	b2db      	uxtb	r3, r3
 8012140:	f003 0304 	and.w	r3, r3, #4
 8012144:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012146:	697b      	ldr	r3, [r7, #20]
 8012148:	891a      	ldrh	r2, [r3, #8]
 801214a:	887b      	ldrh	r3, [r7, #2]
 801214c:	1ad3      	subs	r3, r2, r3
 801214e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012150:	7bbb      	ldrb	r3, [r7, #14]
 8012152:	b29a      	uxth	r2, r3
 8012154:	89bb      	ldrh	r3, [r7, #12]
 8012156:	4413      	add	r3, r2
 8012158:	b29b      	uxth	r3, r3
 801215a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801215e:	4619      	mov	r1, r3
 8012160:	2036      	movs	r0, #54	; 0x36
 8012162:	f7fa fb55 	bl	800c810 <pbuf_alloc>
 8012166:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	2b00      	cmp	r3, #0
 801216c:	f000 80b7 	beq.w	80122de <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012170:	697b      	ldr	r3, [r7, #20]
 8012172:	685b      	ldr	r3, [r3, #4]
 8012174:	891a      	ldrh	r2, [r3, #8]
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	891b      	ldrh	r3, [r3, #8]
 801217a:	1ad3      	subs	r3, r2, r3
 801217c:	b29a      	uxth	r2, r3
 801217e:	887b      	ldrh	r3, [r7, #2]
 8012180:	4413      	add	r3, r2
 8012182:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012184:	697b      	ldr	r3, [r7, #20]
 8012186:	6858      	ldr	r0, [r3, #4]
 8012188:	693b      	ldr	r3, [r7, #16]
 801218a:	685a      	ldr	r2, [r3, #4]
 801218c:	7bbb      	ldrb	r3, [r7, #14]
 801218e:	18d1      	adds	r1, r2, r3
 8012190:	897b      	ldrh	r3, [r7, #10]
 8012192:	89ba      	ldrh	r2, [r7, #12]
 8012194:	f7fb f826 	bl	800d1e4 <pbuf_copy_partial>
 8012198:	4603      	mov	r3, r0
 801219a:	461a      	mov	r2, r3
 801219c:	89bb      	ldrh	r3, [r7, #12]
 801219e:	4293      	cmp	r3, r2
 80121a0:	f040 809f 	bne.w	80122e2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	68db      	ldr	r3, [r3, #12]
 80121a8:	899b      	ldrh	r3, [r3, #12]
 80121aa:	b29b      	uxth	r3, r3
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7f9 f9df 	bl	800b570 <lwip_htons>
 80121b2:	4603      	mov	r3, r0
 80121b4:	b2db      	uxtb	r3, r3
 80121b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80121ba:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80121bc:	2300      	movs	r3, #0
 80121be:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80121c0:	7efb      	ldrb	r3, [r7, #27]
 80121c2:	f003 0308 	and.w	r3, r3, #8
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d007      	beq.n	80121da <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80121ca:	7efb      	ldrb	r3, [r7, #27]
 80121cc:	f023 0308 	bic.w	r3, r3, #8
 80121d0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80121d2:	7ebb      	ldrb	r3, [r7, #26]
 80121d4:	f043 0308 	orr.w	r3, r3, #8
 80121d8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80121da:	7efb      	ldrb	r3, [r7, #27]
 80121dc:	f003 0301 	and.w	r3, r3, #1
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d007      	beq.n	80121f4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80121e4:	7efb      	ldrb	r3, [r7, #27]
 80121e6:	f023 0301 	bic.w	r3, r3, #1
 80121ea:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80121ec:	7ebb      	ldrb	r3, [r7, #26]
 80121ee:	f043 0301 	orr.w	r3, r3, #1
 80121f2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	68db      	ldr	r3, [r3, #12]
 80121f8:	685b      	ldr	r3, [r3, #4]
 80121fa:	4618      	mov	r0, r3
 80121fc:	f7f9 f9cd 	bl	800b59a <lwip_htonl>
 8012200:	4602      	mov	r2, r0
 8012202:	887b      	ldrh	r3, [r7, #2]
 8012204:	18d1      	adds	r1, r2, r3
 8012206:	7eba      	ldrb	r2, [r7, #26]
 8012208:	7bfb      	ldrb	r3, [r7, #15]
 801220a:	9300      	str	r3, [sp, #0]
 801220c:	460b      	mov	r3, r1
 801220e:	6939      	ldr	r1, [r7, #16]
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f7ff fa4f 	bl	80116b4 <tcp_create_segment>
 8012216:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012218:	69fb      	ldr	r3, [r7, #28]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d063      	beq.n	80122e6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801221e:	697b      	ldr	r3, [r7, #20]
 8012220:	685b      	ldr	r3, [r3, #4]
 8012222:	4618      	mov	r0, r3
 8012224:	f7fa fe66 	bl	800cef4 <pbuf_clen>
 8012228:	4603      	mov	r3, r0
 801222a:	461a      	mov	r2, r3
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012232:	1a9b      	subs	r3, r3, r2
 8012234:	b29a      	uxth	r2, r3
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801223c:	697b      	ldr	r3, [r7, #20]
 801223e:	6858      	ldr	r0, [r3, #4]
 8012240:	697b      	ldr	r3, [r7, #20]
 8012242:	685b      	ldr	r3, [r3, #4]
 8012244:	891a      	ldrh	r2, [r3, #8]
 8012246:	89bb      	ldrh	r3, [r7, #12]
 8012248:	1ad3      	subs	r3, r2, r3
 801224a:	b29b      	uxth	r3, r3
 801224c:	4619      	mov	r1, r3
 801224e:	f7fa fc3d 	bl	800cacc <pbuf_realloc>
  useg->len -= remainder;
 8012252:	697b      	ldr	r3, [r7, #20]
 8012254:	891a      	ldrh	r2, [r3, #8]
 8012256:	89bb      	ldrh	r3, [r7, #12]
 8012258:	1ad3      	subs	r3, r2, r3
 801225a:	b29a      	uxth	r2, r3
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012260:	697b      	ldr	r3, [r7, #20]
 8012262:	68db      	ldr	r3, [r3, #12]
 8012264:	899b      	ldrh	r3, [r3, #12]
 8012266:	b29c      	uxth	r4, r3
 8012268:	7efb      	ldrb	r3, [r7, #27]
 801226a:	b29b      	uxth	r3, r3
 801226c:	4618      	mov	r0, r3
 801226e:	f7f9 f97f 	bl	800b570 <lwip_htons>
 8012272:	4603      	mov	r3, r0
 8012274:	461a      	mov	r2, r3
 8012276:	697b      	ldr	r3, [r7, #20]
 8012278:	68db      	ldr	r3, [r3, #12]
 801227a:	4322      	orrs	r2, r4
 801227c:	b292      	uxth	r2, r2
 801227e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012280:	697b      	ldr	r3, [r7, #20]
 8012282:	685b      	ldr	r3, [r3, #4]
 8012284:	4618      	mov	r0, r3
 8012286:	f7fa fe35 	bl	800cef4 <pbuf_clen>
 801228a:	4603      	mov	r3, r0
 801228c:	461a      	mov	r2, r3
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012294:	4413      	add	r3, r2
 8012296:	b29a      	uxth	r2, r3
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801229e:	69fb      	ldr	r3, [r7, #28]
 80122a0:	685b      	ldr	r3, [r3, #4]
 80122a2:	4618      	mov	r0, r3
 80122a4:	f7fa fe26 	bl	800cef4 <pbuf_clen>
 80122a8:	4603      	mov	r3, r0
 80122aa:	461a      	mov	r2, r3
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80122b2:	4413      	add	r3, r2
 80122b4:	b29a      	uxth	r2, r3
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	681a      	ldr	r2, [r3, #0]
 80122c0:	69fb      	ldr	r3, [r7, #28]
 80122c2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80122c4:	697b      	ldr	r3, [r7, #20]
 80122c6:	69fa      	ldr	r2, [r7, #28]
 80122c8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80122ca:	69fb      	ldr	r3, [r7, #28]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d103      	bne.n	80122da <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	2200      	movs	r2, #0
 80122d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80122da:	2300      	movs	r3, #0
 80122dc:	e016      	b.n	801230c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80122de:	bf00      	nop
 80122e0:	e002      	b.n	80122e8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80122e2:	bf00      	nop
 80122e4:	e000      	b.n	80122e8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80122e6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80122e8:	69fb      	ldr	r3, [r7, #28]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d006      	beq.n	80122fc <tcp_split_unsent_seg+0x25c>
 80122ee:	4b09      	ldr	r3, [pc, #36]	; (8012314 <tcp_split_unsent_seg+0x274>)
 80122f0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80122f4:	490d      	ldr	r1, [pc, #52]	; (801232c <tcp_split_unsent_seg+0x28c>)
 80122f6:	4809      	ldr	r0, [pc, #36]	; (801231c <tcp_split_unsent_seg+0x27c>)
 80122f8:	f006 fb5a 	bl	80189b0 <iprintf>
  if (p != NULL) {
 80122fc:	693b      	ldr	r3, [r7, #16]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d002      	beq.n	8012308 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012302:	6938      	ldr	r0, [r7, #16]
 8012304:	f7fa fd68 	bl	800cdd8 <pbuf_free>
  }

  return ERR_MEM;
 8012308:	f04f 33ff 	mov.w	r3, #4294967295
}
 801230c:	4618      	mov	r0, r3
 801230e:	3724      	adds	r7, #36	; 0x24
 8012310:	46bd      	mov	sp, r7
 8012312:	bd90      	pop	{r4, r7, pc}
 8012314:	0801bd80 	.word	0x0801bd80
 8012318:	0801c114 	.word	0x0801c114
 801231c:	0801bdd4 	.word	0x0801bdd4
 8012320:	0801c138 	.word	0x0801c138
 8012324:	0801c15c 	.word	0x0801c15c
 8012328:	0801c16c 	.word	0x0801c16c
 801232c:	0801c17c 	.word	0x0801c17c

08012330 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012330:	b590      	push	{r4, r7, lr}
 8012332:	b085      	sub	sp, #20
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d106      	bne.n	801234c <tcp_send_fin+0x1c>
 801233e:	4b21      	ldr	r3, [pc, #132]	; (80123c4 <tcp_send_fin+0x94>)
 8012340:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012344:	4920      	ldr	r1, [pc, #128]	; (80123c8 <tcp_send_fin+0x98>)
 8012346:	4821      	ldr	r0, [pc, #132]	; (80123cc <tcp_send_fin+0x9c>)
 8012348:	f006 fb32 	bl	80189b0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012350:	2b00      	cmp	r3, #0
 8012352:	d02e      	beq.n	80123b2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012358:	60fb      	str	r3, [r7, #12]
 801235a:	e002      	b.n	8012362 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d1f8      	bne.n	801235c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	68db      	ldr	r3, [r3, #12]
 801236e:	899b      	ldrh	r3, [r3, #12]
 8012370:	b29b      	uxth	r3, r3
 8012372:	4618      	mov	r0, r3
 8012374:	f7f9 f8fc 	bl	800b570 <lwip_htons>
 8012378:	4603      	mov	r3, r0
 801237a:	b2db      	uxtb	r3, r3
 801237c:	f003 0307 	and.w	r3, r3, #7
 8012380:	2b00      	cmp	r3, #0
 8012382:	d116      	bne.n	80123b2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	68db      	ldr	r3, [r3, #12]
 8012388:	899b      	ldrh	r3, [r3, #12]
 801238a:	b29c      	uxth	r4, r3
 801238c:	2001      	movs	r0, #1
 801238e:	f7f9 f8ef 	bl	800b570 <lwip_htons>
 8012392:	4603      	mov	r3, r0
 8012394:	461a      	mov	r2, r3
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	68db      	ldr	r3, [r3, #12]
 801239a:	4322      	orrs	r2, r4
 801239c:	b292      	uxth	r2, r2
 801239e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	8b5b      	ldrh	r3, [r3, #26]
 80123a4:	f043 0320 	orr.w	r3, r3, #32
 80123a8:	b29a      	uxth	r2, r3
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80123ae:	2300      	movs	r3, #0
 80123b0:	e004      	b.n	80123bc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80123b2:	2101      	movs	r1, #1
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	f000 f80b 	bl	80123d0 <tcp_enqueue_flags>
 80123ba:	4603      	mov	r3, r0
}
 80123bc:	4618      	mov	r0, r3
 80123be:	3714      	adds	r7, #20
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bd90      	pop	{r4, r7, pc}
 80123c4:	0801bd80 	.word	0x0801bd80
 80123c8:	0801c188 	.word	0x0801c188
 80123cc:	0801bdd4 	.word	0x0801bdd4

080123d0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b08a      	sub	sp, #40	; 0x28
 80123d4:	af02      	add	r7, sp, #8
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	460b      	mov	r3, r1
 80123da:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80123dc:	2300      	movs	r3, #0
 80123de:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80123e0:	2300      	movs	r3, #0
 80123e2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80123e4:	78fb      	ldrb	r3, [r7, #3]
 80123e6:	f003 0303 	and.w	r3, r3, #3
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d106      	bne.n	80123fc <tcp_enqueue_flags+0x2c>
 80123ee:	4b67      	ldr	r3, [pc, #412]	; (801258c <tcp_enqueue_flags+0x1bc>)
 80123f0:	f240 4211 	movw	r2, #1041	; 0x411
 80123f4:	4966      	ldr	r1, [pc, #408]	; (8012590 <tcp_enqueue_flags+0x1c0>)
 80123f6:	4867      	ldr	r0, [pc, #412]	; (8012594 <tcp_enqueue_flags+0x1c4>)
 80123f8:	f006 fada 	bl	80189b0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d106      	bne.n	8012410 <tcp_enqueue_flags+0x40>
 8012402:	4b62      	ldr	r3, [pc, #392]	; (801258c <tcp_enqueue_flags+0x1bc>)
 8012404:	f240 4213 	movw	r2, #1043	; 0x413
 8012408:	4963      	ldr	r1, [pc, #396]	; (8012598 <tcp_enqueue_flags+0x1c8>)
 801240a:	4862      	ldr	r0, [pc, #392]	; (8012594 <tcp_enqueue_flags+0x1c4>)
 801240c:	f006 fad0 	bl	80189b0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012410:	78fb      	ldrb	r3, [r7, #3]
 8012412:	f003 0302 	and.w	r3, r3, #2
 8012416:	2b00      	cmp	r3, #0
 8012418:	d001      	beq.n	801241e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801241a:	2301      	movs	r3, #1
 801241c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801241e:	7ffb      	ldrb	r3, [r7, #31]
 8012420:	009b      	lsls	r3, r3, #2
 8012422:	b2db      	uxtb	r3, r3
 8012424:	f003 0304 	and.w	r3, r3, #4
 8012428:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801242a:	7dfb      	ldrb	r3, [r7, #23]
 801242c:	b29b      	uxth	r3, r3
 801242e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012432:	4619      	mov	r1, r3
 8012434:	2036      	movs	r0, #54	; 0x36
 8012436:	f7fa f9eb 	bl	800c810 <pbuf_alloc>
 801243a:	6138      	str	r0, [r7, #16]
 801243c:	693b      	ldr	r3, [r7, #16]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d109      	bne.n	8012456 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	8b5b      	ldrh	r3, [r3, #26]
 8012446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801244a:	b29a      	uxth	r2, r3
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012450:	f04f 33ff 	mov.w	r3, #4294967295
 8012454:	e095      	b.n	8012582 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012456:	693b      	ldr	r3, [r7, #16]
 8012458:	895a      	ldrh	r2, [r3, #10]
 801245a:	7dfb      	ldrb	r3, [r7, #23]
 801245c:	b29b      	uxth	r3, r3
 801245e:	429a      	cmp	r2, r3
 8012460:	d206      	bcs.n	8012470 <tcp_enqueue_flags+0xa0>
 8012462:	4b4a      	ldr	r3, [pc, #296]	; (801258c <tcp_enqueue_flags+0x1bc>)
 8012464:	f240 4239 	movw	r2, #1081	; 0x439
 8012468:	494c      	ldr	r1, [pc, #304]	; (801259c <tcp_enqueue_flags+0x1cc>)
 801246a:	484a      	ldr	r0, [pc, #296]	; (8012594 <tcp_enqueue_flags+0x1c4>)
 801246c:	f006 faa0 	bl	80189b0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012474:	78fa      	ldrb	r2, [r7, #3]
 8012476:	7ffb      	ldrb	r3, [r7, #31]
 8012478:	9300      	str	r3, [sp, #0]
 801247a:	460b      	mov	r3, r1
 801247c:	6939      	ldr	r1, [r7, #16]
 801247e:	6878      	ldr	r0, [r7, #4]
 8012480:	f7ff f918 	bl	80116b4 <tcp_create_segment>
 8012484:	60f8      	str	r0, [r7, #12]
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d109      	bne.n	80124a0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	8b5b      	ldrh	r3, [r3, #26]
 8012490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012494:	b29a      	uxth	r2, r3
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801249a:	f04f 33ff 	mov.w	r3, #4294967295
 801249e:	e070      	b.n	8012582 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	68db      	ldr	r3, [r3, #12]
 80124a4:	f003 0303 	and.w	r3, r3, #3
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d006      	beq.n	80124ba <tcp_enqueue_flags+0xea>
 80124ac:	4b37      	ldr	r3, [pc, #220]	; (801258c <tcp_enqueue_flags+0x1bc>)
 80124ae:	f240 4242 	movw	r2, #1090	; 0x442
 80124b2:	493b      	ldr	r1, [pc, #236]	; (80125a0 <tcp_enqueue_flags+0x1d0>)
 80124b4:	4837      	ldr	r0, [pc, #220]	; (8012594 <tcp_enqueue_flags+0x1c4>)
 80124b6:	f006 fa7b 	bl	80189b0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	891b      	ldrh	r3, [r3, #8]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d006      	beq.n	80124d0 <tcp_enqueue_flags+0x100>
 80124c2:	4b32      	ldr	r3, [pc, #200]	; (801258c <tcp_enqueue_flags+0x1bc>)
 80124c4:	f240 4243 	movw	r2, #1091	; 0x443
 80124c8:	4936      	ldr	r1, [pc, #216]	; (80125a4 <tcp_enqueue_flags+0x1d4>)
 80124ca:	4832      	ldr	r0, [pc, #200]	; (8012594 <tcp_enqueue_flags+0x1c4>)
 80124cc:	f006 fa70 	bl	80189b0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d103      	bne.n	80124e0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	68fa      	ldr	r2, [r7, #12]
 80124dc:	66da      	str	r2, [r3, #108]	; 0x6c
 80124de:	e00d      	b.n	80124fc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124e4:	61bb      	str	r3, [r7, #24]
 80124e6:	e002      	b.n	80124ee <tcp_enqueue_flags+0x11e>
 80124e8:	69bb      	ldr	r3, [r7, #24]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	61bb      	str	r3, [r7, #24]
 80124ee:	69bb      	ldr	r3, [r7, #24]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d1f8      	bne.n	80124e8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80124f6:	69bb      	ldr	r3, [r7, #24]
 80124f8:	68fa      	ldr	r2, [r7, #12]
 80124fa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	2200      	movs	r2, #0
 8012500:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012504:	78fb      	ldrb	r3, [r7, #3]
 8012506:	f003 0302 	and.w	r3, r3, #2
 801250a:	2b00      	cmp	r3, #0
 801250c:	d104      	bne.n	8012518 <tcp_enqueue_flags+0x148>
 801250e:	78fb      	ldrb	r3, [r7, #3]
 8012510:	f003 0301 	and.w	r3, r3, #1
 8012514:	2b00      	cmp	r3, #0
 8012516:	d004      	beq.n	8012522 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801251c:	1c5a      	adds	r2, r3, #1
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012522:	78fb      	ldrb	r3, [r7, #3]
 8012524:	f003 0301 	and.w	r3, r3, #1
 8012528:	2b00      	cmp	r3, #0
 801252a:	d006      	beq.n	801253a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	8b5b      	ldrh	r3, [r3, #26]
 8012530:	f043 0320 	orr.w	r3, r3, #32
 8012534:	b29a      	uxth	r2, r3
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	685b      	ldr	r3, [r3, #4]
 801253e:	4618      	mov	r0, r3
 8012540:	f7fa fcd8 	bl	800cef4 <pbuf_clen>
 8012544:	4603      	mov	r3, r0
 8012546:	461a      	mov	r2, r3
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801254e:	4413      	add	r3, r2
 8012550:	b29a      	uxth	r2, r3
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801255e:	2b00      	cmp	r3, #0
 8012560:	d00e      	beq.n	8012580 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012566:	2b00      	cmp	r3, #0
 8012568:	d10a      	bne.n	8012580 <tcp_enqueue_flags+0x1b0>
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801256e:	2b00      	cmp	r3, #0
 8012570:	d106      	bne.n	8012580 <tcp_enqueue_flags+0x1b0>
 8012572:	4b06      	ldr	r3, [pc, #24]	; (801258c <tcp_enqueue_flags+0x1bc>)
 8012574:	f240 4265 	movw	r2, #1125	; 0x465
 8012578:	490b      	ldr	r1, [pc, #44]	; (80125a8 <tcp_enqueue_flags+0x1d8>)
 801257a:	4806      	ldr	r0, [pc, #24]	; (8012594 <tcp_enqueue_flags+0x1c4>)
 801257c:	f006 fa18 	bl	80189b0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012580:	2300      	movs	r3, #0
}
 8012582:	4618      	mov	r0, r3
 8012584:	3720      	adds	r7, #32
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}
 801258a:	bf00      	nop
 801258c:	0801bd80 	.word	0x0801bd80
 8012590:	0801c1a4 	.word	0x0801c1a4
 8012594:	0801bdd4 	.word	0x0801bdd4
 8012598:	0801c1fc 	.word	0x0801c1fc
 801259c:	0801c21c 	.word	0x0801c21c
 80125a0:	0801c258 	.word	0x0801c258
 80125a4:	0801c270 	.word	0x0801c270
 80125a8:	0801c29c 	.word	0x0801c29c

080125ac <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80125ac:	b5b0      	push	{r4, r5, r7, lr}
 80125ae:	b08a      	sub	sp, #40	; 0x28
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d106      	bne.n	80125c8 <tcp_output+0x1c>
 80125ba:	4b8a      	ldr	r3, [pc, #552]	; (80127e4 <tcp_output+0x238>)
 80125bc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80125c0:	4989      	ldr	r1, [pc, #548]	; (80127e8 <tcp_output+0x23c>)
 80125c2:	488a      	ldr	r0, [pc, #552]	; (80127ec <tcp_output+0x240>)
 80125c4:	f006 f9f4 	bl	80189b0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	7d1b      	ldrb	r3, [r3, #20]
 80125cc:	2b01      	cmp	r3, #1
 80125ce:	d106      	bne.n	80125de <tcp_output+0x32>
 80125d0:	4b84      	ldr	r3, [pc, #528]	; (80127e4 <tcp_output+0x238>)
 80125d2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80125d6:	4986      	ldr	r1, [pc, #536]	; (80127f0 <tcp_output+0x244>)
 80125d8:	4884      	ldr	r0, [pc, #528]	; (80127ec <tcp_output+0x240>)
 80125da:	f006 f9e9 	bl	80189b0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80125de:	4b85      	ldr	r3, [pc, #532]	; (80127f4 <tcp_output+0x248>)
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	687a      	ldr	r2, [r7, #4]
 80125e4:	429a      	cmp	r2, r3
 80125e6:	d101      	bne.n	80125ec <tcp_output+0x40>
    return ERR_OK;
 80125e8:	2300      	movs	r3, #0
 80125ea:	e1ce      	b.n	801298a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80125f8:	4293      	cmp	r3, r2
 80125fa:	bf28      	it	cs
 80125fc:	4613      	movcs	r3, r2
 80125fe:	b29b      	uxth	r3, r3
 8012600:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012606:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801260a:	2b00      	cmp	r3, #0
 801260c:	d10b      	bne.n	8012626 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	8b5b      	ldrh	r3, [r3, #26]
 8012612:	f003 0302 	and.w	r3, r3, #2
 8012616:	2b00      	cmp	r3, #0
 8012618:	f000 81aa 	beq.w	8012970 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801261c:	6878      	ldr	r0, [r7, #4]
 801261e:	f000 fdcb 	bl	80131b8 <tcp_send_empty_ack>
 8012622:	4603      	mov	r3, r0
 8012624:	e1b1      	b.n	801298a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012626:	6879      	ldr	r1, [r7, #4]
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	3304      	adds	r3, #4
 801262c:	461a      	mov	r2, r3
 801262e:	6878      	ldr	r0, [r7, #4]
 8012630:	f7ff f824 	bl	801167c <tcp_route>
 8012634:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d102      	bne.n	8012642 <tcp_output+0x96>
    return ERR_RTE;
 801263c:	f06f 0303 	mvn.w	r3, #3
 8012640:	e1a3      	b.n	801298a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d003      	beq.n	8012650 <tcp_output+0xa4>
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d111      	bne.n	8012674 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012650:	697b      	ldr	r3, [r7, #20]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d002      	beq.n	801265c <tcp_output+0xb0>
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	3304      	adds	r3, #4
 801265a:	e000      	b.n	801265e <tcp_output+0xb2>
 801265c:	2300      	movs	r3, #0
 801265e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012660:	693b      	ldr	r3, [r7, #16]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d102      	bne.n	801266c <tcp_output+0xc0>
      return ERR_RTE;
 8012666:	f06f 0303 	mvn.w	r3, #3
 801266a:	e18e      	b.n	801298a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801266c:	693b      	ldr	r3, [r7, #16]
 801266e:	681a      	ldr	r2, [r3, #0]
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012676:	68db      	ldr	r3, [r3, #12]
 8012678:	685b      	ldr	r3, [r3, #4]
 801267a:	4618      	mov	r0, r3
 801267c:	f7f8 ff8d 	bl	800b59a <lwip_htonl>
 8012680:	4602      	mov	r2, r0
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012686:	1ad3      	subs	r3, r2, r3
 8012688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801268a:	8912      	ldrh	r2, [r2, #8]
 801268c:	4413      	add	r3, r2
 801268e:	69ba      	ldr	r2, [r7, #24]
 8012690:	429a      	cmp	r2, r3
 8012692:	d227      	bcs.n	80126e4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801269a:	461a      	mov	r2, r3
 801269c:	69bb      	ldr	r3, [r7, #24]
 801269e:	4293      	cmp	r3, r2
 80126a0:	d114      	bne.n	80126cc <tcp_output+0x120>
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d110      	bne.n	80126cc <tcp_output+0x120>
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d10b      	bne.n	80126cc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2200      	movs	r2, #0
 80126b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2201      	movs	r2, #1
 80126c0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2200      	movs	r2, #0
 80126c8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	8b5b      	ldrh	r3, [r3, #26]
 80126d0:	f003 0302 	and.w	r3, r3, #2
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	f000 814d 	beq.w	8012974 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f000 fd6c 	bl	80131b8 <tcp_send_empty_ack>
 80126e0:	4603      	mov	r3, r0
 80126e2:	e152      	b.n	801298a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	2200      	movs	r2, #0
 80126e8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126f0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80126f2:	6a3b      	ldr	r3, [r7, #32]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	f000 811c 	beq.w	8012932 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80126fa:	e002      	b.n	8012702 <tcp_output+0x156>
 80126fc:	6a3b      	ldr	r3, [r7, #32]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	623b      	str	r3, [r7, #32]
 8012702:	6a3b      	ldr	r3, [r7, #32]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d1f8      	bne.n	80126fc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801270a:	e112      	b.n	8012932 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801270e:	68db      	ldr	r3, [r3, #12]
 8012710:	899b      	ldrh	r3, [r3, #12]
 8012712:	b29b      	uxth	r3, r3
 8012714:	4618      	mov	r0, r3
 8012716:	f7f8 ff2b 	bl	800b570 <lwip_htons>
 801271a:	4603      	mov	r3, r0
 801271c:	b2db      	uxtb	r3, r3
 801271e:	f003 0304 	and.w	r3, r3, #4
 8012722:	2b00      	cmp	r3, #0
 8012724:	d006      	beq.n	8012734 <tcp_output+0x188>
 8012726:	4b2f      	ldr	r3, [pc, #188]	; (80127e4 <tcp_output+0x238>)
 8012728:	f240 5236 	movw	r2, #1334	; 0x536
 801272c:	4932      	ldr	r1, [pc, #200]	; (80127f8 <tcp_output+0x24c>)
 801272e:	482f      	ldr	r0, [pc, #188]	; (80127ec <tcp_output+0x240>)
 8012730:	f006 f93e 	bl	80189b0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012738:	2b00      	cmp	r3, #0
 801273a:	d01f      	beq.n	801277c <tcp_output+0x1d0>
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	8b5b      	ldrh	r3, [r3, #26]
 8012740:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012744:	2b00      	cmp	r3, #0
 8012746:	d119      	bne.n	801277c <tcp_output+0x1d0>
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801274c:	2b00      	cmp	r3, #0
 801274e:	d00b      	beq.n	8012768 <tcp_output+0x1bc>
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d110      	bne.n	801277c <tcp_output+0x1d0>
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801275e:	891a      	ldrh	r2, [r3, #8]
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012764:	429a      	cmp	r2, r3
 8012766:	d209      	bcs.n	801277c <tcp_output+0x1d0>
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801276e:	2b00      	cmp	r3, #0
 8012770:	d004      	beq.n	801277c <tcp_output+0x1d0>
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012778:	2b08      	cmp	r3, #8
 801277a:	d901      	bls.n	8012780 <tcp_output+0x1d4>
 801277c:	2301      	movs	r3, #1
 801277e:	e000      	b.n	8012782 <tcp_output+0x1d6>
 8012780:	2300      	movs	r3, #0
 8012782:	2b00      	cmp	r3, #0
 8012784:	d106      	bne.n	8012794 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	8b5b      	ldrh	r3, [r3, #26]
 801278a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801278e:	2b00      	cmp	r3, #0
 8012790:	f000 80e4 	beq.w	801295c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	7d1b      	ldrb	r3, [r3, #20]
 8012798:	2b02      	cmp	r3, #2
 801279a:	d00d      	beq.n	80127b8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801279e:	68db      	ldr	r3, [r3, #12]
 80127a0:	899b      	ldrh	r3, [r3, #12]
 80127a2:	b29c      	uxth	r4, r3
 80127a4:	2010      	movs	r0, #16
 80127a6:	f7f8 fee3 	bl	800b570 <lwip_htons>
 80127aa:	4603      	mov	r3, r0
 80127ac:	461a      	mov	r2, r3
 80127ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127b0:	68db      	ldr	r3, [r3, #12]
 80127b2:	4322      	orrs	r2, r4
 80127b4:	b292      	uxth	r2, r2
 80127b6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80127b8:	697a      	ldr	r2, [r7, #20]
 80127ba:	6879      	ldr	r1, [r7, #4]
 80127bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127be:	f000 f909 	bl	80129d4 <tcp_output_segment>
 80127c2:	4603      	mov	r3, r0
 80127c4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80127c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d016      	beq.n	80127fc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	8b5b      	ldrh	r3, [r3, #26]
 80127d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127d6:	b29a      	uxth	r2, r3
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	835a      	strh	r2, [r3, #26]
      return err;
 80127dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127e0:	e0d3      	b.n	801298a <tcp_output+0x3de>
 80127e2:	bf00      	nop
 80127e4:	0801bd80 	.word	0x0801bd80
 80127e8:	0801c2c4 	.word	0x0801c2c4
 80127ec:	0801bdd4 	.word	0x0801bdd4
 80127f0:	0801c2dc 	.word	0x0801c2dc
 80127f4:	20010e4c 	.word	0x20010e4c
 80127f8:	0801c304 	.word	0x0801c304
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80127fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127fe:	681a      	ldr	r2, [r3, #0]
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	7d1b      	ldrb	r3, [r3, #20]
 8012808:	2b02      	cmp	r3, #2
 801280a:	d006      	beq.n	801281a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	8b5b      	ldrh	r3, [r3, #26]
 8012810:	f023 0303 	bic.w	r3, r3, #3
 8012814:	b29a      	uxth	r2, r3
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801281c:	68db      	ldr	r3, [r3, #12]
 801281e:	685b      	ldr	r3, [r3, #4]
 8012820:	4618      	mov	r0, r3
 8012822:	f7f8 feba 	bl	800b59a <lwip_htonl>
 8012826:	4604      	mov	r4, r0
 8012828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801282a:	891b      	ldrh	r3, [r3, #8]
 801282c:	461d      	mov	r5, r3
 801282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012830:	68db      	ldr	r3, [r3, #12]
 8012832:	899b      	ldrh	r3, [r3, #12]
 8012834:	b29b      	uxth	r3, r3
 8012836:	4618      	mov	r0, r3
 8012838:	f7f8 fe9a 	bl	800b570 <lwip_htons>
 801283c:	4603      	mov	r3, r0
 801283e:	b2db      	uxtb	r3, r3
 8012840:	f003 0303 	and.w	r3, r3, #3
 8012844:	2b00      	cmp	r3, #0
 8012846:	d001      	beq.n	801284c <tcp_output+0x2a0>
 8012848:	2301      	movs	r3, #1
 801284a:	e000      	b.n	801284e <tcp_output+0x2a2>
 801284c:	2300      	movs	r3, #0
 801284e:	442b      	add	r3, r5
 8012850:	4423      	add	r3, r4
 8012852:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	1ad3      	subs	r3, r2, r3
 801285c:	2b00      	cmp	r3, #0
 801285e:	da02      	bge.n	8012866 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	68ba      	ldr	r2, [r7, #8]
 8012864:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012868:	891b      	ldrh	r3, [r3, #8]
 801286a:	461c      	mov	r4, r3
 801286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801286e:	68db      	ldr	r3, [r3, #12]
 8012870:	899b      	ldrh	r3, [r3, #12]
 8012872:	b29b      	uxth	r3, r3
 8012874:	4618      	mov	r0, r3
 8012876:	f7f8 fe7b 	bl	800b570 <lwip_htons>
 801287a:	4603      	mov	r3, r0
 801287c:	b2db      	uxtb	r3, r3
 801287e:	f003 0303 	and.w	r3, r3, #3
 8012882:	2b00      	cmp	r3, #0
 8012884:	d001      	beq.n	801288a <tcp_output+0x2de>
 8012886:	2301      	movs	r3, #1
 8012888:	e000      	b.n	801288c <tcp_output+0x2e0>
 801288a:	2300      	movs	r3, #0
 801288c:	4423      	add	r3, r4
 801288e:	2b00      	cmp	r3, #0
 8012890:	d049      	beq.n	8012926 <tcp_output+0x37a>
      seg->next = NULL;
 8012892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012894:	2200      	movs	r2, #0
 8012896:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801289c:	2b00      	cmp	r3, #0
 801289e:	d105      	bne.n	80128ac <tcp_output+0x300>
        pcb->unacked = seg;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128a4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80128a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128a8:	623b      	str	r3, [r7, #32]
 80128aa:	e03f      	b.n	801292c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80128ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ae:	68db      	ldr	r3, [r3, #12]
 80128b0:	685b      	ldr	r3, [r3, #4]
 80128b2:	4618      	mov	r0, r3
 80128b4:	f7f8 fe71 	bl	800b59a <lwip_htonl>
 80128b8:	4604      	mov	r4, r0
 80128ba:	6a3b      	ldr	r3, [r7, #32]
 80128bc:	68db      	ldr	r3, [r3, #12]
 80128be:	685b      	ldr	r3, [r3, #4]
 80128c0:	4618      	mov	r0, r3
 80128c2:	f7f8 fe6a 	bl	800b59a <lwip_htonl>
 80128c6:	4603      	mov	r3, r0
 80128c8:	1ae3      	subs	r3, r4, r3
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	da24      	bge.n	8012918 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	3370      	adds	r3, #112	; 0x70
 80128d2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80128d4:	e002      	b.n	80128dc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80128d6:	69fb      	ldr	r3, [r7, #28]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80128dc:	69fb      	ldr	r3, [r7, #28]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d011      	beq.n	8012908 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80128e4:	69fb      	ldr	r3, [r7, #28]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	68db      	ldr	r3, [r3, #12]
 80128ea:	685b      	ldr	r3, [r3, #4]
 80128ec:	4618      	mov	r0, r3
 80128ee:	f7f8 fe54 	bl	800b59a <lwip_htonl>
 80128f2:	4604      	mov	r4, r0
 80128f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128f6:	68db      	ldr	r3, [r3, #12]
 80128f8:	685b      	ldr	r3, [r3, #4]
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7f8 fe4d 	bl	800b59a <lwip_htonl>
 8012900:	4603      	mov	r3, r0
 8012902:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012904:	2b00      	cmp	r3, #0
 8012906:	dbe6      	blt.n	80128d6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012908:	69fb      	ldr	r3, [r7, #28]
 801290a:	681a      	ldr	r2, [r3, #0]
 801290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801290e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012910:	69fb      	ldr	r3, [r7, #28]
 8012912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012914:	601a      	str	r2, [r3, #0]
 8012916:	e009      	b.n	801292c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012918:	6a3b      	ldr	r3, [r7, #32]
 801291a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801291c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801291e:	6a3b      	ldr	r3, [r7, #32]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	623b      	str	r3, [r7, #32]
 8012924:	e002      	b.n	801292c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012926:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012928:	f7fb fefb 	bl	800e722 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012930:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012934:	2b00      	cmp	r3, #0
 8012936:	d012      	beq.n	801295e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801293a:	68db      	ldr	r3, [r3, #12]
 801293c:	685b      	ldr	r3, [r3, #4]
 801293e:	4618      	mov	r0, r3
 8012940:	f7f8 fe2b 	bl	800b59a <lwip_htonl>
 8012944:	4602      	mov	r2, r0
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801294a:	1ad3      	subs	r3, r2, r3
 801294c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801294e:	8912      	ldrh	r2, [r2, #8]
 8012950:	4413      	add	r3, r2
  while (seg != NULL &&
 8012952:	69ba      	ldr	r2, [r7, #24]
 8012954:	429a      	cmp	r2, r3
 8012956:	f4bf aed9 	bcs.w	801270c <tcp_output+0x160>
 801295a:	e000      	b.n	801295e <tcp_output+0x3b2>
      break;
 801295c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012962:	2b00      	cmp	r3, #0
 8012964:	d108      	bne.n	8012978 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	2200      	movs	r2, #0
 801296a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801296e:	e004      	b.n	801297a <tcp_output+0x3ce>
    goto output_done;
 8012970:	bf00      	nop
 8012972:	e002      	b.n	801297a <tcp_output+0x3ce>
    goto output_done;
 8012974:	bf00      	nop
 8012976:	e000      	b.n	801297a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012978:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	8b5b      	ldrh	r3, [r3, #26]
 801297e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012982:	b29a      	uxth	r2, r3
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012988:	2300      	movs	r3, #0
}
 801298a:	4618      	mov	r0, r3
 801298c:	3728      	adds	r7, #40	; 0x28
 801298e:	46bd      	mov	sp, r7
 8012990:	bdb0      	pop	{r4, r5, r7, pc}
 8012992:	bf00      	nop

08012994 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b082      	sub	sp, #8
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d106      	bne.n	80129b0 <tcp_output_segment_busy+0x1c>
 80129a2:	4b09      	ldr	r3, [pc, #36]	; (80129c8 <tcp_output_segment_busy+0x34>)
 80129a4:	f240 529a 	movw	r2, #1434	; 0x59a
 80129a8:	4908      	ldr	r1, [pc, #32]	; (80129cc <tcp_output_segment_busy+0x38>)
 80129aa:	4809      	ldr	r0, [pc, #36]	; (80129d0 <tcp_output_segment_busy+0x3c>)
 80129ac:	f006 f800 	bl	80189b0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	685b      	ldr	r3, [r3, #4]
 80129b4:	7b9b      	ldrb	r3, [r3, #14]
 80129b6:	2b01      	cmp	r3, #1
 80129b8:	d001      	beq.n	80129be <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80129ba:	2301      	movs	r3, #1
 80129bc:	e000      	b.n	80129c0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80129be:	2300      	movs	r3, #0
}
 80129c0:	4618      	mov	r0, r3
 80129c2:	3708      	adds	r7, #8
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}
 80129c8:	0801bd80 	.word	0x0801bd80
 80129cc:	0801c31c 	.word	0x0801c31c
 80129d0:	0801bdd4 	.word	0x0801bdd4

080129d4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80129d4:	b5b0      	push	{r4, r5, r7, lr}
 80129d6:	b08c      	sub	sp, #48	; 0x30
 80129d8:	af04      	add	r7, sp, #16
 80129da:	60f8      	str	r0, [r7, #12]
 80129dc:	60b9      	str	r1, [r7, #8]
 80129de:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d106      	bne.n	80129f4 <tcp_output_segment+0x20>
 80129e6:	4b64      	ldr	r3, [pc, #400]	; (8012b78 <tcp_output_segment+0x1a4>)
 80129e8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80129ec:	4963      	ldr	r1, [pc, #396]	; (8012b7c <tcp_output_segment+0x1a8>)
 80129ee:	4864      	ldr	r0, [pc, #400]	; (8012b80 <tcp_output_segment+0x1ac>)
 80129f0:	f005 ffde 	bl	80189b0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80129f4:	68bb      	ldr	r3, [r7, #8]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d106      	bne.n	8012a08 <tcp_output_segment+0x34>
 80129fa:	4b5f      	ldr	r3, [pc, #380]	; (8012b78 <tcp_output_segment+0x1a4>)
 80129fc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012a00:	4960      	ldr	r1, [pc, #384]	; (8012b84 <tcp_output_segment+0x1b0>)
 8012a02:	485f      	ldr	r0, [pc, #380]	; (8012b80 <tcp_output_segment+0x1ac>)
 8012a04:	f005 ffd4 	bl	80189b0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d106      	bne.n	8012a1c <tcp_output_segment+0x48>
 8012a0e:	4b5a      	ldr	r3, [pc, #360]	; (8012b78 <tcp_output_segment+0x1a4>)
 8012a10:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012a14:	495c      	ldr	r1, [pc, #368]	; (8012b88 <tcp_output_segment+0x1b4>)
 8012a16:	485a      	ldr	r0, [pc, #360]	; (8012b80 <tcp_output_segment+0x1ac>)
 8012a18:	f005 ffca 	bl	80189b0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012a1c:	68f8      	ldr	r0, [r7, #12]
 8012a1e:	f7ff ffb9 	bl	8012994 <tcp_output_segment_busy>
 8012a22:	4603      	mov	r3, r0
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d001      	beq.n	8012a2c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012a28:	2300      	movs	r3, #0
 8012a2a:	e0a1      	b.n	8012b70 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	68dc      	ldr	r4, [r3, #12]
 8012a34:	4610      	mov	r0, r2
 8012a36:	f7f8 fdb0 	bl	800b59a <lwip_htonl>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012a3e:	68bb      	ldr	r3, [r7, #8]
 8012a40:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	68dc      	ldr	r4, [r3, #12]
 8012a46:	4610      	mov	r0, r2
 8012a48:	f7f8 fd92 	bl	800b570 <lwip_htons>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012a50:	68bb      	ldr	r3, [r7, #8]
 8012a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a54:	68ba      	ldr	r2, [r7, #8]
 8012a56:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012a58:	441a      	add	r2, r3
 8012a5a:	68bb      	ldr	r3, [r7, #8]
 8012a5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	68db      	ldr	r3, [r3, #12]
 8012a62:	3314      	adds	r3, #20
 8012a64:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	7a9b      	ldrb	r3, [r3, #10]
 8012a6a:	f003 0301 	and.w	r3, r3, #1
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d015      	beq.n	8012a9e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	3304      	adds	r3, #4
 8012a76:	461a      	mov	r2, r3
 8012a78:	6879      	ldr	r1, [r7, #4]
 8012a7a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012a7e:	f7fc fa33 	bl	800eee8 <tcp_eff_send_mss_netif>
 8012a82:	4603      	mov	r3, r0
 8012a84:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012a86:	8b7b      	ldrh	r3, [r7, #26]
 8012a88:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f7f8 fd84 	bl	800b59a <lwip_htonl>
 8012a92:	4602      	mov	r2, r0
 8012a94:	69fb      	ldr	r3, [r7, #28]
 8012a96:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012a98:	69fb      	ldr	r3, [r7, #28]
 8012a9a:	3304      	adds	r3, #4
 8012a9c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	da02      	bge.n	8012aae <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	2200      	movs	r2, #0
 8012aac:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012aae:	68bb      	ldr	r3, [r7, #8]
 8012ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d10c      	bne.n	8012ad0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012ab6:	4b35      	ldr	r3, [pc, #212]	; (8012b8c <tcp_output_segment+0x1b8>)
 8012ab8:	681a      	ldr	r2, [r3, #0]
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	68db      	ldr	r3, [r3, #12]
 8012ac2:	685b      	ldr	r3, [r3, #4]
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f7f8 fd68 	bl	800b59a <lwip_htonl>
 8012aca:	4602      	mov	r2, r0
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	68da      	ldr	r2, [r3, #12]
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	685b      	ldr	r3, [r3, #4]
 8012ad8:	685b      	ldr	r3, [r3, #4]
 8012ada:	1ad3      	subs	r3, r2, r3
 8012adc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	685b      	ldr	r3, [r3, #4]
 8012ae2:	8959      	ldrh	r1, [r3, #10]
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	685b      	ldr	r3, [r3, #4]
 8012ae8:	8b3a      	ldrh	r2, [r7, #24]
 8012aea:	1a8a      	subs	r2, r1, r2
 8012aec:	b292      	uxth	r2, r2
 8012aee:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	8919      	ldrh	r1, [r3, #8]
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	685b      	ldr	r3, [r3, #4]
 8012afa:	8b3a      	ldrh	r2, [r7, #24]
 8012afc:	1a8a      	subs	r2, r1, r2
 8012afe:	b292      	uxth	r2, r2
 8012b00:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	685b      	ldr	r3, [r3, #4]
 8012b06:	68fa      	ldr	r2, [r7, #12]
 8012b08:	68d2      	ldr	r2, [r2, #12]
 8012b0a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	68db      	ldr	r3, [r3, #12]
 8012b10:	2200      	movs	r2, #0
 8012b12:	741a      	strb	r2, [r3, #16]
 8012b14:	2200      	movs	r2, #0
 8012b16:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	68da      	ldr	r2, [r3, #12]
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	7a9b      	ldrb	r3, [r3, #10]
 8012b20:	f003 0301 	and.w	r3, r3, #1
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d001      	beq.n	8012b2c <tcp_output_segment+0x158>
 8012b28:	2318      	movs	r3, #24
 8012b2a:	e000      	b.n	8012b2e <tcp_output_segment+0x15a>
 8012b2c:	2314      	movs	r3, #20
 8012b2e:	4413      	add	r3, r2
 8012b30:	69fa      	ldr	r2, [r7, #28]
 8012b32:	429a      	cmp	r2, r3
 8012b34:	d006      	beq.n	8012b44 <tcp_output_segment+0x170>
 8012b36:	4b10      	ldr	r3, [pc, #64]	; (8012b78 <tcp_output_segment+0x1a4>)
 8012b38:	f240 621c 	movw	r2, #1564	; 0x61c
 8012b3c:	4914      	ldr	r1, [pc, #80]	; (8012b90 <tcp_output_segment+0x1bc>)
 8012b3e:	4810      	ldr	r0, [pc, #64]	; (8012b80 <tcp_output_segment+0x1ac>)
 8012b40:	f005 ff36 	bl	80189b0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	6858      	ldr	r0, [r3, #4]
 8012b48:	68b9      	ldr	r1, [r7, #8]
 8012b4a:	68bb      	ldr	r3, [r7, #8]
 8012b4c:	1d1c      	adds	r4, r3, #4
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	7add      	ldrb	r5, [r3, #11]
 8012b52:	68bb      	ldr	r3, [r7, #8]
 8012b54:	7a9b      	ldrb	r3, [r3, #10]
 8012b56:	687a      	ldr	r2, [r7, #4]
 8012b58:	9202      	str	r2, [sp, #8]
 8012b5a:	2206      	movs	r2, #6
 8012b5c:	9201      	str	r2, [sp, #4]
 8012b5e:	9300      	str	r3, [sp, #0]
 8012b60:	462b      	mov	r3, r5
 8012b62:	4622      	mov	r2, r4
 8012b64:	f004 fc26 	bl	80173b4 <ip4_output_if>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012b6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b70:	4618      	mov	r0, r3
 8012b72:	3720      	adds	r7, #32
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bdb0      	pop	{r4, r5, r7, pc}
 8012b78:	0801bd80 	.word	0x0801bd80
 8012b7c:	0801c344 	.word	0x0801c344
 8012b80:	0801bdd4 	.word	0x0801bdd4
 8012b84:	0801c364 	.word	0x0801c364
 8012b88:	0801c384 	.word	0x0801c384
 8012b8c:	20010e00 	.word	0x20010e00
 8012b90:	0801c3a8 	.word	0x0801c3a8

08012b94 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012b94:	b5b0      	push	{r4, r5, r7, lr}
 8012b96:	b084      	sub	sp, #16
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d106      	bne.n	8012bb0 <tcp_rexmit_rto_prepare+0x1c>
 8012ba2:	4b31      	ldr	r3, [pc, #196]	; (8012c68 <tcp_rexmit_rto_prepare+0xd4>)
 8012ba4:	f240 6263 	movw	r2, #1635	; 0x663
 8012ba8:	4930      	ldr	r1, [pc, #192]	; (8012c6c <tcp_rexmit_rto_prepare+0xd8>)
 8012baa:	4831      	ldr	r0, [pc, #196]	; (8012c70 <tcp_rexmit_rto_prepare+0xdc>)
 8012bac:	f005 ff00 	bl	80189b0 <iprintf>

  if (pcb->unacked == NULL) {
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d102      	bne.n	8012bbe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012bb8:	f06f 0305 	mvn.w	r3, #5
 8012bbc:	e050      	b.n	8012c60 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bc2:	60fb      	str	r3, [r7, #12]
 8012bc4:	e00b      	b.n	8012bde <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012bc6:	68f8      	ldr	r0, [r7, #12]
 8012bc8:	f7ff fee4 	bl	8012994 <tcp_output_segment_busy>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d002      	beq.n	8012bd8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012bd2:	f06f 0305 	mvn.w	r3, #5
 8012bd6:	e043      	b.n	8012c60 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	60fb      	str	r3, [r7, #12]
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d1ef      	bne.n	8012bc6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012be6:	68f8      	ldr	r0, [r7, #12]
 8012be8:	f7ff fed4 	bl	8012994 <tcp_output_segment_busy>
 8012bec:	4603      	mov	r3, r0
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d002      	beq.n	8012bf8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012bf2:	f06f 0305 	mvn.w	r3, #5
 8012bf6:	e033      	b.n	8012c60 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	8b5b      	ldrh	r3, [r3, #26]
 8012c12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012c16:	b29a      	uxth	r2, r3
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	68db      	ldr	r3, [r3, #12]
 8012c20:	685b      	ldr	r3, [r3, #4]
 8012c22:	4618      	mov	r0, r3
 8012c24:	f7f8 fcb9 	bl	800b59a <lwip_htonl>
 8012c28:	4604      	mov	r4, r0
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	891b      	ldrh	r3, [r3, #8]
 8012c2e:	461d      	mov	r5, r3
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	68db      	ldr	r3, [r3, #12]
 8012c34:	899b      	ldrh	r3, [r3, #12]
 8012c36:	b29b      	uxth	r3, r3
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7f8 fc99 	bl	800b570 <lwip_htons>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	b2db      	uxtb	r3, r3
 8012c42:	f003 0303 	and.w	r3, r3, #3
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d001      	beq.n	8012c4e <tcp_rexmit_rto_prepare+0xba>
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	e000      	b.n	8012c50 <tcp_rexmit_rto_prepare+0xbc>
 8012c4e:	2300      	movs	r3, #0
 8012c50:	442b      	add	r3, r5
 8012c52:	18e2      	adds	r2, r4, r3
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012c5e:	2300      	movs	r3, #0
}
 8012c60:	4618      	mov	r0, r3
 8012c62:	3710      	adds	r7, #16
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bdb0      	pop	{r4, r5, r7, pc}
 8012c68:	0801bd80 	.word	0x0801bd80
 8012c6c:	0801c3bc 	.word	0x0801c3bc
 8012c70:	0801bdd4 	.word	0x0801bdd4

08012c74 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b082      	sub	sp, #8
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d106      	bne.n	8012c90 <tcp_rexmit_rto_commit+0x1c>
 8012c82:	4b0d      	ldr	r3, [pc, #52]	; (8012cb8 <tcp_rexmit_rto_commit+0x44>)
 8012c84:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012c88:	490c      	ldr	r1, [pc, #48]	; (8012cbc <tcp_rexmit_rto_commit+0x48>)
 8012c8a:	480d      	ldr	r0, [pc, #52]	; (8012cc0 <tcp_rexmit_rto_commit+0x4c>)
 8012c8c:	f005 fe90 	bl	80189b0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012c96:	2bff      	cmp	r3, #255	; 0xff
 8012c98:	d007      	beq.n	8012caa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012ca0:	3301      	adds	r3, #1
 8012ca2:	b2da      	uxtb	r2, r3
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012caa:	6878      	ldr	r0, [r7, #4]
 8012cac:	f7ff fc7e 	bl	80125ac <tcp_output>
}
 8012cb0:	bf00      	nop
 8012cb2:	3708      	adds	r7, #8
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bd80      	pop	{r7, pc}
 8012cb8:	0801bd80 	.word	0x0801bd80
 8012cbc:	0801c3e0 	.word	0x0801c3e0
 8012cc0:	0801bdd4 	.word	0x0801bdd4

08012cc4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b082      	sub	sp, #8
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d106      	bne.n	8012ce0 <tcp_rexmit_rto+0x1c>
 8012cd2:	4b0a      	ldr	r3, [pc, #40]	; (8012cfc <tcp_rexmit_rto+0x38>)
 8012cd4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012cd8:	4909      	ldr	r1, [pc, #36]	; (8012d00 <tcp_rexmit_rto+0x3c>)
 8012cda:	480a      	ldr	r0, [pc, #40]	; (8012d04 <tcp_rexmit_rto+0x40>)
 8012cdc:	f005 fe68 	bl	80189b0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012ce0:	6878      	ldr	r0, [r7, #4]
 8012ce2:	f7ff ff57 	bl	8012b94 <tcp_rexmit_rto_prepare>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d102      	bne.n	8012cf2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f7ff ffc1 	bl	8012c74 <tcp_rexmit_rto_commit>
  }
}
 8012cf2:	bf00      	nop
 8012cf4:	3708      	adds	r7, #8
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	bd80      	pop	{r7, pc}
 8012cfa:	bf00      	nop
 8012cfc:	0801bd80 	.word	0x0801bd80
 8012d00:	0801c404 	.word	0x0801c404
 8012d04:	0801bdd4 	.word	0x0801bdd4

08012d08 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012d08:	b590      	push	{r4, r7, lr}
 8012d0a:	b085      	sub	sp, #20
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d106      	bne.n	8012d24 <tcp_rexmit+0x1c>
 8012d16:	4b2f      	ldr	r3, [pc, #188]	; (8012dd4 <tcp_rexmit+0xcc>)
 8012d18:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012d1c:	492e      	ldr	r1, [pc, #184]	; (8012dd8 <tcp_rexmit+0xd0>)
 8012d1e:	482f      	ldr	r0, [pc, #188]	; (8012ddc <tcp_rexmit+0xd4>)
 8012d20:	f005 fe46 	bl	80189b0 <iprintf>

  if (pcb->unacked == NULL) {
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d102      	bne.n	8012d32 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012d2c:	f06f 0305 	mvn.w	r3, #5
 8012d30:	e04c      	b.n	8012dcc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d36:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012d38:	68b8      	ldr	r0, [r7, #8]
 8012d3a:	f7ff fe2b 	bl	8012994 <tcp_output_segment_busy>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d002      	beq.n	8012d4a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012d44:	f06f 0305 	mvn.w	r3, #5
 8012d48:	e040      	b.n	8012dcc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012d4a:	68bb      	ldr	r3, [r7, #8]
 8012d4c:	681a      	ldr	r2, [r3, #0]
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	336c      	adds	r3, #108	; 0x6c
 8012d56:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012d58:	e002      	b.n	8012d60 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d011      	beq.n	8012d8c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	68db      	ldr	r3, [r3, #12]
 8012d6e:	685b      	ldr	r3, [r3, #4]
 8012d70:	4618      	mov	r0, r3
 8012d72:	f7f8 fc12 	bl	800b59a <lwip_htonl>
 8012d76:	4604      	mov	r4, r0
 8012d78:	68bb      	ldr	r3, [r7, #8]
 8012d7a:	68db      	ldr	r3, [r3, #12]
 8012d7c:	685b      	ldr	r3, [r3, #4]
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f7f8 fc0b 	bl	800b59a <lwip_htonl>
 8012d84:	4603      	mov	r3, r0
 8012d86:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	dbe6      	blt.n	8012d5a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	681a      	ldr	r2, [r3, #0]
 8012d90:	68bb      	ldr	r3, [r7, #8]
 8012d92:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	68ba      	ldr	r2, [r7, #8]
 8012d98:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012d9a:	68bb      	ldr	r3, [r7, #8]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d103      	bne.n	8012daa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	2200      	movs	r2, #0
 8012da6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012db0:	2bff      	cmp	r3, #255	; 0xff
 8012db2:	d007      	beq.n	8012dc4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012dba:	3301      	adds	r3, #1
 8012dbc:	b2da      	uxtb	r2, r3
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	2200      	movs	r2, #0
 8012dc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012dca:	2300      	movs	r3, #0
}
 8012dcc:	4618      	mov	r0, r3
 8012dce:	3714      	adds	r7, #20
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd90      	pop	{r4, r7, pc}
 8012dd4:	0801bd80 	.word	0x0801bd80
 8012dd8:	0801c420 	.word	0x0801c420
 8012ddc:	0801bdd4 	.word	0x0801bdd4

08012de0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b082      	sub	sp, #8
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d106      	bne.n	8012dfc <tcp_rexmit_fast+0x1c>
 8012dee:	4b2a      	ldr	r3, [pc, #168]	; (8012e98 <tcp_rexmit_fast+0xb8>)
 8012df0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012df4:	4929      	ldr	r1, [pc, #164]	; (8012e9c <tcp_rexmit_fast+0xbc>)
 8012df6:	482a      	ldr	r0, [pc, #168]	; (8012ea0 <tcp_rexmit_fast+0xc0>)
 8012df8:	f005 fdda 	bl	80189b0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d044      	beq.n	8012e8e <tcp_rexmit_fast+0xae>
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	8b5b      	ldrh	r3, [r3, #26]
 8012e08:	f003 0304 	and.w	r3, r3, #4
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d13e      	bne.n	8012e8e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012e10:	6878      	ldr	r0, [r7, #4]
 8012e12:	f7ff ff79 	bl	8012d08 <tcp_rexmit>
 8012e16:	4603      	mov	r3, r0
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d138      	bne.n	8012e8e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012e28:	4293      	cmp	r3, r2
 8012e2a:	bf28      	it	cs
 8012e2c:	4613      	movcs	r3, r2
 8012e2e:	b29b      	uxth	r3, r3
 8012e30:	0fda      	lsrs	r2, r3, #31
 8012e32:	4413      	add	r3, r2
 8012e34:	105b      	asrs	r3, r3, #1
 8012e36:	b29a      	uxth	r2, r3
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012e44:	461a      	mov	r2, r3
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e4a:	005b      	lsls	r3, r3, #1
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	d206      	bcs.n	8012e5e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e54:	005b      	lsls	r3, r3, #1
 8012e56:	b29a      	uxth	r2, r3
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012e68:	4619      	mov	r1, r3
 8012e6a:	0049      	lsls	r1, r1, #1
 8012e6c:	440b      	add	r3, r1
 8012e6e:	b29b      	uxth	r3, r3
 8012e70:	4413      	add	r3, r2
 8012e72:	b29a      	uxth	r2, r3
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	8b5b      	ldrh	r3, [r3, #26]
 8012e7e:	f043 0304 	orr.w	r3, r3, #4
 8012e82:	b29a      	uxth	r2, r3
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012e8e:	bf00      	nop
 8012e90:	3708      	adds	r7, #8
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}
 8012e96:	bf00      	nop
 8012e98:	0801bd80 	.word	0x0801bd80
 8012e9c:	0801c438 	.word	0x0801c438
 8012ea0:	0801bdd4 	.word	0x0801bdd4

08012ea4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b086      	sub	sp, #24
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	60f8      	str	r0, [r7, #12]
 8012eac:	607b      	str	r3, [r7, #4]
 8012eae:	460b      	mov	r3, r1
 8012eb0:	817b      	strh	r3, [r7, #10]
 8012eb2:	4613      	mov	r3, r2
 8012eb4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012eb6:	897a      	ldrh	r2, [r7, #10]
 8012eb8:	893b      	ldrh	r3, [r7, #8]
 8012eba:	4413      	add	r3, r2
 8012ebc:	b29b      	uxth	r3, r3
 8012ebe:	3314      	adds	r3, #20
 8012ec0:	b29b      	uxth	r3, r3
 8012ec2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012ec6:	4619      	mov	r1, r3
 8012ec8:	2022      	movs	r0, #34	; 0x22
 8012eca:	f7f9 fca1 	bl	800c810 <pbuf_alloc>
 8012ece:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012ed0:	697b      	ldr	r3, [r7, #20]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d04d      	beq.n	8012f72 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012ed6:	897b      	ldrh	r3, [r7, #10]
 8012ed8:	3313      	adds	r3, #19
 8012eda:	697a      	ldr	r2, [r7, #20]
 8012edc:	8952      	ldrh	r2, [r2, #10]
 8012ede:	4293      	cmp	r3, r2
 8012ee0:	db06      	blt.n	8012ef0 <tcp_output_alloc_header_common+0x4c>
 8012ee2:	4b26      	ldr	r3, [pc, #152]	; (8012f7c <tcp_output_alloc_header_common+0xd8>)
 8012ee4:	f240 7223 	movw	r2, #1827	; 0x723
 8012ee8:	4925      	ldr	r1, [pc, #148]	; (8012f80 <tcp_output_alloc_header_common+0xdc>)
 8012eea:	4826      	ldr	r0, [pc, #152]	; (8012f84 <tcp_output_alloc_header_common+0xe0>)
 8012eec:	f005 fd60 	bl	80189b0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012ef0:	697b      	ldr	r3, [r7, #20]
 8012ef2:	685b      	ldr	r3, [r3, #4]
 8012ef4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012ef6:	8c3b      	ldrh	r3, [r7, #32]
 8012ef8:	4618      	mov	r0, r3
 8012efa:	f7f8 fb39 	bl	800b570 <lwip_htons>
 8012efe:	4603      	mov	r3, r0
 8012f00:	461a      	mov	r2, r3
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012f06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f7f8 fb31 	bl	800b570 <lwip_htons>
 8012f0e:	4603      	mov	r3, r0
 8012f10:	461a      	mov	r2, r3
 8012f12:	693b      	ldr	r3, [r7, #16]
 8012f14:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012f16:	693b      	ldr	r3, [r7, #16]
 8012f18:	687a      	ldr	r2, [r7, #4]
 8012f1a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012f1c:	68f8      	ldr	r0, [r7, #12]
 8012f1e:	f7f8 fb3c 	bl	800b59a <lwip_htonl>
 8012f22:	4602      	mov	r2, r0
 8012f24:	693b      	ldr	r3, [r7, #16]
 8012f26:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012f28:	897b      	ldrh	r3, [r7, #10]
 8012f2a:	089b      	lsrs	r3, r3, #2
 8012f2c:	b29b      	uxth	r3, r3
 8012f2e:	3305      	adds	r3, #5
 8012f30:	b29b      	uxth	r3, r3
 8012f32:	031b      	lsls	r3, r3, #12
 8012f34:	b29a      	uxth	r2, r3
 8012f36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012f3a:	b29b      	uxth	r3, r3
 8012f3c:	4313      	orrs	r3, r2
 8012f3e:	b29b      	uxth	r3, r3
 8012f40:	4618      	mov	r0, r3
 8012f42:	f7f8 fb15 	bl	800b570 <lwip_htons>
 8012f46:	4603      	mov	r3, r0
 8012f48:	461a      	mov	r2, r3
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012f4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012f50:	4618      	mov	r0, r3
 8012f52:	f7f8 fb0d 	bl	800b570 <lwip_htons>
 8012f56:	4603      	mov	r3, r0
 8012f58:	461a      	mov	r2, r3
 8012f5a:	693b      	ldr	r3, [r7, #16]
 8012f5c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012f5e:	693b      	ldr	r3, [r7, #16]
 8012f60:	2200      	movs	r2, #0
 8012f62:	741a      	strb	r2, [r3, #16]
 8012f64:	2200      	movs	r2, #0
 8012f66:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012f68:	693b      	ldr	r3, [r7, #16]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	749a      	strb	r2, [r3, #18]
 8012f6e:	2200      	movs	r2, #0
 8012f70:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012f72:	697b      	ldr	r3, [r7, #20]
}
 8012f74:	4618      	mov	r0, r3
 8012f76:	3718      	adds	r7, #24
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd80      	pop	{r7, pc}
 8012f7c:	0801bd80 	.word	0x0801bd80
 8012f80:	0801c458 	.word	0x0801c458
 8012f84:	0801bdd4 	.word	0x0801bdd4

08012f88 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012f88:	b5b0      	push	{r4, r5, r7, lr}
 8012f8a:	b08a      	sub	sp, #40	; 0x28
 8012f8c:	af04      	add	r7, sp, #16
 8012f8e:	60f8      	str	r0, [r7, #12]
 8012f90:	607b      	str	r3, [r7, #4]
 8012f92:	460b      	mov	r3, r1
 8012f94:	817b      	strh	r3, [r7, #10]
 8012f96:	4613      	mov	r3, r2
 8012f98:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d106      	bne.n	8012fae <tcp_output_alloc_header+0x26>
 8012fa0:	4b15      	ldr	r3, [pc, #84]	; (8012ff8 <tcp_output_alloc_header+0x70>)
 8012fa2:	f240 7242 	movw	r2, #1858	; 0x742
 8012fa6:	4915      	ldr	r1, [pc, #84]	; (8012ffc <tcp_output_alloc_header+0x74>)
 8012fa8:	4815      	ldr	r0, [pc, #84]	; (8013000 <tcp_output_alloc_header+0x78>)
 8012faa:	f005 fd01 	bl	80189b0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	8adb      	ldrh	r3, [r3, #22]
 8012fb6:	68fa      	ldr	r2, [r7, #12]
 8012fb8:	8b12      	ldrh	r2, [r2, #24]
 8012fba:	68f9      	ldr	r1, [r7, #12]
 8012fbc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012fbe:	893d      	ldrh	r5, [r7, #8]
 8012fc0:	897c      	ldrh	r4, [r7, #10]
 8012fc2:	9103      	str	r1, [sp, #12]
 8012fc4:	2110      	movs	r1, #16
 8012fc6:	9102      	str	r1, [sp, #8]
 8012fc8:	9201      	str	r2, [sp, #4]
 8012fca:	9300      	str	r3, [sp, #0]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	462a      	mov	r2, r5
 8012fd0:	4621      	mov	r1, r4
 8012fd2:	f7ff ff67 	bl	8012ea4 <tcp_output_alloc_header_common>
 8012fd6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d006      	beq.n	8012fec <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fe2:	68fa      	ldr	r2, [r7, #12]
 8012fe4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012fe6:	441a      	add	r2, r3
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012fec:	697b      	ldr	r3, [r7, #20]
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3718      	adds	r7, #24
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8012ff6:	bf00      	nop
 8012ff8:	0801bd80 	.word	0x0801bd80
 8012ffc:	0801c488 	.word	0x0801c488
 8013000:	0801bdd4 	.word	0x0801bdd4

08013004 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b088      	sub	sp, #32
 8013008:	af00      	add	r7, sp, #0
 801300a:	60f8      	str	r0, [r7, #12]
 801300c:	60b9      	str	r1, [r7, #8]
 801300e:	4611      	mov	r1, r2
 8013010:	461a      	mov	r2, r3
 8013012:	460b      	mov	r3, r1
 8013014:	71fb      	strb	r3, [r7, #7]
 8013016:	4613      	mov	r3, r2
 8013018:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801301a:	2300      	movs	r3, #0
 801301c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801301e:	68bb      	ldr	r3, [r7, #8]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d106      	bne.n	8013032 <tcp_output_fill_options+0x2e>
 8013024:	4b12      	ldr	r3, [pc, #72]	; (8013070 <tcp_output_fill_options+0x6c>)
 8013026:	f240 7256 	movw	r2, #1878	; 0x756
 801302a:	4912      	ldr	r1, [pc, #72]	; (8013074 <tcp_output_fill_options+0x70>)
 801302c:	4812      	ldr	r0, [pc, #72]	; (8013078 <tcp_output_fill_options+0x74>)
 801302e:	f005 fcbf 	bl	80189b0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013032:	68bb      	ldr	r3, [r7, #8]
 8013034:	685b      	ldr	r3, [r3, #4]
 8013036:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013038:	69bb      	ldr	r3, [r7, #24]
 801303a:	3314      	adds	r3, #20
 801303c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801303e:	8bfb      	ldrh	r3, [r7, #30]
 8013040:	009b      	lsls	r3, r3, #2
 8013042:	461a      	mov	r2, r3
 8013044:	79fb      	ldrb	r3, [r7, #7]
 8013046:	009b      	lsls	r3, r3, #2
 8013048:	f003 0304 	and.w	r3, r3, #4
 801304c:	4413      	add	r3, r2
 801304e:	3314      	adds	r3, #20
 8013050:	69ba      	ldr	r2, [r7, #24]
 8013052:	4413      	add	r3, r2
 8013054:	697a      	ldr	r2, [r7, #20]
 8013056:	429a      	cmp	r2, r3
 8013058:	d006      	beq.n	8013068 <tcp_output_fill_options+0x64>
 801305a:	4b05      	ldr	r3, [pc, #20]	; (8013070 <tcp_output_fill_options+0x6c>)
 801305c:	f240 7275 	movw	r2, #1909	; 0x775
 8013060:	4906      	ldr	r1, [pc, #24]	; (801307c <tcp_output_fill_options+0x78>)
 8013062:	4805      	ldr	r0, [pc, #20]	; (8013078 <tcp_output_fill_options+0x74>)
 8013064:	f005 fca4 	bl	80189b0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013068:	bf00      	nop
 801306a:	3720      	adds	r7, #32
 801306c:	46bd      	mov	sp, r7
 801306e:	bd80      	pop	{r7, pc}
 8013070:	0801bd80 	.word	0x0801bd80
 8013074:	0801c4b0 	.word	0x0801c4b0
 8013078:	0801bdd4 	.word	0x0801bdd4
 801307c:	0801c3a8 	.word	0x0801c3a8

08013080 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b08a      	sub	sp, #40	; 0x28
 8013084:	af04      	add	r7, sp, #16
 8013086:	60f8      	str	r0, [r7, #12]
 8013088:	60b9      	str	r1, [r7, #8]
 801308a:	607a      	str	r2, [r7, #4]
 801308c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801308e:	68bb      	ldr	r3, [r7, #8]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d106      	bne.n	80130a2 <tcp_output_control_segment+0x22>
 8013094:	4b1c      	ldr	r3, [pc, #112]	; (8013108 <tcp_output_control_segment+0x88>)
 8013096:	f240 7287 	movw	r2, #1927	; 0x787
 801309a:	491c      	ldr	r1, [pc, #112]	; (801310c <tcp_output_control_segment+0x8c>)
 801309c:	481c      	ldr	r0, [pc, #112]	; (8013110 <tcp_output_control_segment+0x90>)
 801309e:	f005 fc87 	bl	80189b0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80130a2:	683a      	ldr	r2, [r7, #0]
 80130a4:	6879      	ldr	r1, [r7, #4]
 80130a6:	68f8      	ldr	r0, [r7, #12]
 80130a8:	f7fe fae8 	bl	801167c <tcp_route>
 80130ac:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80130ae:	693b      	ldr	r3, [r7, #16]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d102      	bne.n	80130ba <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80130b4:	23fc      	movs	r3, #252	; 0xfc
 80130b6:	75fb      	strb	r3, [r7, #23]
 80130b8:	e01c      	b.n	80130f4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d006      	beq.n	80130ce <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	7adb      	ldrb	r3, [r3, #11]
 80130c4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	7a9b      	ldrb	r3, [r3, #10]
 80130ca:	757b      	strb	r3, [r7, #21]
 80130cc:	e003      	b.n	80130d6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80130ce:	23ff      	movs	r3, #255	; 0xff
 80130d0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80130d2:	2300      	movs	r3, #0
 80130d4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80130d6:	7dba      	ldrb	r2, [r7, #22]
 80130d8:	693b      	ldr	r3, [r7, #16]
 80130da:	9302      	str	r3, [sp, #8]
 80130dc:	2306      	movs	r3, #6
 80130de:	9301      	str	r3, [sp, #4]
 80130e0:	7d7b      	ldrb	r3, [r7, #21]
 80130e2:	9300      	str	r3, [sp, #0]
 80130e4:	4613      	mov	r3, r2
 80130e6:	683a      	ldr	r2, [r7, #0]
 80130e8:	6879      	ldr	r1, [r7, #4]
 80130ea:	68b8      	ldr	r0, [r7, #8]
 80130ec:	f004 f962 	bl	80173b4 <ip4_output_if>
 80130f0:	4603      	mov	r3, r0
 80130f2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80130f4:	68b8      	ldr	r0, [r7, #8]
 80130f6:	f7f9 fe6f 	bl	800cdd8 <pbuf_free>
  return err;
 80130fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80130fe:	4618      	mov	r0, r3
 8013100:	3718      	adds	r7, #24
 8013102:	46bd      	mov	sp, r7
 8013104:	bd80      	pop	{r7, pc}
 8013106:	bf00      	nop
 8013108:	0801bd80 	.word	0x0801bd80
 801310c:	0801c4d8 	.word	0x0801c4d8
 8013110:	0801bdd4 	.word	0x0801bdd4

08013114 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013114:	b590      	push	{r4, r7, lr}
 8013116:	b08b      	sub	sp, #44	; 0x2c
 8013118:	af04      	add	r7, sp, #16
 801311a:	60f8      	str	r0, [r7, #12]
 801311c:	60b9      	str	r1, [r7, #8]
 801311e:	607a      	str	r2, [r7, #4]
 8013120:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013122:	683b      	ldr	r3, [r7, #0]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d106      	bne.n	8013136 <tcp_rst+0x22>
 8013128:	4b1f      	ldr	r3, [pc, #124]	; (80131a8 <tcp_rst+0x94>)
 801312a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801312e:	491f      	ldr	r1, [pc, #124]	; (80131ac <tcp_rst+0x98>)
 8013130:	481f      	ldr	r0, [pc, #124]	; (80131b0 <tcp_rst+0x9c>)
 8013132:	f005 fc3d 	bl	80189b0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013138:	2b00      	cmp	r3, #0
 801313a:	d106      	bne.n	801314a <tcp_rst+0x36>
 801313c:	4b1a      	ldr	r3, [pc, #104]	; (80131a8 <tcp_rst+0x94>)
 801313e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013142:	491c      	ldr	r1, [pc, #112]	; (80131b4 <tcp_rst+0xa0>)
 8013144:	481a      	ldr	r0, [pc, #104]	; (80131b0 <tcp_rst+0x9c>)
 8013146:	f005 fc33 	bl	80189b0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801314a:	2300      	movs	r3, #0
 801314c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801314e:	f246 0308 	movw	r3, #24584	; 0x6008
 8013152:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013154:	7dfb      	ldrb	r3, [r7, #23]
 8013156:	b29c      	uxth	r4, r3
 8013158:	68b8      	ldr	r0, [r7, #8]
 801315a:	f7f8 fa1e 	bl	800b59a <lwip_htonl>
 801315e:	4602      	mov	r2, r0
 8013160:	8abb      	ldrh	r3, [r7, #20]
 8013162:	9303      	str	r3, [sp, #12]
 8013164:	2314      	movs	r3, #20
 8013166:	9302      	str	r3, [sp, #8]
 8013168:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801316a:	9301      	str	r3, [sp, #4]
 801316c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801316e:	9300      	str	r3, [sp, #0]
 8013170:	4613      	mov	r3, r2
 8013172:	2200      	movs	r2, #0
 8013174:	4621      	mov	r1, r4
 8013176:	6878      	ldr	r0, [r7, #4]
 8013178:	f7ff fe94 	bl	8012ea4 <tcp_output_alloc_header_common>
 801317c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801317e:	693b      	ldr	r3, [r7, #16]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d00c      	beq.n	801319e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013184:	7dfb      	ldrb	r3, [r7, #23]
 8013186:	2200      	movs	r2, #0
 8013188:	6939      	ldr	r1, [r7, #16]
 801318a:	68f8      	ldr	r0, [r7, #12]
 801318c:	f7ff ff3a 	bl	8013004 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013192:	683a      	ldr	r2, [r7, #0]
 8013194:	6939      	ldr	r1, [r7, #16]
 8013196:	68f8      	ldr	r0, [r7, #12]
 8013198:	f7ff ff72 	bl	8013080 <tcp_output_control_segment>
 801319c:	e000      	b.n	80131a0 <tcp_rst+0x8c>
    return;
 801319e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80131a0:	371c      	adds	r7, #28
 80131a2:	46bd      	mov	sp, r7
 80131a4:	bd90      	pop	{r4, r7, pc}
 80131a6:	bf00      	nop
 80131a8:	0801bd80 	.word	0x0801bd80
 80131ac:	0801c504 	.word	0x0801c504
 80131b0:	0801bdd4 	.word	0x0801bdd4
 80131b4:	0801c520 	.word	0x0801c520

080131b8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80131b8:	b590      	push	{r4, r7, lr}
 80131ba:	b087      	sub	sp, #28
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80131c0:	2300      	movs	r3, #0
 80131c2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80131c4:	2300      	movs	r3, #0
 80131c6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d106      	bne.n	80131dc <tcp_send_empty_ack+0x24>
 80131ce:	4b28      	ldr	r3, [pc, #160]	; (8013270 <tcp_send_empty_ack+0xb8>)
 80131d0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80131d4:	4927      	ldr	r1, [pc, #156]	; (8013274 <tcp_send_empty_ack+0xbc>)
 80131d6:	4828      	ldr	r0, [pc, #160]	; (8013278 <tcp_send_empty_ack+0xc0>)
 80131d8:	f005 fbea 	bl	80189b0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80131dc:	7dfb      	ldrb	r3, [r7, #23]
 80131de:	009b      	lsls	r3, r3, #2
 80131e0:	b2db      	uxtb	r3, r3
 80131e2:	f003 0304 	and.w	r3, r3, #4
 80131e6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80131e8:	7d7b      	ldrb	r3, [r7, #21]
 80131ea:	b29c      	uxth	r4, r3
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80131f0:	4618      	mov	r0, r3
 80131f2:	f7f8 f9d2 	bl	800b59a <lwip_htonl>
 80131f6:	4603      	mov	r3, r0
 80131f8:	2200      	movs	r2, #0
 80131fa:	4621      	mov	r1, r4
 80131fc:	6878      	ldr	r0, [r7, #4]
 80131fe:	f7ff fec3 	bl	8012f88 <tcp_output_alloc_header>
 8013202:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013204:	693b      	ldr	r3, [r7, #16]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d109      	bne.n	801321e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	8b5b      	ldrh	r3, [r3, #26]
 801320e:	f043 0303 	orr.w	r3, r3, #3
 8013212:	b29a      	uxth	r2, r3
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013218:	f06f 0301 	mvn.w	r3, #1
 801321c:	e023      	b.n	8013266 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801321e:	7dbb      	ldrb	r3, [r7, #22]
 8013220:	7dfa      	ldrb	r2, [r7, #23]
 8013222:	6939      	ldr	r1, [r7, #16]
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f7ff feed 	bl	8013004 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801322a:	687a      	ldr	r2, [r7, #4]
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	3304      	adds	r3, #4
 8013230:	6939      	ldr	r1, [r7, #16]
 8013232:	6878      	ldr	r0, [r7, #4]
 8013234:	f7ff ff24 	bl	8013080 <tcp_output_control_segment>
 8013238:	4603      	mov	r3, r0
 801323a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801323c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d007      	beq.n	8013254 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	8b5b      	ldrh	r3, [r3, #26]
 8013248:	f043 0303 	orr.w	r3, r3, #3
 801324c:	b29a      	uxth	r2, r3
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	835a      	strh	r2, [r3, #26]
 8013252:	e006      	b.n	8013262 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	8b5b      	ldrh	r3, [r3, #26]
 8013258:	f023 0303 	bic.w	r3, r3, #3
 801325c:	b29a      	uxth	r2, r3
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013262:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013266:	4618      	mov	r0, r3
 8013268:	371c      	adds	r7, #28
 801326a:	46bd      	mov	sp, r7
 801326c:	bd90      	pop	{r4, r7, pc}
 801326e:	bf00      	nop
 8013270:	0801bd80 	.word	0x0801bd80
 8013274:	0801c53c 	.word	0x0801c53c
 8013278:	0801bdd4 	.word	0x0801bdd4

0801327c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801327c:	b590      	push	{r4, r7, lr}
 801327e:	b087      	sub	sp, #28
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013284:	2300      	movs	r3, #0
 8013286:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d106      	bne.n	801329c <tcp_keepalive+0x20>
 801328e:	4b18      	ldr	r3, [pc, #96]	; (80132f0 <tcp_keepalive+0x74>)
 8013290:	f640 0224 	movw	r2, #2084	; 0x824
 8013294:	4917      	ldr	r1, [pc, #92]	; (80132f4 <tcp_keepalive+0x78>)
 8013296:	4818      	ldr	r0, [pc, #96]	; (80132f8 <tcp_keepalive+0x7c>)
 8013298:	f005 fb8a 	bl	80189b0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801329c:	7dfb      	ldrb	r3, [r7, #23]
 801329e:	b29c      	uxth	r4, r3
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80132a4:	3b01      	subs	r3, #1
 80132a6:	4618      	mov	r0, r3
 80132a8:	f7f8 f977 	bl	800b59a <lwip_htonl>
 80132ac:	4603      	mov	r3, r0
 80132ae:	2200      	movs	r2, #0
 80132b0:	4621      	mov	r1, r4
 80132b2:	6878      	ldr	r0, [r7, #4]
 80132b4:	f7ff fe68 	bl	8012f88 <tcp_output_alloc_header>
 80132b8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d102      	bne.n	80132c6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80132c0:	f04f 33ff 	mov.w	r3, #4294967295
 80132c4:	e010      	b.n	80132e8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80132c6:	7dfb      	ldrb	r3, [r7, #23]
 80132c8:	2200      	movs	r2, #0
 80132ca:	6939      	ldr	r1, [r7, #16]
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	f7ff fe99 	bl	8013004 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80132d2:	687a      	ldr	r2, [r7, #4]
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	3304      	adds	r3, #4
 80132d8:	6939      	ldr	r1, [r7, #16]
 80132da:	6878      	ldr	r0, [r7, #4]
 80132dc:	f7ff fed0 	bl	8013080 <tcp_output_control_segment>
 80132e0:	4603      	mov	r3, r0
 80132e2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80132e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80132e8:	4618      	mov	r0, r3
 80132ea:	371c      	adds	r7, #28
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bd90      	pop	{r4, r7, pc}
 80132f0:	0801bd80 	.word	0x0801bd80
 80132f4:	0801c55c 	.word	0x0801c55c
 80132f8:	0801bdd4 	.word	0x0801bdd4

080132fc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80132fc:	b590      	push	{r4, r7, lr}
 80132fe:	b08b      	sub	sp, #44	; 0x2c
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013304:	2300      	movs	r3, #0
 8013306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d106      	bne.n	801331e <tcp_zero_window_probe+0x22>
 8013310:	4b4c      	ldr	r3, [pc, #304]	; (8013444 <tcp_zero_window_probe+0x148>)
 8013312:	f640 024f 	movw	r2, #2127	; 0x84f
 8013316:	494c      	ldr	r1, [pc, #304]	; (8013448 <tcp_zero_window_probe+0x14c>)
 8013318:	484c      	ldr	r0, [pc, #304]	; (801344c <tcp_zero_window_probe+0x150>)
 801331a:	f005 fb49 	bl	80189b0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013322:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013324:	6a3b      	ldr	r3, [r7, #32]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d101      	bne.n	801332e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801332a:	2300      	movs	r3, #0
 801332c:	e086      	b.n	801343c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013334:	2bff      	cmp	r3, #255	; 0xff
 8013336:	d007      	beq.n	8013348 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801333e:	3301      	adds	r3, #1
 8013340:	b2da      	uxtb	r2, r3
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013348:	6a3b      	ldr	r3, [r7, #32]
 801334a:	68db      	ldr	r3, [r3, #12]
 801334c:	899b      	ldrh	r3, [r3, #12]
 801334e:	b29b      	uxth	r3, r3
 8013350:	4618      	mov	r0, r3
 8013352:	f7f8 f90d 	bl	800b570 <lwip_htons>
 8013356:	4603      	mov	r3, r0
 8013358:	b2db      	uxtb	r3, r3
 801335a:	f003 0301 	and.w	r3, r3, #1
 801335e:	2b00      	cmp	r3, #0
 8013360:	d005      	beq.n	801336e <tcp_zero_window_probe+0x72>
 8013362:	6a3b      	ldr	r3, [r7, #32]
 8013364:	891b      	ldrh	r3, [r3, #8]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d101      	bne.n	801336e <tcp_zero_window_probe+0x72>
 801336a:	2301      	movs	r3, #1
 801336c:	e000      	b.n	8013370 <tcp_zero_window_probe+0x74>
 801336e:	2300      	movs	r3, #0
 8013370:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013372:	7ffb      	ldrb	r3, [r7, #31]
 8013374:	2b00      	cmp	r3, #0
 8013376:	bf0c      	ite	eq
 8013378:	2301      	moveq	r3, #1
 801337a:	2300      	movne	r3, #0
 801337c:	b2db      	uxtb	r3, r3
 801337e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013384:	b299      	uxth	r1, r3
 8013386:	6a3b      	ldr	r3, [r7, #32]
 8013388:	68db      	ldr	r3, [r3, #12]
 801338a:	685b      	ldr	r3, [r3, #4]
 801338c:	8bba      	ldrh	r2, [r7, #28]
 801338e:	6878      	ldr	r0, [r7, #4]
 8013390:	f7ff fdfa 	bl	8012f88 <tcp_output_alloc_header>
 8013394:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013396:	69bb      	ldr	r3, [r7, #24]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d102      	bne.n	80133a2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801339c:	f04f 33ff 	mov.w	r3, #4294967295
 80133a0:	e04c      	b.n	801343c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80133a2:	69bb      	ldr	r3, [r7, #24]
 80133a4:	685b      	ldr	r3, [r3, #4]
 80133a6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80133a8:	7ffb      	ldrb	r3, [r7, #31]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d011      	beq.n	80133d2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80133ae:	697b      	ldr	r3, [r7, #20]
 80133b0:	899b      	ldrh	r3, [r3, #12]
 80133b2:	b29b      	uxth	r3, r3
 80133b4:	b21b      	sxth	r3, r3
 80133b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80133ba:	b21c      	sxth	r4, r3
 80133bc:	2011      	movs	r0, #17
 80133be:	f7f8 f8d7 	bl	800b570 <lwip_htons>
 80133c2:	4603      	mov	r3, r0
 80133c4:	b21b      	sxth	r3, r3
 80133c6:	4323      	orrs	r3, r4
 80133c8:	b21b      	sxth	r3, r3
 80133ca:	b29a      	uxth	r2, r3
 80133cc:	697b      	ldr	r3, [r7, #20]
 80133ce:	819a      	strh	r2, [r3, #12]
 80133d0:	e010      	b.n	80133f4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80133d2:	69bb      	ldr	r3, [r7, #24]
 80133d4:	685b      	ldr	r3, [r3, #4]
 80133d6:	3314      	adds	r3, #20
 80133d8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80133da:	6a3b      	ldr	r3, [r7, #32]
 80133dc:	6858      	ldr	r0, [r3, #4]
 80133de:	6a3b      	ldr	r3, [r7, #32]
 80133e0:	685b      	ldr	r3, [r3, #4]
 80133e2:	891a      	ldrh	r2, [r3, #8]
 80133e4:	6a3b      	ldr	r3, [r7, #32]
 80133e6:	891b      	ldrh	r3, [r3, #8]
 80133e8:	1ad3      	subs	r3, r2, r3
 80133ea:	b29b      	uxth	r3, r3
 80133ec:	2201      	movs	r2, #1
 80133ee:	6939      	ldr	r1, [r7, #16]
 80133f0:	f7f9 fef8 	bl	800d1e4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80133f4:	6a3b      	ldr	r3, [r7, #32]
 80133f6:	68db      	ldr	r3, [r3, #12]
 80133f8:	685b      	ldr	r3, [r3, #4]
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7f8 f8cd 	bl	800b59a <lwip_htonl>
 8013400:	4603      	mov	r3, r0
 8013402:	3301      	adds	r3, #1
 8013404:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	1ad3      	subs	r3, r2, r3
 801340e:	2b00      	cmp	r3, #0
 8013410:	da02      	bge.n	8013418 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	68fa      	ldr	r2, [r7, #12]
 8013416:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801341c:	2200      	movs	r2, #0
 801341e:	69b9      	ldr	r1, [r7, #24]
 8013420:	6878      	ldr	r0, [r7, #4]
 8013422:	f7ff fdef 	bl	8013004 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013426:	687a      	ldr	r2, [r7, #4]
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	3304      	adds	r3, #4
 801342c:	69b9      	ldr	r1, [r7, #24]
 801342e:	6878      	ldr	r0, [r7, #4]
 8013430:	f7ff fe26 	bl	8013080 <tcp_output_control_segment>
 8013434:	4603      	mov	r3, r0
 8013436:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013438:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801343c:	4618      	mov	r0, r3
 801343e:	372c      	adds	r7, #44	; 0x2c
 8013440:	46bd      	mov	sp, r7
 8013442:	bd90      	pop	{r4, r7, pc}
 8013444:	0801bd80 	.word	0x0801bd80
 8013448:	0801c578 	.word	0x0801c578
 801344c:	0801bdd4 	.word	0x0801bdd4

08013450 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b082      	sub	sp, #8
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013458:	f7f9 ffb2 	bl	800d3c0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801345c:	4b0a      	ldr	r3, [pc, #40]	; (8013488 <tcpip_tcp_timer+0x38>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d103      	bne.n	801346c <tcpip_tcp_timer+0x1c>
 8013464:	4b09      	ldr	r3, [pc, #36]	; (801348c <tcpip_tcp_timer+0x3c>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d005      	beq.n	8013478 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801346c:	2200      	movs	r2, #0
 801346e:	4908      	ldr	r1, [pc, #32]	; (8013490 <tcpip_tcp_timer+0x40>)
 8013470:	20fa      	movs	r0, #250	; 0xfa
 8013472:	f000 f8f3 	bl	801365c <sys_timeout>
 8013476:	e003      	b.n	8013480 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013478:	4b06      	ldr	r3, [pc, #24]	; (8013494 <tcpip_tcp_timer+0x44>)
 801347a:	2200      	movs	r2, #0
 801347c:	601a      	str	r2, [r3, #0]
  }
}
 801347e:	bf00      	nop
 8013480:	bf00      	nop
 8013482:	3708      	adds	r7, #8
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}
 8013488:	20010e0c 	.word	0x20010e0c
 801348c:	20010e10 	.word	0x20010e10
 8013490:	08013451 	.word	0x08013451
 8013494:	20010e58 	.word	0x20010e58

08013498 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801349c:	4b0a      	ldr	r3, [pc, #40]	; (80134c8 <tcp_timer_needed+0x30>)
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d10f      	bne.n	80134c4 <tcp_timer_needed+0x2c>
 80134a4:	4b09      	ldr	r3, [pc, #36]	; (80134cc <tcp_timer_needed+0x34>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d103      	bne.n	80134b4 <tcp_timer_needed+0x1c>
 80134ac:	4b08      	ldr	r3, [pc, #32]	; (80134d0 <tcp_timer_needed+0x38>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d007      	beq.n	80134c4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80134b4:	4b04      	ldr	r3, [pc, #16]	; (80134c8 <tcp_timer_needed+0x30>)
 80134b6:	2201      	movs	r2, #1
 80134b8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80134ba:	2200      	movs	r2, #0
 80134bc:	4905      	ldr	r1, [pc, #20]	; (80134d4 <tcp_timer_needed+0x3c>)
 80134be:	20fa      	movs	r0, #250	; 0xfa
 80134c0:	f000 f8cc 	bl	801365c <sys_timeout>
  }
}
 80134c4:	bf00      	nop
 80134c6:	bd80      	pop	{r7, pc}
 80134c8:	20010e58 	.word	0x20010e58
 80134cc:	20010e0c 	.word	0x20010e0c
 80134d0:	20010e10 	.word	0x20010e10
 80134d4:	08013451 	.word	0x08013451

080134d8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b086      	sub	sp, #24
 80134dc:	af00      	add	r7, sp, #0
 80134de:	60f8      	str	r0, [r7, #12]
 80134e0:	60b9      	str	r1, [r7, #8]
 80134e2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80134e4:	200a      	movs	r0, #10
 80134e6:	f7f8 fd51 	bl	800bf8c <memp_malloc>
 80134ea:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80134ec:	693b      	ldr	r3, [r7, #16]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d109      	bne.n	8013506 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80134f2:	693b      	ldr	r3, [r7, #16]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d151      	bne.n	801359c <sys_timeout_abs+0xc4>
 80134f8:	4b2a      	ldr	r3, [pc, #168]	; (80135a4 <sys_timeout_abs+0xcc>)
 80134fa:	22be      	movs	r2, #190	; 0xbe
 80134fc:	492a      	ldr	r1, [pc, #168]	; (80135a8 <sys_timeout_abs+0xd0>)
 80134fe:	482b      	ldr	r0, [pc, #172]	; (80135ac <sys_timeout_abs+0xd4>)
 8013500:	f005 fa56 	bl	80189b0 <iprintf>
    return;
 8013504:	e04a      	b.n	801359c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013506:	693b      	ldr	r3, [r7, #16]
 8013508:	2200      	movs	r2, #0
 801350a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	68ba      	ldr	r2, [r7, #8]
 8013510:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	687a      	ldr	r2, [r7, #4]
 8013516:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013518:	693b      	ldr	r3, [r7, #16]
 801351a:	68fa      	ldr	r2, [r7, #12]
 801351c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801351e:	4b24      	ldr	r3, [pc, #144]	; (80135b0 <sys_timeout_abs+0xd8>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d103      	bne.n	801352e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013526:	4a22      	ldr	r2, [pc, #136]	; (80135b0 <sys_timeout_abs+0xd8>)
 8013528:	693b      	ldr	r3, [r7, #16]
 801352a:	6013      	str	r3, [r2, #0]
    return;
 801352c:	e037      	b.n	801359e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801352e:	693b      	ldr	r3, [r7, #16]
 8013530:	685a      	ldr	r2, [r3, #4]
 8013532:	4b1f      	ldr	r3, [pc, #124]	; (80135b0 <sys_timeout_abs+0xd8>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	685b      	ldr	r3, [r3, #4]
 8013538:	1ad3      	subs	r3, r2, r3
 801353a:	0fdb      	lsrs	r3, r3, #31
 801353c:	f003 0301 	and.w	r3, r3, #1
 8013540:	b2db      	uxtb	r3, r3
 8013542:	2b00      	cmp	r3, #0
 8013544:	d007      	beq.n	8013556 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013546:	4b1a      	ldr	r3, [pc, #104]	; (80135b0 <sys_timeout_abs+0xd8>)
 8013548:	681a      	ldr	r2, [r3, #0]
 801354a:	693b      	ldr	r3, [r7, #16]
 801354c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801354e:	4a18      	ldr	r2, [pc, #96]	; (80135b0 <sys_timeout_abs+0xd8>)
 8013550:	693b      	ldr	r3, [r7, #16]
 8013552:	6013      	str	r3, [r2, #0]
 8013554:	e023      	b.n	801359e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013556:	4b16      	ldr	r3, [pc, #88]	; (80135b0 <sys_timeout_abs+0xd8>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	617b      	str	r3, [r7, #20]
 801355c:	e01a      	b.n	8013594 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d00b      	beq.n	801357e <sys_timeout_abs+0xa6>
 8013566:	693b      	ldr	r3, [r7, #16]
 8013568:	685a      	ldr	r2, [r3, #4]
 801356a:	697b      	ldr	r3, [r7, #20]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	685b      	ldr	r3, [r3, #4]
 8013570:	1ad3      	subs	r3, r2, r3
 8013572:	0fdb      	lsrs	r3, r3, #31
 8013574:	f003 0301 	and.w	r3, r3, #1
 8013578:	b2db      	uxtb	r3, r3
 801357a:	2b00      	cmp	r3, #0
 801357c:	d007      	beq.n	801358e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801357e:	697b      	ldr	r3, [r7, #20]
 8013580:	681a      	ldr	r2, [r3, #0]
 8013582:	693b      	ldr	r3, [r7, #16]
 8013584:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013586:	697b      	ldr	r3, [r7, #20]
 8013588:	693a      	ldr	r2, [r7, #16]
 801358a:	601a      	str	r2, [r3, #0]
        break;
 801358c:	e007      	b.n	801359e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801358e:	697b      	ldr	r3, [r7, #20]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	617b      	str	r3, [r7, #20]
 8013594:	697b      	ldr	r3, [r7, #20]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d1e1      	bne.n	801355e <sys_timeout_abs+0x86>
 801359a:	e000      	b.n	801359e <sys_timeout_abs+0xc6>
    return;
 801359c:	bf00      	nop
      }
    }
  }
}
 801359e:	3718      	adds	r7, #24
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bd80      	pop	{r7, pc}
 80135a4:	0801c59c 	.word	0x0801c59c
 80135a8:	0801c5d0 	.word	0x0801c5d0
 80135ac:	0801c610 	.word	0x0801c610
 80135b0:	20010e50 	.word	0x20010e50

080135b4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b086      	sub	sp, #24
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80135c0:	697b      	ldr	r3, [r7, #20]
 80135c2:	685b      	ldr	r3, [r3, #4]
 80135c4:	4798      	blx	r3

  now = sys_now();
 80135c6:	f7f1 fc81 	bl	8004ecc <sys_now>
 80135ca:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80135cc:	697b      	ldr	r3, [r7, #20]
 80135ce:	681a      	ldr	r2, [r3, #0]
 80135d0:	4b0f      	ldr	r3, [pc, #60]	; (8013610 <lwip_cyclic_timer+0x5c>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	4413      	add	r3, r2
 80135d6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80135d8:	68fa      	ldr	r2, [r7, #12]
 80135da:	693b      	ldr	r3, [r7, #16]
 80135dc:	1ad3      	subs	r3, r2, r3
 80135de:	0fdb      	lsrs	r3, r3, #31
 80135e0:	f003 0301 	and.w	r3, r3, #1
 80135e4:	b2db      	uxtb	r3, r3
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d009      	beq.n	80135fe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	681a      	ldr	r2, [r3, #0]
 80135ee:	693b      	ldr	r3, [r7, #16]
 80135f0:	4413      	add	r3, r2
 80135f2:	687a      	ldr	r2, [r7, #4]
 80135f4:	4907      	ldr	r1, [pc, #28]	; (8013614 <lwip_cyclic_timer+0x60>)
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7ff ff6e 	bl	80134d8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80135fc:	e004      	b.n	8013608 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80135fe:	687a      	ldr	r2, [r7, #4]
 8013600:	4904      	ldr	r1, [pc, #16]	; (8013614 <lwip_cyclic_timer+0x60>)
 8013602:	68f8      	ldr	r0, [r7, #12]
 8013604:	f7ff ff68 	bl	80134d8 <sys_timeout_abs>
}
 8013608:	bf00      	nop
 801360a:	3718      	adds	r7, #24
 801360c:	46bd      	mov	sp, r7
 801360e:	bd80      	pop	{r7, pc}
 8013610:	20010e54 	.word	0x20010e54
 8013614:	080135b5 	.word	0x080135b5

08013618 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b082      	sub	sp, #8
 801361c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801361e:	2301      	movs	r3, #1
 8013620:	607b      	str	r3, [r7, #4]
 8013622:	e00e      	b.n	8013642 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013624:	4a0b      	ldr	r2, [pc, #44]	; (8013654 <sys_timeouts_init+0x3c>)
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	00db      	lsls	r3, r3, #3
 8013630:	4a08      	ldr	r2, [pc, #32]	; (8013654 <sys_timeouts_init+0x3c>)
 8013632:	4413      	add	r3, r2
 8013634:	461a      	mov	r2, r3
 8013636:	4908      	ldr	r1, [pc, #32]	; (8013658 <sys_timeouts_init+0x40>)
 8013638:	f000 f810 	bl	801365c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	3301      	adds	r3, #1
 8013640:	607b      	str	r3, [r7, #4]
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	2b04      	cmp	r3, #4
 8013646:	d9ed      	bls.n	8013624 <sys_timeouts_init+0xc>
  }
}
 8013648:	bf00      	nop
 801364a:	bf00      	nop
 801364c:	3708      	adds	r7, #8
 801364e:	46bd      	mov	sp, r7
 8013650:	bd80      	pop	{r7, pc}
 8013652:	bf00      	nop
 8013654:	080276ac 	.word	0x080276ac
 8013658:	080135b5 	.word	0x080135b5

0801365c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b086      	sub	sp, #24
 8013660:	af00      	add	r7, sp, #0
 8013662:	60f8      	str	r0, [r7, #12]
 8013664:	60b9      	str	r1, [r7, #8]
 8013666:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801366e:	d306      	bcc.n	801367e <sys_timeout+0x22>
 8013670:	4b0a      	ldr	r3, [pc, #40]	; (801369c <sys_timeout+0x40>)
 8013672:	f240 1229 	movw	r2, #297	; 0x129
 8013676:	490a      	ldr	r1, [pc, #40]	; (80136a0 <sys_timeout+0x44>)
 8013678:	480a      	ldr	r0, [pc, #40]	; (80136a4 <sys_timeout+0x48>)
 801367a:	f005 f999 	bl	80189b0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801367e:	f7f1 fc25 	bl	8004ecc <sys_now>
 8013682:	4602      	mov	r2, r0
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	4413      	add	r3, r2
 8013688:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801368a:	687a      	ldr	r2, [r7, #4]
 801368c:	68b9      	ldr	r1, [r7, #8]
 801368e:	6978      	ldr	r0, [r7, #20]
 8013690:	f7ff ff22 	bl	80134d8 <sys_timeout_abs>
#endif
}
 8013694:	bf00      	nop
 8013696:	3718      	adds	r7, #24
 8013698:	46bd      	mov	sp, r7
 801369a:	bd80      	pop	{r7, pc}
 801369c:	0801c59c 	.word	0x0801c59c
 80136a0:	0801c638 	.word	0x0801c638
 80136a4:	0801c610 	.word	0x0801c610

080136a8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b084      	sub	sp, #16
 80136ac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80136ae:	f7f1 fc0d 	bl	8004ecc <sys_now>
 80136b2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80136b4:	4b17      	ldr	r3, [pc, #92]	; (8013714 <sys_check_timeouts+0x6c>)
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80136ba:	68bb      	ldr	r3, [r7, #8]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d022      	beq.n	8013706 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80136c0:	68bb      	ldr	r3, [r7, #8]
 80136c2:	685b      	ldr	r3, [r3, #4]
 80136c4:	68fa      	ldr	r2, [r7, #12]
 80136c6:	1ad3      	subs	r3, r2, r3
 80136c8:	0fdb      	lsrs	r3, r3, #31
 80136ca:	f003 0301 	and.w	r3, r3, #1
 80136ce:	b2db      	uxtb	r3, r3
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d11a      	bne.n	801370a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80136d4:	68bb      	ldr	r3, [r7, #8]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	4a0e      	ldr	r2, [pc, #56]	; (8013714 <sys_check_timeouts+0x6c>)
 80136da:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	689b      	ldr	r3, [r3, #8]
 80136e0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80136e2:	68bb      	ldr	r3, [r7, #8]
 80136e4:	68db      	ldr	r3, [r3, #12]
 80136e6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80136e8:	68bb      	ldr	r3, [r7, #8]
 80136ea:	685b      	ldr	r3, [r3, #4]
 80136ec:	4a0a      	ldr	r2, [pc, #40]	; (8013718 <sys_check_timeouts+0x70>)
 80136ee:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80136f0:	68b9      	ldr	r1, [r7, #8]
 80136f2:	200a      	movs	r0, #10
 80136f4:	f7f8 fcc0 	bl	800c078 <memp_free>
    if (handler != NULL) {
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d0da      	beq.n	80136b4 <sys_check_timeouts+0xc>
      handler(arg);
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	6838      	ldr	r0, [r7, #0]
 8013702:	4798      	blx	r3
  do {
 8013704:	e7d6      	b.n	80136b4 <sys_check_timeouts+0xc>
      return;
 8013706:	bf00      	nop
 8013708:	e000      	b.n	801370c <sys_check_timeouts+0x64>
      return;
 801370a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801370c:	3710      	adds	r7, #16
 801370e:	46bd      	mov	sp, r7
 8013710:	bd80      	pop	{r7, pc}
 8013712:	bf00      	nop
 8013714:	20010e50 	.word	0x20010e50
 8013718:	20010e54 	.word	0x20010e54

0801371c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b082      	sub	sp, #8
 8013720:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013722:	4b16      	ldr	r3, [pc, #88]	; (801377c <sys_timeouts_sleeptime+0x60>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d102      	bne.n	8013730 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801372a:	f04f 33ff 	mov.w	r3, #4294967295
 801372e:	e020      	b.n	8013772 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013730:	f7f1 fbcc 	bl	8004ecc <sys_now>
 8013734:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013736:	4b11      	ldr	r3, [pc, #68]	; (801377c <sys_timeouts_sleeptime+0x60>)
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	685a      	ldr	r2, [r3, #4]
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	1ad3      	subs	r3, r2, r3
 8013740:	0fdb      	lsrs	r3, r3, #31
 8013742:	f003 0301 	and.w	r3, r3, #1
 8013746:	b2db      	uxtb	r3, r3
 8013748:	2b00      	cmp	r3, #0
 801374a:	d001      	beq.n	8013750 <sys_timeouts_sleeptime+0x34>
    return 0;
 801374c:	2300      	movs	r3, #0
 801374e:	e010      	b.n	8013772 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013750:	4b0a      	ldr	r3, [pc, #40]	; (801377c <sys_timeouts_sleeptime+0x60>)
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	685a      	ldr	r2, [r3, #4]
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	1ad3      	subs	r3, r2, r3
 801375a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801375c:	683b      	ldr	r3, [r7, #0]
 801375e:	2b00      	cmp	r3, #0
 8013760:	da06      	bge.n	8013770 <sys_timeouts_sleeptime+0x54>
 8013762:	4b07      	ldr	r3, [pc, #28]	; (8013780 <sys_timeouts_sleeptime+0x64>)
 8013764:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013768:	4906      	ldr	r1, [pc, #24]	; (8013784 <sys_timeouts_sleeptime+0x68>)
 801376a:	4807      	ldr	r0, [pc, #28]	; (8013788 <sys_timeouts_sleeptime+0x6c>)
 801376c:	f005 f920 	bl	80189b0 <iprintf>
    return ret;
 8013770:	683b      	ldr	r3, [r7, #0]
  }
}
 8013772:	4618      	mov	r0, r3
 8013774:	3708      	adds	r7, #8
 8013776:	46bd      	mov	sp, r7
 8013778:	bd80      	pop	{r7, pc}
 801377a:	bf00      	nop
 801377c:	20010e50 	.word	0x20010e50
 8013780:	0801c59c 	.word	0x0801c59c
 8013784:	0801c670 	.word	0x0801c670
 8013788:	0801c610 	.word	0x0801c610

0801378c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013790:	f005 f820 	bl	80187d4 <rand>
 8013794:	4603      	mov	r3, r0
 8013796:	b29b      	uxth	r3, r3
 8013798:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801379c:	b29b      	uxth	r3, r3
 801379e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80137a2:	b29a      	uxth	r2, r3
 80137a4:	4b01      	ldr	r3, [pc, #4]	; (80137ac <udp_init+0x20>)
 80137a6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80137a8:	bf00      	nop
 80137aa:	bd80      	pop	{r7, pc}
 80137ac:	2000002c 	.word	0x2000002c

080137b0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80137b0:	b480      	push	{r7}
 80137b2:	b083      	sub	sp, #12
 80137b4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80137b6:	2300      	movs	r3, #0
 80137b8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80137ba:	4b17      	ldr	r3, [pc, #92]	; (8013818 <udp_new_port+0x68>)
 80137bc:	881b      	ldrh	r3, [r3, #0]
 80137be:	1c5a      	adds	r2, r3, #1
 80137c0:	b291      	uxth	r1, r2
 80137c2:	4a15      	ldr	r2, [pc, #84]	; (8013818 <udp_new_port+0x68>)
 80137c4:	8011      	strh	r1, [r2, #0]
 80137c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80137ca:	4293      	cmp	r3, r2
 80137cc:	d103      	bne.n	80137d6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80137ce:	4b12      	ldr	r3, [pc, #72]	; (8013818 <udp_new_port+0x68>)
 80137d0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80137d4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80137d6:	4b11      	ldr	r3, [pc, #68]	; (801381c <udp_new_port+0x6c>)
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	603b      	str	r3, [r7, #0]
 80137dc:	e011      	b.n	8013802 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80137de:	683b      	ldr	r3, [r7, #0]
 80137e0:	8a5a      	ldrh	r2, [r3, #18]
 80137e2:	4b0d      	ldr	r3, [pc, #52]	; (8013818 <udp_new_port+0x68>)
 80137e4:	881b      	ldrh	r3, [r3, #0]
 80137e6:	429a      	cmp	r2, r3
 80137e8:	d108      	bne.n	80137fc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80137ea:	88fb      	ldrh	r3, [r7, #6]
 80137ec:	3301      	adds	r3, #1
 80137ee:	80fb      	strh	r3, [r7, #6]
 80137f0:	88fb      	ldrh	r3, [r7, #6]
 80137f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80137f6:	d3e0      	bcc.n	80137ba <udp_new_port+0xa>
        return 0;
 80137f8:	2300      	movs	r3, #0
 80137fa:	e007      	b.n	801380c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80137fc:	683b      	ldr	r3, [r7, #0]
 80137fe:	68db      	ldr	r3, [r3, #12]
 8013800:	603b      	str	r3, [r7, #0]
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d1ea      	bne.n	80137de <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013808:	4b03      	ldr	r3, [pc, #12]	; (8013818 <udp_new_port+0x68>)
 801380a:	881b      	ldrh	r3, [r3, #0]
}
 801380c:	4618      	mov	r0, r3
 801380e:	370c      	adds	r7, #12
 8013810:	46bd      	mov	sp, r7
 8013812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013816:	4770      	bx	lr
 8013818:	2000002c 	.word	0x2000002c
 801381c:	20010e5c 	.word	0x20010e5c

08013820 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b084      	sub	sp, #16
 8013824:	af00      	add	r7, sp, #0
 8013826:	60f8      	str	r0, [r7, #12]
 8013828:	60b9      	str	r1, [r7, #8]
 801382a:	4613      	mov	r3, r2
 801382c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d105      	bne.n	8013840 <udp_input_local_match+0x20>
 8013834:	4b27      	ldr	r3, [pc, #156]	; (80138d4 <udp_input_local_match+0xb4>)
 8013836:	2287      	movs	r2, #135	; 0x87
 8013838:	4927      	ldr	r1, [pc, #156]	; (80138d8 <udp_input_local_match+0xb8>)
 801383a:	4828      	ldr	r0, [pc, #160]	; (80138dc <udp_input_local_match+0xbc>)
 801383c:	f005 f8b8 	bl	80189b0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013840:	68bb      	ldr	r3, [r7, #8]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d105      	bne.n	8013852 <udp_input_local_match+0x32>
 8013846:	4b23      	ldr	r3, [pc, #140]	; (80138d4 <udp_input_local_match+0xb4>)
 8013848:	2288      	movs	r2, #136	; 0x88
 801384a:	4925      	ldr	r1, [pc, #148]	; (80138e0 <udp_input_local_match+0xc0>)
 801384c:	4823      	ldr	r0, [pc, #140]	; (80138dc <udp_input_local_match+0xbc>)
 801384e:	f005 f8af 	bl	80189b0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	7a1b      	ldrb	r3, [r3, #8]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d00b      	beq.n	8013872 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	7a1a      	ldrb	r2, [r3, #8]
 801385e:	4b21      	ldr	r3, [pc, #132]	; (80138e4 <udp_input_local_match+0xc4>)
 8013860:	685b      	ldr	r3, [r3, #4]
 8013862:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013866:	3301      	adds	r3, #1
 8013868:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801386a:	429a      	cmp	r2, r3
 801386c:	d001      	beq.n	8013872 <udp_input_local_match+0x52>
    return 0;
 801386e:	2300      	movs	r3, #0
 8013870:	e02b      	b.n	80138ca <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013872:	79fb      	ldrb	r3, [r7, #7]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d018      	beq.n	80138aa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d013      	beq.n	80138a6 <udp_input_local_match+0x86>
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d00f      	beq.n	80138a6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013886:	4b17      	ldr	r3, [pc, #92]	; (80138e4 <udp_input_local_match+0xc4>)
 8013888:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801388a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801388e:	d00a      	beq.n	80138a6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	681a      	ldr	r2, [r3, #0]
 8013894:	4b13      	ldr	r3, [pc, #76]	; (80138e4 <udp_input_local_match+0xc4>)
 8013896:	695b      	ldr	r3, [r3, #20]
 8013898:	405a      	eors	r2, r3
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	3308      	adds	r3, #8
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d110      	bne.n	80138c8 <udp_input_local_match+0xa8>
          return 1;
 80138a6:	2301      	movs	r3, #1
 80138a8:	e00f      	b.n	80138ca <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d009      	beq.n	80138c4 <udp_input_local_match+0xa4>
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d005      	beq.n	80138c4 <udp_input_local_match+0xa4>
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	681a      	ldr	r2, [r3, #0]
 80138bc:	4b09      	ldr	r3, [pc, #36]	; (80138e4 <udp_input_local_match+0xc4>)
 80138be:	695b      	ldr	r3, [r3, #20]
 80138c0:	429a      	cmp	r2, r3
 80138c2:	d101      	bne.n	80138c8 <udp_input_local_match+0xa8>
        return 1;
 80138c4:	2301      	movs	r3, #1
 80138c6:	e000      	b.n	80138ca <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80138c8:	2300      	movs	r3, #0
}
 80138ca:	4618      	mov	r0, r3
 80138cc:	3710      	adds	r7, #16
 80138ce:	46bd      	mov	sp, r7
 80138d0:	bd80      	pop	{r7, pc}
 80138d2:	bf00      	nop
 80138d4:	0801c684 	.word	0x0801c684
 80138d8:	0801c6b4 	.word	0x0801c6b4
 80138dc:	0801c6d8 	.word	0x0801c6d8
 80138e0:	0801c700 	.word	0x0801c700
 80138e4:	2000d68c 	.word	0x2000d68c

080138e8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80138e8:	b590      	push	{r4, r7, lr}
 80138ea:	b08d      	sub	sp, #52	; 0x34
 80138ec:	af02      	add	r7, sp, #8
 80138ee:	6078      	str	r0, [r7, #4]
 80138f0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80138f2:	2300      	movs	r3, #0
 80138f4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d105      	bne.n	8013908 <udp_input+0x20>
 80138fc:	4b7c      	ldr	r3, [pc, #496]	; (8013af0 <udp_input+0x208>)
 80138fe:	22cf      	movs	r2, #207	; 0xcf
 8013900:	497c      	ldr	r1, [pc, #496]	; (8013af4 <udp_input+0x20c>)
 8013902:	487d      	ldr	r0, [pc, #500]	; (8013af8 <udp_input+0x210>)
 8013904:	f005 f854 	bl	80189b0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013908:	683b      	ldr	r3, [r7, #0]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d105      	bne.n	801391a <udp_input+0x32>
 801390e:	4b78      	ldr	r3, [pc, #480]	; (8013af0 <udp_input+0x208>)
 8013910:	22d0      	movs	r2, #208	; 0xd0
 8013912:	497a      	ldr	r1, [pc, #488]	; (8013afc <udp_input+0x214>)
 8013914:	4878      	ldr	r0, [pc, #480]	; (8013af8 <udp_input+0x210>)
 8013916:	f005 f84b 	bl	80189b0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	895b      	ldrh	r3, [r3, #10]
 801391e:	2b07      	cmp	r3, #7
 8013920:	d803      	bhi.n	801392a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013922:	6878      	ldr	r0, [r7, #4]
 8013924:	f7f9 fa58 	bl	800cdd8 <pbuf_free>
    goto end;
 8013928:	e0de      	b.n	8013ae8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	685b      	ldr	r3, [r3, #4]
 801392e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013930:	4b73      	ldr	r3, [pc, #460]	; (8013b00 <udp_input+0x218>)
 8013932:	695b      	ldr	r3, [r3, #20]
 8013934:	4a72      	ldr	r2, [pc, #456]	; (8013b00 <udp_input+0x218>)
 8013936:	6812      	ldr	r2, [r2, #0]
 8013938:	4611      	mov	r1, r2
 801393a:	4618      	mov	r0, r3
 801393c:	f003 fe12 	bl	8017564 <ip4_addr_isbroadcast_u32>
 8013940:	4603      	mov	r3, r0
 8013942:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013944:	697b      	ldr	r3, [r7, #20]
 8013946:	881b      	ldrh	r3, [r3, #0]
 8013948:	b29b      	uxth	r3, r3
 801394a:	4618      	mov	r0, r3
 801394c:	f7f7 fe10 	bl	800b570 <lwip_htons>
 8013950:	4603      	mov	r3, r0
 8013952:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013954:	697b      	ldr	r3, [r7, #20]
 8013956:	885b      	ldrh	r3, [r3, #2]
 8013958:	b29b      	uxth	r3, r3
 801395a:	4618      	mov	r0, r3
 801395c:	f7f7 fe08 	bl	800b570 <lwip_htons>
 8013960:	4603      	mov	r3, r0
 8013962:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013964:	2300      	movs	r3, #0
 8013966:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013968:	2300      	movs	r3, #0
 801396a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801396c:	2300      	movs	r3, #0
 801396e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013970:	4b64      	ldr	r3, [pc, #400]	; (8013b04 <udp_input+0x21c>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	627b      	str	r3, [r7, #36]	; 0x24
 8013976:	e054      	b.n	8013a22 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801397a:	8a5b      	ldrh	r3, [r3, #18]
 801397c:	89fa      	ldrh	r2, [r7, #14]
 801397e:	429a      	cmp	r2, r3
 8013980:	d14a      	bne.n	8013a18 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013982:	7cfb      	ldrb	r3, [r7, #19]
 8013984:	461a      	mov	r2, r3
 8013986:	6839      	ldr	r1, [r7, #0]
 8013988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801398a:	f7ff ff49 	bl	8013820 <udp_input_local_match>
 801398e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013990:	2b00      	cmp	r3, #0
 8013992:	d041      	beq.n	8013a18 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013996:	7c1b      	ldrb	r3, [r3, #16]
 8013998:	f003 0304 	and.w	r3, r3, #4
 801399c:	2b00      	cmp	r3, #0
 801399e:	d11d      	bne.n	80139dc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80139a0:	69fb      	ldr	r3, [r7, #28]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d102      	bne.n	80139ac <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80139a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139a8:	61fb      	str	r3, [r7, #28]
 80139aa:	e017      	b.n	80139dc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80139ac:	7cfb      	ldrb	r3, [r7, #19]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d014      	beq.n	80139dc <udp_input+0xf4>
 80139b2:	4b53      	ldr	r3, [pc, #332]	; (8013b00 <udp_input+0x218>)
 80139b4:	695b      	ldr	r3, [r3, #20]
 80139b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139ba:	d10f      	bne.n	80139dc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80139bc:	69fb      	ldr	r3, [r7, #28]
 80139be:	681a      	ldr	r2, [r3, #0]
 80139c0:	683b      	ldr	r3, [r7, #0]
 80139c2:	3304      	adds	r3, #4
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	429a      	cmp	r2, r3
 80139c8:	d008      	beq.n	80139dc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80139ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139cc:	681a      	ldr	r2, [r3, #0]
 80139ce:	683b      	ldr	r3, [r7, #0]
 80139d0:	3304      	adds	r3, #4
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	429a      	cmp	r2, r3
 80139d6:	d101      	bne.n	80139dc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80139d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139da:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80139dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139de:	8a9b      	ldrh	r3, [r3, #20]
 80139e0:	8a3a      	ldrh	r2, [r7, #16]
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d118      	bne.n	8013a18 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80139e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d005      	beq.n	80139fa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80139ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f0:	685a      	ldr	r2, [r3, #4]
 80139f2:	4b43      	ldr	r3, [pc, #268]	; (8013b00 <udp_input+0x218>)
 80139f4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80139f6:	429a      	cmp	r2, r3
 80139f8:	d10e      	bne.n	8013a18 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80139fa:	6a3b      	ldr	r3, [r7, #32]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d014      	beq.n	8013a2a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a02:	68da      	ldr	r2, [r3, #12]
 8013a04:	6a3b      	ldr	r3, [r7, #32]
 8013a06:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013a08:	4b3e      	ldr	r3, [pc, #248]	; (8013b04 <udp_input+0x21c>)
 8013a0a:	681a      	ldr	r2, [r3, #0]
 8013a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a0e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013a10:	4a3c      	ldr	r2, [pc, #240]	; (8013b04 <udp_input+0x21c>)
 8013a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a14:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013a16:	e008      	b.n	8013a2a <udp_input+0x142>
      }
    }

    prev = pcb;
 8013a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a1a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a1e:	68db      	ldr	r3, [r3, #12]
 8013a20:	627b      	str	r3, [r7, #36]	; 0x24
 8013a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d1a7      	bne.n	8013978 <udp_input+0x90>
 8013a28:	e000      	b.n	8013a2c <udp_input+0x144>
        break;
 8013a2a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d101      	bne.n	8013a36 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013a32:	69fb      	ldr	r3, [r7, #28]
 8013a34:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d002      	beq.n	8013a42 <udp_input+0x15a>
    for_us = 1;
 8013a3c:	2301      	movs	r3, #1
 8013a3e:	76fb      	strb	r3, [r7, #27]
 8013a40:	e00a      	b.n	8013a58 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	3304      	adds	r3, #4
 8013a46:	681a      	ldr	r2, [r3, #0]
 8013a48:	4b2d      	ldr	r3, [pc, #180]	; (8013b00 <udp_input+0x218>)
 8013a4a:	695b      	ldr	r3, [r3, #20]
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	bf0c      	ite	eq
 8013a50:	2301      	moveq	r3, #1
 8013a52:	2300      	movne	r3, #0
 8013a54:	b2db      	uxtb	r3, r3
 8013a56:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013a58:	7efb      	ldrb	r3, [r7, #27]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d041      	beq.n	8013ae2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013a5e:	2108      	movs	r1, #8
 8013a60:	6878      	ldr	r0, [r7, #4]
 8013a62:	f7f9 f933 	bl	800cccc <pbuf_remove_header>
 8013a66:	4603      	mov	r3, r0
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d00a      	beq.n	8013a82 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013a6c:	4b20      	ldr	r3, [pc, #128]	; (8013af0 <udp_input+0x208>)
 8013a6e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013a72:	4925      	ldr	r1, [pc, #148]	; (8013b08 <udp_input+0x220>)
 8013a74:	4820      	ldr	r0, [pc, #128]	; (8013af8 <udp_input+0x210>)
 8013a76:	f004 ff9b 	bl	80189b0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013a7a:	6878      	ldr	r0, [r7, #4]
 8013a7c:	f7f9 f9ac 	bl	800cdd8 <pbuf_free>
      goto end;
 8013a80:	e032      	b.n	8013ae8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d012      	beq.n	8013aae <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a8a:	699b      	ldr	r3, [r3, #24]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d00a      	beq.n	8013aa6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a92:	699c      	ldr	r4, [r3, #24]
 8013a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a96:	69d8      	ldr	r0, [r3, #28]
 8013a98:	8a3b      	ldrh	r3, [r7, #16]
 8013a9a:	9300      	str	r3, [sp, #0]
 8013a9c:	4b1b      	ldr	r3, [pc, #108]	; (8013b0c <udp_input+0x224>)
 8013a9e:	687a      	ldr	r2, [r7, #4]
 8013aa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013aa2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013aa4:	e021      	b.n	8013aea <udp_input+0x202>
        pbuf_free(p);
 8013aa6:	6878      	ldr	r0, [r7, #4]
 8013aa8:	f7f9 f996 	bl	800cdd8 <pbuf_free>
        goto end;
 8013aac:	e01c      	b.n	8013ae8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013aae:	7cfb      	ldrb	r3, [r7, #19]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d112      	bne.n	8013ada <udp_input+0x1f2>
 8013ab4:	4b12      	ldr	r3, [pc, #72]	; (8013b00 <udp_input+0x218>)
 8013ab6:	695b      	ldr	r3, [r3, #20]
 8013ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013abc:	2be0      	cmp	r3, #224	; 0xe0
 8013abe:	d00c      	beq.n	8013ada <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013ac0:	4b0f      	ldr	r3, [pc, #60]	; (8013b00 <udp_input+0x218>)
 8013ac2:	899b      	ldrh	r3, [r3, #12]
 8013ac4:	3308      	adds	r3, #8
 8013ac6:	b29b      	uxth	r3, r3
 8013ac8:	b21b      	sxth	r3, r3
 8013aca:	4619      	mov	r1, r3
 8013acc:	6878      	ldr	r0, [r7, #4]
 8013ace:	f7f9 f970 	bl	800cdb2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013ad2:	2103      	movs	r1, #3
 8013ad4:	6878      	ldr	r0, [r7, #4]
 8013ad6:	f003 fa07 	bl	8016ee8 <icmp_dest_unreach>
      pbuf_free(p);
 8013ada:	6878      	ldr	r0, [r7, #4]
 8013adc:	f7f9 f97c 	bl	800cdd8 <pbuf_free>
  return;
 8013ae0:	e003      	b.n	8013aea <udp_input+0x202>
    pbuf_free(p);
 8013ae2:	6878      	ldr	r0, [r7, #4]
 8013ae4:	f7f9 f978 	bl	800cdd8 <pbuf_free>
  return;
 8013ae8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013aea:	372c      	adds	r7, #44	; 0x2c
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bd90      	pop	{r4, r7, pc}
 8013af0:	0801c684 	.word	0x0801c684
 8013af4:	0801c728 	.word	0x0801c728
 8013af8:	0801c6d8 	.word	0x0801c6d8
 8013afc:	0801c740 	.word	0x0801c740
 8013b00:	2000d68c 	.word	0x2000d68c
 8013b04:	20010e5c 	.word	0x20010e5c
 8013b08:	0801c75c 	.word	0x0801c75c
 8013b0c:	2000d69c 	.word	0x2000d69c

08013b10 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b088      	sub	sp, #32
 8013b14:	af02      	add	r7, sp, #8
 8013b16:	60f8      	str	r0, [r7, #12]
 8013b18:	60b9      	str	r1, [r7, #8]
 8013b1a:	607a      	str	r2, [r7, #4]
 8013b1c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d109      	bne.n	8013b38 <udp_sendto_if+0x28>
 8013b24:	4b2e      	ldr	r3, [pc, #184]	; (8013be0 <udp_sendto_if+0xd0>)
 8013b26:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b2a:	492e      	ldr	r1, [pc, #184]	; (8013be4 <udp_sendto_if+0xd4>)
 8013b2c:	482e      	ldr	r0, [pc, #184]	; (8013be8 <udp_sendto_if+0xd8>)
 8013b2e:	f004 ff3f 	bl	80189b0 <iprintf>
 8013b32:	f06f 030f 	mvn.w	r3, #15
 8013b36:	e04f      	b.n	8013bd8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013b38:	68bb      	ldr	r3, [r7, #8]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d109      	bne.n	8013b52 <udp_sendto_if+0x42>
 8013b3e:	4b28      	ldr	r3, [pc, #160]	; (8013be0 <udp_sendto_if+0xd0>)
 8013b40:	f240 2281 	movw	r2, #641	; 0x281
 8013b44:	4929      	ldr	r1, [pc, #164]	; (8013bec <udp_sendto_if+0xdc>)
 8013b46:	4828      	ldr	r0, [pc, #160]	; (8013be8 <udp_sendto_if+0xd8>)
 8013b48:	f004 ff32 	bl	80189b0 <iprintf>
 8013b4c:	f06f 030f 	mvn.w	r3, #15
 8013b50:	e042      	b.n	8013bd8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d109      	bne.n	8013b6c <udp_sendto_if+0x5c>
 8013b58:	4b21      	ldr	r3, [pc, #132]	; (8013be0 <udp_sendto_if+0xd0>)
 8013b5a:	f240 2282 	movw	r2, #642	; 0x282
 8013b5e:	4924      	ldr	r1, [pc, #144]	; (8013bf0 <udp_sendto_if+0xe0>)
 8013b60:	4821      	ldr	r0, [pc, #132]	; (8013be8 <udp_sendto_if+0xd8>)
 8013b62:	f004 ff25 	bl	80189b0 <iprintf>
 8013b66:	f06f 030f 	mvn.w	r3, #15
 8013b6a:	e035      	b.n	8013bd8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013b6c:	6a3b      	ldr	r3, [r7, #32]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d109      	bne.n	8013b86 <udp_sendto_if+0x76>
 8013b72:	4b1b      	ldr	r3, [pc, #108]	; (8013be0 <udp_sendto_if+0xd0>)
 8013b74:	f240 2283 	movw	r2, #643	; 0x283
 8013b78:	491e      	ldr	r1, [pc, #120]	; (8013bf4 <udp_sendto_if+0xe4>)
 8013b7a:	481b      	ldr	r0, [pc, #108]	; (8013be8 <udp_sendto_if+0xd8>)
 8013b7c:	f004 ff18 	bl	80189b0 <iprintf>
 8013b80:	f06f 030f 	mvn.w	r3, #15
 8013b84:	e028      	b.n	8013bd8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d009      	beq.n	8013ba0 <udp_sendto_if+0x90>
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d005      	beq.n	8013ba0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013b9c:	2be0      	cmp	r3, #224	; 0xe0
 8013b9e:	d103      	bne.n	8013ba8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013ba0:	6a3b      	ldr	r3, [r7, #32]
 8013ba2:	3304      	adds	r3, #4
 8013ba4:	617b      	str	r3, [r7, #20]
 8013ba6:	e00b      	b.n	8013bc0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	681a      	ldr	r2, [r3, #0]
 8013bac:	6a3b      	ldr	r3, [r7, #32]
 8013bae:	3304      	adds	r3, #4
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	429a      	cmp	r2, r3
 8013bb4:	d002      	beq.n	8013bbc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013bb6:	f06f 0303 	mvn.w	r3, #3
 8013bba:	e00d      	b.n	8013bd8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013bc0:	887a      	ldrh	r2, [r7, #2]
 8013bc2:	697b      	ldr	r3, [r7, #20]
 8013bc4:	9301      	str	r3, [sp, #4]
 8013bc6:	6a3b      	ldr	r3, [r7, #32]
 8013bc8:	9300      	str	r3, [sp, #0]
 8013bca:	4613      	mov	r3, r2
 8013bcc:	687a      	ldr	r2, [r7, #4]
 8013bce:	68b9      	ldr	r1, [r7, #8]
 8013bd0:	68f8      	ldr	r0, [r7, #12]
 8013bd2:	f000 f811 	bl	8013bf8 <udp_sendto_if_src>
 8013bd6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013bd8:	4618      	mov	r0, r3
 8013bda:	3718      	adds	r7, #24
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}
 8013be0:	0801c684 	.word	0x0801c684
 8013be4:	0801c7f8 	.word	0x0801c7f8
 8013be8:	0801c6d8 	.word	0x0801c6d8
 8013bec:	0801c814 	.word	0x0801c814
 8013bf0:	0801c830 	.word	0x0801c830
 8013bf4:	0801c850 	.word	0x0801c850

08013bf8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b08c      	sub	sp, #48	; 0x30
 8013bfc:	af04      	add	r7, sp, #16
 8013bfe:	60f8      	str	r0, [r7, #12]
 8013c00:	60b9      	str	r1, [r7, #8]
 8013c02:	607a      	str	r2, [r7, #4]
 8013c04:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d109      	bne.n	8013c20 <udp_sendto_if_src+0x28>
 8013c0c:	4b65      	ldr	r3, [pc, #404]	; (8013da4 <udp_sendto_if_src+0x1ac>)
 8013c0e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013c12:	4965      	ldr	r1, [pc, #404]	; (8013da8 <udp_sendto_if_src+0x1b0>)
 8013c14:	4865      	ldr	r0, [pc, #404]	; (8013dac <udp_sendto_if_src+0x1b4>)
 8013c16:	f004 fecb 	bl	80189b0 <iprintf>
 8013c1a:	f06f 030f 	mvn.w	r3, #15
 8013c1e:	e0bc      	b.n	8013d9a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013c20:	68bb      	ldr	r3, [r7, #8]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d109      	bne.n	8013c3a <udp_sendto_if_src+0x42>
 8013c26:	4b5f      	ldr	r3, [pc, #380]	; (8013da4 <udp_sendto_if_src+0x1ac>)
 8013c28:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013c2c:	4960      	ldr	r1, [pc, #384]	; (8013db0 <udp_sendto_if_src+0x1b8>)
 8013c2e:	485f      	ldr	r0, [pc, #380]	; (8013dac <udp_sendto_if_src+0x1b4>)
 8013c30:	f004 febe 	bl	80189b0 <iprintf>
 8013c34:	f06f 030f 	mvn.w	r3, #15
 8013c38:	e0af      	b.n	8013d9a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d109      	bne.n	8013c54 <udp_sendto_if_src+0x5c>
 8013c40:	4b58      	ldr	r3, [pc, #352]	; (8013da4 <udp_sendto_if_src+0x1ac>)
 8013c42:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013c46:	495b      	ldr	r1, [pc, #364]	; (8013db4 <udp_sendto_if_src+0x1bc>)
 8013c48:	4858      	ldr	r0, [pc, #352]	; (8013dac <udp_sendto_if_src+0x1b4>)
 8013c4a:	f004 feb1 	bl	80189b0 <iprintf>
 8013c4e:	f06f 030f 	mvn.w	r3, #15
 8013c52:	e0a2      	b.n	8013d9a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d109      	bne.n	8013c6e <udp_sendto_if_src+0x76>
 8013c5a:	4b52      	ldr	r3, [pc, #328]	; (8013da4 <udp_sendto_if_src+0x1ac>)
 8013c5c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013c60:	4955      	ldr	r1, [pc, #340]	; (8013db8 <udp_sendto_if_src+0x1c0>)
 8013c62:	4852      	ldr	r0, [pc, #328]	; (8013dac <udp_sendto_if_src+0x1b4>)
 8013c64:	f004 fea4 	bl	80189b0 <iprintf>
 8013c68:	f06f 030f 	mvn.w	r3, #15
 8013c6c:	e095      	b.n	8013d9a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d109      	bne.n	8013c88 <udp_sendto_if_src+0x90>
 8013c74:	4b4b      	ldr	r3, [pc, #300]	; (8013da4 <udp_sendto_if_src+0x1ac>)
 8013c76:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013c7a:	4950      	ldr	r1, [pc, #320]	; (8013dbc <udp_sendto_if_src+0x1c4>)
 8013c7c:	484b      	ldr	r0, [pc, #300]	; (8013dac <udp_sendto_if_src+0x1b4>)
 8013c7e:	f004 fe97 	bl	80189b0 <iprintf>
 8013c82:	f06f 030f 	mvn.w	r3, #15
 8013c86:	e088      	b.n	8013d9a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	8a5b      	ldrh	r3, [r3, #18]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d10f      	bne.n	8013cb0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013c90:	68f9      	ldr	r1, [r7, #12]
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	8a5b      	ldrh	r3, [r3, #18]
 8013c96:	461a      	mov	r2, r3
 8013c98:	68f8      	ldr	r0, [r7, #12]
 8013c9a:	f000 f893 	bl	8013dc4 <udp_bind>
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013ca2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d002      	beq.n	8013cb0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013caa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013cae:	e074      	b.n	8013d9a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013cb0:	68bb      	ldr	r3, [r7, #8]
 8013cb2:	891b      	ldrh	r3, [r3, #8]
 8013cb4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013cb8:	4293      	cmp	r3, r2
 8013cba:	d902      	bls.n	8013cc2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8013cc0:	e06b      	b.n	8013d9a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013cc2:	2108      	movs	r1, #8
 8013cc4:	68b8      	ldr	r0, [r7, #8]
 8013cc6:	f7f8 fff1 	bl	800ccac <pbuf_add_header>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d015      	beq.n	8013cfc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013cd0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013cd4:	2108      	movs	r1, #8
 8013cd6:	2022      	movs	r0, #34	; 0x22
 8013cd8:	f7f8 fd9a 	bl	800c810 <pbuf_alloc>
 8013cdc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013cde:	69fb      	ldr	r3, [r7, #28]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d102      	bne.n	8013cea <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8013ce8:	e057      	b.n	8013d9a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013cea:	68bb      	ldr	r3, [r7, #8]
 8013cec:	891b      	ldrh	r3, [r3, #8]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d006      	beq.n	8013d00 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013cf2:	68b9      	ldr	r1, [r7, #8]
 8013cf4:	69f8      	ldr	r0, [r7, #28]
 8013cf6:	f7f9 f993 	bl	800d020 <pbuf_chain>
 8013cfa:	e001      	b.n	8013d00 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013cfc:	68bb      	ldr	r3, [r7, #8]
 8013cfe:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013d00:	69fb      	ldr	r3, [r7, #28]
 8013d02:	895b      	ldrh	r3, [r3, #10]
 8013d04:	2b07      	cmp	r3, #7
 8013d06:	d806      	bhi.n	8013d16 <udp_sendto_if_src+0x11e>
 8013d08:	4b26      	ldr	r3, [pc, #152]	; (8013da4 <udp_sendto_if_src+0x1ac>)
 8013d0a:	f240 320d 	movw	r2, #781	; 0x30d
 8013d0e:	492c      	ldr	r1, [pc, #176]	; (8013dc0 <udp_sendto_if_src+0x1c8>)
 8013d10:	4826      	ldr	r0, [pc, #152]	; (8013dac <udp_sendto_if_src+0x1b4>)
 8013d12:	f004 fe4d 	bl	80189b0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013d16:	69fb      	ldr	r3, [r7, #28]
 8013d18:	685b      	ldr	r3, [r3, #4]
 8013d1a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	8a5b      	ldrh	r3, [r3, #18]
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7f7 fc25 	bl	800b570 <lwip_htons>
 8013d26:	4603      	mov	r3, r0
 8013d28:	461a      	mov	r2, r3
 8013d2a:	697b      	ldr	r3, [r7, #20]
 8013d2c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013d2e:	887b      	ldrh	r3, [r7, #2]
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7f7 fc1d 	bl	800b570 <lwip_htons>
 8013d36:	4603      	mov	r3, r0
 8013d38:	461a      	mov	r2, r3
 8013d3a:	697b      	ldr	r3, [r7, #20]
 8013d3c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013d3e:	697b      	ldr	r3, [r7, #20]
 8013d40:	2200      	movs	r2, #0
 8013d42:	719a      	strb	r2, [r3, #6]
 8013d44:	2200      	movs	r2, #0
 8013d46:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013d48:	69fb      	ldr	r3, [r7, #28]
 8013d4a:	891b      	ldrh	r3, [r3, #8]
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f7f7 fc0f 	bl	800b570 <lwip_htons>
 8013d52:	4603      	mov	r3, r0
 8013d54:	461a      	mov	r2, r3
 8013d56:	697b      	ldr	r3, [r7, #20]
 8013d58:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013d5a:	2311      	movs	r3, #17
 8013d5c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	7adb      	ldrb	r3, [r3, #11]
 8013d62:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	7a9b      	ldrb	r3, [r3, #10]
 8013d68:	7cb9      	ldrb	r1, [r7, #18]
 8013d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d6c:	9202      	str	r2, [sp, #8]
 8013d6e:	7cfa      	ldrb	r2, [r7, #19]
 8013d70:	9201      	str	r2, [sp, #4]
 8013d72:	9300      	str	r3, [sp, #0]
 8013d74:	460b      	mov	r3, r1
 8013d76:	687a      	ldr	r2, [r7, #4]
 8013d78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013d7a:	69f8      	ldr	r0, [r7, #28]
 8013d7c:	f003 fb44 	bl	8017408 <ip4_output_if_src>
 8013d80:	4603      	mov	r3, r0
 8013d82:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013d84:	69fa      	ldr	r2, [r7, #28]
 8013d86:	68bb      	ldr	r3, [r7, #8]
 8013d88:	429a      	cmp	r2, r3
 8013d8a:	d004      	beq.n	8013d96 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013d8c:	69f8      	ldr	r0, [r7, #28]
 8013d8e:	f7f9 f823 	bl	800cdd8 <pbuf_free>
    q = NULL;
 8013d92:	2300      	movs	r3, #0
 8013d94:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013d96:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	3720      	adds	r7, #32
 8013d9e:	46bd      	mov	sp, r7
 8013da0:	bd80      	pop	{r7, pc}
 8013da2:	bf00      	nop
 8013da4:	0801c684 	.word	0x0801c684
 8013da8:	0801c870 	.word	0x0801c870
 8013dac:	0801c6d8 	.word	0x0801c6d8
 8013db0:	0801c890 	.word	0x0801c890
 8013db4:	0801c8b0 	.word	0x0801c8b0
 8013db8:	0801c8d4 	.word	0x0801c8d4
 8013dbc:	0801c8f8 	.word	0x0801c8f8
 8013dc0:	0801c91c 	.word	0x0801c91c

08013dc4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b086      	sub	sp, #24
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	60f8      	str	r0, [r7, #12]
 8013dcc:	60b9      	str	r1, [r7, #8]
 8013dce:	4613      	mov	r3, r2
 8013dd0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013dd2:	68bb      	ldr	r3, [r7, #8]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d101      	bne.n	8013ddc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013dd8:	4b39      	ldr	r3, [pc, #228]	; (8013ec0 <udp_bind+0xfc>)
 8013dda:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d109      	bne.n	8013df6 <udp_bind+0x32>
 8013de2:	4b38      	ldr	r3, [pc, #224]	; (8013ec4 <udp_bind+0x100>)
 8013de4:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013de8:	4937      	ldr	r1, [pc, #220]	; (8013ec8 <udp_bind+0x104>)
 8013dea:	4838      	ldr	r0, [pc, #224]	; (8013ecc <udp_bind+0x108>)
 8013dec:	f004 fde0 	bl	80189b0 <iprintf>
 8013df0:	f06f 030f 	mvn.w	r3, #15
 8013df4:	e060      	b.n	8013eb8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013df6:	2300      	movs	r3, #0
 8013df8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013dfa:	4b35      	ldr	r3, [pc, #212]	; (8013ed0 <udp_bind+0x10c>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	617b      	str	r3, [r7, #20]
 8013e00:	e009      	b.n	8013e16 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013e02:	68fa      	ldr	r2, [r7, #12]
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	429a      	cmp	r2, r3
 8013e08:	d102      	bne.n	8013e10 <udp_bind+0x4c>
      rebind = 1;
 8013e0a:	2301      	movs	r3, #1
 8013e0c:	74fb      	strb	r3, [r7, #19]
      break;
 8013e0e:	e005      	b.n	8013e1c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	68db      	ldr	r3, [r3, #12]
 8013e14:	617b      	str	r3, [r7, #20]
 8013e16:	697b      	ldr	r3, [r7, #20]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d1f2      	bne.n	8013e02 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013e1c:	88fb      	ldrh	r3, [r7, #6]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d109      	bne.n	8013e36 <udp_bind+0x72>
    port = udp_new_port();
 8013e22:	f7ff fcc5 	bl	80137b0 <udp_new_port>
 8013e26:	4603      	mov	r3, r0
 8013e28:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013e2a:	88fb      	ldrh	r3, [r7, #6]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d12c      	bne.n	8013e8a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013e30:	f06f 0307 	mvn.w	r3, #7
 8013e34:	e040      	b.n	8013eb8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013e36:	4b26      	ldr	r3, [pc, #152]	; (8013ed0 <udp_bind+0x10c>)
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	617b      	str	r3, [r7, #20]
 8013e3c:	e022      	b.n	8013e84 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013e3e:	68fa      	ldr	r2, [r7, #12]
 8013e40:	697b      	ldr	r3, [r7, #20]
 8013e42:	429a      	cmp	r2, r3
 8013e44:	d01b      	beq.n	8013e7e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013e46:	697b      	ldr	r3, [r7, #20]
 8013e48:	8a5b      	ldrh	r3, [r3, #18]
 8013e4a:	88fa      	ldrh	r2, [r7, #6]
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	d116      	bne.n	8013e7e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013e50:	697b      	ldr	r3, [r7, #20]
 8013e52:	681a      	ldr	r2, [r3, #0]
 8013e54:	68bb      	ldr	r3, [r7, #8]
 8013e56:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	d00d      	beq.n	8013e78 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013e5c:	68bb      	ldr	r3, [r7, #8]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d00a      	beq.n	8013e78 <udp_bind+0xb4>
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d006      	beq.n	8013e78 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013e6a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d003      	beq.n	8013e78 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013e70:	697b      	ldr	r3, [r7, #20]
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d102      	bne.n	8013e7e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013e78:	f06f 0307 	mvn.w	r3, #7
 8013e7c:	e01c      	b.n	8013eb8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013e7e:	697b      	ldr	r3, [r7, #20]
 8013e80:	68db      	ldr	r3, [r3, #12]
 8013e82:	617b      	str	r3, [r7, #20]
 8013e84:	697b      	ldr	r3, [r7, #20]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d1d9      	bne.n	8013e3e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013e8a:	68bb      	ldr	r3, [r7, #8]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d002      	beq.n	8013e96 <udp_bind+0xd2>
 8013e90:	68bb      	ldr	r3, [r7, #8]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	e000      	b.n	8013e98 <udp_bind+0xd4>
 8013e96:	2300      	movs	r3, #0
 8013e98:	68fa      	ldr	r2, [r7, #12]
 8013e9a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	88fa      	ldrh	r2, [r7, #6]
 8013ea0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013ea2:	7cfb      	ldrb	r3, [r7, #19]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d106      	bne.n	8013eb6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013ea8:	4b09      	ldr	r3, [pc, #36]	; (8013ed0 <udp_bind+0x10c>)
 8013eaa:	681a      	ldr	r2, [r3, #0]
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013eb0:	4a07      	ldr	r2, [pc, #28]	; (8013ed0 <udp_bind+0x10c>)
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013eb6:	2300      	movs	r3, #0
}
 8013eb8:	4618      	mov	r0, r3
 8013eba:	3718      	adds	r7, #24
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	bd80      	pop	{r7, pc}
 8013ec0:	080276d4 	.word	0x080276d4
 8013ec4:	0801c684 	.word	0x0801c684
 8013ec8:	0801c94c 	.word	0x0801c94c
 8013ecc:	0801c6d8 	.word	0x0801c6d8
 8013ed0:	20010e5c 	.word	0x20010e5c

08013ed4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b086      	sub	sp, #24
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	60f8      	str	r0, [r7, #12]
 8013edc:	60b9      	str	r1, [r7, #8]
 8013ede:	4613      	mov	r3, r2
 8013ee0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d109      	bne.n	8013efc <udp_connect+0x28>
 8013ee8:	4b2c      	ldr	r3, [pc, #176]	; (8013f9c <udp_connect+0xc8>)
 8013eea:	f240 4235 	movw	r2, #1077	; 0x435
 8013eee:	492c      	ldr	r1, [pc, #176]	; (8013fa0 <udp_connect+0xcc>)
 8013ef0:	482c      	ldr	r0, [pc, #176]	; (8013fa4 <udp_connect+0xd0>)
 8013ef2:	f004 fd5d 	bl	80189b0 <iprintf>
 8013ef6:	f06f 030f 	mvn.w	r3, #15
 8013efa:	e04b      	b.n	8013f94 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013efc:	68bb      	ldr	r3, [r7, #8]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d109      	bne.n	8013f16 <udp_connect+0x42>
 8013f02:	4b26      	ldr	r3, [pc, #152]	; (8013f9c <udp_connect+0xc8>)
 8013f04:	f240 4236 	movw	r2, #1078	; 0x436
 8013f08:	4927      	ldr	r1, [pc, #156]	; (8013fa8 <udp_connect+0xd4>)
 8013f0a:	4826      	ldr	r0, [pc, #152]	; (8013fa4 <udp_connect+0xd0>)
 8013f0c:	f004 fd50 	bl	80189b0 <iprintf>
 8013f10:	f06f 030f 	mvn.w	r3, #15
 8013f14:	e03e      	b.n	8013f94 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	8a5b      	ldrh	r3, [r3, #18]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d10f      	bne.n	8013f3e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013f1e:	68f9      	ldr	r1, [r7, #12]
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	8a5b      	ldrh	r3, [r3, #18]
 8013f24:	461a      	mov	r2, r3
 8013f26:	68f8      	ldr	r0, [r7, #12]
 8013f28:	f7ff ff4c 	bl	8013dc4 <udp_bind>
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013f30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d002      	beq.n	8013f3e <udp_connect+0x6a>
      return err;
 8013f38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013f3c:	e02a      	b.n	8013f94 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d002      	beq.n	8013f4a <udp_connect+0x76>
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	e000      	b.n	8013f4c <udp_connect+0x78>
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	68fa      	ldr	r2, [r7, #12]
 8013f4e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	88fa      	ldrh	r2, [r7, #6]
 8013f54:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	7c1b      	ldrb	r3, [r3, #16]
 8013f5a:	f043 0304 	orr.w	r3, r3, #4
 8013f5e:	b2da      	uxtb	r2, r3
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f64:	4b11      	ldr	r3, [pc, #68]	; (8013fac <udp_connect+0xd8>)
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	617b      	str	r3, [r7, #20]
 8013f6a:	e008      	b.n	8013f7e <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013f6c:	68fa      	ldr	r2, [r7, #12]
 8013f6e:	697b      	ldr	r3, [r7, #20]
 8013f70:	429a      	cmp	r2, r3
 8013f72:	d101      	bne.n	8013f78 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013f74:	2300      	movs	r3, #0
 8013f76:	e00d      	b.n	8013f94 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f78:	697b      	ldr	r3, [r7, #20]
 8013f7a:	68db      	ldr	r3, [r3, #12]
 8013f7c:	617b      	str	r3, [r7, #20]
 8013f7e:	697b      	ldr	r3, [r7, #20]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d1f3      	bne.n	8013f6c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013f84:	4b09      	ldr	r3, [pc, #36]	; (8013fac <udp_connect+0xd8>)
 8013f86:	681a      	ldr	r2, [r3, #0]
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013f8c:	4a07      	ldr	r2, [pc, #28]	; (8013fac <udp_connect+0xd8>)
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013f92:	2300      	movs	r3, #0
}
 8013f94:	4618      	mov	r0, r3
 8013f96:	3718      	adds	r7, #24
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	bd80      	pop	{r7, pc}
 8013f9c:	0801c684 	.word	0x0801c684
 8013fa0:	0801c964 	.word	0x0801c964
 8013fa4:	0801c6d8 	.word	0x0801c6d8
 8013fa8:	0801c980 	.word	0x0801c980
 8013fac:	20010e5c 	.word	0x20010e5c

08013fb0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b084      	sub	sp, #16
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	60f8      	str	r0, [r7, #12]
 8013fb8:	60b9      	str	r1, [r7, #8]
 8013fba:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d107      	bne.n	8013fd2 <udp_recv+0x22>
 8013fc2:	4b08      	ldr	r3, [pc, #32]	; (8013fe4 <udp_recv+0x34>)
 8013fc4:	f240 428a 	movw	r2, #1162	; 0x48a
 8013fc8:	4907      	ldr	r1, [pc, #28]	; (8013fe8 <udp_recv+0x38>)
 8013fca:	4808      	ldr	r0, [pc, #32]	; (8013fec <udp_recv+0x3c>)
 8013fcc:	f004 fcf0 	bl	80189b0 <iprintf>
 8013fd0:	e005      	b.n	8013fde <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	68ba      	ldr	r2, [r7, #8]
 8013fd6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	687a      	ldr	r2, [r7, #4]
 8013fdc:	61da      	str	r2, [r3, #28]
}
 8013fde:	3710      	adds	r7, #16
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}
 8013fe4:	0801c684 	.word	0x0801c684
 8013fe8:	0801c9b8 	.word	0x0801c9b8
 8013fec:	0801c6d8 	.word	0x0801c6d8

08013ff0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b084      	sub	sp, #16
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d107      	bne.n	801400e <udp_remove+0x1e>
 8013ffe:	4b19      	ldr	r3, [pc, #100]	; (8014064 <udp_remove+0x74>)
 8014000:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014004:	4918      	ldr	r1, [pc, #96]	; (8014068 <udp_remove+0x78>)
 8014006:	4819      	ldr	r0, [pc, #100]	; (801406c <udp_remove+0x7c>)
 8014008:	f004 fcd2 	bl	80189b0 <iprintf>
 801400c:	e026      	b.n	801405c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801400e:	4b18      	ldr	r3, [pc, #96]	; (8014070 <udp_remove+0x80>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	687a      	ldr	r2, [r7, #4]
 8014014:	429a      	cmp	r2, r3
 8014016:	d105      	bne.n	8014024 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014018:	4b15      	ldr	r3, [pc, #84]	; (8014070 <udp_remove+0x80>)
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	68db      	ldr	r3, [r3, #12]
 801401e:	4a14      	ldr	r2, [pc, #80]	; (8014070 <udp_remove+0x80>)
 8014020:	6013      	str	r3, [r2, #0]
 8014022:	e017      	b.n	8014054 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014024:	4b12      	ldr	r3, [pc, #72]	; (8014070 <udp_remove+0x80>)
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	60fb      	str	r3, [r7, #12]
 801402a:	e010      	b.n	801404e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	68db      	ldr	r3, [r3, #12]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d009      	beq.n	8014048 <udp_remove+0x58>
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	68db      	ldr	r3, [r3, #12]
 8014038:	687a      	ldr	r2, [r7, #4]
 801403a:	429a      	cmp	r2, r3
 801403c:	d104      	bne.n	8014048 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	68da      	ldr	r2, [r3, #12]
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	60da      	str	r2, [r3, #12]
        break;
 8014046:	e005      	b.n	8014054 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	68db      	ldr	r3, [r3, #12]
 801404c:	60fb      	str	r3, [r7, #12]
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d1eb      	bne.n	801402c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014054:	6879      	ldr	r1, [r7, #4]
 8014056:	2000      	movs	r0, #0
 8014058:	f7f8 f80e 	bl	800c078 <memp_free>
}
 801405c:	3710      	adds	r7, #16
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}
 8014062:	bf00      	nop
 8014064:	0801c684 	.word	0x0801c684
 8014068:	0801c9d0 	.word	0x0801c9d0
 801406c:	0801c6d8 	.word	0x0801c6d8
 8014070:	20010e5c 	.word	0x20010e5c

08014074 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b082      	sub	sp, #8
 8014078:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801407a:	2000      	movs	r0, #0
 801407c:	f7f7 ff86 	bl	800bf8c <memp_malloc>
 8014080:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d007      	beq.n	8014098 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014088:	2220      	movs	r2, #32
 801408a:	2100      	movs	r1, #0
 801408c:	6878      	ldr	r0, [r7, #4]
 801408e:	f004 fcf4 	bl	8018a7a <memset>
    pcb->ttl = UDP_TTL;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	22ff      	movs	r2, #255	; 0xff
 8014096:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014098:	687b      	ldr	r3, [r7, #4]
}
 801409a:	4618      	mov	r0, r3
 801409c:	3708      	adds	r7, #8
 801409e:	46bd      	mov	sp, r7
 80140a0:	bd80      	pop	{r7, pc}

080140a2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80140a2:	b580      	push	{r7, lr}
 80140a4:	b084      	sub	sp, #16
 80140a6:	af00      	add	r7, sp, #0
 80140a8:	4603      	mov	r3, r0
 80140aa:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80140ac:	f7ff ffe2 	bl	8014074 <udp_new>
 80140b0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80140b2:	68fb      	ldr	r3, [r7, #12]
}
 80140b4:	4618      	mov	r0, r3
 80140b6:	3710      	adds	r7, #16
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd80      	pop	{r7, pc}

080140bc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80140bc:	b480      	push	{r7}
 80140be:	b085      	sub	sp, #20
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
 80140c4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d01e      	beq.n	801410a <udp_netif_ip_addr_changed+0x4e>
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d01a      	beq.n	801410a <udp_netif_ip_addr_changed+0x4e>
 80140d4:	683b      	ldr	r3, [r7, #0]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d017      	beq.n	801410a <udp_netif_ip_addr_changed+0x4e>
 80140da:	683b      	ldr	r3, [r7, #0]
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d013      	beq.n	801410a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80140e2:	4b0d      	ldr	r3, [pc, #52]	; (8014118 <udp_netif_ip_addr_changed+0x5c>)
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	60fb      	str	r3, [r7, #12]
 80140e8:	e00c      	b.n	8014104 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	681a      	ldr	r2, [r3, #0]
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	429a      	cmp	r2, r3
 80140f4:	d103      	bne.n	80140fe <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	681a      	ldr	r2, [r3, #0]
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	68db      	ldr	r3, [r3, #12]
 8014102:	60fb      	str	r3, [r7, #12]
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d1ef      	bne.n	80140ea <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801410a:	bf00      	nop
 801410c:	3714      	adds	r7, #20
 801410e:	46bd      	mov	sp, r7
 8014110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014114:	4770      	bx	lr
 8014116:	bf00      	nop
 8014118:	20010e5c 	.word	0x20010e5c

0801411c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8014120:	4b20      	ldr	r3, [pc, #128]	; (80141a4 <dhcp_inc_pcb_refcount+0x88>)
 8014122:	781b      	ldrb	r3, [r3, #0]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d133      	bne.n	8014190 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8014128:	4b1f      	ldr	r3, [pc, #124]	; (80141a8 <dhcp_inc_pcb_refcount+0x8c>)
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d005      	beq.n	801413c <dhcp_inc_pcb_refcount+0x20>
 8014130:	4b1e      	ldr	r3, [pc, #120]	; (80141ac <dhcp_inc_pcb_refcount+0x90>)
 8014132:	22e5      	movs	r2, #229	; 0xe5
 8014134:	491e      	ldr	r1, [pc, #120]	; (80141b0 <dhcp_inc_pcb_refcount+0x94>)
 8014136:	481f      	ldr	r0, [pc, #124]	; (80141b4 <dhcp_inc_pcb_refcount+0x98>)
 8014138:	f004 fc3a 	bl	80189b0 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801413c:	f7ff ff9a 	bl	8014074 <udp_new>
 8014140:	4603      	mov	r3, r0
 8014142:	4a19      	ldr	r2, [pc, #100]	; (80141a8 <dhcp_inc_pcb_refcount+0x8c>)
 8014144:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8014146:	4b18      	ldr	r3, [pc, #96]	; (80141a8 <dhcp_inc_pcb_refcount+0x8c>)
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d102      	bne.n	8014154 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801414e:	f04f 33ff 	mov.w	r3, #4294967295
 8014152:	e024      	b.n	801419e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014154:	4b14      	ldr	r3, [pc, #80]	; (80141a8 <dhcp_inc_pcb_refcount+0x8c>)
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	7a5a      	ldrb	r2, [r3, #9]
 801415a:	4b13      	ldr	r3, [pc, #76]	; (80141a8 <dhcp_inc_pcb_refcount+0x8c>)
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	f042 0220 	orr.w	r2, r2, #32
 8014162:	b2d2      	uxtb	r2, r2
 8014164:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8014166:	4b10      	ldr	r3, [pc, #64]	; (80141a8 <dhcp_inc_pcb_refcount+0x8c>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	2244      	movs	r2, #68	; 0x44
 801416c:	4912      	ldr	r1, [pc, #72]	; (80141b8 <dhcp_inc_pcb_refcount+0x9c>)
 801416e:	4618      	mov	r0, r3
 8014170:	f7ff fe28 	bl	8013dc4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014174:	4b0c      	ldr	r3, [pc, #48]	; (80141a8 <dhcp_inc_pcb_refcount+0x8c>)
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	2243      	movs	r2, #67	; 0x43
 801417a:	490f      	ldr	r1, [pc, #60]	; (80141b8 <dhcp_inc_pcb_refcount+0x9c>)
 801417c:	4618      	mov	r0, r3
 801417e:	f7ff fea9 	bl	8013ed4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8014182:	4b09      	ldr	r3, [pc, #36]	; (80141a8 <dhcp_inc_pcb_refcount+0x8c>)
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	2200      	movs	r2, #0
 8014188:	490c      	ldr	r1, [pc, #48]	; (80141bc <dhcp_inc_pcb_refcount+0xa0>)
 801418a:	4618      	mov	r0, r3
 801418c:	f7ff ff10 	bl	8013fb0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8014190:	4b04      	ldr	r3, [pc, #16]	; (80141a4 <dhcp_inc_pcb_refcount+0x88>)
 8014192:	781b      	ldrb	r3, [r3, #0]
 8014194:	3301      	adds	r3, #1
 8014196:	b2da      	uxtb	r2, r3
 8014198:	4b02      	ldr	r3, [pc, #8]	; (80141a4 <dhcp_inc_pcb_refcount+0x88>)
 801419a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801419c:	2300      	movs	r3, #0
}
 801419e:	4618      	mov	r0, r3
 80141a0:	bd80      	pop	{r7, pc}
 80141a2:	bf00      	nop
 80141a4:	20010e8c 	.word	0x20010e8c
 80141a8:	20010e88 	.word	0x20010e88
 80141ac:	0801c9e8 	.word	0x0801c9e8
 80141b0:	0801ca20 	.word	0x0801ca20
 80141b4:	0801ca48 	.word	0x0801ca48
 80141b8:	080276d4 	.word	0x080276d4
 80141bc:	08015a51 	.word	0x08015a51

080141c0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80141c4:	4b0e      	ldr	r3, [pc, #56]	; (8014200 <dhcp_dec_pcb_refcount+0x40>)
 80141c6:	781b      	ldrb	r3, [r3, #0]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d105      	bne.n	80141d8 <dhcp_dec_pcb_refcount+0x18>
 80141cc:	4b0d      	ldr	r3, [pc, #52]	; (8014204 <dhcp_dec_pcb_refcount+0x44>)
 80141ce:	22ff      	movs	r2, #255	; 0xff
 80141d0:	490d      	ldr	r1, [pc, #52]	; (8014208 <dhcp_dec_pcb_refcount+0x48>)
 80141d2:	480e      	ldr	r0, [pc, #56]	; (801420c <dhcp_dec_pcb_refcount+0x4c>)
 80141d4:	f004 fbec 	bl	80189b0 <iprintf>
  dhcp_pcb_refcount--;
 80141d8:	4b09      	ldr	r3, [pc, #36]	; (8014200 <dhcp_dec_pcb_refcount+0x40>)
 80141da:	781b      	ldrb	r3, [r3, #0]
 80141dc:	3b01      	subs	r3, #1
 80141de:	b2da      	uxtb	r2, r3
 80141e0:	4b07      	ldr	r3, [pc, #28]	; (8014200 <dhcp_dec_pcb_refcount+0x40>)
 80141e2:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80141e4:	4b06      	ldr	r3, [pc, #24]	; (8014200 <dhcp_dec_pcb_refcount+0x40>)
 80141e6:	781b      	ldrb	r3, [r3, #0]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d107      	bne.n	80141fc <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80141ec:	4b08      	ldr	r3, [pc, #32]	; (8014210 <dhcp_dec_pcb_refcount+0x50>)
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	4618      	mov	r0, r3
 80141f2:	f7ff fefd 	bl	8013ff0 <udp_remove>
    dhcp_pcb = NULL;
 80141f6:	4b06      	ldr	r3, [pc, #24]	; (8014210 <dhcp_dec_pcb_refcount+0x50>)
 80141f8:	2200      	movs	r2, #0
 80141fa:	601a      	str	r2, [r3, #0]
  }
}
 80141fc:	bf00      	nop
 80141fe:	bd80      	pop	{r7, pc}
 8014200:	20010e8c 	.word	0x20010e8c
 8014204:	0801c9e8 	.word	0x0801c9e8
 8014208:	0801ca70 	.word	0x0801ca70
 801420c:	0801ca48 	.word	0x0801ca48
 8014210:	20010e88 	.word	0x20010e88

08014214 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b084      	sub	sp, #16
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014220:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014222:	210c      	movs	r1, #12
 8014224:	68f8      	ldr	r0, [r7, #12]
 8014226:	f001 f855 	bl	80152d4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801422a:	4b06      	ldr	r3, [pc, #24]	; (8014244 <dhcp_handle_nak+0x30>)
 801422c:	4a05      	ldr	r2, [pc, #20]	; (8014244 <dhcp_handle_nak+0x30>)
 801422e:	4905      	ldr	r1, [pc, #20]	; (8014244 <dhcp_handle_nak+0x30>)
 8014230:	6878      	ldr	r0, [r7, #4]
 8014232:	f7f8 f8c3 	bl	800c3bc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8014236:	6878      	ldr	r0, [r7, #4]
 8014238:	f000 fc48 	bl	8014acc <dhcp_discover>
}
 801423c:	bf00      	nop
 801423e:	3710      	adds	r7, #16
 8014240:	46bd      	mov	sp, r7
 8014242:	bd80      	pop	{r7, pc}
 8014244:	080276d4 	.word	0x080276d4

08014248 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b084      	sub	sp, #16
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014254:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8014256:	2108      	movs	r1, #8
 8014258:	68f8      	ldr	r0, [r7, #12]
 801425a:	f001 f83b 	bl	80152d4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	331c      	adds	r3, #28
 8014262:	2200      	movs	r2, #0
 8014264:	4619      	mov	r1, r3
 8014266:	6878      	ldr	r0, [r7, #4]
 8014268:	f002 fb3c 	bl	80168e4 <etharp_query>
 801426c:	4603      	mov	r3, r0
 801426e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	799b      	ldrb	r3, [r3, #6]
 8014274:	2bff      	cmp	r3, #255	; 0xff
 8014276:	d005      	beq.n	8014284 <dhcp_check+0x3c>
    dhcp->tries++;
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	799b      	ldrb	r3, [r3, #6]
 801427c:	3301      	adds	r3, #1
 801427e:	b2da      	uxtb	r2, r3
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014284:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014288:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801428a:	893b      	ldrh	r3, [r7, #8]
 801428c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014290:	4a06      	ldr	r2, [pc, #24]	; (80142ac <dhcp_check+0x64>)
 8014292:	fb82 1203 	smull	r1, r2, r2, r3
 8014296:	1152      	asrs	r2, r2, #5
 8014298:	17db      	asrs	r3, r3, #31
 801429a:	1ad3      	subs	r3, r2, r3
 801429c:	b29a      	uxth	r2, r3
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80142a2:	bf00      	nop
 80142a4:	3710      	adds	r7, #16
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	bf00      	nop
 80142ac:	10624dd3 	.word	0x10624dd3

080142b0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b084      	sub	sp, #16
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
 80142b8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142be:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80142c0:	4b0c      	ldr	r3, [pc, #48]	; (80142f4 <dhcp_handle_offer+0x44>)
 80142c2:	789b      	ldrb	r3, [r3, #2]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d011      	beq.n	80142ec <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	2200      	movs	r2, #0
 80142cc:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80142ce:	4b0a      	ldr	r3, [pc, #40]	; (80142f8 <dhcp_handle_offer+0x48>)
 80142d0:	689b      	ldr	r3, [r3, #8]
 80142d2:	4618      	mov	r0, r3
 80142d4:	f7f7 f961 	bl	800b59a <lwip_htonl>
 80142d8:	4602      	mov	r2, r0
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80142de:	683b      	ldr	r3, [r7, #0]
 80142e0:	691a      	ldr	r2, [r3, #16]
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80142e6:	6878      	ldr	r0, [r7, #4]
 80142e8:	f000 f808 	bl	80142fc <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80142ec:	bf00      	nop
 80142ee:	3710      	adds	r7, #16
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd80      	pop	{r7, pc}
 80142f4:	20010e80 	.word	0x20010e80
 80142f8:	20010e60 	.word	0x20010e60

080142fc <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80142fc:	b5b0      	push	{r4, r5, r7, lr}
 80142fe:	b08a      	sub	sp, #40	; 0x28
 8014300:	af02      	add	r7, sp, #8
 8014302:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d109      	bne.n	801431e <dhcp_select+0x22>
 801430a:	4b71      	ldr	r3, [pc, #452]	; (80144d0 <dhcp_select+0x1d4>)
 801430c:	f240 1277 	movw	r2, #375	; 0x177
 8014310:	4970      	ldr	r1, [pc, #448]	; (80144d4 <dhcp_select+0x1d8>)
 8014312:	4871      	ldr	r0, [pc, #452]	; (80144d8 <dhcp_select+0x1dc>)
 8014314:	f004 fb4c 	bl	80189b0 <iprintf>
 8014318:	f06f 030f 	mvn.w	r3, #15
 801431c:	e0d3      	b.n	80144c6 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014322:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8014324:	69bb      	ldr	r3, [r7, #24]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d109      	bne.n	801433e <dhcp_select+0x42>
 801432a:	4b69      	ldr	r3, [pc, #420]	; (80144d0 <dhcp_select+0x1d4>)
 801432c:	f240 1279 	movw	r2, #377	; 0x179
 8014330:	496a      	ldr	r1, [pc, #424]	; (80144dc <dhcp_select+0x1e0>)
 8014332:	4869      	ldr	r0, [pc, #420]	; (80144d8 <dhcp_select+0x1dc>)
 8014334:	f004 fb3c 	bl	80189b0 <iprintf>
 8014338:	f06f 0305 	mvn.w	r3, #5
 801433c:	e0c3      	b.n	80144c6 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801433e:	2101      	movs	r1, #1
 8014340:	69b8      	ldr	r0, [r7, #24]
 8014342:	f000 ffc7 	bl	80152d4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014346:	f107 030c 	add.w	r3, r7, #12
 801434a:	2203      	movs	r2, #3
 801434c:	69b9      	ldr	r1, [r7, #24]
 801434e:	6878      	ldr	r0, [r7, #4]
 8014350:	f001 fc4c 	bl	8015bec <dhcp_create_msg>
 8014354:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014356:	697b      	ldr	r3, [r7, #20]
 8014358:	2b00      	cmp	r3, #0
 801435a:	f000 8085 	beq.w	8014468 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801435e:	697b      	ldr	r3, [r7, #20]
 8014360:	685b      	ldr	r3, [r3, #4]
 8014362:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014364:	89b8      	ldrh	r0, [r7, #12]
 8014366:	693b      	ldr	r3, [r7, #16]
 8014368:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801436c:	2302      	movs	r3, #2
 801436e:	2239      	movs	r2, #57	; 0x39
 8014370:	f000 ffca 	bl	8015308 <dhcp_option>
 8014374:	4603      	mov	r3, r0
 8014376:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014378:	89b8      	ldrh	r0, [r7, #12]
 801437a:	693b      	ldr	r3, [r7, #16]
 801437c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014384:	461a      	mov	r2, r3
 8014386:	f001 f819 	bl	80153bc <dhcp_option_short>
 801438a:	4603      	mov	r3, r0
 801438c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801438e:	89b8      	ldrh	r0, [r7, #12]
 8014390:	693b      	ldr	r3, [r7, #16]
 8014392:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014396:	2304      	movs	r3, #4
 8014398:	2232      	movs	r2, #50	; 0x32
 801439a:	f000 ffb5 	bl	8015308 <dhcp_option>
 801439e:	4603      	mov	r3, r0
 80143a0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80143a2:	89bc      	ldrh	r4, [r7, #12]
 80143a4:	693b      	ldr	r3, [r7, #16]
 80143a6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80143aa:	69bb      	ldr	r3, [r7, #24]
 80143ac:	69db      	ldr	r3, [r3, #28]
 80143ae:	4618      	mov	r0, r3
 80143b0:	f7f7 f8f3 	bl	800b59a <lwip_htonl>
 80143b4:	4603      	mov	r3, r0
 80143b6:	461a      	mov	r2, r3
 80143b8:	4629      	mov	r1, r5
 80143ba:	4620      	mov	r0, r4
 80143bc:	f001 f830 	bl	8015420 <dhcp_option_long>
 80143c0:	4603      	mov	r3, r0
 80143c2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80143c4:	89b8      	ldrh	r0, [r7, #12]
 80143c6:	693b      	ldr	r3, [r7, #16]
 80143c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143cc:	2304      	movs	r3, #4
 80143ce:	2236      	movs	r2, #54	; 0x36
 80143d0:	f000 ff9a 	bl	8015308 <dhcp_option>
 80143d4:	4603      	mov	r3, r0
 80143d6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80143d8:	89bc      	ldrh	r4, [r7, #12]
 80143da:	693b      	ldr	r3, [r7, #16]
 80143dc:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80143e0:	69bb      	ldr	r3, [r7, #24]
 80143e2:	699b      	ldr	r3, [r3, #24]
 80143e4:	4618      	mov	r0, r3
 80143e6:	f7f7 f8d8 	bl	800b59a <lwip_htonl>
 80143ea:	4603      	mov	r3, r0
 80143ec:	461a      	mov	r2, r3
 80143ee:	4629      	mov	r1, r5
 80143f0:	4620      	mov	r0, r4
 80143f2:	f001 f815 	bl	8015420 <dhcp_option_long>
 80143f6:	4603      	mov	r3, r0
 80143f8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80143fa:	89b8      	ldrh	r0, [r7, #12]
 80143fc:	693b      	ldr	r3, [r7, #16]
 80143fe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014402:	2303      	movs	r3, #3
 8014404:	2237      	movs	r2, #55	; 0x37
 8014406:	f000 ff7f 	bl	8015308 <dhcp_option>
 801440a:	4603      	mov	r3, r0
 801440c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801440e:	2300      	movs	r3, #0
 8014410:	77bb      	strb	r3, [r7, #30]
 8014412:	e00e      	b.n	8014432 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014414:	89b8      	ldrh	r0, [r7, #12]
 8014416:	693b      	ldr	r3, [r7, #16]
 8014418:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801441c:	7fbb      	ldrb	r3, [r7, #30]
 801441e:	4a30      	ldr	r2, [pc, #192]	; (80144e0 <dhcp_select+0x1e4>)
 8014420:	5cd3      	ldrb	r3, [r2, r3]
 8014422:	461a      	mov	r2, r3
 8014424:	f000 ffa4 	bl	8015370 <dhcp_option_byte>
 8014428:	4603      	mov	r3, r0
 801442a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801442c:	7fbb      	ldrb	r3, [r7, #30]
 801442e:	3301      	adds	r3, #1
 8014430:	77bb      	strb	r3, [r7, #30]
 8014432:	7fbb      	ldrb	r3, [r7, #30]
 8014434:	2b02      	cmp	r3, #2
 8014436:	d9ed      	bls.n	8014414 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014438:	89b8      	ldrh	r0, [r7, #12]
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	33f0      	adds	r3, #240	; 0xf0
 801443e:	697a      	ldr	r2, [r7, #20]
 8014440:	4619      	mov	r1, r3
 8014442:	f001 fca9 	bl	8015d98 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014446:	4b27      	ldr	r3, [pc, #156]	; (80144e4 <dhcp_select+0x1e8>)
 8014448:	6818      	ldr	r0, [r3, #0]
 801444a:	4b27      	ldr	r3, [pc, #156]	; (80144e8 <dhcp_select+0x1ec>)
 801444c:	9301      	str	r3, [sp, #4]
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	9300      	str	r3, [sp, #0]
 8014452:	2343      	movs	r3, #67	; 0x43
 8014454:	4a25      	ldr	r2, [pc, #148]	; (80144ec <dhcp_select+0x1f0>)
 8014456:	6979      	ldr	r1, [r7, #20]
 8014458:	f7ff fbce 	bl	8013bf8 <udp_sendto_if_src>
 801445c:	4603      	mov	r3, r0
 801445e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014460:	6978      	ldr	r0, [r7, #20]
 8014462:	f7f8 fcb9 	bl	800cdd8 <pbuf_free>
 8014466:	e001      	b.n	801446c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014468:	23ff      	movs	r3, #255	; 0xff
 801446a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801446c:	69bb      	ldr	r3, [r7, #24]
 801446e:	799b      	ldrb	r3, [r3, #6]
 8014470:	2bff      	cmp	r3, #255	; 0xff
 8014472:	d005      	beq.n	8014480 <dhcp_select+0x184>
    dhcp->tries++;
 8014474:	69bb      	ldr	r3, [r7, #24]
 8014476:	799b      	ldrb	r3, [r3, #6]
 8014478:	3301      	adds	r3, #1
 801447a:	b2da      	uxtb	r2, r3
 801447c:	69bb      	ldr	r3, [r7, #24]
 801447e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014480:	69bb      	ldr	r3, [r7, #24]
 8014482:	799b      	ldrb	r3, [r3, #6]
 8014484:	2b05      	cmp	r3, #5
 8014486:	d80d      	bhi.n	80144a4 <dhcp_select+0x1a8>
 8014488:	69bb      	ldr	r3, [r7, #24]
 801448a:	799b      	ldrb	r3, [r3, #6]
 801448c:	461a      	mov	r2, r3
 801448e:	2301      	movs	r3, #1
 8014490:	4093      	lsls	r3, r2
 8014492:	b29b      	uxth	r3, r3
 8014494:	461a      	mov	r2, r3
 8014496:	0152      	lsls	r2, r2, #5
 8014498:	1ad2      	subs	r2, r2, r3
 801449a:	0092      	lsls	r2, r2, #2
 801449c:	4413      	add	r3, r2
 801449e:	00db      	lsls	r3, r3, #3
 80144a0:	b29b      	uxth	r3, r3
 80144a2:	e001      	b.n	80144a8 <dhcp_select+0x1ac>
 80144a4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80144a8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80144aa:	89fb      	ldrh	r3, [r7, #14]
 80144ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80144b0:	4a0f      	ldr	r2, [pc, #60]	; (80144f0 <dhcp_select+0x1f4>)
 80144b2:	fb82 1203 	smull	r1, r2, r2, r3
 80144b6:	1152      	asrs	r2, r2, #5
 80144b8:	17db      	asrs	r3, r3, #31
 80144ba:	1ad3      	subs	r3, r2, r3
 80144bc:	b29a      	uxth	r2, r3
 80144be:	69bb      	ldr	r3, [r7, #24]
 80144c0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80144c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80144c6:	4618      	mov	r0, r3
 80144c8:	3720      	adds	r7, #32
 80144ca:	46bd      	mov	sp, r7
 80144cc:	bdb0      	pop	{r4, r5, r7, pc}
 80144ce:	bf00      	nop
 80144d0:	0801c9e8 	.word	0x0801c9e8
 80144d4:	0801ca94 	.word	0x0801ca94
 80144d8:	0801ca48 	.word	0x0801ca48
 80144dc:	0801cab0 	.word	0x0801cab0
 80144e0:	20000030 	.word	0x20000030
 80144e4:	20010e88 	.word	0x20010e88
 80144e8:	080276d4 	.word	0x080276d4
 80144ec:	080276d8 	.word	0x080276d8
 80144f0:	10624dd3 	.word	0x10624dd3

080144f4 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	b082      	sub	sp, #8
 80144f8:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80144fa:	4b27      	ldr	r3, [pc, #156]	; (8014598 <dhcp_coarse_tmr+0xa4>)
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	607b      	str	r3, [r7, #4]
 8014500:	e042      	b.n	8014588 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014506:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014508:	683b      	ldr	r3, [r7, #0]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d039      	beq.n	8014582 <dhcp_coarse_tmr+0x8e>
 801450e:	683b      	ldr	r3, [r7, #0]
 8014510:	795b      	ldrb	r3, [r3, #5]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d035      	beq.n	8014582 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014516:	683b      	ldr	r3, [r7, #0]
 8014518:	8a9b      	ldrh	r3, [r3, #20]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d012      	beq.n	8014544 <dhcp_coarse_tmr+0x50>
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	8a5b      	ldrh	r3, [r3, #18]
 8014522:	3301      	adds	r3, #1
 8014524:	b29a      	uxth	r2, r3
 8014526:	683b      	ldr	r3, [r7, #0]
 8014528:	825a      	strh	r2, [r3, #18]
 801452a:	683b      	ldr	r3, [r7, #0]
 801452c:	8a5a      	ldrh	r2, [r3, #18]
 801452e:	683b      	ldr	r3, [r7, #0]
 8014530:	8a9b      	ldrh	r3, [r3, #20]
 8014532:	429a      	cmp	r2, r3
 8014534:	d106      	bne.n	8014544 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	f000 fe32 	bl	80151a0 <dhcp_release_and_stop>
        dhcp_start(netif);
 801453c:	6878      	ldr	r0, [r7, #4]
 801453e:	f000 f969 	bl	8014814 <dhcp_start>
 8014542:	e01e      	b.n	8014582 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	8a1b      	ldrh	r3, [r3, #16]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d00b      	beq.n	8014564 <dhcp_coarse_tmr+0x70>
 801454c:	683b      	ldr	r3, [r7, #0]
 801454e:	8a1b      	ldrh	r3, [r3, #16]
 8014550:	1e5a      	subs	r2, r3, #1
 8014552:	b291      	uxth	r1, r2
 8014554:	683a      	ldr	r2, [r7, #0]
 8014556:	8211      	strh	r1, [r2, #16]
 8014558:	2b01      	cmp	r3, #1
 801455a:	d103      	bne.n	8014564 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801455c:	6878      	ldr	r0, [r7, #4]
 801455e:	f000 f8c6 	bl	80146ee <dhcp_t2_timeout>
 8014562:	e00e      	b.n	8014582 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	89db      	ldrh	r3, [r3, #14]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d00a      	beq.n	8014582 <dhcp_coarse_tmr+0x8e>
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	89db      	ldrh	r3, [r3, #14]
 8014570:	1e5a      	subs	r2, r3, #1
 8014572:	b291      	uxth	r1, r2
 8014574:	683a      	ldr	r2, [r7, #0]
 8014576:	81d1      	strh	r1, [r2, #14]
 8014578:	2b01      	cmp	r3, #1
 801457a:	d102      	bne.n	8014582 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801457c:	6878      	ldr	r0, [r7, #4]
 801457e:	f000 f888 	bl	8014692 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	607b      	str	r3, [r7, #4]
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d1b9      	bne.n	8014502 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801458e:	bf00      	nop
 8014590:	bf00      	nop
 8014592:	3708      	adds	r7, #8
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}
 8014598:	20010df4 	.word	0x20010df4

0801459c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b082      	sub	sp, #8
 80145a0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80145a2:	4b16      	ldr	r3, [pc, #88]	; (80145fc <dhcp_fine_tmr+0x60>)
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	607b      	str	r3, [r7, #4]
 80145a8:	e020      	b.n	80145ec <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145ae:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d017      	beq.n	80145e6 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80145b6:	683b      	ldr	r3, [r7, #0]
 80145b8:	891b      	ldrh	r3, [r3, #8]
 80145ba:	2b01      	cmp	r3, #1
 80145bc:	d906      	bls.n	80145cc <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80145be:	683b      	ldr	r3, [r7, #0]
 80145c0:	891b      	ldrh	r3, [r3, #8]
 80145c2:	3b01      	subs	r3, #1
 80145c4:	b29a      	uxth	r2, r3
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	811a      	strh	r2, [r3, #8]
 80145ca:	e00c      	b.n	80145e6 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	891b      	ldrh	r3, [r3, #8]
 80145d0:	2b01      	cmp	r3, #1
 80145d2:	d108      	bne.n	80145e6 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	891b      	ldrh	r3, [r3, #8]
 80145d8:	3b01      	subs	r3, #1
 80145da:	b29a      	uxth	r2, r3
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80145e0:	6878      	ldr	r0, [r7, #4]
 80145e2:	f000 f80d 	bl	8014600 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	607b      	str	r3, [r7, #4]
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d1db      	bne.n	80145aa <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80145f2:	bf00      	nop
 80145f4:	bf00      	nop
 80145f6:	3708      	adds	r7, #8
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bd80      	pop	{r7, pc}
 80145fc:	20010df4 	.word	0x20010df4

08014600 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b084      	sub	sp, #16
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801460c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	795b      	ldrb	r3, [r3, #5]
 8014612:	2b0c      	cmp	r3, #12
 8014614:	d003      	beq.n	801461e <dhcp_timeout+0x1e>
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	795b      	ldrb	r3, [r3, #5]
 801461a:	2b06      	cmp	r3, #6
 801461c:	d103      	bne.n	8014626 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801461e:	6878      	ldr	r0, [r7, #4]
 8014620:	f000 fa54 	bl	8014acc <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014624:	e031      	b.n	801468a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	795b      	ldrb	r3, [r3, #5]
 801462a:	2b01      	cmp	r3, #1
 801462c:	d10e      	bne.n	801464c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	799b      	ldrb	r3, [r3, #6]
 8014632:	2b05      	cmp	r3, #5
 8014634:	d803      	bhi.n	801463e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8014636:	6878      	ldr	r0, [r7, #4]
 8014638:	f7ff fe60 	bl	80142fc <dhcp_select>
}
 801463c:	e025      	b.n	801468a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801463e:	6878      	ldr	r0, [r7, #4]
 8014640:	f000 fdae 	bl	80151a0 <dhcp_release_and_stop>
      dhcp_start(netif);
 8014644:	6878      	ldr	r0, [r7, #4]
 8014646:	f000 f8e5 	bl	8014814 <dhcp_start>
}
 801464a:	e01e      	b.n	801468a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	795b      	ldrb	r3, [r3, #5]
 8014650:	2b08      	cmp	r3, #8
 8014652:	d10b      	bne.n	801466c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	799b      	ldrb	r3, [r3, #6]
 8014658:	2b01      	cmp	r3, #1
 801465a:	d803      	bhi.n	8014664 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801465c:	6878      	ldr	r0, [r7, #4]
 801465e:	f7ff fdf3 	bl	8014248 <dhcp_check>
}
 8014662:	e012      	b.n	801468a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014664:	6878      	ldr	r0, [r7, #4]
 8014666:	f000 fad3 	bl	8014c10 <dhcp_bind>
}
 801466a:	e00e      	b.n	801468a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	795b      	ldrb	r3, [r3, #5]
 8014670:	2b03      	cmp	r3, #3
 8014672:	d10a      	bne.n	801468a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	799b      	ldrb	r3, [r3, #6]
 8014678:	2b01      	cmp	r3, #1
 801467a:	d803      	bhi.n	8014684 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801467c:	6878      	ldr	r0, [r7, #4]
 801467e:	f000 fcd9 	bl	8015034 <dhcp_reboot>
}
 8014682:	e002      	b.n	801468a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014684:	6878      	ldr	r0, [r7, #4]
 8014686:	f000 fa21 	bl	8014acc <dhcp_discover>
}
 801468a:	bf00      	nop
 801468c:	3710      	adds	r7, #16
 801468e:	46bd      	mov	sp, r7
 8014690:	bd80      	pop	{r7, pc}

08014692 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8014692:	b580      	push	{r7, lr}
 8014694:	b084      	sub	sp, #16
 8014696:	af00      	add	r7, sp, #0
 8014698:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801469e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	795b      	ldrb	r3, [r3, #5]
 80146a4:	2b01      	cmp	r3, #1
 80146a6:	d007      	beq.n	80146b8 <dhcp_t1_timeout+0x26>
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	795b      	ldrb	r3, [r3, #5]
 80146ac:	2b0a      	cmp	r3, #10
 80146ae:	d003      	beq.n	80146b8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80146b4:	2b05      	cmp	r3, #5
 80146b6:	d116      	bne.n	80146e6 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80146b8:	6878      	ldr	r0, [r7, #4]
 80146ba:	f000 fb83 	bl	8014dc4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	899b      	ldrh	r3, [r3, #12]
 80146c2:	461a      	mov	r2, r3
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	8a5b      	ldrh	r3, [r3, #18]
 80146c8:	1ad3      	subs	r3, r2, r3
 80146ca:	2b01      	cmp	r3, #1
 80146cc:	dd0b      	ble.n	80146e6 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	899b      	ldrh	r3, [r3, #12]
 80146d2:	461a      	mov	r2, r3
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	8a5b      	ldrh	r3, [r3, #18]
 80146d8:	1ad3      	subs	r3, r2, r3
 80146da:	0fda      	lsrs	r2, r3, #31
 80146dc:	4413      	add	r3, r2
 80146de:	105b      	asrs	r3, r3, #1
 80146e0:	b29a      	uxth	r2, r3
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80146e6:	bf00      	nop
 80146e8:	3710      	adds	r7, #16
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd80      	pop	{r7, pc}

080146ee <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80146ee:	b580      	push	{r7, lr}
 80146f0:	b084      	sub	sp, #16
 80146f2:	af00      	add	r7, sp, #0
 80146f4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146fa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	795b      	ldrb	r3, [r3, #5]
 8014700:	2b01      	cmp	r3, #1
 8014702:	d00b      	beq.n	801471c <dhcp_t2_timeout+0x2e>
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	795b      	ldrb	r3, [r3, #5]
 8014708:	2b0a      	cmp	r3, #10
 801470a:	d007      	beq.n	801471c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014710:	2b05      	cmp	r3, #5
 8014712:	d003      	beq.n	801471c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	795b      	ldrb	r3, [r3, #5]
 8014718:	2b04      	cmp	r3, #4
 801471a:	d116      	bne.n	801474a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801471c:	6878      	ldr	r0, [r7, #4]
 801471e:	f000 fbed 	bl	8014efc <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	8a9b      	ldrh	r3, [r3, #20]
 8014726:	461a      	mov	r2, r3
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	8a5b      	ldrh	r3, [r3, #18]
 801472c:	1ad3      	subs	r3, r2, r3
 801472e:	2b01      	cmp	r3, #1
 8014730:	dd0b      	ble.n	801474a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	8a9b      	ldrh	r3, [r3, #20]
 8014736:	461a      	mov	r2, r3
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	8a5b      	ldrh	r3, [r3, #18]
 801473c:	1ad3      	subs	r3, r2, r3
 801473e:	0fda      	lsrs	r2, r3, #31
 8014740:	4413      	add	r3, r2
 8014742:	105b      	asrs	r3, r3, #1
 8014744:	b29a      	uxth	r2, r3
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801474a:	bf00      	nop
 801474c:	3710      	adds	r7, #16
 801474e:	46bd      	mov	sp, r7
 8014750:	bd80      	pop	{r7, pc}
	...

08014754 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b084      	sub	sp, #16
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
 801475c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014762:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	2200      	movs	r2, #0
 8014768:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	2200      	movs	r2, #0
 801476e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014770:	4b26      	ldr	r3, [pc, #152]	; (801480c <dhcp_handle_ack+0xb8>)
 8014772:	78db      	ldrb	r3, [r3, #3]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d003      	beq.n	8014780 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014778:	4b25      	ldr	r3, [pc, #148]	; (8014810 <dhcp_handle_ack+0xbc>)
 801477a:	68da      	ldr	r2, [r3, #12]
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014780:	4b22      	ldr	r3, [pc, #136]	; (801480c <dhcp_handle_ack+0xb8>)
 8014782:	791b      	ldrb	r3, [r3, #4]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d004      	beq.n	8014792 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014788:	4b21      	ldr	r3, [pc, #132]	; (8014810 <dhcp_handle_ack+0xbc>)
 801478a:	691a      	ldr	r2, [r3, #16]
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	62da      	str	r2, [r3, #44]	; 0x2c
 8014790:	e004      	b.n	801479c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014796:	085a      	lsrs	r2, r3, #1
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801479c:	4b1b      	ldr	r3, [pc, #108]	; (801480c <dhcp_handle_ack+0xb8>)
 801479e:	795b      	ldrb	r3, [r3, #5]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d004      	beq.n	80147ae <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80147a4:	4b1a      	ldr	r3, [pc, #104]	; (8014810 <dhcp_handle_ack+0xbc>)
 80147a6:	695a      	ldr	r2, [r3, #20]
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	631a      	str	r2, [r3, #48]	; 0x30
 80147ac:	e007      	b.n	80147be <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80147b2:	4613      	mov	r3, r2
 80147b4:	00db      	lsls	r3, r3, #3
 80147b6:	1a9b      	subs	r3, r3, r2
 80147b8:	08da      	lsrs	r2, r3, #3
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80147be:	683b      	ldr	r3, [r7, #0]
 80147c0:	691a      	ldr	r2, [r3, #16]
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80147c6:	4b11      	ldr	r3, [pc, #68]	; (801480c <dhcp_handle_ack+0xb8>)
 80147c8:	799b      	ldrb	r3, [r3, #6]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d00b      	beq.n	80147e6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80147ce:	4b10      	ldr	r3, [pc, #64]	; (8014810 <dhcp_handle_ack+0xbc>)
 80147d0:	699b      	ldr	r3, [r3, #24]
 80147d2:	4618      	mov	r0, r3
 80147d4:	f7f6 fee1 	bl	800b59a <lwip_htonl>
 80147d8:	4602      	mov	r2, r0
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	2201      	movs	r2, #1
 80147e2:	71da      	strb	r2, [r3, #7]
 80147e4:	e002      	b.n	80147ec <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	2200      	movs	r2, #0
 80147ea:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80147ec:	4b07      	ldr	r3, [pc, #28]	; (801480c <dhcp_handle_ack+0xb8>)
 80147ee:	79db      	ldrb	r3, [r3, #7]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d007      	beq.n	8014804 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80147f4:	4b06      	ldr	r3, [pc, #24]	; (8014810 <dhcp_handle_ack+0xbc>)
 80147f6:	69db      	ldr	r3, [r3, #28]
 80147f8:	4618      	mov	r0, r3
 80147fa:	f7f6 fece 	bl	800b59a <lwip_htonl>
 80147fe:	4602      	mov	r2, r0
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014804:	bf00      	nop
 8014806:	3710      	adds	r7, #16
 8014808:	46bd      	mov	sp, r7
 801480a:	bd80      	pop	{r7, pc}
 801480c:	20010e80 	.word	0x20010e80
 8014810:	20010e60 	.word	0x20010e60

08014814 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b084      	sub	sp, #16
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d109      	bne.n	8014836 <dhcp_start+0x22>
 8014822:	4b37      	ldr	r3, [pc, #220]	; (8014900 <dhcp_start+0xec>)
 8014824:	f240 22e7 	movw	r2, #743	; 0x2e7
 8014828:	4936      	ldr	r1, [pc, #216]	; (8014904 <dhcp_start+0xf0>)
 801482a:	4837      	ldr	r0, [pc, #220]	; (8014908 <dhcp_start+0xf4>)
 801482c:	f004 f8c0 	bl	80189b0 <iprintf>
 8014830:	f06f 030f 	mvn.w	r3, #15
 8014834:	e060      	b.n	80148f8 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801483c:	f003 0301 	and.w	r3, r3, #1
 8014840:	2b00      	cmp	r3, #0
 8014842:	d109      	bne.n	8014858 <dhcp_start+0x44>
 8014844:	4b2e      	ldr	r3, [pc, #184]	; (8014900 <dhcp_start+0xec>)
 8014846:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801484a:	4930      	ldr	r1, [pc, #192]	; (801490c <dhcp_start+0xf8>)
 801484c:	482e      	ldr	r0, [pc, #184]	; (8014908 <dhcp_start+0xf4>)
 801484e:	f004 f8af 	bl	80189b0 <iprintf>
 8014852:	f06f 030f 	mvn.w	r3, #15
 8014856:	e04f      	b.n	80148f8 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801485c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014862:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8014866:	d202      	bcs.n	801486e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014868:	f04f 33ff 	mov.w	r3, #4294967295
 801486c:	e044      	b.n	80148f8 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d10d      	bne.n	8014890 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014874:	2034      	movs	r0, #52	; 0x34
 8014876:	f7f7 f9e5 	bl	800bc44 <mem_malloc>
 801487a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d102      	bne.n	8014888 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014882:	f04f 33ff 	mov.w	r3, #4294967295
 8014886:	e037      	b.n	80148f8 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	68fa      	ldr	r2, [r7, #12]
 801488c:	625a      	str	r2, [r3, #36]	; 0x24
 801488e:	e005      	b.n	801489c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	791b      	ldrb	r3, [r3, #4]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d001      	beq.n	801489c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014898:	f7ff fc92 	bl	80141c0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801489c:	2234      	movs	r2, #52	; 0x34
 801489e:	2100      	movs	r1, #0
 80148a0:	68f8      	ldr	r0, [r7, #12]
 80148a2:	f004 f8ea 	bl	8018a7a <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80148a6:	f7ff fc39 	bl	801411c <dhcp_inc_pcb_refcount>
 80148aa:	4603      	mov	r3, r0
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d002      	beq.n	80148b6 <dhcp_start+0xa2>
    return ERR_MEM;
 80148b0:	f04f 33ff 	mov.w	r3, #4294967295
 80148b4:	e020      	b.n	80148f8 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	2201      	movs	r2, #1
 80148ba:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80148c2:	f003 0304 	and.w	r3, r3, #4
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d105      	bne.n	80148d6 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80148ca:	2102      	movs	r1, #2
 80148cc:	68f8      	ldr	r0, [r7, #12]
 80148ce:	f000 fd01 	bl	80152d4 <dhcp_set_state>
    return ERR_OK;
 80148d2:	2300      	movs	r3, #0
 80148d4:	e010      	b.n	80148f8 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80148d6:	6878      	ldr	r0, [r7, #4]
 80148d8:	f000 f8f8 	bl	8014acc <dhcp_discover>
 80148dc:	4603      	mov	r3, r0
 80148de:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80148e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d005      	beq.n	80148f4 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80148e8:	6878      	ldr	r0, [r7, #4]
 80148ea:	f000 fc59 	bl	80151a0 <dhcp_release_and_stop>
    return ERR_MEM;
 80148ee:	f04f 33ff 	mov.w	r3, #4294967295
 80148f2:	e001      	b.n	80148f8 <dhcp_start+0xe4>
  }
  return result;
 80148f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80148f8:	4618      	mov	r0, r3
 80148fa:	3710      	adds	r7, #16
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}
 8014900:	0801c9e8 	.word	0x0801c9e8
 8014904:	0801cacc 	.word	0x0801cacc
 8014908:	0801ca48 	.word	0x0801ca48
 801490c:	0801cb10 	.word	0x0801cb10

08014910 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b084      	sub	sp, #16
 8014914:	af00      	add	r7, sp, #0
 8014916:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801491c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d025      	beq.n	8014970 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	795b      	ldrb	r3, [r3, #5]
 8014928:	2b0a      	cmp	r3, #10
 801492a:	d008      	beq.n	801493e <dhcp_network_changed+0x2e>
 801492c:	2b0a      	cmp	r3, #10
 801492e:	dc0d      	bgt.n	801494c <dhcp_network_changed+0x3c>
 8014930:	2b00      	cmp	r3, #0
 8014932:	d01f      	beq.n	8014974 <dhcp_network_changed+0x64>
 8014934:	2b00      	cmp	r3, #0
 8014936:	db09      	blt.n	801494c <dhcp_network_changed+0x3c>
 8014938:	3b03      	subs	r3, #3
 801493a:	2b02      	cmp	r3, #2
 801493c:	d806      	bhi.n	801494c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	2200      	movs	r2, #0
 8014942:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8014944:	6878      	ldr	r0, [r7, #4]
 8014946:	f000 fb75 	bl	8015034 <dhcp_reboot>
      break;
 801494a:	e014      	b.n	8014976 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	795b      	ldrb	r3, [r3, #5]
 8014950:	2b0c      	cmp	r3, #12
 8014952:	d906      	bls.n	8014962 <dhcp_network_changed+0x52>
 8014954:	4b09      	ldr	r3, [pc, #36]	; (801497c <dhcp_network_changed+0x6c>)
 8014956:	f240 326d 	movw	r2, #877	; 0x36d
 801495a:	4909      	ldr	r1, [pc, #36]	; (8014980 <dhcp_network_changed+0x70>)
 801495c:	4809      	ldr	r0, [pc, #36]	; (8014984 <dhcp_network_changed+0x74>)
 801495e:	f004 f827 	bl	80189b0 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	2200      	movs	r2, #0
 8014966:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8014968:	6878      	ldr	r0, [r7, #4]
 801496a:	f000 f8af 	bl	8014acc <dhcp_discover>
      break;
 801496e:	e002      	b.n	8014976 <dhcp_network_changed+0x66>
    return;
 8014970:	bf00      	nop
 8014972:	e000      	b.n	8014976 <dhcp_network_changed+0x66>
      break;
 8014974:	bf00      	nop
  }
}
 8014976:	3710      	adds	r7, #16
 8014978:	46bd      	mov	sp, r7
 801497a:	bd80      	pop	{r7, pc}
 801497c:	0801c9e8 	.word	0x0801c9e8
 8014980:	0801cb34 	.word	0x0801cb34
 8014984:	0801ca48 	.word	0x0801ca48

08014988 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b084      	sub	sp, #16
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
 8014990:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d107      	bne.n	80149a8 <dhcp_arp_reply+0x20>
 8014998:	4b0e      	ldr	r3, [pc, #56]	; (80149d4 <dhcp_arp_reply+0x4c>)
 801499a:	f240 328b 	movw	r2, #907	; 0x38b
 801499e:	490e      	ldr	r1, [pc, #56]	; (80149d8 <dhcp_arp_reply+0x50>)
 80149a0:	480e      	ldr	r0, [pc, #56]	; (80149dc <dhcp_arp_reply+0x54>)
 80149a2:	f004 f805 	bl	80189b0 <iprintf>
 80149a6:	e012      	b.n	80149ce <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149ac:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d00c      	beq.n	80149ce <dhcp_arp_reply+0x46>
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	795b      	ldrb	r3, [r3, #5]
 80149b8:	2b08      	cmp	r3, #8
 80149ba:	d108      	bne.n	80149ce <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80149bc:	683b      	ldr	r3, [r7, #0]
 80149be:	681a      	ldr	r2, [r3, #0]
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	69db      	ldr	r3, [r3, #28]
 80149c4:	429a      	cmp	r2, r3
 80149c6:	d102      	bne.n	80149ce <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80149c8:	6878      	ldr	r0, [r7, #4]
 80149ca:	f000 f809 	bl	80149e0 <dhcp_decline>
    }
  }
}
 80149ce:	3710      	adds	r7, #16
 80149d0:	46bd      	mov	sp, r7
 80149d2:	bd80      	pop	{r7, pc}
 80149d4:	0801c9e8 	.word	0x0801c9e8
 80149d8:	0801cacc 	.word	0x0801cacc
 80149dc:	0801ca48 	.word	0x0801ca48

080149e0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80149e0:	b5b0      	push	{r4, r5, r7, lr}
 80149e2:	b08a      	sub	sp, #40	; 0x28
 80149e4:	af02      	add	r7, sp, #8
 80149e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149ec:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80149ee:	210c      	movs	r1, #12
 80149f0:	69b8      	ldr	r0, [r7, #24]
 80149f2:	f000 fc6f 	bl	80152d4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80149f6:	f107 030c 	add.w	r3, r7, #12
 80149fa:	2204      	movs	r2, #4
 80149fc:	69b9      	ldr	r1, [r7, #24]
 80149fe:	6878      	ldr	r0, [r7, #4]
 8014a00:	f001 f8f4 	bl	8015bec <dhcp_create_msg>
 8014a04:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014a06:	697b      	ldr	r3, [r7, #20]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d035      	beq.n	8014a78 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014a0c:	697b      	ldr	r3, [r7, #20]
 8014a0e:	685b      	ldr	r3, [r3, #4]
 8014a10:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014a12:	89b8      	ldrh	r0, [r7, #12]
 8014a14:	693b      	ldr	r3, [r7, #16]
 8014a16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014a1a:	2304      	movs	r3, #4
 8014a1c:	2232      	movs	r2, #50	; 0x32
 8014a1e:	f000 fc73 	bl	8015308 <dhcp_option>
 8014a22:	4603      	mov	r3, r0
 8014a24:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014a26:	89bc      	ldrh	r4, [r7, #12]
 8014a28:	693b      	ldr	r3, [r7, #16]
 8014a2a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014a2e:	69bb      	ldr	r3, [r7, #24]
 8014a30:	69db      	ldr	r3, [r3, #28]
 8014a32:	4618      	mov	r0, r3
 8014a34:	f7f6 fdb1 	bl	800b59a <lwip_htonl>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	461a      	mov	r2, r3
 8014a3c:	4629      	mov	r1, r5
 8014a3e:	4620      	mov	r0, r4
 8014a40:	f000 fcee 	bl	8015420 <dhcp_option_long>
 8014a44:	4603      	mov	r3, r0
 8014a46:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014a48:	89b8      	ldrh	r0, [r7, #12]
 8014a4a:	693b      	ldr	r3, [r7, #16]
 8014a4c:	33f0      	adds	r3, #240	; 0xf0
 8014a4e:	697a      	ldr	r2, [r7, #20]
 8014a50:	4619      	mov	r1, r3
 8014a52:	f001 f9a1 	bl	8015d98 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014a56:	4b19      	ldr	r3, [pc, #100]	; (8014abc <dhcp_decline+0xdc>)
 8014a58:	6818      	ldr	r0, [r3, #0]
 8014a5a:	4b19      	ldr	r3, [pc, #100]	; (8014ac0 <dhcp_decline+0xe0>)
 8014a5c:	9301      	str	r3, [sp, #4]
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	9300      	str	r3, [sp, #0]
 8014a62:	2343      	movs	r3, #67	; 0x43
 8014a64:	4a17      	ldr	r2, [pc, #92]	; (8014ac4 <dhcp_decline+0xe4>)
 8014a66:	6979      	ldr	r1, [r7, #20]
 8014a68:	f7ff f8c6 	bl	8013bf8 <udp_sendto_if_src>
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014a70:	6978      	ldr	r0, [r7, #20]
 8014a72:	f7f8 f9b1 	bl	800cdd8 <pbuf_free>
 8014a76:	e001      	b.n	8014a7c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014a78:	23ff      	movs	r3, #255	; 0xff
 8014a7a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014a7c:	69bb      	ldr	r3, [r7, #24]
 8014a7e:	799b      	ldrb	r3, [r3, #6]
 8014a80:	2bff      	cmp	r3, #255	; 0xff
 8014a82:	d005      	beq.n	8014a90 <dhcp_decline+0xb0>
    dhcp->tries++;
 8014a84:	69bb      	ldr	r3, [r7, #24]
 8014a86:	799b      	ldrb	r3, [r3, #6]
 8014a88:	3301      	adds	r3, #1
 8014a8a:	b2da      	uxtb	r2, r3
 8014a8c:	69bb      	ldr	r3, [r7, #24]
 8014a8e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014a90:	f242 7310 	movw	r3, #10000	; 0x2710
 8014a94:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014a96:	89fb      	ldrh	r3, [r7, #14]
 8014a98:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014a9c:	4a0a      	ldr	r2, [pc, #40]	; (8014ac8 <dhcp_decline+0xe8>)
 8014a9e:	fb82 1203 	smull	r1, r2, r2, r3
 8014aa2:	1152      	asrs	r2, r2, #5
 8014aa4:	17db      	asrs	r3, r3, #31
 8014aa6:	1ad3      	subs	r3, r2, r3
 8014aa8:	b29a      	uxth	r2, r3
 8014aaa:	69bb      	ldr	r3, [r7, #24]
 8014aac:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014aae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	3720      	adds	r7, #32
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8014aba:	bf00      	nop
 8014abc:	20010e88 	.word	0x20010e88
 8014ac0:	080276d4 	.word	0x080276d4
 8014ac4:	080276d8 	.word	0x080276d8
 8014ac8:	10624dd3 	.word	0x10624dd3

08014acc <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b08a      	sub	sp, #40	; 0x28
 8014ad0:	af02      	add	r7, sp, #8
 8014ad2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ad8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8014ada:	2300      	movs	r3, #0
 8014adc:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014ade:	69bb      	ldr	r3, [r7, #24]
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014ae4:	2106      	movs	r1, #6
 8014ae6:	69b8      	ldr	r0, [r7, #24]
 8014ae8:	f000 fbf4 	bl	80152d4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014aec:	f107 0308 	add.w	r3, r7, #8
 8014af0:	2201      	movs	r2, #1
 8014af2:	69b9      	ldr	r1, [r7, #24]
 8014af4:	6878      	ldr	r0, [r7, #4]
 8014af6:	f001 f879 	bl	8015bec <dhcp_create_msg>
 8014afa:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014afc:	693b      	ldr	r3, [r7, #16]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d04b      	beq.n	8014b9a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014b02:	693b      	ldr	r3, [r7, #16]
 8014b04:	685b      	ldr	r3, [r3, #4]
 8014b06:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014b08:	8938      	ldrh	r0, [r7, #8]
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b10:	2302      	movs	r3, #2
 8014b12:	2239      	movs	r2, #57	; 0x39
 8014b14:	f000 fbf8 	bl	8015308 <dhcp_option>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014b1c:	8938      	ldrh	r0, [r7, #8]
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014b28:	461a      	mov	r2, r3
 8014b2a:	f000 fc47 	bl	80153bc <dhcp_option_short>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014b32:	8938      	ldrh	r0, [r7, #8]
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b3a:	2303      	movs	r3, #3
 8014b3c:	2237      	movs	r2, #55	; 0x37
 8014b3e:	f000 fbe3 	bl	8015308 <dhcp_option>
 8014b42:	4603      	mov	r3, r0
 8014b44:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014b46:	2300      	movs	r3, #0
 8014b48:	77fb      	strb	r3, [r7, #31]
 8014b4a:	e00e      	b.n	8014b6a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014b4c:	8938      	ldrh	r0, [r7, #8]
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014b54:	7ffb      	ldrb	r3, [r7, #31]
 8014b56:	4a29      	ldr	r2, [pc, #164]	; (8014bfc <dhcp_discover+0x130>)
 8014b58:	5cd3      	ldrb	r3, [r2, r3]
 8014b5a:	461a      	mov	r2, r3
 8014b5c:	f000 fc08 	bl	8015370 <dhcp_option_byte>
 8014b60:	4603      	mov	r3, r0
 8014b62:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014b64:	7ffb      	ldrb	r3, [r7, #31]
 8014b66:	3301      	adds	r3, #1
 8014b68:	77fb      	strb	r3, [r7, #31]
 8014b6a:	7ffb      	ldrb	r3, [r7, #31]
 8014b6c:	2b02      	cmp	r3, #2
 8014b6e:	d9ed      	bls.n	8014b4c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014b70:	8938      	ldrh	r0, [r7, #8]
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	33f0      	adds	r3, #240	; 0xf0
 8014b76:	693a      	ldr	r2, [r7, #16]
 8014b78:	4619      	mov	r1, r3
 8014b7a:	f001 f90d 	bl	8015d98 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014b7e:	4b20      	ldr	r3, [pc, #128]	; (8014c00 <dhcp_discover+0x134>)
 8014b80:	6818      	ldr	r0, [r3, #0]
 8014b82:	4b20      	ldr	r3, [pc, #128]	; (8014c04 <dhcp_discover+0x138>)
 8014b84:	9301      	str	r3, [sp, #4]
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	9300      	str	r3, [sp, #0]
 8014b8a:	2343      	movs	r3, #67	; 0x43
 8014b8c:	4a1e      	ldr	r2, [pc, #120]	; (8014c08 <dhcp_discover+0x13c>)
 8014b8e:	6939      	ldr	r1, [r7, #16]
 8014b90:	f7ff f832 	bl	8013bf8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014b94:	6938      	ldr	r0, [r7, #16]
 8014b96:	f7f8 f91f 	bl	800cdd8 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014b9a:	69bb      	ldr	r3, [r7, #24]
 8014b9c:	799b      	ldrb	r3, [r3, #6]
 8014b9e:	2bff      	cmp	r3, #255	; 0xff
 8014ba0:	d005      	beq.n	8014bae <dhcp_discover+0xe2>
    dhcp->tries++;
 8014ba2:	69bb      	ldr	r3, [r7, #24]
 8014ba4:	799b      	ldrb	r3, [r3, #6]
 8014ba6:	3301      	adds	r3, #1
 8014ba8:	b2da      	uxtb	r2, r3
 8014baa:	69bb      	ldr	r3, [r7, #24]
 8014bac:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014bae:	69bb      	ldr	r3, [r7, #24]
 8014bb0:	799b      	ldrb	r3, [r3, #6]
 8014bb2:	2b05      	cmp	r3, #5
 8014bb4:	d80d      	bhi.n	8014bd2 <dhcp_discover+0x106>
 8014bb6:	69bb      	ldr	r3, [r7, #24]
 8014bb8:	799b      	ldrb	r3, [r3, #6]
 8014bba:	461a      	mov	r2, r3
 8014bbc:	2301      	movs	r3, #1
 8014bbe:	4093      	lsls	r3, r2
 8014bc0:	b29b      	uxth	r3, r3
 8014bc2:	461a      	mov	r2, r3
 8014bc4:	0152      	lsls	r2, r2, #5
 8014bc6:	1ad2      	subs	r2, r2, r3
 8014bc8:	0092      	lsls	r2, r2, #2
 8014bca:	4413      	add	r3, r2
 8014bcc:	00db      	lsls	r3, r3, #3
 8014bce:	b29b      	uxth	r3, r3
 8014bd0:	e001      	b.n	8014bd6 <dhcp_discover+0x10a>
 8014bd2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014bd6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014bd8:	897b      	ldrh	r3, [r7, #10]
 8014bda:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014bde:	4a0b      	ldr	r2, [pc, #44]	; (8014c0c <dhcp_discover+0x140>)
 8014be0:	fb82 1203 	smull	r1, r2, r2, r3
 8014be4:	1152      	asrs	r2, r2, #5
 8014be6:	17db      	asrs	r3, r3, #31
 8014be8:	1ad3      	subs	r3, r2, r3
 8014bea:	b29a      	uxth	r2, r3
 8014bec:	69bb      	ldr	r3, [r7, #24]
 8014bee:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014bf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	3720      	adds	r7, #32
 8014bf8:	46bd      	mov	sp, r7
 8014bfa:	bd80      	pop	{r7, pc}
 8014bfc:	20000030 	.word	0x20000030
 8014c00:	20010e88 	.word	0x20010e88
 8014c04:	080276d4 	.word	0x080276d4
 8014c08:	080276d8 	.word	0x080276d8
 8014c0c:	10624dd3 	.word	0x10624dd3

08014c10 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b088      	sub	sp, #32
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d107      	bne.n	8014c2e <dhcp_bind+0x1e>
 8014c1e:	4b64      	ldr	r3, [pc, #400]	; (8014db0 <dhcp_bind+0x1a0>)
 8014c20:	f240 4215 	movw	r2, #1045	; 0x415
 8014c24:	4963      	ldr	r1, [pc, #396]	; (8014db4 <dhcp_bind+0x1a4>)
 8014c26:	4864      	ldr	r0, [pc, #400]	; (8014db8 <dhcp_bind+0x1a8>)
 8014c28:	f003 fec2 	bl	80189b0 <iprintf>
 8014c2c:	e0bc      	b.n	8014da8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c32:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014c34:	69bb      	ldr	r3, [r7, #24]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d107      	bne.n	8014c4a <dhcp_bind+0x3a>
 8014c3a:	4b5d      	ldr	r3, [pc, #372]	; (8014db0 <dhcp_bind+0x1a0>)
 8014c3c:	f240 4217 	movw	r2, #1047	; 0x417
 8014c40:	495e      	ldr	r1, [pc, #376]	; (8014dbc <dhcp_bind+0x1ac>)
 8014c42:	485d      	ldr	r0, [pc, #372]	; (8014db8 <dhcp_bind+0x1a8>)
 8014c44:	f003 feb4 	bl	80189b0 <iprintf>
 8014c48:	e0ae      	b.n	8014da8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8014c4a:	69bb      	ldr	r3, [r7, #24]
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014c50:	69bb      	ldr	r3, [r7, #24]
 8014c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c58:	d019      	beq.n	8014c8e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014c5a:	69bb      	ldr	r3, [r7, #24]
 8014c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c5e:	331e      	adds	r3, #30
 8014c60:	4a57      	ldr	r2, [pc, #348]	; (8014dc0 <dhcp_bind+0x1b0>)
 8014c62:	fba2 2303 	umull	r2, r3, r2, r3
 8014c66:	095b      	lsrs	r3, r3, #5
 8014c68:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014c6a:	69fb      	ldr	r3, [r7, #28]
 8014c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014c70:	d302      	bcc.n	8014c78 <dhcp_bind+0x68>
      timeout = 0xffff;
 8014c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014c76:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014c78:	69fb      	ldr	r3, [r7, #28]
 8014c7a:	b29a      	uxth	r2, r3
 8014c7c:	69bb      	ldr	r3, [r7, #24]
 8014c7e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8014c80:	69bb      	ldr	r3, [r7, #24]
 8014c82:	8a9b      	ldrh	r3, [r3, #20]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d102      	bne.n	8014c8e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014c88:	69bb      	ldr	r3, [r7, #24]
 8014c8a:	2201      	movs	r2, #1
 8014c8c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8014c8e:	69bb      	ldr	r3, [r7, #24]
 8014c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c96:	d01d      	beq.n	8014cd4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014c98:	69bb      	ldr	r3, [r7, #24]
 8014c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c9c:	331e      	adds	r3, #30
 8014c9e:	4a48      	ldr	r2, [pc, #288]	; (8014dc0 <dhcp_bind+0x1b0>)
 8014ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8014ca4:	095b      	lsrs	r3, r3, #5
 8014ca6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014ca8:	69fb      	ldr	r3, [r7, #28]
 8014caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014cae:	d302      	bcc.n	8014cb6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8014cb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014cb4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8014cb6:	69fb      	ldr	r3, [r7, #28]
 8014cb8:	b29a      	uxth	r2, r3
 8014cba:	69bb      	ldr	r3, [r7, #24]
 8014cbc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8014cbe:	69bb      	ldr	r3, [r7, #24]
 8014cc0:	895b      	ldrh	r3, [r3, #10]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d102      	bne.n	8014ccc <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8014cc6:	69bb      	ldr	r3, [r7, #24]
 8014cc8:	2201      	movs	r2, #1
 8014cca:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014ccc:	69bb      	ldr	r3, [r7, #24]
 8014cce:	895a      	ldrh	r2, [r3, #10]
 8014cd0:	69bb      	ldr	r3, [r7, #24]
 8014cd2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014cd4:	69bb      	ldr	r3, [r7, #24]
 8014cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cdc:	d01d      	beq.n	8014d1a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014cde:	69bb      	ldr	r3, [r7, #24]
 8014ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ce2:	331e      	adds	r3, #30
 8014ce4:	4a36      	ldr	r2, [pc, #216]	; (8014dc0 <dhcp_bind+0x1b0>)
 8014ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8014cea:	095b      	lsrs	r3, r3, #5
 8014cec:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014cee:	69fb      	ldr	r3, [r7, #28]
 8014cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014cf4:	d302      	bcc.n	8014cfc <dhcp_bind+0xec>
      timeout = 0xffff;
 8014cf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014cfa:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014cfc:	69fb      	ldr	r3, [r7, #28]
 8014cfe:	b29a      	uxth	r2, r3
 8014d00:	69bb      	ldr	r3, [r7, #24]
 8014d02:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014d04:	69bb      	ldr	r3, [r7, #24]
 8014d06:	899b      	ldrh	r3, [r3, #12]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d102      	bne.n	8014d12 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014d0c:	69bb      	ldr	r3, [r7, #24]
 8014d0e:	2201      	movs	r2, #1
 8014d10:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014d12:	69bb      	ldr	r3, [r7, #24]
 8014d14:	899a      	ldrh	r2, [r3, #12]
 8014d16:	69bb      	ldr	r3, [r7, #24]
 8014d18:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8014d1a:	69bb      	ldr	r3, [r7, #24]
 8014d1c:	895a      	ldrh	r2, [r3, #10]
 8014d1e:	69bb      	ldr	r3, [r7, #24]
 8014d20:	899b      	ldrh	r3, [r3, #12]
 8014d22:	429a      	cmp	r2, r3
 8014d24:	d306      	bcc.n	8014d34 <dhcp_bind+0x124>
 8014d26:	69bb      	ldr	r3, [r7, #24]
 8014d28:	899b      	ldrh	r3, [r3, #12]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d002      	beq.n	8014d34 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8014d2e:	69bb      	ldr	r3, [r7, #24]
 8014d30:	2200      	movs	r2, #0
 8014d32:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8014d34:	69bb      	ldr	r3, [r7, #24]
 8014d36:	79db      	ldrb	r3, [r3, #7]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d003      	beq.n	8014d44 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8014d3c:	69bb      	ldr	r3, [r7, #24]
 8014d3e:	6a1b      	ldr	r3, [r3, #32]
 8014d40:	613b      	str	r3, [r7, #16]
 8014d42:	e014      	b.n	8014d6e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8014d44:	69bb      	ldr	r3, [r7, #24]
 8014d46:	331c      	adds	r3, #28
 8014d48:	781b      	ldrb	r3, [r3, #0]
 8014d4a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8014d4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	db02      	blt.n	8014d5a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014d54:	23ff      	movs	r3, #255	; 0xff
 8014d56:	613b      	str	r3, [r7, #16]
 8014d58:	e009      	b.n	8014d6e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8014d5a:	7dfb      	ldrb	r3, [r7, #23]
 8014d5c:	2bbf      	cmp	r3, #191	; 0xbf
 8014d5e:	d903      	bls.n	8014d68 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8014d60:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8014d64:	613b      	str	r3, [r7, #16]
 8014d66:	e002      	b.n	8014d6e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8014d68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d6c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8014d6e:	69bb      	ldr	r3, [r7, #24]
 8014d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d72:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d108      	bne.n	8014d8c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8014d7a:	69bb      	ldr	r3, [r7, #24]
 8014d7c:	69da      	ldr	r2, [r3, #28]
 8014d7e:	693b      	ldr	r3, [r7, #16]
 8014d80:	4013      	ands	r3, r2
 8014d82:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014d8a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8014d8c:	210a      	movs	r1, #10
 8014d8e:	69b8      	ldr	r0, [r7, #24]
 8014d90:	f000 faa0 	bl	80152d4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8014d94:	69bb      	ldr	r3, [r7, #24]
 8014d96:	f103 011c 	add.w	r1, r3, #28
 8014d9a:	f107 030c 	add.w	r3, r7, #12
 8014d9e:	f107 0210 	add.w	r2, r7, #16
 8014da2:	6878      	ldr	r0, [r7, #4]
 8014da4:	f7f7 fb0a 	bl	800c3bc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8014da8:	3720      	adds	r7, #32
 8014daa:	46bd      	mov	sp, r7
 8014dac:	bd80      	pop	{r7, pc}
 8014dae:	bf00      	nop
 8014db0:	0801c9e8 	.word	0x0801c9e8
 8014db4:	0801cb48 	.word	0x0801cb48
 8014db8:	0801ca48 	.word	0x0801ca48
 8014dbc:	0801cb64 	.word	0x0801cb64
 8014dc0:	88888889 	.word	0x88888889

08014dc4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014dc4:	b580      	push	{r7, lr}
 8014dc6:	b08a      	sub	sp, #40	; 0x28
 8014dc8:	af02      	add	r7, sp, #8
 8014dca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dd0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8014dd2:	2105      	movs	r1, #5
 8014dd4:	69b8      	ldr	r0, [r7, #24]
 8014dd6:	f000 fa7d 	bl	80152d4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014dda:	f107 030c 	add.w	r3, r7, #12
 8014dde:	2203      	movs	r2, #3
 8014de0:	69b9      	ldr	r1, [r7, #24]
 8014de2:	6878      	ldr	r0, [r7, #4]
 8014de4:	f000 ff02 	bl	8015bec <dhcp_create_msg>
 8014de8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014dea:	697b      	ldr	r3, [r7, #20]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d04e      	beq.n	8014e8e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014df0:	697b      	ldr	r3, [r7, #20]
 8014df2:	685b      	ldr	r3, [r3, #4]
 8014df4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014df6:	89b8      	ldrh	r0, [r7, #12]
 8014df8:	693b      	ldr	r3, [r7, #16]
 8014dfa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014dfe:	2302      	movs	r3, #2
 8014e00:	2239      	movs	r2, #57	; 0x39
 8014e02:	f000 fa81 	bl	8015308 <dhcp_option>
 8014e06:	4603      	mov	r3, r0
 8014e08:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014e0a:	89b8      	ldrh	r0, [r7, #12]
 8014e0c:	693b      	ldr	r3, [r7, #16]
 8014e0e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014e16:	461a      	mov	r2, r3
 8014e18:	f000 fad0 	bl	80153bc <dhcp_option_short>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014e20:	89b8      	ldrh	r0, [r7, #12]
 8014e22:	693b      	ldr	r3, [r7, #16]
 8014e24:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014e28:	2303      	movs	r3, #3
 8014e2a:	2237      	movs	r2, #55	; 0x37
 8014e2c:	f000 fa6c 	bl	8015308 <dhcp_option>
 8014e30:	4603      	mov	r3, r0
 8014e32:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014e34:	2300      	movs	r3, #0
 8014e36:	77bb      	strb	r3, [r7, #30]
 8014e38:	e00e      	b.n	8014e58 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014e3a:	89b8      	ldrh	r0, [r7, #12]
 8014e3c:	693b      	ldr	r3, [r7, #16]
 8014e3e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014e42:	7fbb      	ldrb	r3, [r7, #30]
 8014e44:	4a2a      	ldr	r2, [pc, #168]	; (8014ef0 <dhcp_renew+0x12c>)
 8014e46:	5cd3      	ldrb	r3, [r2, r3]
 8014e48:	461a      	mov	r2, r3
 8014e4a:	f000 fa91 	bl	8015370 <dhcp_option_byte>
 8014e4e:	4603      	mov	r3, r0
 8014e50:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014e52:	7fbb      	ldrb	r3, [r7, #30]
 8014e54:	3301      	adds	r3, #1
 8014e56:	77bb      	strb	r3, [r7, #30]
 8014e58:	7fbb      	ldrb	r3, [r7, #30]
 8014e5a:	2b02      	cmp	r3, #2
 8014e5c:	d9ed      	bls.n	8014e3a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014e5e:	89b8      	ldrh	r0, [r7, #12]
 8014e60:	693b      	ldr	r3, [r7, #16]
 8014e62:	33f0      	adds	r3, #240	; 0xf0
 8014e64:	697a      	ldr	r2, [r7, #20]
 8014e66:	4619      	mov	r1, r3
 8014e68:	f000 ff96 	bl	8015d98 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014e6c:	4b21      	ldr	r3, [pc, #132]	; (8014ef4 <dhcp_renew+0x130>)
 8014e6e:	6818      	ldr	r0, [r3, #0]
 8014e70:	69bb      	ldr	r3, [r7, #24]
 8014e72:	f103 0218 	add.w	r2, r3, #24
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	9300      	str	r3, [sp, #0]
 8014e7a:	2343      	movs	r3, #67	; 0x43
 8014e7c:	6979      	ldr	r1, [r7, #20]
 8014e7e:	f7fe fe47 	bl	8013b10 <udp_sendto_if>
 8014e82:	4603      	mov	r3, r0
 8014e84:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014e86:	6978      	ldr	r0, [r7, #20]
 8014e88:	f7f7 ffa6 	bl	800cdd8 <pbuf_free>
 8014e8c:	e001      	b.n	8014e92 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014e8e:	23ff      	movs	r3, #255	; 0xff
 8014e90:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014e92:	69bb      	ldr	r3, [r7, #24]
 8014e94:	799b      	ldrb	r3, [r3, #6]
 8014e96:	2bff      	cmp	r3, #255	; 0xff
 8014e98:	d005      	beq.n	8014ea6 <dhcp_renew+0xe2>
    dhcp->tries++;
 8014e9a:	69bb      	ldr	r3, [r7, #24]
 8014e9c:	799b      	ldrb	r3, [r3, #6]
 8014e9e:	3301      	adds	r3, #1
 8014ea0:	b2da      	uxtb	r2, r3
 8014ea2:	69bb      	ldr	r3, [r7, #24]
 8014ea4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8014ea6:	69bb      	ldr	r3, [r7, #24]
 8014ea8:	799b      	ldrb	r3, [r3, #6]
 8014eaa:	2b09      	cmp	r3, #9
 8014eac:	d80a      	bhi.n	8014ec4 <dhcp_renew+0x100>
 8014eae:	69bb      	ldr	r3, [r7, #24]
 8014eb0:	799b      	ldrb	r3, [r3, #6]
 8014eb2:	b29b      	uxth	r3, r3
 8014eb4:	461a      	mov	r2, r3
 8014eb6:	0152      	lsls	r2, r2, #5
 8014eb8:	1ad2      	subs	r2, r2, r3
 8014eba:	0092      	lsls	r2, r2, #2
 8014ebc:	4413      	add	r3, r2
 8014ebe:	011b      	lsls	r3, r3, #4
 8014ec0:	b29b      	uxth	r3, r3
 8014ec2:	e001      	b.n	8014ec8 <dhcp_renew+0x104>
 8014ec4:	f644 6320 	movw	r3, #20000	; 0x4e20
 8014ec8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014eca:	89fb      	ldrh	r3, [r7, #14]
 8014ecc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014ed0:	4a09      	ldr	r2, [pc, #36]	; (8014ef8 <dhcp_renew+0x134>)
 8014ed2:	fb82 1203 	smull	r1, r2, r2, r3
 8014ed6:	1152      	asrs	r2, r2, #5
 8014ed8:	17db      	asrs	r3, r3, #31
 8014eda:	1ad3      	subs	r3, r2, r3
 8014edc:	b29a      	uxth	r2, r3
 8014ede:	69bb      	ldr	r3, [r7, #24]
 8014ee0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014ee2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	3720      	adds	r7, #32
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}
 8014eee:	bf00      	nop
 8014ef0:	20000030 	.word	0x20000030
 8014ef4:	20010e88 	.word	0x20010e88
 8014ef8:	10624dd3 	.word	0x10624dd3

08014efc <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b08a      	sub	sp, #40	; 0x28
 8014f00:	af02      	add	r7, sp, #8
 8014f02:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f08:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8014f0a:	2104      	movs	r1, #4
 8014f0c:	69b8      	ldr	r0, [r7, #24]
 8014f0e:	f000 f9e1 	bl	80152d4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014f12:	f107 030c 	add.w	r3, r7, #12
 8014f16:	2203      	movs	r2, #3
 8014f18:	69b9      	ldr	r1, [r7, #24]
 8014f1a:	6878      	ldr	r0, [r7, #4]
 8014f1c:	f000 fe66 	bl	8015bec <dhcp_create_msg>
 8014f20:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014f22:	697b      	ldr	r3, [r7, #20]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d04c      	beq.n	8014fc2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014f28:	697b      	ldr	r3, [r7, #20]
 8014f2a:	685b      	ldr	r3, [r3, #4]
 8014f2c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014f2e:	89b8      	ldrh	r0, [r7, #12]
 8014f30:	693b      	ldr	r3, [r7, #16]
 8014f32:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014f36:	2302      	movs	r3, #2
 8014f38:	2239      	movs	r2, #57	; 0x39
 8014f3a:	f000 f9e5 	bl	8015308 <dhcp_option>
 8014f3e:	4603      	mov	r3, r0
 8014f40:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014f42:	89b8      	ldrh	r0, [r7, #12]
 8014f44:	693b      	ldr	r3, [r7, #16]
 8014f46:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014f4e:	461a      	mov	r2, r3
 8014f50:	f000 fa34 	bl	80153bc <dhcp_option_short>
 8014f54:	4603      	mov	r3, r0
 8014f56:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014f58:	89b8      	ldrh	r0, [r7, #12]
 8014f5a:	693b      	ldr	r3, [r7, #16]
 8014f5c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014f60:	2303      	movs	r3, #3
 8014f62:	2237      	movs	r2, #55	; 0x37
 8014f64:	f000 f9d0 	bl	8015308 <dhcp_option>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	77bb      	strb	r3, [r7, #30]
 8014f70:	e00e      	b.n	8014f90 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014f72:	89b8      	ldrh	r0, [r7, #12]
 8014f74:	693b      	ldr	r3, [r7, #16]
 8014f76:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014f7a:	7fbb      	ldrb	r3, [r7, #30]
 8014f7c:	4a29      	ldr	r2, [pc, #164]	; (8015024 <dhcp_rebind+0x128>)
 8014f7e:	5cd3      	ldrb	r3, [r2, r3]
 8014f80:	461a      	mov	r2, r3
 8014f82:	f000 f9f5 	bl	8015370 <dhcp_option_byte>
 8014f86:	4603      	mov	r3, r0
 8014f88:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014f8a:	7fbb      	ldrb	r3, [r7, #30]
 8014f8c:	3301      	adds	r3, #1
 8014f8e:	77bb      	strb	r3, [r7, #30]
 8014f90:	7fbb      	ldrb	r3, [r7, #30]
 8014f92:	2b02      	cmp	r3, #2
 8014f94:	d9ed      	bls.n	8014f72 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014f96:	89b8      	ldrh	r0, [r7, #12]
 8014f98:	693b      	ldr	r3, [r7, #16]
 8014f9a:	33f0      	adds	r3, #240	; 0xf0
 8014f9c:	697a      	ldr	r2, [r7, #20]
 8014f9e:	4619      	mov	r1, r3
 8014fa0:	f000 fefa 	bl	8015d98 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014fa4:	4b20      	ldr	r3, [pc, #128]	; (8015028 <dhcp_rebind+0x12c>)
 8014fa6:	6818      	ldr	r0, [r3, #0]
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	9300      	str	r3, [sp, #0]
 8014fac:	2343      	movs	r3, #67	; 0x43
 8014fae:	4a1f      	ldr	r2, [pc, #124]	; (801502c <dhcp_rebind+0x130>)
 8014fb0:	6979      	ldr	r1, [r7, #20]
 8014fb2:	f7fe fdad 	bl	8013b10 <udp_sendto_if>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014fba:	6978      	ldr	r0, [r7, #20]
 8014fbc:	f7f7 ff0c 	bl	800cdd8 <pbuf_free>
 8014fc0:	e001      	b.n	8014fc6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014fc2:	23ff      	movs	r3, #255	; 0xff
 8014fc4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014fc6:	69bb      	ldr	r3, [r7, #24]
 8014fc8:	799b      	ldrb	r3, [r3, #6]
 8014fca:	2bff      	cmp	r3, #255	; 0xff
 8014fcc:	d005      	beq.n	8014fda <dhcp_rebind+0xde>
    dhcp->tries++;
 8014fce:	69bb      	ldr	r3, [r7, #24]
 8014fd0:	799b      	ldrb	r3, [r3, #6]
 8014fd2:	3301      	adds	r3, #1
 8014fd4:	b2da      	uxtb	r2, r3
 8014fd6:	69bb      	ldr	r3, [r7, #24]
 8014fd8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014fda:	69bb      	ldr	r3, [r7, #24]
 8014fdc:	799b      	ldrb	r3, [r3, #6]
 8014fde:	2b09      	cmp	r3, #9
 8014fe0:	d80a      	bhi.n	8014ff8 <dhcp_rebind+0xfc>
 8014fe2:	69bb      	ldr	r3, [r7, #24]
 8014fe4:	799b      	ldrb	r3, [r3, #6]
 8014fe6:	b29b      	uxth	r3, r3
 8014fe8:	461a      	mov	r2, r3
 8014fea:	0152      	lsls	r2, r2, #5
 8014fec:	1ad2      	subs	r2, r2, r3
 8014fee:	0092      	lsls	r2, r2, #2
 8014ff0:	4413      	add	r3, r2
 8014ff2:	00db      	lsls	r3, r3, #3
 8014ff4:	b29b      	uxth	r3, r3
 8014ff6:	e001      	b.n	8014ffc <dhcp_rebind+0x100>
 8014ff8:	f242 7310 	movw	r3, #10000	; 0x2710
 8014ffc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014ffe:	89fb      	ldrh	r3, [r7, #14]
 8015000:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015004:	4a0a      	ldr	r2, [pc, #40]	; (8015030 <dhcp_rebind+0x134>)
 8015006:	fb82 1203 	smull	r1, r2, r2, r3
 801500a:	1152      	asrs	r2, r2, #5
 801500c:	17db      	asrs	r3, r3, #31
 801500e:	1ad3      	subs	r3, r2, r3
 8015010:	b29a      	uxth	r2, r3
 8015012:	69bb      	ldr	r3, [r7, #24]
 8015014:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015016:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801501a:	4618      	mov	r0, r3
 801501c:	3720      	adds	r7, #32
 801501e:	46bd      	mov	sp, r7
 8015020:	bd80      	pop	{r7, pc}
 8015022:	bf00      	nop
 8015024:	20000030 	.word	0x20000030
 8015028:	20010e88 	.word	0x20010e88
 801502c:	080276d8 	.word	0x080276d8
 8015030:	10624dd3 	.word	0x10624dd3

08015034 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8015034:	b5b0      	push	{r4, r5, r7, lr}
 8015036:	b08a      	sub	sp, #40	; 0x28
 8015038:	af02      	add	r7, sp, #8
 801503a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015040:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8015042:	2103      	movs	r1, #3
 8015044:	69b8      	ldr	r0, [r7, #24]
 8015046:	f000 f945 	bl	80152d4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801504a:	f107 030c 	add.w	r3, r7, #12
 801504e:	2203      	movs	r2, #3
 8015050:	69b9      	ldr	r1, [r7, #24]
 8015052:	6878      	ldr	r0, [r7, #4]
 8015054:	f000 fdca 	bl	8015bec <dhcp_create_msg>
 8015058:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801505a:	697b      	ldr	r3, [r7, #20]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d066      	beq.n	801512e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015060:	697b      	ldr	r3, [r7, #20]
 8015062:	685b      	ldr	r3, [r3, #4]
 8015064:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015066:	89b8      	ldrh	r0, [r7, #12]
 8015068:	693b      	ldr	r3, [r7, #16]
 801506a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801506e:	2302      	movs	r3, #2
 8015070:	2239      	movs	r2, #57	; 0x39
 8015072:	f000 f949 	bl	8015308 <dhcp_option>
 8015076:	4603      	mov	r3, r0
 8015078:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801507a:	89b8      	ldrh	r0, [r7, #12]
 801507c:	693b      	ldr	r3, [r7, #16]
 801507e:	33f0      	adds	r3, #240	; 0xf0
 8015080:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015084:	4619      	mov	r1, r3
 8015086:	f000 f999 	bl	80153bc <dhcp_option_short>
 801508a:	4603      	mov	r3, r0
 801508c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801508e:	89b8      	ldrh	r0, [r7, #12]
 8015090:	693b      	ldr	r3, [r7, #16]
 8015092:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015096:	2304      	movs	r3, #4
 8015098:	2232      	movs	r2, #50	; 0x32
 801509a:	f000 f935 	bl	8015308 <dhcp_option>
 801509e:	4603      	mov	r3, r0
 80150a0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80150a2:	89bc      	ldrh	r4, [r7, #12]
 80150a4:	693b      	ldr	r3, [r7, #16]
 80150a6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80150aa:	69bb      	ldr	r3, [r7, #24]
 80150ac:	69db      	ldr	r3, [r3, #28]
 80150ae:	4618      	mov	r0, r3
 80150b0:	f7f6 fa73 	bl	800b59a <lwip_htonl>
 80150b4:	4603      	mov	r3, r0
 80150b6:	461a      	mov	r2, r3
 80150b8:	4629      	mov	r1, r5
 80150ba:	4620      	mov	r0, r4
 80150bc:	f000 f9b0 	bl	8015420 <dhcp_option_long>
 80150c0:	4603      	mov	r3, r0
 80150c2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80150c4:	89b8      	ldrh	r0, [r7, #12]
 80150c6:	693b      	ldr	r3, [r7, #16]
 80150c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80150cc:	2303      	movs	r3, #3
 80150ce:	2237      	movs	r2, #55	; 0x37
 80150d0:	f000 f91a 	bl	8015308 <dhcp_option>
 80150d4:	4603      	mov	r3, r0
 80150d6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80150d8:	2300      	movs	r3, #0
 80150da:	77bb      	strb	r3, [r7, #30]
 80150dc:	e00e      	b.n	80150fc <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80150de:	89b8      	ldrh	r0, [r7, #12]
 80150e0:	693b      	ldr	r3, [r7, #16]
 80150e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80150e6:	7fbb      	ldrb	r3, [r7, #30]
 80150e8:	4a29      	ldr	r2, [pc, #164]	; (8015190 <dhcp_reboot+0x15c>)
 80150ea:	5cd3      	ldrb	r3, [r2, r3]
 80150ec:	461a      	mov	r2, r3
 80150ee:	f000 f93f 	bl	8015370 <dhcp_option_byte>
 80150f2:	4603      	mov	r3, r0
 80150f4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80150f6:	7fbb      	ldrb	r3, [r7, #30]
 80150f8:	3301      	adds	r3, #1
 80150fa:	77bb      	strb	r3, [r7, #30]
 80150fc:	7fbb      	ldrb	r3, [r7, #30]
 80150fe:	2b02      	cmp	r3, #2
 8015100:	d9ed      	bls.n	80150de <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015102:	89b8      	ldrh	r0, [r7, #12]
 8015104:	693b      	ldr	r3, [r7, #16]
 8015106:	33f0      	adds	r3, #240	; 0xf0
 8015108:	697a      	ldr	r2, [r7, #20]
 801510a:	4619      	mov	r1, r3
 801510c:	f000 fe44 	bl	8015d98 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015110:	4b20      	ldr	r3, [pc, #128]	; (8015194 <dhcp_reboot+0x160>)
 8015112:	6818      	ldr	r0, [r3, #0]
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	9300      	str	r3, [sp, #0]
 8015118:	2343      	movs	r3, #67	; 0x43
 801511a:	4a1f      	ldr	r2, [pc, #124]	; (8015198 <dhcp_reboot+0x164>)
 801511c:	6979      	ldr	r1, [r7, #20]
 801511e:	f7fe fcf7 	bl	8013b10 <udp_sendto_if>
 8015122:	4603      	mov	r3, r0
 8015124:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015126:	6978      	ldr	r0, [r7, #20]
 8015128:	f7f7 fe56 	bl	800cdd8 <pbuf_free>
 801512c:	e001      	b.n	8015132 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801512e:	23ff      	movs	r3, #255	; 0xff
 8015130:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015132:	69bb      	ldr	r3, [r7, #24]
 8015134:	799b      	ldrb	r3, [r3, #6]
 8015136:	2bff      	cmp	r3, #255	; 0xff
 8015138:	d005      	beq.n	8015146 <dhcp_reboot+0x112>
    dhcp->tries++;
 801513a:	69bb      	ldr	r3, [r7, #24]
 801513c:	799b      	ldrb	r3, [r3, #6]
 801513e:	3301      	adds	r3, #1
 8015140:	b2da      	uxtb	r2, r3
 8015142:	69bb      	ldr	r3, [r7, #24]
 8015144:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015146:	69bb      	ldr	r3, [r7, #24]
 8015148:	799b      	ldrb	r3, [r3, #6]
 801514a:	2b09      	cmp	r3, #9
 801514c:	d80a      	bhi.n	8015164 <dhcp_reboot+0x130>
 801514e:	69bb      	ldr	r3, [r7, #24]
 8015150:	799b      	ldrb	r3, [r3, #6]
 8015152:	b29b      	uxth	r3, r3
 8015154:	461a      	mov	r2, r3
 8015156:	0152      	lsls	r2, r2, #5
 8015158:	1ad2      	subs	r2, r2, r3
 801515a:	0092      	lsls	r2, r2, #2
 801515c:	4413      	add	r3, r2
 801515e:	00db      	lsls	r3, r3, #3
 8015160:	b29b      	uxth	r3, r3
 8015162:	e001      	b.n	8015168 <dhcp_reboot+0x134>
 8015164:	f242 7310 	movw	r3, #10000	; 0x2710
 8015168:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801516a:	89fb      	ldrh	r3, [r7, #14]
 801516c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015170:	4a0a      	ldr	r2, [pc, #40]	; (801519c <dhcp_reboot+0x168>)
 8015172:	fb82 1203 	smull	r1, r2, r2, r3
 8015176:	1152      	asrs	r2, r2, #5
 8015178:	17db      	asrs	r3, r3, #31
 801517a:	1ad3      	subs	r3, r2, r3
 801517c:	b29a      	uxth	r2, r3
 801517e:	69bb      	ldr	r3, [r7, #24]
 8015180:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015182:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015186:	4618      	mov	r0, r3
 8015188:	3720      	adds	r7, #32
 801518a:	46bd      	mov	sp, r7
 801518c:	bdb0      	pop	{r4, r5, r7, pc}
 801518e:	bf00      	nop
 8015190:	20000030 	.word	0x20000030
 8015194:	20010e88 	.word	0x20010e88
 8015198:	080276d8 	.word	0x080276d8
 801519c:	10624dd3 	.word	0x10624dd3

080151a0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80151a0:	b5b0      	push	{r4, r5, r7, lr}
 80151a2:	b08a      	sub	sp, #40	; 0x28
 80151a4:	af02      	add	r7, sp, #8
 80151a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151ac:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80151ae:	69fb      	ldr	r3, [r7, #28]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	f000 8084 	beq.w	80152be <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80151b6:	69fb      	ldr	r3, [r7, #28]
 80151b8:	795b      	ldrb	r3, [r3, #5]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	f000 8081 	beq.w	80152c2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80151c0:	69fb      	ldr	r3, [r7, #28]
 80151c2:	699b      	ldr	r3, [r3, #24]
 80151c4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80151c6:	69fb      	ldr	r3, [r7, #28]
 80151c8:	2200      	movs	r2, #0
 80151ca:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80151cc:	69fb      	ldr	r3, [r7, #28]
 80151ce:	2200      	movs	r2, #0
 80151d0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80151d2:	69fb      	ldr	r3, [r7, #28]
 80151d4:	2200      	movs	r2, #0
 80151d6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80151d8:	69fb      	ldr	r3, [r7, #28]
 80151da:	2200      	movs	r2, #0
 80151dc:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80151de:	69fb      	ldr	r3, [r7, #28]
 80151e0:	2200      	movs	r2, #0
 80151e2:	631a      	str	r2, [r3, #48]	; 0x30
 80151e4:	69fb      	ldr	r3, [r7, #28]
 80151e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80151e8:	69fb      	ldr	r3, [r7, #28]
 80151ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80151ec:	69fb      	ldr	r3, [r7, #28]
 80151ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151f0:	69fb      	ldr	r3, [r7, #28]
 80151f2:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80151f4:	69fb      	ldr	r3, [r7, #28]
 80151f6:	2200      	movs	r2, #0
 80151f8:	829a      	strh	r2, [r3, #20]
 80151fa:	69fb      	ldr	r3, [r7, #28]
 80151fc:	8a9a      	ldrh	r2, [r3, #20]
 80151fe:	69fb      	ldr	r3, [r7, #28]
 8015200:	825a      	strh	r2, [r3, #18]
 8015202:	69fb      	ldr	r3, [r7, #28]
 8015204:	8a5a      	ldrh	r2, [r3, #18]
 8015206:	69fb      	ldr	r3, [r7, #28]
 8015208:	821a      	strh	r2, [r3, #16]
 801520a:	69fb      	ldr	r3, [r7, #28]
 801520c:	8a1a      	ldrh	r2, [r3, #16]
 801520e:	69fb      	ldr	r3, [r7, #28]
 8015210:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8015212:	6878      	ldr	r0, [r7, #4]
 8015214:	f000 fdee 	bl	8015df4 <dhcp_supplied_address>
 8015218:	4603      	mov	r3, r0
 801521a:	2b00      	cmp	r3, #0
 801521c:	d03b      	beq.n	8015296 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801521e:	f107 030e 	add.w	r3, r7, #14
 8015222:	2207      	movs	r2, #7
 8015224:	69f9      	ldr	r1, [r7, #28]
 8015226:	6878      	ldr	r0, [r7, #4]
 8015228:	f000 fce0 	bl	8015bec <dhcp_create_msg>
 801522c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801522e:	69bb      	ldr	r3, [r7, #24]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d030      	beq.n	8015296 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015234:	69bb      	ldr	r3, [r7, #24]
 8015236:	685b      	ldr	r3, [r3, #4]
 8015238:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801523a:	89f8      	ldrh	r0, [r7, #14]
 801523c:	697b      	ldr	r3, [r7, #20]
 801523e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015242:	2304      	movs	r3, #4
 8015244:	2236      	movs	r2, #54	; 0x36
 8015246:	f000 f85f 	bl	8015308 <dhcp_option>
 801524a:	4603      	mov	r3, r0
 801524c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801524e:	89fc      	ldrh	r4, [r7, #14]
 8015250:	697b      	ldr	r3, [r7, #20]
 8015252:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015256:	693b      	ldr	r3, [r7, #16]
 8015258:	4618      	mov	r0, r3
 801525a:	f7f6 f99e 	bl	800b59a <lwip_htonl>
 801525e:	4603      	mov	r3, r0
 8015260:	461a      	mov	r2, r3
 8015262:	4629      	mov	r1, r5
 8015264:	4620      	mov	r0, r4
 8015266:	f000 f8db 	bl	8015420 <dhcp_option_long>
 801526a:	4603      	mov	r3, r0
 801526c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801526e:	89f8      	ldrh	r0, [r7, #14]
 8015270:	697b      	ldr	r3, [r7, #20]
 8015272:	33f0      	adds	r3, #240	; 0xf0
 8015274:	69ba      	ldr	r2, [r7, #24]
 8015276:	4619      	mov	r1, r3
 8015278:	f000 fd8e 	bl	8015d98 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801527c:	4b13      	ldr	r3, [pc, #76]	; (80152cc <dhcp_release_and_stop+0x12c>)
 801527e:	6818      	ldr	r0, [r3, #0]
 8015280:	f107 0210 	add.w	r2, r7, #16
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	9300      	str	r3, [sp, #0]
 8015288:	2343      	movs	r3, #67	; 0x43
 801528a:	69b9      	ldr	r1, [r7, #24]
 801528c:	f7fe fc40 	bl	8013b10 <udp_sendto_if>
      pbuf_free(p_out);
 8015290:	69b8      	ldr	r0, [r7, #24]
 8015292:	f7f7 fda1 	bl	800cdd8 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015296:	4b0e      	ldr	r3, [pc, #56]	; (80152d0 <dhcp_release_and_stop+0x130>)
 8015298:	4a0d      	ldr	r2, [pc, #52]	; (80152d0 <dhcp_release_and_stop+0x130>)
 801529a:	490d      	ldr	r1, [pc, #52]	; (80152d0 <dhcp_release_and_stop+0x130>)
 801529c:	6878      	ldr	r0, [r7, #4]
 801529e:	f7f7 f88d 	bl	800c3bc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80152a2:	2100      	movs	r1, #0
 80152a4:	69f8      	ldr	r0, [r7, #28]
 80152a6:	f000 f815 	bl	80152d4 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80152aa:	69fb      	ldr	r3, [r7, #28]
 80152ac:	791b      	ldrb	r3, [r3, #4]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d008      	beq.n	80152c4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80152b2:	f7fe ff85 	bl	80141c0 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80152b6:	69fb      	ldr	r3, [r7, #28]
 80152b8:	2200      	movs	r2, #0
 80152ba:	711a      	strb	r2, [r3, #4]
 80152bc:	e002      	b.n	80152c4 <dhcp_release_and_stop+0x124>
    return;
 80152be:	bf00      	nop
 80152c0:	e000      	b.n	80152c4 <dhcp_release_and_stop+0x124>
    return;
 80152c2:	bf00      	nop
  }
}
 80152c4:	3720      	adds	r7, #32
 80152c6:	46bd      	mov	sp, r7
 80152c8:	bdb0      	pop	{r4, r5, r7, pc}
 80152ca:	bf00      	nop
 80152cc:	20010e88 	.word	0x20010e88
 80152d0:	080276d4 	.word	0x080276d4

080152d4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80152d4:	b480      	push	{r7}
 80152d6:	b083      	sub	sp, #12
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
 80152dc:	460b      	mov	r3, r1
 80152de:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	795b      	ldrb	r3, [r3, #5]
 80152e4:	78fa      	ldrb	r2, [r7, #3]
 80152e6:	429a      	cmp	r2, r3
 80152e8:	d008      	beq.n	80152fc <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	78fa      	ldrb	r2, [r7, #3]
 80152ee:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	2200      	movs	r2, #0
 80152f4:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	2200      	movs	r2, #0
 80152fa:	811a      	strh	r2, [r3, #8]
  }
}
 80152fc:	bf00      	nop
 80152fe:	370c      	adds	r7, #12
 8015300:	46bd      	mov	sp, r7
 8015302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015306:	4770      	bx	lr

08015308 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b082      	sub	sp, #8
 801530c:	af00      	add	r7, sp, #0
 801530e:	6039      	str	r1, [r7, #0]
 8015310:	4611      	mov	r1, r2
 8015312:	461a      	mov	r2, r3
 8015314:	4603      	mov	r3, r0
 8015316:	80fb      	strh	r3, [r7, #6]
 8015318:	460b      	mov	r3, r1
 801531a:	717b      	strb	r3, [r7, #5]
 801531c:	4613      	mov	r3, r2
 801531e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8015320:	88fa      	ldrh	r2, [r7, #6]
 8015322:	793b      	ldrb	r3, [r7, #4]
 8015324:	4413      	add	r3, r2
 8015326:	3302      	adds	r3, #2
 8015328:	2b44      	cmp	r3, #68	; 0x44
 801532a:	d906      	bls.n	801533a <dhcp_option+0x32>
 801532c:	4b0d      	ldr	r3, [pc, #52]	; (8015364 <dhcp_option+0x5c>)
 801532e:	f240 529a 	movw	r2, #1434	; 0x59a
 8015332:	490d      	ldr	r1, [pc, #52]	; (8015368 <dhcp_option+0x60>)
 8015334:	480d      	ldr	r0, [pc, #52]	; (801536c <dhcp_option+0x64>)
 8015336:	f003 fb3b 	bl	80189b0 <iprintf>
  options[options_out_len++] = option_type;
 801533a:	88fb      	ldrh	r3, [r7, #6]
 801533c:	1c5a      	adds	r2, r3, #1
 801533e:	80fa      	strh	r2, [r7, #6]
 8015340:	461a      	mov	r2, r3
 8015342:	683b      	ldr	r3, [r7, #0]
 8015344:	4413      	add	r3, r2
 8015346:	797a      	ldrb	r2, [r7, #5]
 8015348:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801534a:	88fb      	ldrh	r3, [r7, #6]
 801534c:	1c5a      	adds	r2, r3, #1
 801534e:	80fa      	strh	r2, [r7, #6]
 8015350:	461a      	mov	r2, r3
 8015352:	683b      	ldr	r3, [r7, #0]
 8015354:	4413      	add	r3, r2
 8015356:	793a      	ldrb	r2, [r7, #4]
 8015358:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801535a:	88fb      	ldrh	r3, [r7, #6]
}
 801535c:	4618      	mov	r0, r3
 801535e:	3708      	adds	r7, #8
 8015360:	46bd      	mov	sp, r7
 8015362:	bd80      	pop	{r7, pc}
 8015364:	0801c9e8 	.word	0x0801c9e8
 8015368:	0801cb7c 	.word	0x0801cb7c
 801536c:	0801ca48 	.word	0x0801ca48

08015370 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b082      	sub	sp, #8
 8015374:	af00      	add	r7, sp, #0
 8015376:	4603      	mov	r3, r0
 8015378:	6039      	str	r1, [r7, #0]
 801537a:	80fb      	strh	r3, [r7, #6]
 801537c:	4613      	mov	r3, r2
 801537e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015380:	88fb      	ldrh	r3, [r7, #6]
 8015382:	2b43      	cmp	r3, #67	; 0x43
 8015384:	d906      	bls.n	8015394 <dhcp_option_byte+0x24>
 8015386:	4b0a      	ldr	r3, [pc, #40]	; (80153b0 <dhcp_option_byte+0x40>)
 8015388:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801538c:	4909      	ldr	r1, [pc, #36]	; (80153b4 <dhcp_option_byte+0x44>)
 801538e:	480a      	ldr	r0, [pc, #40]	; (80153b8 <dhcp_option_byte+0x48>)
 8015390:	f003 fb0e 	bl	80189b0 <iprintf>
  options[options_out_len++] = value;
 8015394:	88fb      	ldrh	r3, [r7, #6]
 8015396:	1c5a      	adds	r2, r3, #1
 8015398:	80fa      	strh	r2, [r7, #6]
 801539a:	461a      	mov	r2, r3
 801539c:	683b      	ldr	r3, [r7, #0]
 801539e:	4413      	add	r3, r2
 80153a0:	797a      	ldrb	r2, [r7, #5]
 80153a2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80153a4:	88fb      	ldrh	r3, [r7, #6]
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	3708      	adds	r7, #8
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd80      	pop	{r7, pc}
 80153ae:	bf00      	nop
 80153b0:	0801c9e8 	.word	0x0801c9e8
 80153b4:	0801cbc0 	.word	0x0801cbc0
 80153b8:	0801ca48 	.word	0x0801ca48

080153bc <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b082      	sub	sp, #8
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	4603      	mov	r3, r0
 80153c4:	6039      	str	r1, [r7, #0]
 80153c6:	80fb      	strh	r3, [r7, #6]
 80153c8:	4613      	mov	r3, r2
 80153ca:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80153cc:	88fb      	ldrh	r3, [r7, #6]
 80153ce:	3302      	adds	r3, #2
 80153d0:	2b44      	cmp	r3, #68	; 0x44
 80153d2:	d906      	bls.n	80153e2 <dhcp_option_short+0x26>
 80153d4:	4b0f      	ldr	r3, [pc, #60]	; (8015414 <dhcp_option_short+0x58>)
 80153d6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80153da:	490f      	ldr	r1, [pc, #60]	; (8015418 <dhcp_option_short+0x5c>)
 80153dc:	480f      	ldr	r0, [pc, #60]	; (801541c <dhcp_option_short+0x60>)
 80153de:	f003 fae7 	bl	80189b0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80153e2:	88bb      	ldrh	r3, [r7, #4]
 80153e4:	0a1b      	lsrs	r3, r3, #8
 80153e6:	b29a      	uxth	r2, r3
 80153e8:	88fb      	ldrh	r3, [r7, #6]
 80153ea:	1c59      	adds	r1, r3, #1
 80153ec:	80f9      	strh	r1, [r7, #6]
 80153ee:	4619      	mov	r1, r3
 80153f0:	683b      	ldr	r3, [r7, #0]
 80153f2:	440b      	add	r3, r1
 80153f4:	b2d2      	uxtb	r2, r2
 80153f6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80153f8:	88fb      	ldrh	r3, [r7, #6]
 80153fa:	1c5a      	adds	r2, r3, #1
 80153fc:	80fa      	strh	r2, [r7, #6]
 80153fe:	461a      	mov	r2, r3
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	4413      	add	r3, r2
 8015404:	88ba      	ldrh	r2, [r7, #4]
 8015406:	b2d2      	uxtb	r2, r2
 8015408:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801540a:	88fb      	ldrh	r3, [r7, #6]
}
 801540c:	4618      	mov	r0, r3
 801540e:	3708      	adds	r7, #8
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}
 8015414:	0801c9e8 	.word	0x0801c9e8
 8015418:	0801cbf8 	.word	0x0801cbf8
 801541c:	0801ca48 	.word	0x0801ca48

08015420 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b084      	sub	sp, #16
 8015424:	af00      	add	r7, sp, #0
 8015426:	4603      	mov	r3, r0
 8015428:	60b9      	str	r1, [r7, #8]
 801542a:	607a      	str	r2, [r7, #4]
 801542c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801542e:	89fb      	ldrh	r3, [r7, #14]
 8015430:	3304      	adds	r3, #4
 8015432:	2b44      	cmp	r3, #68	; 0x44
 8015434:	d906      	bls.n	8015444 <dhcp_option_long+0x24>
 8015436:	4b19      	ldr	r3, [pc, #100]	; (801549c <dhcp_option_long+0x7c>)
 8015438:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801543c:	4918      	ldr	r1, [pc, #96]	; (80154a0 <dhcp_option_long+0x80>)
 801543e:	4819      	ldr	r0, [pc, #100]	; (80154a4 <dhcp_option_long+0x84>)
 8015440:	f003 fab6 	bl	80189b0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	0e1a      	lsrs	r2, r3, #24
 8015448:	89fb      	ldrh	r3, [r7, #14]
 801544a:	1c59      	adds	r1, r3, #1
 801544c:	81f9      	strh	r1, [r7, #14]
 801544e:	4619      	mov	r1, r3
 8015450:	68bb      	ldr	r3, [r7, #8]
 8015452:	440b      	add	r3, r1
 8015454:	b2d2      	uxtb	r2, r2
 8015456:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	0c1a      	lsrs	r2, r3, #16
 801545c:	89fb      	ldrh	r3, [r7, #14]
 801545e:	1c59      	adds	r1, r3, #1
 8015460:	81f9      	strh	r1, [r7, #14]
 8015462:	4619      	mov	r1, r3
 8015464:	68bb      	ldr	r3, [r7, #8]
 8015466:	440b      	add	r3, r1
 8015468:	b2d2      	uxtb	r2, r2
 801546a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	0a1a      	lsrs	r2, r3, #8
 8015470:	89fb      	ldrh	r3, [r7, #14]
 8015472:	1c59      	adds	r1, r3, #1
 8015474:	81f9      	strh	r1, [r7, #14]
 8015476:	4619      	mov	r1, r3
 8015478:	68bb      	ldr	r3, [r7, #8]
 801547a:	440b      	add	r3, r1
 801547c:	b2d2      	uxtb	r2, r2
 801547e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015480:	89fb      	ldrh	r3, [r7, #14]
 8015482:	1c5a      	adds	r2, r3, #1
 8015484:	81fa      	strh	r2, [r7, #14]
 8015486:	461a      	mov	r2, r3
 8015488:	68bb      	ldr	r3, [r7, #8]
 801548a:	4413      	add	r3, r2
 801548c:	687a      	ldr	r2, [r7, #4]
 801548e:	b2d2      	uxtb	r2, r2
 8015490:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015492:	89fb      	ldrh	r3, [r7, #14]
}
 8015494:	4618      	mov	r0, r3
 8015496:	3710      	adds	r7, #16
 8015498:	46bd      	mov	sp, r7
 801549a:	bd80      	pop	{r7, pc}
 801549c:	0801c9e8 	.word	0x0801c9e8
 80154a0:	0801cc34 	.word	0x0801cc34
 80154a4:	0801ca48 	.word	0x0801ca48

080154a8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b090      	sub	sp, #64	; 0x40
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]
 80154b0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80154b2:	2300      	movs	r3, #0
 80154b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80154b6:	2300      	movs	r3, #0
 80154b8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80154ba:	2208      	movs	r2, #8
 80154bc:	2100      	movs	r1, #0
 80154be:	48b5      	ldr	r0, [pc, #724]	; (8015794 <dhcp_parse_reply+0x2ec>)
 80154c0:	f003 fadb 	bl	8018a7a <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	895b      	ldrh	r3, [r3, #10]
 80154c8:	2b2b      	cmp	r3, #43	; 0x2b
 80154ca:	d802      	bhi.n	80154d2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80154cc:	f06f 0301 	mvn.w	r3, #1
 80154d0:	e2a7      	b.n	8015a22 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	685b      	ldr	r3, [r3, #4]
 80154d6:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80154d8:	23f0      	movs	r3, #240	; 0xf0
 80154da:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	891b      	ldrh	r3, [r3, #8]
 80154e0:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80154e6:	e00c      	b.n	8015502 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80154e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154ea:	895b      	ldrh	r3, [r3, #10]
 80154ec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80154ee:	1ad3      	subs	r3, r2, r3
 80154f0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80154f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154f4:	895b      	ldrh	r3, [r3, #10]
 80154f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80154f8:	1ad3      	subs	r3, r2, r3
 80154fa:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80154fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015504:	2b00      	cmp	r3, #0
 8015506:	d004      	beq.n	8015512 <dhcp_parse_reply+0x6a>
 8015508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801550a:	895b      	ldrh	r3, [r3, #10]
 801550c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801550e:	429a      	cmp	r2, r3
 8015510:	d2ea      	bcs.n	80154e8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8015512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015514:	2b00      	cmp	r3, #0
 8015516:	d102      	bne.n	801551e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8015518:	f06f 0301 	mvn.w	r3, #1
 801551c:	e281      	b.n	8015a22 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801551e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015520:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8015522:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015524:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8015526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015528:	685b      	ldr	r3, [r3, #4]
 801552a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801552c:	e239      	b.n	80159a2 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801552e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015530:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015532:	4413      	add	r3, r2
 8015534:	781b      	ldrb	r3, [r3, #0]
 8015536:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8015538:	2300      	movs	r3, #0
 801553a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801553e:	f04f 33ff 	mov.w	r3, #4294967295
 8015542:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8015544:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015546:	3302      	adds	r3, #2
 8015548:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801554a:	8bfa      	ldrh	r2, [r7, #30]
 801554c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801554e:	429a      	cmp	r2, r3
 8015550:	d202      	bcs.n	8015558 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8015552:	f06f 0301 	mvn.w	r3, #1
 8015556:	e264      	b.n	8015a22 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015558:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801555a:	3301      	adds	r3, #1
 801555c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801555e:	8952      	ldrh	r2, [r2, #10]
 8015560:	4293      	cmp	r3, r2
 8015562:	da07      	bge.n	8015574 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015564:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015566:	3301      	adds	r3, #1
 8015568:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801556a:	4413      	add	r3, r2
 801556c:	781b      	ldrb	r3, [r3, #0]
 801556e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015572:	e00b      	b.n	801558c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d004      	beq.n	8015586 <dhcp_parse_reply+0xde>
 801557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	685b      	ldr	r3, [r3, #4]
 8015582:	781b      	ldrb	r3, [r3, #0]
 8015584:	e000      	b.n	8015588 <dhcp_parse_reply+0xe0>
 8015586:	2300      	movs	r3, #0
 8015588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801558c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015590:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8015594:	7dfb      	ldrb	r3, [r7, #23]
 8015596:	2b3b      	cmp	r3, #59	; 0x3b
 8015598:	f200 812c 	bhi.w	80157f4 <dhcp_parse_reply+0x34c>
 801559c:	a201      	add	r2, pc, #4	; (adr r2, 80155a4 <dhcp_parse_reply+0xfc>)
 801559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155a2:	bf00      	nop
 80155a4:	08015695 	.word	0x08015695
 80155a8:	080156a5 	.word	0x080156a5
 80155ac:	080157f5 	.word	0x080157f5
 80155b0:	080156c7 	.word	0x080156c7
 80155b4:	080157f5 	.word	0x080157f5
 80155b8:	080157f5 	.word	0x080157f5
 80155bc:	080157f5 	.word	0x080157f5
 80155c0:	080157f5 	.word	0x080157f5
 80155c4:	080157f5 	.word	0x080157f5
 80155c8:	080157f5 	.word	0x080157f5
 80155cc:	080157f5 	.word	0x080157f5
 80155d0:	080157f5 	.word	0x080157f5
 80155d4:	080157f5 	.word	0x080157f5
 80155d8:	080157f5 	.word	0x080157f5
 80155dc:	080157f5 	.word	0x080157f5
 80155e0:	080157f5 	.word	0x080157f5
 80155e4:	080157f5 	.word	0x080157f5
 80155e8:	080157f5 	.word	0x080157f5
 80155ec:	080157f5 	.word	0x080157f5
 80155f0:	080157f5 	.word	0x080157f5
 80155f4:	080157f5 	.word	0x080157f5
 80155f8:	080157f5 	.word	0x080157f5
 80155fc:	080157f5 	.word	0x080157f5
 8015600:	080157f5 	.word	0x080157f5
 8015604:	080157f5 	.word	0x080157f5
 8015608:	080157f5 	.word	0x080157f5
 801560c:	080157f5 	.word	0x080157f5
 8015610:	080157f5 	.word	0x080157f5
 8015614:	080157f5 	.word	0x080157f5
 8015618:	080157f5 	.word	0x080157f5
 801561c:	080157f5 	.word	0x080157f5
 8015620:	080157f5 	.word	0x080157f5
 8015624:	080157f5 	.word	0x080157f5
 8015628:	080157f5 	.word	0x080157f5
 801562c:	080157f5 	.word	0x080157f5
 8015630:	080157f5 	.word	0x080157f5
 8015634:	080157f5 	.word	0x080157f5
 8015638:	080157f5 	.word	0x080157f5
 801563c:	080157f5 	.word	0x080157f5
 8015640:	080157f5 	.word	0x080157f5
 8015644:	080157f5 	.word	0x080157f5
 8015648:	080157f5 	.word	0x080157f5
 801564c:	080157f5 	.word	0x080157f5
 8015650:	080157f5 	.word	0x080157f5
 8015654:	080157f5 	.word	0x080157f5
 8015658:	080157f5 	.word	0x080157f5
 801565c:	080157f5 	.word	0x080157f5
 8015660:	080157f5 	.word	0x080157f5
 8015664:	080157f5 	.word	0x080157f5
 8015668:	080157f5 	.word	0x080157f5
 801566c:	080157f5 	.word	0x080157f5
 8015670:	080156f3 	.word	0x080156f3
 8015674:	08015715 	.word	0x08015715
 8015678:	08015751 	.word	0x08015751
 801567c:	08015773 	.word	0x08015773
 8015680:	080157f5 	.word	0x080157f5
 8015684:	080157f5 	.word	0x080157f5
 8015688:	080157f5 	.word	0x080157f5
 801568c:	080157b1 	.word	0x080157b1
 8015690:	080157d3 	.word	0x080157d3
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015694:	2300      	movs	r3, #0
 8015696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801569a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801569e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80156a2:	e0ab      	b.n	80157fc <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80156a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156a8:	2b04      	cmp	r3, #4
 80156aa:	d009      	beq.n	80156c0 <dhcp_parse_reply+0x218>
 80156ac:	4b3a      	ldr	r3, [pc, #232]	; (8015798 <dhcp_parse_reply+0x2f0>)
 80156ae:	f240 622e 	movw	r2, #1582	; 0x62e
 80156b2:	493a      	ldr	r1, [pc, #232]	; (801579c <dhcp_parse_reply+0x2f4>)
 80156b4:	483a      	ldr	r0, [pc, #232]	; (80157a0 <dhcp_parse_reply+0x2f8>)
 80156b6:	f003 f97b 	bl	80189b0 <iprintf>
 80156ba:	f06f 0305 	mvn.w	r3, #5
 80156be:	e1b0      	b.n	8015a22 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80156c0:	2306      	movs	r3, #6
 80156c2:	623b      	str	r3, [r7, #32]
        break;
 80156c4:	e09a      	b.n	80157fc <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80156c6:	2304      	movs	r3, #4
 80156c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80156cc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80156d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156d4:	429a      	cmp	r2, r3
 80156d6:	d209      	bcs.n	80156ec <dhcp_parse_reply+0x244>
 80156d8:	4b2f      	ldr	r3, [pc, #188]	; (8015798 <dhcp_parse_reply+0x2f0>)
 80156da:	f240 6233 	movw	r2, #1587	; 0x633
 80156de:	4931      	ldr	r1, [pc, #196]	; (80157a4 <dhcp_parse_reply+0x2fc>)
 80156e0:	482f      	ldr	r0, [pc, #188]	; (80157a0 <dhcp_parse_reply+0x2f8>)
 80156e2:	f003 f965 	bl	80189b0 <iprintf>
 80156e6:	f06f 0305 	mvn.w	r3, #5
 80156ea:	e19a      	b.n	8015a22 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80156ec:	2307      	movs	r3, #7
 80156ee:	623b      	str	r3, [r7, #32]
        break;
 80156f0:	e084      	b.n	80157fc <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80156f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156f6:	2b04      	cmp	r3, #4
 80156f8:	d009      	beq.n	801570e <dhcp_parse_reply+0x266>
 80156fa:	4b27      	ldr	r3, [pc, #156]	; (8015798 <dhcp_parse_reply+0x2f0>)
 80156fc:	f240 6241 	movw	r2, #1601	; 0x641
 8015700:	4926      	ldr	r1, [pc, #152]	; (801579c <dhcp_parse_reply+0x2f4>)
 8015702:	4827      	ldr	r0, [pc, #156]	; (80157a0 <dhcp_parse_reply+0x2f8>)
 8015704:	f003 f954 	bl	80189b0 <iprintf>
 8015708:	f06f 0305 	mvn.w	r3, #5
 801570c:	e189      	b.n	8015a22 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801570e:	2303      	movs	r3, #3
 8015710:	623b      	str	r3, [r7, #32]
        break;
 8015712:	e073      	b.n	80157fc <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015718:	2b01      	cmp	r3, #1
 801571a:	d009      	beq.n	8015730 <dhcp_parse_reply+0x288>
 801571c:	4b1e      	ldr	r3, [pc, #120]	; (8015798 <dhcp_parse_reply+0x2f0>)
 801571e:	f240 624f 	movw	r2, #1615	; 0x64f
 8015722:	4921      	ldr	r1, [pc, #132]	; (80157a8 <dhcp_parse_reply+0x300>)
 8015724:	481e      	ldr	r0, [pc, #120]	; (80157a0 <dhcp_parse_reply+0x2f8>)
 8015726:	f003 f943 	bl	80189b0 <iprintf>
 801572a:	f06f 0305 	mvn.w	r3, #5
 801572e:	e178      	b.n	8015a22 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8015730:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015732:	2bf0      	cmp	r3, #240	; 0xf0
 8015734:	d009      	beq.n	801574a <dhcp_parse_reply+0x2a2>
 8015736:	4b18      	ldr	r3, [pc, #96]	; (8015798 <dhcp_parse_reply+0x2f0>)
 8015738:	f240 6251 	movw	r2, #1617	; 0x651
 801573c:	491b      	ldr	r1, [pc, #108]	; (80157ac <dhcp_parse_reply+0x304>)
 801573e:	4818      	ldr	r0, [pc, #96]	; (80157a0 <dhcp_parse_reply+0x2f8>)
 8015740:	f003 f936 	bl	80189b0 <iprintf>
 8015744:	f06f 0305 	mvn.w	r3, #5
 8015748:	e16b      	b.n	8015a22 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801574a:	2300      	movs	r3, #0
 801574c:	623b      	str	r3, [r7, #32]
        break;
 801574e:	e055      	b.n	80157fc <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015754:	2b01      	cmp	r3, #1
 8015756:	d009      	beq.n	801576c <dhcp_parse_reply+0x2c4>
 8015758:	4b0f      	ldr	r3, [pc, #60]	; (8015798 <dhcp_parse_reply+0x2f0>)
 801575a:	f240 6255 	movw	r2, #1621	; 0x655
 801575e:	4912      	ldr	r1, [pc, #72]	; (80157a8 <dhcp_parse_reply+0x300>)
 8015760:	480f      	ldr	r0, [pc, #60]	; (80157a0 <dhcp_parse_reply+0x2f8>)
 8015762:	f003 f925 	bl	80189b0 <iprintf>
 8015766:	f06f 0305 	mvn.w	r3, #5
 801576a:	e15a      	b.n	8015a22 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801576c:	2301      	movs	r3, #1
 801576e:	623b      	str	r3, [r7, #32]
        break;
 8015770:	e044      	b.n	80157fc <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015776:	2b04      	cmp	r3, #4
 8015778:	d009      	beq.n	801578e <dhcp_parse_reply+0x2e6>
 801577a:	4b07      	ldr	r3, [pc, #28]	; (8015798 <dhcp_parse_reply+0x2f0>)
 801577c:	f240 6259 	movw	r2, #1625	; 0x659
 8015780:	4906      	ldr	r1, [pc, #24]	; (801579c <dhcp_parse_reply+0x2f4>)
 8015782:	4807      	ldr	r0, [pc, #28]	; (80157a0 <dhcp_parse_reply+0x2f8>)
 8015784:	f003 f914 	bl	80189b0 <iprintf>
 8015788:	f06f 0305 	mvn.w	r3, #5
 801578c:	e149      	b.n	8015a22 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801578e:	2302      	movs	r3, #2
 8015790:	623b      	str	r3, [r7, #32]
        break;
 8015792:	e033      	b.n	80157fc <dhcp_parse_reply+0x354>
 8015794:	20010e80 	.word	0x20010e80
 8015798:	0801c9e8 	.word	0x0801c9e8
 801579c:	0801cc70 	.word	0x0801cc70
 80157a0:	0801ca48 	.word	0x0801ca48
 80157a4:	0801cc7c 	.word	0x0801cc7c
 80157a8:	0801cc90 	.word	0x0801cc90
 80157ac:	0801cc9c 	.word	0x0801cc9c
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80157b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80157b4:	2b04      	cmp	r3, #4
 80157b6:	d009      	beq.n	80157cc <dhcp_parse_reply+0x324>
 80157b8:	4b9c      	ldr	r3, [pc, #624]	; (8015a2c <dhcp_parse_reply+0x584>)
 80157ba:	f240 625d 	movw	r2, #1629	; 0x65d
 80157be:	499c      	ldr	r1, [pc, #624]	; (8015a30 <dhcp_parse_reply+0x588>)
 80157c0:	489c      	ldr	r0, [pc, #624]	; (8015a34 <dhcp_parse_reply+0x58c>)
 80157c2:	f003 f8f5 	bl	80189b0 <iprintf>
 80157c6:	f06f 0305 	mvn.w	r3, #5
 80157ca:	e12a      	b.n	8015a22 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 80157cc:	2304      	movs	r3, #4
 80157ce:	623b      	str	r3, [r7, #32]
        break;
 80157d0:	e014      	b.n	80157fc <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80157d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80157d6:	2b04      	cmp	r3, #4
 80157d8:	d009      	beq.n	80157ee <dhcp_parse_reply+0x346>
 80157da:	4b94      	ldr	r3, [pc, #592]	; (8015a2c <dhcp_parse_reply+0x584>)
 80157dc:	f240 6261 	movw	r2, #1633	; 0x661
 80157e0:	4993      	ldr	r1, [pc, #588]	; (8015a30 <dhcp_parse_reply+0x588>)
 80157e2:	4894      	ldr	r0, [pc, #592]	; (8015a34 <dhcp_parse_reply+0x58c>)
 80157e4:	f003 f8e4 	bl	80189b0 <iprintf>
 80157e8:	f06f 0305 	mvn.w	r3, #5
 80157ec:	e119      	b.n	8015a22 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 80157ee:	2305      	movs	r3, #5
 80157f0:	623b      	str	r3, [r7, #32]
        break;
 80157f2:	e003      	b.n	80157fc <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 80157f4:	2300      	movs	r3, #0
 80157f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80157fa:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80157fc:	7dfb      	ldrb	r3, [r7, #23]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d103      	bne.n	801580a <dhcp_parse_reply+0x362>
      offset++;
 8015802:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015804:	3301      	adds	r3, #1
 8015806:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015808:	e0a1      	b.n	801594e <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801580a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801580c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015810:	4413      	add	r3, r2
 8015812:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8015816:	4293      	cmp	r3, r2
 8015818:	dd02      	ble.n	8015820 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801581a:	f06f 0301 	mvn.w	r3, #1
 801581e:	e100      	b.n	8015a22 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8015820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015824:	b29a      	uxth	r2, r3
 8015826:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015828:	4413      	add	r3, r2
 801582a:	b29b      	uxth	r3, r3
 801582c:	3302      	adds	r3, #2
 801582e:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8015830:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015834:	2b00      	cmp	r3, #0
 8015836:	f000 808a 	beq.w	801594e <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801583a:	2300      	movs	r3, #0
 801583c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801583e:	6a3b      	ldr	r3, [r7, #32]
 8015840:	2b00      	cmp	r3, #0
 8015842:	db02      	blt.n	801584a <dhcp_parse_reply+0x3a2>
 8015844:	6a3b      	ldr	r3, [r7, #32]
 8015846:	2b07      	cmp	r3, #7
 8015848:	dd06      	ble.n	8015858 <dhcp_parse_reply+0x3b0>
 801584a:	4b78      	ldr	r3, [pc, #480]	; (8015a2c <dhcp_parse_reply+0x584>)
 801584c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8015850:	4979      	ldr	r1, [pc, #484]	; (8015a38 <dhcp_parse_reply+0x590>)
 8015852:	4878      	ldr	r0, [pc, #480]	; (8015a34 <dhcp_parse_reply+0x58c>)
 8015854:	f003 f8ac 	bl	80189b0 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015858:	4a78      	ldr	r2, [pc, #480]	; (8015a3c <dhcp_parse_reply+0x594>)
 801585a:	6a3b      	ldr	r3, [r7, #32]
 801585c:	4413      	add	r3, r2
 801585e:	781b      	ldrb	r3, [r3, #0]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d174      	bne.n	801594e <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8015864:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015868:	2b04      	cmp	r3, #4
 801586a:	bf28      	it	cs
 801586c:	2304      	movcs	r3, #4
 801586e:	b2db      	uxtb	r3, r3
 8015870:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015872:	8bfb      	ldrh	r3, [r7, #30]
 8015874:	8aba      	ldrh	r2, [r7, #20]
 8015876:	f107 0108 	add.w	r1, r7, #8
 801587a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801587c:	f7f7 fcb2 	bl	800d1e4 <pbuf_copy_partial>
 8015880:	4603      	mov	r3, r0
 8015882:	461a      	mov	r2, r3
 8015884:	8abb      	ldrh	r3, [r7, #20]
 8015886:	4293      	cmp	r3, r2
 8015888:	d002      	beq.n	8015890 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801588a:	f06f 0301 	mvn.w	r3, #1
 801588e:	e0c8      	b.n	8015a22 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8015890:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015894:	2b04      	cmp	r3, #4
 8015896:	d933      	bls.n	8015900 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015898:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801589c:	f003 0303 	and.w	r3, r3, #3
 80158a0:	b2db      	uxtb	r3, r3
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d009      	beq.n	80158ba <dhcp_parse_reply+0x412>
 80158a6:	4b61      	ldr	r3, [pc, #388]	; (8015a2c <dhcp_parse_reply+0x584>)
 80158a8:	f240 6281 	movw	r2, #1665	; 0x681
 80158ac:	4964      	ldr	r1, [pc, #400]	; (8015a40 <dhcp_parse_reply+0x598>)
 80158ae:	4861      	ldr	r0, [pc, #388]	; (8015a34 <dhcp_parse_reply+0x58c>)
 80158b0:	f003 f87e 	bl	80189b0 <iprintf>
 80158b4:	f06f 0305 	mvn.w	r3, #5
 80158b8:	e0b3      	b.n	8015a22 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 80158ba:	4a60      	ldr	r2, [pc, #384]	; (8015a3c <dhcp_parse_reply+0x594>)
 80158bc:	6a3b      	ldr	r3, [r7, #32]
 80158be:	4413      	add	r3, r2
 80158c0:	2201      	movs	r2, #1
 80158c2:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80158c4:	68bb      	ldr	r3, [r7, #8]
 80158c6:	4618      	mov	r0, r3
 80158c8:	f7f5 fe67 	bl	800b59a <lwip_htonl>
 80158cc:	4602      	mov	r2, r0
 80158ce:	495d      	ldr	r1, [pc, #372]	; (8015a44 <dhcp_parse_reply+0x59c>)
 80158d0:	6a3b      	ldr	r3, [r7, #32]
 80158d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80158d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80158da:	3b04      	subs	r3, #4
 80158dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80158e0:	8bfb      	ldrh	r3, [r7, #30]
 80158e2:	3304      	adds	r3, #4
 80158e4:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80158e6:	8a7a      	ldrh	r2, [r7, #18]
 80158e8:	8bfb      	ldrh	r3, [r7, #30]
 80158ea:	429a      	cmp	r2, r3
 80158ec:	d202      	bcs.n	80158f4 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 80158ee:	f06f 0301 	mvn.w	r3, #1
 80158f2:	e096      	b.n	8015a22 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 80158f4:	8a7b      	ldrh	r3, [r7, #18]
 80158f6:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80158f8:	6a3b      	ldr	r3, [r7, #32]
 80158fa:	3301      	adds	r3, #1
 80158fc:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80158fe:	e79e      	b.n	801583e <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8015900:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015904:	2b04      	cmp	r3, #4
 8015906:	d106      	bne.n	8015916 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8015908:	68bb      	ldr	r3, [r7, #8]
 801590a:	4618      	mov	r0, r3
 801590c:	f7f5 fe45 	bl	800b59a <lwip_htonl>
 8015910:	4603      	mov	r3, r0
 8015912:	60bb      	str	r3, [r7, #8]
 8015914:	e011      	b.n	801593a <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015916:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801591a:	2b01      	cmp	r3, #1
 801591c:	d009      	beq.n	8015932 <dhcp_parse_reply+0x48a>
 801591e:	4b43      	ldr	r3, [pc, #268]	; (8015a2c <dhcp_parse_reply+0x584>)
 8015920:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8015924:	4948      	ldr	r1, [pc, #288]	; (8015a48 <dhcp_parse_reply+0x5a0>)
 8015926:	4843      	ldr	r0, [pc, #268]	; (8015a34 <dhcp_parse_reply+0x58c>)
 8015928:	f003 f842 	bl	80189b0 <iprintf>
 801592c:	f06f 0305 	mvn.w	r3, #5
 8015930:	e077      	b.n	8015a22 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8015932:	f107 0308 	add.w	r3, r7, #8
 8015936:	781b      	ldrb	r3, [r3, #0]
 8015938:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801593a:	4a40      	ldr	r2, [pc, #256]	; (8015a3c <dhcp_parse_reply+0x594>)
 801593c:	6a3b      	ldr	r3, [r7, #32]
 801593e:	4413      	add	r3, r2
 8015940:	2201      	movs	r2, #1
 8015942:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015944:	68ba      	ldr	r2, [r7, #8]
 8015946:	493f      	ldr	r1, [pc, #252]	; (8015a44 <dhcp_parse_reply+0x59c>)
 8015948:	6a3b      	ldr	r3, [r7, #32]
 801594a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015950:	895b      	ldrh	r3, [r3, #10]
 8015952:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015954:	429a      	cmp	r2, r3
 8015956:	d324      	bcc.n	80159a2 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8015958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801595a:	895b      	ldrh	r3, [r3, #10]
 801595c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801595e:	1ad3      	subs	r3, r2, r3
 8015960:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015964:	895b      	ldrh	r3, [r3, #10]
 8015966:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015968:	1ad3      	subs	r3, r2, r3
 801596a:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801596c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801596e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015970:	429a      	cmp	r2, r3
 8015972:	d213      	bcs.n	801599c <dhcp_parse_reply+0x4f4>
        q = q->next;
 8015974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801597c:	2b00      	cmp	r3, #0
 801597e:	d109      	bne.n	8015994 <dhcp_parse_reply+0x4ec>
 8015980:	4b2a      	ldr	r3, [pc, #168]	; (8015a2c <dhcp_parse_reply+0x584>)
 8015982:	f240 629d 	movw	r2, #1693	; 0x69d
 8015986:	4931      	ldr	r1, [pc, #196]	; (8015a4c <dhcp_parse_reply+0x5a4>)
 8015988:	482a      	ldr	r0, [pc, #168]	; (8015a34 <dhcp_parse_reply+0x58c>)
 801598a:	f003 f811 	bl	80189b0 <iprintf>
 801598e:	f06f 0305 	mvn.w	r3, #5
 8015992:	e046      	b.n	8015a22 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8015994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015996:	685b      	ldr	r3, [r3, #4]
 8015998:	63fb      	str	r3, [r7, #60]	; 0x3c
 801599a:	e002      	b.n	80159a2 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801599c:	f06f 0301 	mvn.w	r3, #1
 80159a0:	e03f      	b.n	8015a22 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80159a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d00a      	beq.n	80159be <dhcp_parse_reply+0x516>
 80159a8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80159aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80159ac:	429a      	cmp	r2, r3
 80159ae:	d206      	bcs.n	80159be <dhcp_parse_reply+0x516>
 80159b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80159b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80159b4:	4413      	add	r3, r2
 80159b6:	781b      	ldrb	r3, [r3, #0]
 80159b8:	2bff      	cmp	r3, #255	; 0xff
 80159ba:	f47f adb8 	bne.w	801552e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80159be:	4b1f      	ldr	r3, [pc, #124]	; (8015a3c <dhcp_parse_reply+0x594>)
 80159c0:	781b      	ldrb	r3, [r3, #0]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d018      	beq.n	80159f8 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80159c6:	4b1f      	ldr	r3, [pc, #124]	; (8015a44 <dhcp_parse_reply+0x59c>)
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80159cc:	4b1b      	ldr	r3, [pc, #108]	; (8015a3c <dhcp_parse_reply+0x594>)
 80159ce:	2200      	movs	r2, #0
 80159d0:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	2b01      	cmp	r3, #1
 80159d6:	d102      	bne.n	80159de <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 80159d8:	2301      	movs	r3, #1
 80159da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80159dc:	e00c      	b.n	80159f8 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	2b02      	cmp	r3, #2
 80159e2:	d102      	bne.n	80159ea <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 80159e4:	2301      	movs	r3, #1
 80159e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80159e8:	e006      	b.n	80159f8 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	2b03      	cmp	r3, #3
 80159ee:	d103      	bne.n	80159f8 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 80159f0:	2301      	movs	r3, #1
 80159f2:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80159f4:	2301      	movs	r3, #1
 80159f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80159f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d006      	beq.n	8015a0c <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80159fe:	2300      	movs	r3, #0
 8015a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8015a02:	236c      	movs	r3, #108	; 0x6c
 8015a04:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015a06:	23ec      	movs	r3, #236	; 0xec
 8015a08:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8015a0a:	e56a      	b.n	80154e2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8015a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d006      	beq.n	8015a20 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8015a12:	2300      	movs	r3, #0
 8015a14:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8015a16:	232c      	movs	r3, #44	; 0x2c
 8015a18:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8015a1a:	236c      	movs	r3, #108	; 0x6c
 8015a1c:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8015a1e:	e560      	b.n	80154e2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015a20:	2300      	movs	r3, #0
}
 8015a22:	4618      	mov	r0, r3
 8015a24:	3740      	adds	r7, #64	; 0x40
 8015a26:	46bd      	mov	sp, r7
 8015a28:	bd80      	pop	{r7, pc}
 8015a2a:	bf00      	nop
 8015a2c:	0801c9e8 	.word	0x0801c9e8
 8015a30:	0801cc70 	.word	0x0801cc70
 8015a34:	0801ca48 	.word	0x0801ca48
 8015a38:	0801ccb4 	.word	0x0801ccb4
 8015a3c:	20010e80 	.word	0x20010e80
 8015a40:	0801ccc8 	.word	0x0801ccc8
 8015a44:	20010e60 	.word	0x20010e60
 8015a48:	0801cce0 	.word	0x0801cce0
 8015a4c:	0801ccf4 	.word	0x0801ccf4

08015a50 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b08a      	sub	sp, #40	; 0x28
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	60f8      	str	r0, [r7, #12]
 8015a58:	60b9      	str	r1, [r7, #8]
 8015a5a:	607a      	str	r2, [r7, #4]
 8015a5c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8015a5e:	4b60      	ldr	r3, [pc, #384]	; (8015be0 <dhcp_recv+0x190>)
 8015a60:	685b      	ldr	r3, [r3, #4]
 8015a62:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015a64:	6a3b      	ldr	r3, [r7, #32]
 8015a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a68:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	685b      	ldr	r3, [r3, #4]
 8015a6e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015a70:	69fb      	ldr	r3, [r7, #28]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	f000 809d 	beq.w	8015bb2 <dhcp_recv+0x162>
 8015a78:	69fb      	ldr	r3, [r7, #28]
 8015a7a:	791b      	ldrb	r3, [r3, #4]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	f000 8098 	beq.w	8015bb2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	895b      	ldrh	r3, [r3, #10]
 8015a86:	2b2b      	cmp	r3, #43	; 0x2b
 8015a88:	f240 8095 	bls.w	8015bb6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015a8c:	69bb      	ldr	r3, [r7, #24]
 8015a8e:	781b      	ldrb	r3, [r3, #0]
 8015a90:	2b02      	cmp	r3, #2
 8015a92:	f040 8092 	bne.w	8015bba <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015a96:	2300      	movs	r3, #0
 8015a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015a9c:	e012      	b.n	8015ac4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015aa2:	6a3a      	ldr	r2, [r7, #32]
 8015aa4:	4413      	add	r3, r2
 8015aa6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8015aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015aae:	69b9      	ldr	r1, [r7, #24]
 8015ab0:	440b      	add	r3, r1
 8015ab2:	7f1b      	ldrb	r3, [r3, #28]
 8015ab4:	429a      	cmp	r2, r3
 8015ab6:	f040 8082 	bne.w	8015bbe <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015aba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015abe:	3301      	adds	r3, #1
 8015ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015ac4:	6a3b      	ldr	r3, [r7, #32]
 8015ac6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015aca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015ace:	429a      	cmp	r2, r3
 8015ad0:	d203      	bcs.n	8015ada <dhcp_recv+0x8a>
 8015ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ad6:	2b05      	cmp	r3, #5
 8015ad8:	d9e1      	bls.n	8015a9e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8015ada:	69bb      	ldr	r3, [r7, #24]
 8015adc:	685b      	ldr	r3, [r3, #4]
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f7f5 fd5b 	bl	800b59a <lwip_htonl>
 8015ae4:	4602      	mov	r2, r0
 8015ae6:	69fb      	ldr	r3, [r7, #28]
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	429a      	cmp	r2, r3
 8015aec:	d169      	bne.n	8015bc2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015aee:	69f9      	ldr	r1, [r7, #28]
 8015af0:	6878      	ldr	r0, [r7, #4]
 8015af2:	f7ff fcd9 	bl	80154a8 <dhcp_parse_reply>
 8015af6:	4603      	mov	r3, r0
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d164      	bne.n	8015bc6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015afc:	4b39      	ldr	r3, [pc, #228]	; (8015be4 <dhcp_recv+0x194>)
 8015afe:	785b      	ldrb	r3, [r3, #1]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d062      	beq.n	8015bca <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	685b      	ldr	r3, [r3, #4]
 8015b08:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8015b0a:	4b37      	ldr	r3, [pc, #220]	; (8015be8 <dhcp_recv+0x198>)
 8015b0c:	685b      	ldr	r3, [r3, #4]
 8015b0e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015b10:	7cfb      	ldrb	r3, [r7, #19]
 8015b12:	2b05      	cmp	r3, #5
 8015b14:	d12a      	bne.n	8015b6c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015b16:	69fb      	ldr	r3, [r7, #28]
 8015b18:	795b      	ldrb	r3, [r3, #5]
 8015b1a:	2b01      	cmp	r3, #1
 8015b1c:	d112      	bne.n	8015b44 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8015b1e:	6979      	ldr	r1, [r7, #20]
 8015b20:	6a38      	ldr	r0, [r7, #32]
 8015b22:	f7fe fe17 	bl	8014754 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015b26:	6a3b      	ldr	r3, [r7, #32]
 8015b28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015b2c:	f003 0308 	and.w	r3, r3, #8
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d003      	beq.n	8015b3c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015b34:	6a38      	ldr	r0, [r7, #32]
 8015b36:	f7fe fb87 	bl	8014248 <dhcp_check>
 8015b3a:	e049      	b.n	8015bd0 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8015b3c:	6a38      	ldr	r0, [r7, #32]
 8015b3e:	f7ff f867 	bl	8014c10 <dhcp_bind>
 8015b42:	e045      	b.n	8015bd0 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015b44:	69fb      	ldr	r3, [r7, #28]
 8015b46:	795b      	ldrb	r3, [r3, #5]
 8015b48:	2b03      	cmp	r3, #3
 8015b4a:	d007      	beq.n	8015b5c <dhcp_recv+0x10c>
 8015b4c:	69fb      	ldr	r3, [r7, #28]
 8015b4e:	795b      	ldrb	r3, [r3, #5]
 8015b50:	2b04      	cmp	r3, #4
 8015b52:	d003      	beq.n	8015b5c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015b54:	69fb      	ldr	r3, [r7, #28]
 8015b56:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015b58:	2b05      	cmp	r3, #5
 8015b5a:	d139      	bne.n	8015bd0 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8015b5c:	6979      	ldr	r1, [r7, #20]
 8015b5e:	6a38      	ldr	r0, [r7, #32]
 8015b60:	f7fe fdf8 	bl	8014754 <dhcp_handle_ack>
      dhcp_bind(netif);
 8015b64:	6a38      	ldr	r0, [r7, #32]
 8015b66:	f7ff f853 	bl	8014c10 <dhcp_bind>
 8015b6a:	e031      	b.n	8015bd0 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8015b6c:	7cfb      	ldrb	r3, [r7, #19]
 8015b6e:	2b06      	cmp	r3, #6
 8015b70:	d113      	bne.n	8015b9a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015b72:	69fb      	ldr	r3, [r7, #28]
 8015b74:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8015b76:	2b03      	cmp	r3, #3
 8015b78:	d00b      	beq.n	8015b92 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015b7a:	69fb      	ldr	r3, [r7, #28]
 8015b7c:	795b      	ldrb	r3, [r3, #5]
 8015b7e:	2b01      	cmp	r3, #1
 8015b80:	d007      	beq.n	8015b92 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015b82:	69fb      	ldr	r3, [r7, #28]
 8015b84:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015b86:	2b04      	cmp	r3, #4
 8015b88:	d003      	beq.n	8015b92 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015b8a:	69fb      	ldr	r3, [r7, #28]
 8015b8c:	795b      	ldrb	r3, [r3, #5]
 8015b8e:	2b05      	cmp	r3, #5
 8015b90:	d103      	bne.n	8015b9a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8015b92:	6a38      	ldr	r0, [r7, #32]
 8015b94:	f7fe fb3e 	bl	8014214 <dhcp_handle_nak>
 8015b98:	e01a      	b.n	8015bd0 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8015b9a:	7cfb      	ldrb	r3, [r7, #19]
 8015b9c:	2b02      	cmp	r3, #2
 8015b9e:	d116      	bne.n	8015bce <dhcp_recv+0x17e>
 8015ba0:	69fb      	ldr	r3, [r7, #28]
 8015ba2:	795b      	ldrb	r3, [r3, #5]
 8015ba4:	2b06      	cmp	r3, #6
 8015ba6:	d112      	bne.n	8015bce <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8015ba8:	6979      	ldr	r1, [r7, #20]
 8015baa:	6a38      	ldr	r0, [r7, #32]
 8015bac:	f7fe fb80 	bl	80142b0 <dhcp_handle_offer>
 8015bb0:	e00e      	b.n	8015bd0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015bb2:	bf00      	nop
 8015bb4:	e00c      	b.n	8015bd0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015bb6:	bf00      	nop
 8015bb8:	e00a      	b.n	8015bd0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015bba:	bf00      	nop
 8015bbc:	e008      	b.n	8015bd0 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8015bbe:	bf00      	nop
 8015bc0:	e006      	b.n	8015bd0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015bc2:	bf00      	nop
 8015bc4:	e004      	b.n	8015bd0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015bc6:	bf00      	nop
 8015bc8:	e002      	b.n	8015bd0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015bca:	bf00      	nop
 8015bcc:	e000      	b.n	8015bd0 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8015bce:	bf00      	nop
  pbuf_free(p);
 8015bd0:	6878      	ldr	r0, [r7, #4]
 8015bd2:	f7f7 f901 	bl	800cdd8 <pbuf_free>
}
 8015bd6:	bf00      	nop
 8015bd8:	3728      	adds	r7, #40	; 0x28
 8015bda:	46bd      	mov	sp, r7
 8015bdc:	bd80      	pop	{r7, pc}
 8015bde:	bf00      	nop
 8015be0:	2000d68c 	.word	0x2000d68c
 8015be4:	20010e80 	.word	0x20010e80
 8015be8:	20010e60 	.word	0x20010e60

08015bec <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b088      	sub	sp, #32
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	60f8      	str	r0, [r7, #12]
 8015bf4:	60b9      	str	r1, [r7, #8]
 8015bf6:	603b      	str	r3, [r7, #0]
 8015bf8:	4613      	mov	r3, r2
 8015bfa:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d108      	bne.n	8015c14 <dhcp_create_msg+0x28>
 8015c02:	4b5f      	ldr	r3, [pc, #380]	; (8015d80 <dhcp_create_msg+0x194>)
 8015c04:	f240 7269 	movw	r2, #1897	; 0x769
 8015c08:	495e      	ldr	r1, [pc, #376]	; (8015d84 <dhcp_create_msg+0x198>)
 8015c0a:	485f      	ldr	r0, [pc, #380]	; (8015d88 <dhcp_create_msg+0x19c>)
 8015c0c:	f002 fed0 	bl	80189b0 <iprintf>
 8015c10:	2300      	movs	r3, #0
 8015c12:	e0b1      	b.n	8015d78 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015c14:	68bb      	ldr	r3, [r7, #8]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d108      	bne.n	8015c2c <dhcp_create_msg+0x40>
 8015c1a:	4b59      	ldr	r3, [pc, #356]	; (8015d80 <dhcp_create_msg+0x194>)
 8015c1c:	f240 726a 	movw	r2, #1898	; 0x76a
 8015c20:	495a      	ldr	r1, [pc, #360]	; (8015d8c <dhcp_create_msg+0x1a0>)
 8015c22:	4859      	ldr	r0, [pc, #356]	; (8015d88 <dhcp_create_msg+0x19c>)
 8015c24:	f002 fec4 	bl	80189b0 <iprintf>
 8015c28:	2300      	movs	r3, #0
 8015c2a:	e0a5      	b.n	8015d78 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8015c2c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015c30:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015c34:	2036      	movs	r0, #54	; 0x36
 8015c36:	f7f6 fdeb 	bl	800c810 <pbuf_alloc>
 8015c3a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8015c3c:	69bb      	ldr	r3, [r7, #24]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d101      	bne.n	8015c46 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8015c42:	2300      	movs	r3, #0
 8015c44:	e098      	b.n	8015d78 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015c46:	69bb      	ldr	r3, [r7, #24]
 8015c48:	895b      	ldrh	r3, [r3, #10]
 8015c4a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8015c4e:	d206      	bcs.n	8015c5e <dhcp_create_msg+0x72>
 8015c50:	4b4b      	ldr	r3, [pc, #300]	; (8015d80 <dhcp_create_msg+0x194>)
 8015c52:	f240 7271 	movw	r2, #1905	; 0x771
 8015c56:	494e      	ldr	r1, [pc, #312]	; (8015d90 <dhcp_create_msg+0x1a4>)
 8015c58:	484b      	ldr	r0, [pc, #300]	; (8015d88 <dhcp_create_msg+0x19c>)
 8015c5a:	f002 fea9 	bl	80189b0 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8015c5e:	79fb      	ldrb	r3, [r7, #7]
 8015c60:	2b03      	cmp	r3, #3
 8015c62:	d103      	bne.n	8015c6c <dhcp_create_msg+0x80>
 8015c64:	68bb      	ldr	r3, [r7, #8]
 8015c66:	795b      	ldrb	r3, [r3, #5]
 8015c68:	2b03      	cmp	r3, #3
 8015c6a:	d10d      	bne.n	8015c88 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8015c6c:	68bb      	ldr	r3, [r7, #8]
 8015c6e:	799b      	ldrb	r3, [r3, #6]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d105      	bne.n	8015c80 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015c74:	f002 fdae 	bl	80187d4 <rand>
 8015c78:	4603      	mov	r3, r0
 8015c7a:	461a      	mov	r2, r3
 8015c7c:	4b45      	ldr	r3, [pc, #276]	; (8015d94 <dhcp_create_msg+0x1a8>)
 8015c7e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8015c80:	4b44      	ldr	r3, [pc, #272]	; (8015d94 <dhcp_create_msg+0x1a8>)
 8015c82:	681a      	ldr	r2, [r3, #0]
 8015c84:	68bb      	ldr	r3, [r7, #8]
 8015c86:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015c88:	69bb      	ldr	r3, [r7, #24]
 8015c8a:	685b      	ldr	r3, [r3, #4]
 8015c8c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8015c8e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8015c92:	2100      	movs	r1, #0
 8015c94:	6978      	ldr	r0, [r7, #20]
 8015c96:	f002 fef0 	bl	8018a7a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8015c9a:	697b      	ldr	r3, [r7, #20]
 8015c9c:	2201      	movs	r2, #1
 8015c9e:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8015ca0:	697b      	ldr	r3, [r7, #20]
 8015ca2:	2201      	movs	r2, #1
 8015ca4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8015cac:	697b      	ldr	r3, [r7, #20]
 8015cae:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8015cb0:	68bb      	ldr	r3, [r7, #8]
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	f7f5 fc70 	bl	800b59a <lwip_htonl>
 8015cba:	4602      	mov	r2, r0
 8015cbc:	697b      	ldr	r3, [r7, #20]
 8015cbe:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015cc0:	79fb      	ldrb	r3, [r7, #7]
 8015cc2:	2b08      	cmp	r3, #8
 8015cc4:	d010      	beq.n	8015ce8 <dhcp_create_msg+0xfc>
 8015cc6:	79fb      	ldrb	r3, [r7, #7]
 8015cc8:	2b04      	cmp	r3, #4
 8015cca:	d00d      	beq.n	8015ce8 <dhcp_create_msg+0xfc>
 8015ccc:	79fb      	ldrb	r3, [r7, #7]
 8015cce:	2b07      	cmp	r3, #7
 8015cd0:	d00a      	beq.n	8015ce8 <dhcp_create_msg+0xfc>
 8015cd2:	79fb      	ldrb	r3, [r7, #7]
 8015cd4:	2b03      	cmp	r3, #3
 8015cd6:	d10c      	bne.n	8015cf2 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015cd8:	68bb      	ldr	r3, [r7, #8]
 8015cda:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8015cdc:	2b05      	cmp	r3, #5
 8015cde:	d003      	beq.n	8015ce8 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015ce0:	68bb      	ldr	r3, [r7, #8]
 8015ce2:	795b      	ldrb	r3, [r3, #5]
 8015ce4:	2b04      	cmp	r3, #4
 8015ce6:	d104      	bne.n	8015cf2 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	3304      	adds	r3, #4
 8015cec:	681a      	ldr	r2, [r3, #0]
 8015cee:	697b      	ldr	r3, [r7, #20]
 8015cf0:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	83fb      	strh	r3, [r7, #30]
 8015cf6:	e00c      	b.n	8015d12 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015cf8:	8bfa      	ldrh	r2, [r7, #30]
 8015cfa:	8bfb      	ldrh	r3, [r7, #30]
 8015cfc:	68f9      	ldr	r1, [r7, #12]
 8015cfe:	440a      	add	r2, r1
 8015d00:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8015d04:	697a      	ldr	r2, [r7, #20]
 8015d06:	4413      	add	r3, r2
 8015d08:	460a      	mov	r2, r1
 8015d0a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015d0c:	8bfb      	ldrh	r3, [r7, #30]
 8015d0e:	3301      	adds	r3, #1
 8015d10:	83fb      	strh	r3, [r7, #30]
 8015d12:	8bfb      	ldrh	r3, [r7, #30]
 8015d14:	2b05      	cmp	r3, #5
 8015d16:	d9ef      	bls.n	8015cf8 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015d18:	697b      	ldr	r3, [r7, #20]
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015d20:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015d24:	2200      	movs	r2, #0
 8015d26:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8015d2a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8015d2e:	2200      	movs	r2, #0
 8015d30:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8015d34:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8015d38:	2200      	movs	r2, #0
 8015d3a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015d3e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8015d42:	697b      	ldr	r3, [r7, #20]
 8015d44:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015d48:	2301      	movs	r3, #1
 8015d4a:	2235      	movs	r2, #53	; 0x35
 8015d4c:	2000      	movs	r0, #0
 8015d4e:	f7ff fadb 	bl	8015308 <dhcp_option>
 8015d52:	4603      	mov	r3, r0
 8015d54:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8015d56:	697b      	ldr	r3, [r7, #20]
 8015d58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015d5c:	79fa      	ldrb	r2, [r7, #7]
 8015d5e:	8a7b      	ldrh	r3, [r7, #18]
 8015d60:	4618      	mov	r0, r3
 8015d62:	f7ff fb05 	bl	8015370 <dhcp_option_byte>
 8015d66:	4603      	mov	r3, r0
 8015d68:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8015d6a:	683b      	ldr	r3, [r7, #0]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d002      	beq.n	8015d76 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8015d70:	683b      	ldr	r3, [r7, #0]
 8015d72:	8a7a      	ldrh	r2, [r7, #18]
 8015d74:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8015d76:	69bb      	ldr	r3, [r7, #24]
}
 8015d78:	4618      	mov	r0, r3
 8015d7a:	3720      	adds	r7, #32
 8015d7c:	46bd      	mov	sp, r7
 8015d7e:	bd80      	pop	{r7, pc}
 8015d80:	0801c9e8 	.word	0x0801c9e8
 8015d84:	0801cd08 	.word	0x0801cd08
 8015d88:	0801ca48 	.word	0x0801ca48
 8015d8c:	0801cd28 	.word	0x0801cd28
 8015d90:	0801cd48 	.word	0x0801cd48
 8015d94:	20010e90 	.word	0x20010e90

08015d98 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b084      	sub	sp, #16
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	4603      	mov	r3, r0
 8015da0:	60b9      	str	r1, [r7, #8]
 8015da2:	607a      	str	r2, [r7, #4]
 8015da4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8015da6:	89fb      	ldrh	r3, [r7, #14]
 8015da8:	1c5a      	adds	r2, r3, #1
 8015daa:	81fa      	strh	r2, [r7, #14]
 8015dac:	461a      	mov	r2, r3
 8015dae:	68bb      	ldr	r3, [r7, #8]
 8015db0:	4413      	add	r3, r2
 8015db2:	22ff      	movs	r2, #255	; 0xff
 8015db4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015db6:	e007      	b.n	8015dc8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8015db8:	89fb      	ldrh	r3, [r7, #14]
 8015dba:	1c5a      	adds	r2, r3, #1
 8015dbc:	81fa      	strh	r2, [r7, #14]
 8015dbe:	461a      	mov	r2, r3
 8015dc0:	68bb      	ldr	r3, [r7, #8]
 8015dc2:	4413      	add	r3, r2
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015dc8:	89fb      	ldrh	r3, [r7, #14]
 8015dca:	2b43      	cmp	r3, #67	; 0x43
 8015dcc:	d904      	bls.n	8015dd8 <dhcp_option_trailer+0x40>
 8015dce:	89fb      	ldrh	r3, [r7, #14]
 8015dd0:	f003 0303 	and.w	r3, r3, #3
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d002      	beq.n	8015dde <dhcp_option_trailer+0x46>
 8015dd8:	89fb      	ldrh	r3, [r7, #14]
 8015dda:	2b43      	cmp	r3, #67	; 0x43
 8015ddc:	d9ec      	bls.n	8015db8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8015dde:	89fb      	ldrh	r3, [r7, #14]
 8015de0:	33f0      	adds	r3, #240	; 0xf0
 8015de2:	b29b      	uxth	r3, r3
 8015de4:	4619      	mov	r1, r3
 8015de6:	6878      	ldr	r0, [r7, #4]
 8015de8:	f7f6 fe70 	bl	800cacc <pbuf_realloc>
}
 8015dec:	bf00      	nop
 8015dee:	3710      	adds	r7, #16
 8015df0:	46bd      	mov	sp, r7
 8015df2:	bd80      	pop	{r7, pc}

08015df4 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015df4:	b480      	push	{r7}
 8015df6:	b085      	sub	sp, #20
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d017      	beq.n	8015e32 <dhcp_supplied_address+0x3e>
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d013      	beq.n	8015e32 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e0e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	795b      	ldrb	r3, [r3, #5]
 8015e14:	2b0a      	cmp	r3, #10
 8015e16:	d007      	beq.n	8015e28 <dhcp_supplied_address+0x34>
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	795b      	ldrb	r3, [r3, #5]
 8015e1c:	2b05      	cmp	r3, #5
 8015e1e:	d003      	beq.n	8015e28 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015e24:	2b04      	cmp	r3, #4
 8015e26:	d101      	bne.n	8015e2c <dhcp_supplied_address+0x38>
 8015e28:	2301      	movs	r3, #1
 8015e2a:	e000      	b.n	8015e2e <dhcp_supplied_address+0x3a>
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	b2db      	uxtb	r3, r3
 8015e30:	e000      	b.n	8015e34 <dhcp_supplied_address+0x40>
  }
  return 0;
 8015e32:	2300      	movs	r3, #0
}
 8015e34:	4618      	mov	r0, r3
 8015e36:	3714      	adds	r7, #20
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e3e:	4770      	bx	lr

08015e40 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b082      	sub	sp, #8
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015e48:	4915      	ldr	r1, [pc, #84]	; (8015ea0 <etharp_free_entry+0x60>)
 8015e4a:	687a      	ldr	r2, [r7, #4]
 8015e4c:	4613      	mov	r3, r2
 8015e4e:	005b      	lsls	r3, r3, #1
 8015e50:	4413      	add	r3, r2
 8015e52:	00db      	lsls	r3, r3, #3
 8015e54:	440b      	add	r3, r1
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d013      	beq.n	8015e84 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015e5c:	4910      	ldr	r1, [pc, #64]	; (8015ea0 <etharp_free_entry+0x60>)
 8015e5e:	687a      	ldr	r2, [r7, #4]
 8015e60:	4613      	mov	r3, r2
 8015e62:	005b      	lsls	r3, r3, #1
 8015e64:	4413      	add	r3, r2
 8015e66:	00db      	lsls	r3, r3, #3
 8015e68:	440b      	add	r3, r1
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	f7f6 ffb3 	bl	800cdd8 <pbuf_free>
    arp_table[i].q = NULL;
 8015e72:	490b      	ldr	r1, [pc, #44]	; (8015ea0 <etharp_free_entry+0x60>)
 8015e74:	687a      	ldr	r2, [r7, #4]
 8015e76:	4613      	mov	r3, r2
 8015e78:	005b      	lsls	r3, r3, #1
 8015e7a:	4413      	add	r3, r2
 8015e7c:	00db      	lsls	r3, r3, #3
 8015e7e:	440b      	add	r3, r1
 8015e80:	2200      	movs	r2, #0
 8015e82:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015e84:	4906      	ldr	r1, [pc, #24]	; (8015ea0 <etharp_free_entry+0x60>)
 8015e86:	687a      	ldr	r2, [r7, #4]
 8015e88:	4613      	mov	r3, r2
 8015e8a:	005b      	lsls	r3, r3, #1
 8015e8c:	4413      	add	r3, r2
 8015e8e:	00db      	lsls	r3, r3, #3
 8015e90:	440b      	add	r3, r1
 8015e92:	3314      	adds	r3, #20
 8015e94:	2200      	movs	r2, #0
 8015e96:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015e98:	bf00      	nop
 8015e9a:	3708      	adds	r7, #8
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	bd80      	pop	{r7, pc}
 8015ea0:	20010e94 	.word	0x20010e94

08015ea4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b082      	sub	sp, #8
 8015ea8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015eaa:	2300      	movs	r3, #0
 8015eac:	607b      	str	r3, [r7, #4]
 8015eae:	e096      	b.n	8015fde <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015eb0:	494f      	ldr	r1, [pc, #316]	; (8015ff0 <etharp_tmr+0x14c>)
 8015eb2:	687a      	ldr	r2, [r7, #4]
 8015eb4:	4613      	mov	r3, r2
 8015eb6:	005b      	lsls	r3, r3, #1
 8015eb8:	4413      	add	r3, r2
 8015eba:	00db      	lsls	r3, r3, #3
 8015ebc:	440b      	add	r3, r1
 8015ebe:	3314      	adds	r3, #20
 8015ec0:	781b      	ldrb	r3, [r3, #0]
 8015ec2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015ec4:	78fb      	ldrb	r3, [r7, #3]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	f000 8086 	beq.w	8015fd8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015ecc:	4948      	ldr	r1, [pc, #288]	; (8015ff0 <etharp_tmr+0x14c>)
 8015ece:	687a      	ldr	r2, [r7, #4]
 8015ed0:	4613      	mov	r3, r2
 8015ed2:	005b      	lsls	r3, r3, #1
 8015ed4:	4413      	add	r3, r2
 8015ed6:	00db      	lsls	r3, r3, #3
 8015ed8:	440b      	add	r3, r1
 8015eda:	3312      	adds	r3, #18
 8015edc:	881b      	ldrh	r3, [r3, #0]
 8015ede:	3301      	adds	r3, #1
 8015ee0:	b298      	uxth	r0, r3
 8015ee2:	4943      	ldr	r1, [pc, #268]	; (8015ff0 <etharp_tmr+0x14c>)
 8015ee4:	687a      	ldr	r2, [r7, #4]
 8015ee6:	4613      	mov	r3, r2
 8015ee8:	005b      	lsls	r3, r3, #1
 8015eea:	4413      	add	r3, r2
 8015eec:	00db      	lsls	r3, r3, #3
 8015eee:	440b      	add	r3, r1
 8015ef0:	3312      	adds	r3, #18
 8015ef2:	4602      	mov	r2, r0
 8015ef4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015ef6:	493e      	ldr	r1, [pc, #248]	; (8015ff0 <etharp_tmr+0x14c>)
 8015ef8:	687a      	ldr	r2, [r7, #4]
 8015efa:	4613      	mov	r3, r2
 8015efc:	005b      	lsls	r3, r3, #1
 8015efe:	4413      	add	r3, r2
 8015f00:	00db      	lsls	r3, r3, #3
 8015f02:	440b      	add	r3, r1
 8015f04:	3312      	adds	r3, #18
 8015f06:	881b      	ldrh	r3, [r3, #0]
 8015f08:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015f0c:	d215      	bcs.n	8015f3a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015f0e:	4938      	ldr	r1, [pc, #224]	; (8015ff0 <etharp_tmr+0x14c>)
 8015f10:	687a      	ldr	r2, [r7, #4]
 8015f12:	4613      	mov	r3, r2
 8015f14:	005b      	lsls	r3, r3, #1
 8015f16:	4413      	add	r3, r2
 8015f18:	00db      	lsls	r3, r3, #3
 8015f1a:	440b      	add	r3, r1
 8015f1c:	3314      	adds	r3, #20
 8015f1e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015f20:	2b01      	cmp	r3, #1
 8015f22:	d10e      	bne.n	8015f42 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015f24:	4932      	ldr	r1, [pc, #200]	; (8015ff0 <etharp_tmr+0x14c>)
 8015f26:	687a      	ldr	r2, [r7, #4]
 8015f28:	4613      	mov	r3, r2
 8015f2a:	005b      	lsls	r3, r3, #1
 8015f2c:	4413      	add	r3, r2
 8015f2e:	00db      	lsls	r3, r3, #3
 8015f30:	440b      	add	r3, r1
 8015f32:	3312      	adds	r3, #18
 8015f34:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015f36:	2b04      	cmp	r3, #4
 8015f38:	d903      	bls.n	8015f42 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015f3a:	6878      	ldr	r0, [r7, #4]
 8015f3c:	f7ff ff80 	bl	8015e40 <etharp_free_entry>
 8015f40:	e04a      	b.n	8015fd8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015f42:	492b      	ldr	r1, [pc, #172]	; (8015ff0 <etharp_tmr+0x14c>)
 8015f44:	687a      	ldr	r2, [r7, #4]
 8015f46:	4613      	mov	r3, r2
 8015f48:	005b      	lsls	r3, r3, #1
 8015f4a:	4413      	add	r3, r2
 8015f4c:	00db      	lsls	r3, r3, #3
 8015f4e:	440b      	add	r3, r1
 8015f50:	3314      	adds	r3, #20
 8015f52:	781b      	ldrb	r3, [r3, #0]
 8015f54:	2b03      	cmp	r3, #3
 8015f56:	d10a      	bne.n	8015f6e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015f58:	4925      	ldr	r1, [pc, #148]	; (8015ff0 <etharp_tmr+0x14c>)
 8015f5a:	687a      	ldr	r2, [r7, #4]
 8015f5c:	4613      	mov	r3, r2
 8015f5e:	005b      	lsls	r3, r3, #1
 8015f60:	4413      	add	r3, r2
 8015f62:	00db      	lsls	r3, r3, #3
 8015f64:	440b      	add	r3, r1
 8015f66:	3314      	adds	r3, #20
 8015f68:	2204      	movs	r2, #4
 8015f6a:	701a      	strb	r2, [r3, #0]
 8015f6c:	e034      	b.n	8015fd8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015f6e:	4920      	ldr	r1, [pc, #128]	; (8015ff0 <etharp_tmr+0x14c>)
 8015f70:	687a      	ldr	r2, [r7, #4]
 8015f72:	4613      	mov	r3, r2
 8015f74:	005b      	lsls	r3, r3, #1
 8015f76:	4413      	add	r3, r2
 8015f78:	00db      	lsls	r3, r3, #3
 8015f7a:	440b      	add	r3, r1
 8015f7c:	3314      	adds	r3, #20
 8015f7e:	781b      	ldrb	r3, [r3, #0]
 8015f80:	2b04      	cmp	r3, #4
 8015f82:	d10a      	bne.n	8015f9a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015f84:	491a      	ldr	r1, [pc, #104]	; (8015ff0 <etharp_tmr+0x14c>)
 8015f86:	687a      	ldr	r2, [r7, #4]
 8015f88:	4613      	mov	r3, r2
 8015f8a:	005b      	lsls	r3, r3, #1
 8015f8c:	4413      	add	r3, r2
 8015f8e:	00db      	lsls	r3, r3, #3
 8015f90:	440b      	add	r3, r1
 8015f92:	3314      	adds	r3, #20
 8015f94:	2202      	movs	r2, #2
 8015f96:	701a      	strb	r2, [r3, #0]
 8015f98:	e01e      	b.n	8015fd8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015f9a:	4915      	ldr	r1, [pc, #84]	; (8015ff0 <etharp_tmr+0x14c>)
 8015f9c:	687a      	ldr	r2, [r7, #4]
 8015f9e:	4613      	mov	r3, r2
 8015fa0:	005b      	lsls	r3, r3, #1
 8015fa2:	4413      	add	r3, r2
 8015fa4:	00db      	lsls	r3, r3, #3
 8015fa6:	440b      	add	r3, r1
 8015fa8:	3314      	adds	r3, #20
 8015faa:	781b      	ldrb	r3, [r3, #0]
 8015fac:	2b01      	cmp	r3, #1
 8015fae:	d113      	bne.n	8015fd8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015fb0:	490f      	ldr	r1, [pc, #60]	; (8015ff0 <etharp_tmr+0x14c>)
 8015fb2:	687a      	ldr	r2, [r7, #4]
 8015fb4:	4613      	mov	r3, r2
 8015fb6:	005b      	lsls	r3, r3, #1
 8015fb8:	4413      	add	r3, r2
 8015fba:	00db      	lsls	r3, r3, #3
 8015fbc:	440b      	add	r3, r1
 8015fbe:	3308      	adds	r3, #8
 8015fc0:	6818      	ldr	r0, [r3, #0]
 8015fc2:	687a      	ldr	r2, [r7, #4]
 8015fc4:	4613      	mov	r3, r2
 8015fc6:	005b      	lsls	r3, r3, #1
 8015fc8:	4413      	add	r3, r2
 8015fca:	00db      	lsls	r3, r3, #3
 8015fcc:	4a08      	ldr	r2, [pc, #32]	; (8015ff0 <etharp_tmr+0x14c>)
 8015fce:	4413      	add	r3, r2
 8015fd0:	3304      	adds	r3, #4
 8015fd2:	4619      	mov	r1, r3
 8015fd4:	f000 fe72 	bl	8016cbc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	3301      	adds	r3, #1
 8015fdc:	607b      	str	r3, [r7, #4]
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	2b09      	cmp	r3, #9
 8015fe2:	f77f af65 	ble.w	8015eb0 <etharp_tmr+0xc>
      }
    }
  }
}
 8015fe6:	bf00      	nop
 8015fe8:	bf00      	nop
 8015fea:	3708      	adds	r7, #8
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bd80      	pop	{r7, pc}
 8015ff0:	20010e94 	.word	0x20010e94

08015ff4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b08a      	sub	sp, #40	; 0x28
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	60f8      	str	r0, [r7, #12]
 8015ffc:	460b      	mov	r3, r1
 8015ffe:	607a      	str	r2, [r7, #4]
 8016000:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016002:	230a      	movs	r3, #10
 8016004:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016006:	230a      	movs	r3, #10
 8016008:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801600a:	230a      	movs	r3, #10
 801600c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801600e:	2300      	movs	r3, #0
 8016010:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016012:	230a      	movs	r3, #10
 8016014:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016016:	2300      	movs	r3, #0
 8016018:	83bb      	strh	r3, [r7, #28]
 801601a:	2300      	movs	r3, #0
 801601c:	837b      	strh	r3, [r7, #26]
 801601e:	2300      	movs	r3, #0
 8016020:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016022:	2300      	movs	r3, #0
 8016024:	843b      	strh	r3, [r7, #32]
 8016026:	e0ae      	b.n	8016186 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016028:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801602c:	49a6      	ldr	r1, [pc, #664]	; (80162c8 <etharp_find_entry+0x2d4>)
 801602e:	4613      	mov	r3, r2
 8016030:	005b      	lsls	r3, r3, #1
 8016032:	4413      	add	r3, r2
 8016034:	00db      	lsls	r3, r3, #3
 8016036:	440b      	add	r3, r1
 8016038:	3314      	adds	r3, #20
 801603a:	781b      	ldrb	r3, [r3, #0]
 801603c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801603e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016042:	2b0a      	cmp	r3, #10
 8016044:	d105      	bne.n	8016052 <etharp_find_entry+0x5e>
 8016046:	7dfb      	ldrb	r3, [r7, #23]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d102      	bne.n	8016052 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801604c:	8c3b      	ldrh	r3, [r7, #32]
 801604e:	847b      	strh	r3, [r7, #34]	; 0x22
 8016050:	e095      	b.n	801617e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016052:	7dfb      	ldrb	r3, [r7, #23]
 8016054:	2b00      	cmp	r3, #0
 8016056:	f000 8092 	beq.w	801617e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801605a:	7dfb      	ldrb	r3, [r7, #23]
 801605c:	2b01      	cmp	r3, #1
 801605e:	d009      	beq.n	8016074 <etharp_find_entry+0x80>
 8016060:	7dfb      	ldrb	r3, [r7, #23]
 8016062:	2b01      	cmp	r3, #1
 8016064:	d806      	bhi.n	8016074 <etharp_find_entry+0x80>
 8016066:	4b99      	ldr	r3, [pc, #612]	; (80162cc <etharp_find_entry+0x2d8>)
 8016068:	f240 1223 	movw	r2, #291	; 0x123
 801606c:	4998      	ldr	r1, [pc, #608]	; (80162d0 <etharp_find_entry+0x2dc>)
 801606e:	4899      	ldr	r0, [pc, #612]	; (80162d4 <etharp_find_entry+0x2e0>)
 8016070:	f002 fc9e 	bl	80189b0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d020      	beq.n	80160bc <etharp_find_entry+0xc8>
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	6819      	ldr	r1, [r3, #0]
 801607e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016082:	4891      	ldr	r0, [pc, #580]	; (80162c8 <etharp_find_entry+0x2d4>)
 8016084:	4613      	mov	r3, r2
 8016086:	005b      	lsls	r3, r3, #1
 8016088:	4413      	add	r3, r2
 801608a:	00db      	lsls	r3, r3, #3
 801608c:	4403      	add	r3, r0
 801608e:	3304      	adds	r3, #4
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	4299      	cmp	r1, r3
 8016094:	d112      	bne.n	80160bc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d00c      	beq.n	80160b6 <etharp_find_entry+0xc2>
 801609c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80160a0:	4989      	ldr	r1, [pc, #548]	; (80162c8 <etharp_find_entry+0x2d4>)
 80160a2:	4613      	mov	r3, r2
 80160a4:	005b      	lsls	r3, r3, #1
 80160a6:	4413      	add	r3, r2
 80160a8:	00db      	lsls	r3, r3, #3
 80160aa:	440b      	add	r3, r1
 80160ac:	3308      	adds	r3, #8
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	687a      	ldr	r2, [r7, #4]
 80160b2:	429a      	cmp	r2, r3
 80160b4:	d102      	bne.n	80160bc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80160b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80160ba:	e100      	b.n	80162be <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80160bc:	7dfb      	ldrb	r3, [r7, #23]
 80160be:	2b01      	cmp	r3, #1
 80160c0:	d140      	bne.n	8016144 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80160c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80160c6:	4980      	ldr	r1, [pc, #512]	; (80162c8 <etharp_find_entry+0x2d4>)
 80160c8:	4613      	mov	r3, r2
 80160ca:	005b      	lsls	r3, r3, #1
 80160cc:	4413      	add	r3, r2
 80160ce:	00db      	lsls	r3, r3, #3
 80160d0:	440b      	add	r3, r1
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d01a      	beq.n	801610e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80160d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80160dc:	497a      	ldr	r1, [pc, #488]	; (80162c8 <etharp_find_entry+0x2d4>)
 80160de:	4613      	mov	r3, r2
 80160e0:	005b      	lsls	r3, r3, #1
 80160e2:	4413      	add	r3, r2
 80160e4:	00db      	lsls	r3, r3, #3
 80160e6:	440b      	add	r3, r1
 80160e8:	3312      	adds	r3, #18
 80160ea:	881b      	ldrh	r3, [r3, #0]
 80160ec:	8bba      	ldrh	r2, [r7, #28]
 80160ee:	429a      	cmp	r2, r3
 80160f0:	d845      	bhi.n	801617e <etharp_find_entry+0x18a>
            old_queue = i;
 80160f2:	8c3b      	ldrh	r3, [r7, #32]
 80160f4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80160f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80160fa:	4973      	ldr	r1, [pc, #460]	; (80162c8 <etharp_find_entry+0x2d4>)
 80160fc:	4613      	mov	r3, r2
 80160fe:	005b      	lsls	r3, r3, #1
 8016100:	4413      	add	r3, r2
 8016102:	00db      	lsls	r3, r3, #3
 8016104:	440b      	add	r3, r1
 8016106:	3312      	adds	r3, #18
 8016108:	881b      	ldrh	r3, [r3, #0]
 801610a:	83bb      	strh	r3, [r7, #28]
 801610c:	e037      	b.n	801617e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801610e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016112:	496d      	ldr	r1, [pc, #436]	; (80162c8 <etharp_find_entry+0x2d4>)
 8016114:	4613      	mov	r3, r2
 8016116:	005b      	lsls	r3, r3, #1
 8016118:	4413      	add	r3, r2
 801611a:	00db      	lsls	r3, r3, #3
 801611c:	440b      	add	r3, r1
 801611e:	3312      	adds	r3, #18
 8016120:	881b      	ldrh	r3, [r3, #0]
 8016122:	8b7a      	ldrh	r2, [r7, #26]
 8016124:	429a      	cmp	r2, r3
 8016126:	d82a      	bhi.n	801617e <etharp_find_entry+0x18a>
            old_pending = i;
 8016128:	8c3b      	ldrh	r3, [r7, #32]
 801612a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801612c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016130:	4965      	ldr	r1, [pc, #404]	; (80162c8 <etharp_find_entry+0x2d4>)
 8016132:	4613      	mov	r3, r2
 8016134:	005b      	lsls	r3, r3, #1
 8016136:	4413      	add	r3, r2
 8016138:	00db      	lsls	r3, r3, #3
 801613a:	440b      	add	r3, r1
 801613c:	3312      	adds	r3, #18
 801613e:	881b      	ldrh	r3, [r3, #0]
 8016140:	837b      	strh	r3, [r7, #26]
 8016142:	e01c      	b.n	801617e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016144:	7dfb      	ldrb	r3, [r7, #23]
 8016146:	2b01      	cmp	r3, #1
 8016148:	d919      	bls.n	801617e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801614a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801614e:	495e      	ldr	r1, [pc, #376]	; (80162c8 <etharp_find_entry+0x2d4>)
 8016150:	4613      	mov	r3, r2
 8016152:	005b      	lsls	r3, r3, #1
 8016154:	4413      	add	r3, r2
 8016156:	00db      	lsls	r3, r3, #3
 8016158:	440b      	add	r3, r1
 801615a:	3312      	adds	r3, #18
 801615c:	881b      	ldrh	r3, [r3, #0]
 801615e:	8b3a      	ldrh	r2, [r7, #24]
 8016160:	429a      	cmp	r2, r3
 8016162:	d80c      	bhi.n	801617e <etharp_find_entry+0x18a>
            old_stable = i;
 8016164:	8c3b      	ldrh	r3, [r7, #32]
 8016166:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016168:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801616c:	4956      	ldr	r1, [pc, #344]	; (80162c8 <etharp_find_entry+0x2d4>)
 801616e:	4613      	mov	r3, r2
 8016170:	005b      	lsls	r3, r3, #1
 8016172:	4413      	add	r3, r2
 8016174:	00db      	lsls	r3, r3, #3
 8016176:	440b      	add	r3, r1
 8016178:	3312      	adds	r3, #18
 801617a:	881b      	ldrh	r3, [r3, #0]
 801617c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801617e:	8c3b      	ldrh	r3, [r7, #32]
 8016180:	3301      	adds	r3, #1
 8016182:	b29b      	uxth	r3, r3
 8016184:	843b      	strh	r3, [r7, #32]
 8016186:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801618a:	2b09      	cmp	r3, #9
 801618c:	f77f af4c 	ble.w	8016028 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016190:	7afb      	ldrb	r3, [r7, #11]
 8016192:	f003 0302 	and.w	r3, r3, #2
 8016196:	2b00      	cmp	r3, #0
 8016198:	d108      	bne.n	80161ac <etharp_find_entry+0x1b8>
 801619a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801619e:	2b0a      	cmp	r3, #10
 80161a0:	d107      	bne.n	80161b2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80161a2:	7afb      	ldrb	r3, [r7, #11]
 80161a4:	f003 0301 	and.w	r3, r3, #1
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d102      	bne.n	80161b2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80161ac:	f04f 33ff 	mov.w	r3, #4294967295
 80161b0:	e085      	b.n	80162be <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80161b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80161b6:	2b09      	cmp	r3, #9
 80161b8:	dc02      	bgt.n	80161c0 <etharp_find_entry+0x1cc>
    i = empty;
 80161ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80161bc:	843b      	strh	r3, [r7, #32]
 80161be:	e039      	b.n	8016234 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80161c0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80161c4:	2b09      	cmp	r3, #9
 80161c6:	dc14      	bgt.n	80161f2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80161c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161ca:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80161cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80161d0:	493d      	ldr	r1, [pc, #244]	; (80162c8 <etharp_find_entry+0x2d4>)
 80161d2:	4613      	mov	r3, r2
 80161d4:	005b      	lsls	r3, r3, #1
 80161d6:	4413      	add	r3, r2
 80161d8:	00db      	lsls	r3, r3, #3
 80161da:	440b      	add	r3, r1
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d018      	beq.n	8016214 <etharp_find_entry+0x220>
 80161e2:	4b3a      	ldr	r3, [pc, #232]	; (80162cc <etharp_find_entry+0x2d8>)
 80161e4:	f240 126d 	movw	r2, #365	; 0x16d
 80161e8:	493b      	ldr	r1, [pc, #236]	; (80162d8 <etharp_find_entry+0x2e4>)
 80161ea:	483a      	ldr	r0, [pc, #232]	; (80162d4 <etharp_find_entry+0x2e0>)
 80161ec:	f002 fbe0 	bl	80189b0 <iprintf>
 80161f0:	e010      	b.n	8016214 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80161f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80161f6:	2b09      	cmp	r3, #9
 80161f8:	dc02      	bgt.n	8016200 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80161fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80161fc:	843b      	strh	r3, [r7, #32]
 80161fe:	e009      	b.n	8016214 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016200:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016204:	2b09      	cmp	r3, #9
 8016206:	dc02      	bgt.n	801620e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016208:	8bfb      	ldrh	r3, [r7, #30]
 801620a:	843b      	strh	r3, [r7, #32]
 801620c:	e002      	b.n	8016214 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801620e:	f04f 33ff 	mov.w	r3, #4294967295
 8016212:	e054      	b.n	80162be <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016214:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016218:	2b09      	cmp	r3, #9
 801621a:	dd06      	ble.n	801622a <etharp_find_entry+0x236>
 801621c:	4b2b      	ldr	r3, [pc, #172]	; (80162cc <etharp_find_entry+0x2d8>)
 801621e:	f240 127f 	movw	r2, #383	; 0x17f
 8016222:	492e      	ldr	r1, [pc, #184]	; (80162dc <etharp_find_entry+0x2e8>)
 8016224:	482b      	ldr	r0, [pc, #172]	; (80162d4 <etharp_find_entry+0x2e0>)
 8016226:	f002 fbc3 	bl	80189b0 <iprintf>
    etharp_free_entry(i);
 801622a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801622e:	4618      	mov	r0, r3
 8016230:	f7ff fe06 	bl	8015e40 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016234:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016238:	2b09      	cmp	r3, #9
 801623a:	dd06      	ble.n	801624a <etharp_find_entry+0x256>
 801623c:	4b23      	ldr	r3, [pc, #140]	; (80162cc <etharp_find_entry+0x2d8>)
 801623e:	f240 1283 	movw	r2, #387	; 0x183
 8016242:	4926      	ldr	r1, [pc, #152]	; (80162dc <etharp_find_entry+0x2e8>)
 8016244:	4823      	ldr	r0, [pc, #140]	; (80162d4 <etharp_find_entry+0x2e0>)
 8016246:	f002 fbb3 	bl	80189b0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801624a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801624e:	491e      	ldr	r1, [pc, #120]	; (80162c8 <etharp_find_entry+0x2d4>)
 8016250:	4613      	mov	r3, r2
 8016252:	005b      	lsls	r3, r3, #1
 8016254:	4413      	add	r3, r2
 8016256:	00db      	lsls	r3, r3, #3
 8016258:	440b      	add	r3, r1
 801625a:	3314      	adds	r3, #20
 801625c:	781b      	ldrb	r3, [r3, #0]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d006      	beq.n	8016270 <etharp_find_entry+0x27c>
 8016262:	4b1a      	ldr	r3, [pc, #104]	; (80162cc <etharp_find_entry+0x2d8>)
 8016264:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016268:	491d      	ldr	r1, [pc, #116]	; (80162e0 <etharp_find_entry+0x2ec>)
 801626a:	481a      	ldr	r0, [pc, #104]	; (80162d4 <etharp_find_entry+0x2e0>)
 801626c:	f002 fba0 	bl	80189b0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d00b      	beq.n	801628e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016276:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	6819      	ldr	r1, [r3, #0]
 801627e:	4812      	ldr	r0, [pc, #72]	; (80162c8 <etharp_find_entry+0x2d4>)
 8016280:	4613      	mov	r3, r2
 8016282:	005b      	lsls	r3, r3, #1
 8016284:	4413      	add	r3, r2
 8016286:	00db      	lsls	r3, r3, #3
 8016288:	4403      	add	r3, r0
 801628a:	3304      	adds	r3, #4
 801628c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801628e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016292:	490d      	ldr	r1, [pc, #52]	; (80162c8 <etharp_find_entry+0x2d4>)
 8016294:	4613      	mov	r3, r2
 8016296:	005b      	lsls	r3, r3, #1
 8016298:	4413      	add	r3, r2
 801629a:	00db      	lsls	r3, r3, #3
 801629c:	440b      	add	r3, r1
 801629e:	3312      	adds	r3, #18
 80162a0:	2200      	movs	r2, #0
 80162a2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80162a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162a8:	4907      	ldr	r1, [pc, #28]	; (80162c8 <etharp_find_entry+0x2d4>)
 80162aa:	4613      	mov	r3, r2
 80162ac:	005b      	lsls	r3, r3, #1
 80162ae:	4413      	add	r3, r2
 80162b0:	00db      	lsls	r3, r3, #3
 80162b2:	440b      	add	r3, r1
 80162b4:	3308      	adds	r3, #8
 80162b6:	687a      	ldr	r2, [r7, #4]
 80162b8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80162ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80162be:	4618      	mov	r0, r3
 80162c0:	3728      	adds	r7, #40	; 0x28
 80162c2:	46bd      	mov	sp, r7
 80162c4:	bd80      	pop	{r7, pc}
 80162c6:	bf00      	nop
 80162c8:	20010e94 	.word	0x20010e94
 80162cc:	0801cd88 	.word	0x0801cd88
 80162d0:	0801cdc0 	.word	0x0801cdc0
 80162d4:	0801ce00 	.word	0x0801ce00
 80162d8:	0801ce28 	.word	0x0801ce28
 80162dc:	0801ce40 	.word	0x0801ce40
 80162e0:	0801ce54 	.word	0x0801ce54

080162e4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80162e4:	b580      	push	{r7, lr}
 80162e6:	b088      	sub	sp, #32
 80162e8:	af02      	add	r7, sp, #8
 80162ea:	60f8      	str	r0, [r7, #12]
 80162ec:	60b9      	str	r1, [r7, #8]
 80162ee:	607a      	str	r2, [r7, #4]
 80162f0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80162f8:	2b06      	cmp	r3, #6
 80162fa:	d006      	beq.n	801630a <etharp_update_arp_entry+0x26>
 80162fc:	4b48      	ldr	r3, [pc, #288]	; (8016420 <etharp_update_arp_entry+0x13c>)
 80162fe:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016302:	4948      	ldr	r1, [pc, #288]	; (8016424 <etharp_update_arp_entry+0x140>)
 8016304:	4848      	ldr	r0, [pc, #288]	; (8016428 <etharp_update_arp_entry+0x144>)
 8016306:	f002 fb53 	bl	80189b0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801630a:	68bb      	ldr	r3, [r7, #8]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d012      	beq.n	8016336 <etharp_update_arp_entry+0x52>
 8016310:	68bb      	ldr	r3, [r7, #8]
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d00e      	beq.n	8016336 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016318:	68bb      	ldr	r3, [r7, #8]
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	68f9      	ldr	r1, [r7, #12]
 801631e:	4618      	mov	r0, r3
 8016320:	f001 f920 	bl	8017564 <ip4_addr_isbroadcast_u32>
 8016324:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016326:	2b00      	cmp	r3, #0
 8016328:	d105      	bne.n	8016336 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801632a:	68bb      	ldr	r3, [r7, #8]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016332:	2be0      	cmp	r3, #224	; 0xe0
 8016334:	d102      	bne.n	801633c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016336:	f06f 030f 	mvn.w	r3, #15
 801633a:	e06c      	b.n	8016416 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801633c:	78fb      	ldrb	r3, [r7, #3]
 801633e:	68fa      	ldr	r2, [r7, #12]
 8016340:	4619      	mov	r1, r3
 8016342:	68b8      	ldr	r0, [r7, #8]
 8016344:	f7ff fe56 	bl	8015ff4 <etharp_find_entry>
 8016348:	4603      	mov	r3, r0
 801634a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801634c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016350:	2b00      	cmp	r3, #0
 8016352:	da02      	bge.n	801635a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016354:	8afb      	ldrh	r3, [r7, #22]
 8016356:	b25b      	sxtb	r3, r3
 8016358:	e05d      	b.n	8016416 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801635a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801635e:	4933      	ldr	r1, [pc, #204]	; (801642c <etharp_update_arp_entry+0x148>)
 8016360:	4613      	mov	r3, r2
 8016362:	005b      	lsls	r3, r3, #1
 8016364:	4413      	add	r3, r2
 8016366:	00db      	lsls	r3, r3, #3
 8016368:	440b      	add	r3, r1
 801636a:	3314      	adds	r3, #20
 801636c:	2202      	movs	r2, #2
 801636e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016370:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016374:	492d      	ldr	r1, [pc, #180]	; (801642c <etharp_update_arp_entry+0x148>)
 8016376:	4613      	mov	r3, r2
 8016378:	005b      	lsls	r3, r3, #1
 801637a:	4413      	add	r3, r2
 801637c:	00db      	lsls	r3, r3, #3
 801637e:	440b      	add	r3, r1
 8016380:	3308      	adds	r3, #8
 8016382:	68fa      	ldr	r2, [r7, #12]
 8016384:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016386:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801638a:	4613      	mov	r3, r2
 801638c:	005b      	lsls	r3, r3, #1
 801638e:	4413      	add	r3, r2
 8016390:	00db      	lsls	r3, r3, #3
 8016392:	3308      	adds	r3, #8
 8016394:	4a25      	ldr	r2, [pc, #148]	; (801642c <etharp_update_arp_entry+0x148>)
 8016396:	4413      	add	r3, r2
 8016398:	3304      	adds	r3, #4
 801639a:	2206      	movs	r2, #6
 801639c:	6879      	ldr	r1, [r7, #4]
 801639e:	4618      	mov	r0, r3
 80163a0:	f002 fc54 	bl	8018c4c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80163a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80163a8:	4920      	ldr	r1, [pc, #128]	; (801642c <etharp_update_arp_entry+0x148>)
 80163aa:	4613      	mov	r3, r2
 80163ac:	005b      	lsls	r3, r3, #1
 80163ae:	4413      	add	r3, r2
 80163b0:	00db      	lsls	r3, r3, #3
 80163b2:	440b      	add	r3, r1
 80163b4:	3312      	adds	r3, #18
 80163b6:	2200      	movs	r2, #0
 80163b8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80163ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80163be:	491b      	ldr	r1, [pc, #108]	; (801642c <etharp_update_arp_entry+0x148>)
 80163c0:	4613      	mov	r3, r2
 80163c2:	005b      	lsls	r3, r3, #1
 80163c4:	4413      	add	r3, r2
 80163c6:	00db      	lsls	r3, r3, #3
 80163c8:	440b      	add	r3, r1
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d021      	beq.n	8016414 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80163d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80163d4:	4915      	ldr	r1, [pc, #84]	; (801642c <etharp_update_arp_entry+0x148>)
 80163d6:	4613      	mov	r3, r2
 80163d8:	005b      	lsls	r3, r3, #1
 80163da:	4413      	add	r3, r2
 80163dc:	00db      	lsls	r3, r3, #3
 80163de:	440b      	add	r3, r1
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80163e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80163e8:	4910      	ldr	r1, [pc, #64]	; (801642c <etharp_update_arp_entry+0x148>)
 80163ea:	4613      	mov	r3, r2
 80163ec:	005b      	lsls	r3, r3, #1
 80163ee:	4413      	add	r3, r2
 80163f0:	00db      	lsls	r3, r3, #3
 80163f2:	440b      	add	r3, r1
 80163f4:	2200      	movs	r2, #0
 80163f6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80163fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016402:	9300      	str	r3, [sp, #0]
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	6939      	ldr	r1, [r7, #16]
 8016408:	68f8      	ldr	r0, [r7, #12]
 801640a:	f001 ffb9 	bl	8018380 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801640e:	6938      	ldr	r0, [r7, #16]
 8016410:	f7f6 fce2 	bl	800cdd8 <pbuf_free>
  }
  return ERR_OK;
 8016414:	2300      	movs	r3, #0
}
 8016416:	4618      	mov	r0, r3
 8016418:	3718      	adds	r7, #24
 801641a:	46bd      	mov	sp, r7
 801641c:	bd80      	pop	{r7, pc}
 801641e:	bf00      	nop
 8016420:	0801cd88 	.word	0x0801cd88
 8016424:	0801ce80 	.word	0x0801ce80
 8016428:	0801ce00 	.word	0x0801ce00
 801642c:	20010e94 	.word	0x20010e94

08016430 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016430:	b580      	push	{r7, lr}
 8016432:	b084      	sub	sp, #16
 8016434:	af00      	add	r7, sp, #0
 8016436:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016438:	2300      	movs	r3, #0
 801643a:	60fb      	str	r3, [r7, #12]
 801643c:	e01e      	b.n	801647c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801643e:	4913      	ldr	r1, [pc, #76]	; (801648c <etharp_cleanup_netif+0x5c>)
 8016440:	68fa      	ldr	r2, [r7, #12]
 8016442:	4613      	mov	r3, r2
 8016444:	005b      	lsls	r3, r3, #1
 8016446:	4413      	add	r3, r2
 8016448:	00db      	lsls	r3, r3, #3
 801644a:	440b      	add	r3, r1
 801644c:	3314      	adds	r3, #20
 801644e:	781b      	ldrb	r3, [r3, #0]
 8016450:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016452:	7afb      	ldrb	r3, [r7, #11]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d00e      	beq.n	8016476 <etharp_cleanup_netif+0x46>
 8016458:	490c      	ldr	r1, [pc, #48]	; (801648c <etharp_cleanup_netif+0x5c>)
 801645a:	68fa      	ldr	r2, [r7, #12]
 801645c:	4613      	mov	r3, r2
 801645e:	005b      	lsls	r3, r3, #1
 8016460:	4413      	add	r3, r2
 8016462:	00db      	lsls	r3, r3, #3
 8016464:	440b      	add	r3, r1
 8016466:	3308      	adds	r3, #8
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	687a      	ldr	r2, [r7, #4]
 801646c:	429a      	cmp	r2, r3
 801646e:	d102      	bne.n	8016476 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016470:	68f8      	ldr	r0, [r7, #12]
 8016472:	f7ff fce5 	bl	8015e40 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	3301      	adds	r3, #1
 801647a:	60fb      	str	r3, [r7, #12]
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	2b09      	cmp	r3, #9
 8016480:	dddd      	ble.n	801643e <etharp_cleanup_netif+0xe>
    }
  }
}
 8016482:	bf00      	nop
 8016484:	bf00      	nop
 8016486:	3710      	adds	r7, #16
 8016488:	46bd      	mov	sp, r7
 801648a:	bd80      	pop	{r7, pc}
 801648c:	20010e94 	.word	0x20010e94

08016490 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016490:	b5b0      	push	{r4, r5, r7, lr}
 8016492:	b08a      	sub	sp, #40	; 0x28
 8016494:	af04      	add	r7, sp, #16
 8016496:	6078      	str	r0, [r7, #4]
 8016498:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801649a:	683b      	ldr	r3, [r7, #0]
 801649c:	2b00      	cmp	r3, #0
 801649e:	d107      	bne.n	80164b0 <etharp_input+0x20>
 80164a0:	4b3f      	ldr	r3, [pc, #252]	; (80165a0 <etharp_input+0x110>)
 80164a2:	f240 228a 	movw	r2, #650	; 0x28a
 80164a6:	493f      	ldr	r1, [pc, #252]	; (80165a4 <etharp_input+0x114>)
 80164a8:	483f      	ldr	r0, [pc, #252]	; (80165a8 <etharp_input+0x118>)
 80164aa:	f002 fa81 	bl	80189b0 <iprintf>
 80164ae:	e074      	b.n	801659a <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	685b      	ldr	r3, [r3, #4]
 80164b4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80164b6:	693b      	ldr	r3, [r7, #16]
 80164b8:	881b      	ldrh	r3, [r3, #0]
 80164ba:	b29b      	uxth	r3, r3
 80164bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80164c0:	d10c      	bne.n	80164dc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80164c2:	693b      	ldr	r3, [r7, #16]
 80164c4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80164c6:	2b06      	cmp	r3, #6
 80164c8:	d108      	bne.n	80164dc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80164ca:	693b      	ldr	r3, [r7, #16]
 80164cc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80164ce:	2b04      	cmp	r3, #4
 80164d0:	d104      	bne.n	80164dc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80164d2:	693b      	ldr	r3, [r7, #16]
 80164d4:	885b      	ldrh	r3, [r3, #2]
 80164d6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80164d8:	2b08      	cmp	r3, #8
 80164da:	d003      	beq.n	80164e4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80164dc:	6878      	ldr	r0, [r7, #4]
 80164de:	f7f6 fc7b 	bl	800cdd8 <pbuf_free>
    return;
 80164e2:	e05a      	b.n	801659a <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80164e4:	693b      	ldr	r3, [r7, #16]
 80164e6:	330e      	adds	r3, #14
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80164ec:	693b      	ldr	r3, [r7, #16]
 80164ee:	3318      	adds	r3, #24
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80164f4:	683b      	ldr	r3, [r7, #0]
 80164f6:	3304      	adds	r3, #4
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d102      	bne.n	8016504 <etharp_input+0x74>
    for_us = 0;
 80164fe:	2300      	movs	r3, #0
 8016500:	75fb      	strb	r3, [r7, #23]
 8016502:	e009      	b.n	8016518 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016504:	68ba      	ldr	r2, [r7, #8]
 8016506:	683b      	ldr	r3, [r7, #0]
 8016508:	3304      	adds	r3, #4
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	429a      	cmp	r2, r3
 801650e:	bf0c      	ite	eq
 8016510:	2301      	moveq	r3, #1
 8016512:	2300      	movne	r3, #0
 8016514:	b2db      	uxtb	r3, r3
 8016516:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016518:	693b      	ldr	r3, [r7, #16]
 801651a:	f103 0208 	add.w	r2, r3, #8
 801651e:	7dfb      	ldrb	r3, [r7, #23]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d001      	beq.n	8016528 <etharp_input+0x98>
 8016524:	2301      	movs	r3, #1
 8016526:	e000      	b.n	801652a <etharp_input+0x9a>
 8016528:	2302      	movs	r3, #2
 801652a:	f107 010c 	add.w	r1, r7, #12
 801652e:	6838      	ldr	r0, [r7, #0]
 8016530:	f7ff fed8 	bl	80162e4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016534:	693b      	ldr	r3, [r7, #16]
 8016536:	88db      	ldrh	r3, [r3, #6]
 8016538:	b29b      	uxth	r3, r3
 801653a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801653e:	d003      	beq.n	8016548 <etharp_input+0xb8>
 8016540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016544:	d01e      	beq.n	8016584 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016546:	e025      	b.n	8016594 <etharp_input+0x104>
      if (for_us) {
 8016548:	7dfb      	ldrb	r3, [r7, #23]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d021      	beq.n	8016592 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801654e:	683b      	ldr	r3, [r7, #0]
 8016550:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016554:	693b      	ldr	r3, [r7, #16]
 8016556:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801655a:	683b      	ldr	r3, [r7, #0]
 801655c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8016560:	683b      	ldr	r3, [r7, #0]
 8016562:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016564:	693a      	ldr	r2, [r7, #16]
 8016566:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016568:	2102      	movs	r1, #2
 801656a:	9103      	str	r1, [sp, #12]
 801656c:	f107 010c 	add.w	r1, r7, #12
 8016570:	9102      	str	r1, [sp, #8]
 8016572:	9201      	str	r2, [sp, #4]
 8016574:	9300      	str	r3, [sp, #0]
 8016576:	462b      	mov	r3, r5
 8016578:	4622      	mov	r2, r4
 801657a:	4601      	mov	r1, r0
 801657c:	6838      	ldr	r0, [r7, #0]
 801657e:	f000 faef 	bl	8016b60 <etharp_raw>
      break;
 8016582:	e006      	b.n	8016592 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016584:	f107 030c 	add.w	r3, r7, #12
 8016588:	4619      	mov	r1, r3
 801658a:	6838      	ldr	r0, [r7, #0]
 801658c:	f7fe f9fc 	bl	8014988 <dhcp_arp_reply>
      break;
 8016590:	e000      	b.n	8016594 <etharp_input+0x104>
      break;
 8016592:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016594:	6878      	ldr	r0, [r7, #4]
 8016596:	f7f6 fc1f 	bl	800cdd8 <pbuf_free>
}
 801659a:	3718      	adds	r7, #24
 801659c:	46bd      	mov	sp, r7
 801659e:	bdb0      	pop	{r4, r5, r7, pc}
 80165a0:	0801cd88 	.word	0x0801cd88
 80165a4:	0801ced8 	.word	0x0801ced8
 80165a8:	0801ce00 	.word	0x0801ce00

080165ac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	b086      	sub	sp, #24
 80165b0:	af02      	add	r7, sp, #8
 80165b2:	60f8      	str	r0, [r7, #12]
 80165b4:	60b9      	str	r1, [r7, #8]
 80165b6:	4613      	mov	r3, r2
 80165b8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80165ba:	79fa      	ldrb	r2, [r7, #7]
 80165bc:	4944      	ldr	r1, [pc, #272]	; (80166d0 <etharp_output_to_arp_index+0x124>)
 80165be:	4613      	mov	r3, r2
 80165c0:	005b      	lsls	r3, r3, #1
 80165c2:	4413      	add	r3, r2
 80165c4:	00db      	lsls	r3, r3, #3
 80165c6:	440b      	add	r3, r1
 80165c8:	3314      	adds	r3, #20
 80165ca:	781b      	ldrb	r3, [r3, #0]
 80165cc:	2b01      	cmp	r3, #1
 80165ce:	d806      	bhi.n	80165de <etharp_output_to_arp_index+0x32>
 80165d0:	4b40      	ldr	r3, [pc, #256]	; (80166d4 <etharp_output_to_arp_index+0x128>)
 80165d2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80165d6:	4940      	ldr	r1, [pc, #256]	; (80166d8 <etharp_output_to_arp_index+0x12c>)
 80165d8:	4840      	ldr	r0, [pc, #256]	; (80166dc <etharp_output_to_arp_index+0x130>)
 80165da:	f002 f9e9 	bl	80189b0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80165de:	79fa      	ldrb	r2, [r7, #7]
 80165e0:	493b      	ldr	r1, [pc, #236]	; (80166d0 <etharp_output_to_arp_index+0x124>)
 80165e2:	4613      	mov	r3, r2
 80165e4:	005b      	lsls	r3, r3, #1
 80165e6:	4413      	add	r3, r2
 80165e8:	00db      	lsls	r3, r3, #3
 80165ea:	440b      	add	r3, r1
 80165ec:	3314      	adds	r3, #20
 80165ee:	781b      	ldrb	r3, [r3, #0]
 80165f0:	2b02      	cmp	r3, #2
 80165f2:	d153      	bne.n	801669c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80165f4:	79fa      	ldrb	r2, [r7, #7]
 80165f6:	4936      	ldr	r1, [pc, #216]	; (80166d0 <etharp_output_to_arp_index+0x124>)
 80165f8:	4613      	mov	r3, r2
 80165fa:	005b      	lsls	r3, r3, #1
 80165fc:	4413      	add	r3, r2
 80165fe:	00db      	lsls	r3, r3, #3
 8016600:	440b      	add	r3, r1
 8016602:	3312      	adds	r3, #18
 8016604:	881b      	ldrh	r3, [r3, #0]
 8016606:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801660a:	d919      	bls.n	8016640 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801660c:	79fa      	ldrb	r2, [r7, #7]
 801660e:	4613      	mov	r3, r2
 8016610:	005b      	lsls	r3, r3, #1
 8016612:	4413      	add	r3, r2
 8016614:	00db      	lsls	r3, r3, #3
 8016616:	4a2e      	ldr	r2, [pc, #184]	; (80166d0 <etharp_output_to_arp_index+0x124>)
 8016618:	4413      	add	r3, r2
 801661a:	3304      	adds	r3, #4
 801661c:	4619      	mov	r1, r3
 801661e:	68f8      	ldr	r0, [r7, #12]
 8016620:	f000 fb4c 	bl	8016cbc <etharp_request>
 8016624:	4603      	mov	r3, r0
 8016626:	2b00      	cmp	r3, #0
 8016628:	d138      	bne.n	801669c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801662a:	79fa      	ldrb	r2, [r7, #7]
 801662c:	4928      	ldr	r1, [pc, #160]	; (80166d0 <etharp_output_to_arp_index+0x124>)
 801662e:	4613      	mov	r3, r2
 8016630:	005b      	lsls	r3, r3, #1
 8016632:	4413      	add	r3, r2
 8016634:	00db      	lsls	r3, r3, #3
 8016636:	440b      	add	r3, r1
 8016638:	3314      	adds	r3, #20
 801663a:	2203      	movs	r2, #3
 801663c:	701a      	strb	r2, [r3, #0]
 801663e:	e02d      	b.n	801669c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016640:	79fa      	ldrb	r2, [r7, #7]
 8016642:	4923      	ldr	r1, [pc, #140]	; (80166d0 <etharp_output_to_arp_index+0x124>)
 8016644:	4613      	mov	r3, r2
 8016646:	005b      	lsls	r3, r3, #1
 8016648:	4413      	add	r3, r2
 801664a:	00db      	lsls	r3, r3, #3
 801664c:	440b      	add	r3, r1
 801664e:	3312      	adds	r3, #18
 8016650:	881b      	ldrh	r3, [r3, #0]
 8016652:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016656:	d321      	bcc.n	801669c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016658:	79fa      	ldrb	r2, [r7, #7]
 801665a:	4613      	mov	r3, r2
 801665c:	005b      	lsls	r3, r3, #1
 801665e:	4413      	add	r3, r2
 8016660:	00db      	lsls	r3, r3, #3
 8016662:	4a1b      	ldr	r2, [pc, #108]	; (80166d0 <etharp_output_to_arp_index+0x124>)
 8016664:	4413      	add	r3, r2
 8016666:	1d19      	adds	r1, r3, #4
 8016668:	79fa      	ldrb	r2, [r7, #7]
 801666a:	4613      	mov	r3, r2
 801666c:	005b      	lsls	r3, r3, #1
 801666e:	4413      	add	r3, r2
 8016670:	00db      	lsls	r3, r3, #3
 8016672:	3308      	adds	r3, #8
 8016674:	4a16      	ldr	r2, [pc, #88]	; (80166d0 <etharp_output_to_arp_index+0x124>)
 8016676:	4413      	add	r3, r2
 8016678:	3304      	adds	r3, #4
 801667a:	461a      	mov	r2, r3
 801667c:	68f8      	ldr	r0, [r7, #12]
 801667e:	f000 fafb 	bl	8016c78 <etharp_request_dst>
 8016682:	4603      	mov	r3, r0
 8016684:	2b00      	cmp	r3, #0
 8016686:	d109      	bne.n	801669c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016688:	79fa      	ldrb	r2, [r7, #7]
 801668a:	4911      	ldr	r1, [pc, #68]	; (80166d0 <etharp_output_to_arp_index+0x124>)
 801668c:	4613      	mov	r3, r2
 801668e:	005b      	lsls	r3, r3, #1
 8016690:	4413      	add	r3, r2
 8016692:	00db      	lsls	r3, r3, #3
 8016694:	440b      	add	r3, r1
 8016696:	3314      	adds	r3, #20
 8016698:	2203      	movs	r2, #3
 801669a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80166a2:	79fa      	ldrb	r2, [r7, #7]
 80166a4:	4613      	mov	r3, r2
 80166a6:	005b      	lsls	r3, r3, #1
 80166a8:	4413      	add	r3, r2
 80166aa:	00db      	lsls	r3, r3, #3
 80166ac:	3308      	adds	r3, #8
 80166ae:	4a08      	ldr	r2, [pc, #32]	; (80166d0 <etharp_output_to_arp_index+0x124>)
 80166b0:	4413      	add	r3, r2
 80166b2:	3304      	adds	r3, #4
 80166b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80166b8:	9200      	str	r2, [sp, #0]
 80166ba:	460a      	mov	r2, r1
 80166bc:	68b9      	ldr	r1, [r7, #8]
 80166be:	68f8      	ldr	r0, [r7, #12]
 80166c0:	f001 fe5e 	bl	8018380 <ethernet_output>
 80166c4:	4603      	mov	r3, r0
}
 80166c6:	4618      	mov	r0, r3
 80166c8:	3710      	adds	r7, #16
 80166ca:	46bd      	mov	sp, r7
 80166cc:	bd80      	pop	{r7, pc}
 80166ce:	bf00      	nop
 80166d0:	20010e94 	.word	0x20010e94
 80166d4:	0801cd88 	.word	0x0801cd88
 80166d8:	0801cef8 	.word	0x0801cef8
 80166dc:	0801ce00 	.word	0x0801ce00

080166e0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b08a      	sub	sp, #40	; 0x28
 80166e4:	af02      	add	r7, sp, #8
 80166e6:	60f8      	str	r0, [r7, #12]
 80166e8:	60b9      	str	r1, [r7, #8]
 80166ea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80166f0:	68fb      	ldr	r3, [r7, #12]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d106      	bne.n	8016704 <etharp_output+0x24>
 80166f6:	4b73      	ldr	r3, [pc, #460]	; (80168c4 <etharp_output+0x1e4>)
 80166f8:	f240 321e 	movw	r2, #798	; 0x31e
 80166fc:	4972      	ldr	r1, [pc, #456]	; (80168c8 <etharp_output+0x1e8>)
 80166fe:	4873      	ldr	r0, [pc, #460]	; (80168cc <etharp_output+0x1ec>)
 8016700:	f002 f956 	bl	80189b0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016704:	68bb      	ldr	r3, [r7, #8]
 8016706:	2b00      	cmp	r3, #0
 8016708:	d106      	bne.n	8016718 <etharp_output+0x38>
 801670a:	4b6e      	ldr	r3, [pc, #440]	; (80168c4 <etharp_output+0x1e4>)
 801670c:	f240 321f 	movw	r2, #799	; 0x31f
 8016710:	496f      	ldr	r1, [pc, #444]	; (80168d0 <etharp_output+0x1f0>)
 8016712:	486e      	ldr	r0, [pc, #440]	; (80168cc <etharp_output+0x1ec>)
 8016714:	f002 f94c 	bl	80189b0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d106      	bne.n	801672c <etharp_output+0x4c>
 801671e:	4b69      	ldr	r3, [pc, #420]	; (80168c4 <etharp_output+0x1e4>)
 8016720:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016724:	496b      	ldr	r1, [pc, #428]	; (80168d4 <etharp_output+0x1f4>)
 8016726:	4869      	ldr	r0, [pc, #420]	; (80168cc <etharp_output+0x1ec>)
 8016728:	f002 f942 	bl	80189b0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	68f9      	ldr	r1, [r7, #12]
 8016732:	4618      	mov	r0, r3
 8016734:	f000 ff16 	bl	8017564 <ip4_addr_isbroadcast_u32>
 8016738:	4603      	mov	r3, r0
 801673a:	2b00      	cmp	r3, #0
 801673c:	d002      	beq.n	8016744 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801673e:	4b66      	ldr	r3, [pc, #408]	; (80168d8 <etharp_output+0x1f8>)
 8016740:	61fb      	str	r3, [r7, #28]
 8016742:	e0af      	b.n	80168a4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801674c:	2be0      	cmp	r3, #224	; 0xe0
 801674e:	d118      	bne.n	8016782 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016750:	2301      	movs	r3, #1
 8016752:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016754:	2300      	movs	r3, #0
 8016756:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016758:	235e      	movs	r3, #94	; 0x5e
 801675a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	3301      	adds	r3, #1
 8016760:	781b      	ldrb	r3, [r3, #0]
 8016762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016766:	b2db      	uxtb	r3, r3
 8016768:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	3302      	adds	r3, #2
 801676e:	781b      	ldrb	r3, [r3, #0]
 8016770:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	3303      	adds	r3, #3
 8016776:	781b      	ldrb	r3, [r3, #0]
 8016778:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801677a:	f107 0310 	add.w	r3, r7, #16
 801677e:	61fb      	str	r3, [r7, #28]
 8016780:	e090      	b.n	80168a4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	681a      	ldr	r2, [r3, #0]
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	3304      	adds	r3, #4
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	405a      	eors	r2, r3
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	3308      	adds	r3, #8
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	4013      	ands	r3, r2
 8016796:	2b00      	cmp	r3, #0
 8016798:	d012      	beq.n	80167c0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80167a0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80167a4:	4293      	cmp	r3, r2
 80167a6:	d00b      	beq.n	80167c0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80167a8:	68fb      	ldr	r3, [r7, #12]
 80167aa:	330c      	adds	r3, #12
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d003      	beq.n	80167ba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	330c      	adds	r3, #12
 80167b6:	61bb      	str	r3, [r7, #24]
 80167b8:	e002      	b.n	80167c0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80167ba:	f06f 0303 	mvn.w	r3, #3
 80167be:	e07d      	b.n	80168bc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80167c0:	4b46      	ldr	r3, [pc, #280]	; (80168dc <etharp_output+0x1fc>)
 80167c2:	781b      	ldrb	r3, [r3, #0]
 80167c4:	4619      	mov	r1, r3
 80167c6:	4a46      	ldr	r2, [pc, #280]	; (80168e0 <etharp_output+0x200>)
 80167c8:	460b      	mov	r3, r1
 80167ca:	005b      	lsls	r3, r3, #1
 80167cc:	440b      	add	r3, r1
 80167ce:	00db      	lsls	r3, r3, #3
 80167d0:	4413      	add	r3, r2
 80167d2:	3314      	adds	r3, #20
 80167d4:	781b      	ldrb	r3, [r3, #0]
 80167d6:	2b01      	cmp	r3, #1
 80167d8:	d925      	bls.n	8016826 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80167da:	4b40      	ldr	r3, [pc, #256]	; (80168dc <etharp_output+0x1fc>)
 80167dc:	781b      	ldrb	r3, [r3, #0]
 80167de:	4619      	mov	r1, r3
 80167e0:	4a3f      	ldr	r2, [pc, #252]	; (80168e0 <etharp_output+0x200>)
 80167e2:	460b      	mov	r3, r1
 80167e4:	005b      	lsls	r3, r3, #1
 80167e6:	440b      	add	r3, r1
 80167e8:	00db      	lsls	r3, r3, #3
 80167ea:	4413      	add	r3, r2
 80167ec:	3308      	adds	r3, #8
 80167ee:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80167f0:	68fa      	ldr	r2, [r7, #12]
 80167f2:	429a      	cmp	r2, r3
 80167f4:	d117      	bne.n	8016826 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80167f6:	69bb      	ldr	r3, [r7, #24]
 80167f8:	681a      	ldr	r2, [r3, #0]
 80167fa:	4b38      	ldr	r3, [pc, #224]	; (80168dc <etharp_output+0x1fc>)
 80167fc:	781b      	ldrb	r3, [r3, #0]
 80167fe:	4618      	mov	r0, r3
 8016800:	4937      	ldr	r1, [pc, #220]	; (80168e0 <etharp_output+0x200>)
 8016802:	4603      	mov	r3, r0
 8016804:	005b      	lsls	r3, r3, #1
 8016806:	4403      	add	r3, r0
 8016808:	00db      	lsls	r3, r3, #3
 801680a:	440b      	add	r3, r1
 801680c:	3304      	adds	r3, #4
 801680e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016810:	429a      	cmp	r2, r3
 8016812:	d108      	bne.n	8016826 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016814:	4b31      	ldr	r3, [pc, #196]	; (80168dc <etharp_output+0x1fc>)
 8016816:	781b      	ldrb	r3, [r3, #0]
 8016818:	461a      	mov	r2, r3
 801681a:	68b9      	ldr	r1, [r7, #8]
 801681c:	68f8      	ldr	r0, [r7, #12]
 801681e:	f7ff fec5 	bl	80165ac <etharp_output_to_arp_index>
 8016822:	4603      	mov	r3, r0
 8016824:	e04a      	b.n	80168bc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016826:	2300      	movs	r3, #0
 8016828:	75fb      	strb	r3, [r7, #23]
 801682a:	e031      	b.n	8016890 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801682c:	7dfa      	ldrb	r2, [r7, #23]
 801682e:	492c      	ldr	r1, [pc, #176]	; (80168e0 <etharp_output+0x200>)
 8016830:	4613      	mov	r3, r2
 8016832:	005b      	lsls	r3, r3, #1
 8016834:	4413      	add	r3, r2
 8016836:	00db      	lsls	r3, r3, #3
 8016838:	440b      	add	r3, r1
 801683a:	3314      	adds	r3, #20
 801683c:	781b      	ldrb	r3, [r3, #0]
 801683e:	2b01      	cmp	r3, #1
 8016840:	d923      	bls.n	801688a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016842:	7dfa      	ldrb	r2, [r7, #23]
 8016844:	4926      	ldr	r1, [pc, #152]	; (80168e0 <etharp_output+0x200>)
 8016846:	4613      	mov	r3, r2
 8016848:	005b      	lsls	r3, r3, #1
 801684a:	4413      	add	r3, r2
 801684c:	00db      	lsls	r3, r3, #3
 801684e:	440b      	add	r3, r1
 8016850:	3308      	adds	r3, #8
 8016852:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016854:	68fa      	ldr	r2, [r7, #12]
 8016856:	429a      	cmp	r2, r3
 8016858:	d117      	bne.n	801688a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801685a:	69bb      	ldr	r3, [r7, #24]
 801685c:	6819      	ldr	r1, [r3, #0]
 801685e:	7dfa      	ldrb	r2, [r7, #23]
 8016860:	481f      	ldr	r0, [pc, #124]	; (80168e0 <etharp_output+0x200>)
 8016862:	4613      	mov	r3, r2
 8016864:	005b      	lsls	r3, r3, #1
 8016866:	4413      	add	r3, r2
 8016868:	00db      	lsls	r3, r3, #3
 801686a:	4403      	add	r3, r0
 801686c:	3304      	adds	r3, #4
 801686e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016870:	4299      	cmp	r1, r3
 8016872:	d10a      	bne.n	801688a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016874:	4a19      	ldr	r2, [pc, #100]	; (80168dc <etharp_output+0x1fc>)
 8016876:	7dfb      	ldrb	r3, [r7, #23]
 8016878:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801687a:	7dfb      	ldrb	r3, [r7, #23]
 801687c:	461a      	mov	r2, r3
 801687e:	68b9      	ldr	r1, [r7, #8]
 8016880:	68f8      	ldr	r0, [r7, #12]
 8016882:	f7ff fe93 	bl	80165ac <etharp_output_to_arp_index>
 8016886:	4603      	mov	r3, r0
 8016888:	e018      	b.n	80168bc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801688a:	7dfb      	ldrb	r3, [r7, #23]
 801688c:	3301      	adds	r3, #1
 801688e:	75fb      	strb	r3, [r7, #23]
 8016890:	7dfb      	ldrb	r3, [r7, #23]
 8016892:	2b09      	cmp	r3, #9
 8016894:	d9ca      	bls.n	801682c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016896:	68ba      	ldr	r2, [r7, #8]
 8016898:	69b9      	ldr	r1, [r7, #24]
 801689a:	68f8      	ldr	r0, [r7, #12]
 801689c:	f000 f822 	bl	80168e4 <etharp_query>
 80168a0:	4603      	mov	r3, r0
 80168a2:	e00b      	b.n	80168bc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80168aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80168ae:	9300      	str	r3, [sp, #0]
 80168b0:	69fb      	ldr	r3, [r7, #28]
 80168b2:	68b9      	ldr	r1, [r7, #8]
 80168b4:	68f8      	ldr	r0, [r7, #12]
 80168b6:	f001 fd63 	bl	8018380 <ethernet_output>
 80168ba:	4603      	mov	r3, r0
}
 80168bc:	4618      	mov	r0, r3
 80168be:	3720      	adds	r7, #32
 80168c0:	46bd      	mov	sp, r7
 80168c2:	bd80      	pop	{r7, pc}
 80168c4:	0801cd88 	.word	0x0801cd88
 80168c8:	0801ced8 	.word	0x0801ced8
 80168cc:	0801ce00 	.word	0x0801ce00
 80168d0:	0801cf28 	.word	0x0801cf28
 80168d4:	0801cec8 	.word	0x0801cec8
 80168d8:	080276dc 	.word	0x080276dc
 80168dc:	20010f84 	.word	0x20010f84
 80168e0:	20010e94 	.word	0x20010e94

080168e4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b08c      	sub	sp, #48	; 0x30
 80168e8:	af02      	add	r7, sp, #8
 80168ea:	60f8      	str	r0, [r7, #12]
 80168ec:	60b9      	str	r1, [r7, #8]
 80168ee:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80168f0:	68fb      	ldr	r3, [r7, #12]
 80168f2:	332a      	adds	r3, #42	; 0x2a
 80168f4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80168f6:	23ff      	movs	r3, #255	; 0xff
 80168f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80168fc:	2300      	movs	r3, #0
 80168fe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016900:	68bb      	ldr	r3, [r7, #8]
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	68f9      	ldr	r1, [r7, #12]
 8016906:	4618      	mov	r0, r3
 8016908:	f000 fe2c 	bl	8017564 <ip4_addr_isbroadcast_u32>
 801690c:	4603      	mov	r3, r0
 801690e:	2b00      	cmp	r3, #0
 8016910:	d10c      	bne.n	801692c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016912:	68bb      	ldr	r3, [r7, #8]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801691a:	2be0      	cmp	r3, #224	; 0xe0
 801691c:	d006      	beq.n	801692c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801691e:	68bb      	ldr	r3, [r7, #8]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d003      	beq.n	801692c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016924:	68bb      	ldr	r3, [r7, #8]
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	2b00      	cmp	r3, #0
 801692a:	d102      	bne.n	8016932 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801692c:	f06f 030f 	mvn.w	r3, #15
 8016930:	e101      	b.n	8016b36 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016932:	68fa      	ldr	r2, [r7, #12]
 8016934:	2101      	movs	r1, #1
 8016936:	68b8      	ldr	r0, [r7, #8]
 8016938:	f7ff fb5c 	bl	8015ff4 <etharp_find_entry>
 801693c:	4603      	mov	r3, r0
 801693e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016940:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016944:	2b00      	cmp	r3, #0
 8016946:	da02      	bge.n	801694e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016948:	8a7b      	ldrh	r3, [r7, #18]
 801694a:	b25b      	sxtb	r3, r3
 801694c:	e0f3      	b.n	8016b36 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801694e:	8a7b      	ldrh	r3, [r7, #18]
 8016950:	2b7e      	cmp	r3, #126	; 0x7e
 8016952:	d906      	bls.n	8016962 <etharp_query+0x7e>
 8016954:	4b7a      	ldr	r3, [pc, #488]	; (8016b40 <etharp_query+0x25c>)
 8016956:	f240 32c1 	movw	r2, #961	; 0x3c1
 801695a:	497a      	ldr	r1, [pc, #488]	; (8016b44 <etharp_query+0x260>)
 801695c:	487a      	ldr	r0, [pc, #488]	; (8016b48 <etharp_query+0x264>)
 801695e:	f002 f827 	bl	80189b0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016962:	8a7b      	ldrh	r3, [r7, #18]
 8016964:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016966:	7c7a      	ldrb	r2, [r7, #17]
 8016968:	4978      	ldr	r1, [pc, #480]	; (8016b4c <etharp_query+0x268>)
 801696a:	4613      	mov	r3, r2
 801696c:	005b      	lsls	r3, r3, #1
 801696e:	4413      	add	r3, r2
 8016970:	00db      	lsls	r3, r3, #3
 8016972:	440b      	add	r3, r1
 8016974:	3314      	adds	r3, #20
 8016976:	781b      	ldrb	r3, [r3, #0]
 8016978:	2b00      	cmp	r3, #0
 801697a:	d115      	bne.n	80169a8 <etharp_query+0xc4>
    is_new_entry = 1;
 801697c:	2301      	movs	r3, #1
 801697e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016980:	7c7a      	ldrb	r2, [r7, #17]
 8016982:	4972      	ldr	r1, [pc, #456]	; (8016b4c <etharp_query+0x268>)
 8016984:	4613      	mov	r3, r2
 8016986:	005b      	lsls	r3, r3, #1
 8016988:	4413      	add	r3, r2
 801698a:	00db      	lsls	r3, r3, #3
 801698c:	440b      	add	r3, r1
 801698e:	3314      	adds	r3, #20
 8016990:	2201      	movs	r2, #1
 8016992:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016994:	7c7a      	ldrb	r2, [r7, #17]
 8016996:	496d      	ldr	r1, [pc, #436]	; (8016b4c <etharp_query+0x268>)
 8016998:	4613      	mov	r3, r2
 801699a:	005b      	lsls	r3, r3, #1
 801699c:	4413      	add	r3, r2
 801699e:	00db      	lsls	r3, r3, #3
 80169a0:	440b      	add	r3, r1
 80169a2:	3308      	adds	r3, #8
 80169a4:	68fa      	ldr	r2, [r7, #12]
 80169a6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80169a8:	7c7a      	ldrb	r2, [r7, #17]
 80169aa:	4968      	ldr	r1, [pc, #416]	; (8016b4c <etharp_query+0x268>)
 80169ac:	4613      	mov	r3, r2
 80169ae:	005b      	lsls	r3, r3, #1
 80169b0:	4413      	add	r3, r2
 80169b2:	00db      	lsls	r3, r3, #3
 80169b4:	440b      	add	r3, r1
 80169b6:	3314      	adds	r3, #20
 80169b8:	781b      	ldrb	r3, [r3, #0]
 80169ba:	2b01      	cmp	r3, #1
 80169bc:	d011      	beq.n	80169e2 <etharp_query+0xfe>
 80169be:	7c7a      	ldrb	r2, [r7, #17]
 80169c0:	4962      	ldr	r1, [pc, #392]	; (8016b4c <etharp_query+0x268>)
 80169c2:	4613      	mov	r3, r2
 80169c4:	005b      	lsls	r3, r3, #1
 80169c6:	4413      	add	r3, r2
 80169c8:	00db      	lsls	r3, r3, #3
 80169ca:	440b      	add	r3, r1
 80169cc:	3314      	adds	r3, #20
 80169ce:	781b      	ldrb	r3, [r3, #0]
 80169d0:	2b01      	cmp	r3, #1
 80169d2:	d806      	bhi.n	80169e2 <etharp_query+0xfe>
 80169d4:	4b5a      	ldr	r3, [pc, #360]	; (8016b40 <etharp_query+0x25c>)
 80169d6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80169da:	495d      	ldr	r1, [pc, #372]	; (8016b50 <etharp_query+0x26c>)
 80169dc:	485a      	ldr	r0, [pc, #360]	; (8016b48 <etharp_query+0x264>)
 80169de:	f001 ffe7 	bl	80189b0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80169e2:	6a3b      	ldr	r3, [r7, #32]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d102      	bne.n	80169ee <etharp_query+0x10a>
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d10c      	bne.n	8016a08 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80169ee:	68b9      	ldr	r1, [r7, #8]
 80169f0:	68f8      	ldr	r0, [r7, #12]
 80169f2:	f000 f963 	bl	8016cbc <etharp_request>
 80169f6:	4603      	mov	r3, r0
 80169f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d102      	bne.n	8016a08 <etharp_query+0x124>
      return result;
 8016a02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016a06:	e096      	b.n	8016b36 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d106      	bne.n	8016a1c <etharp_query+0x138>
 8016a0e:	4b4c      	ldr	r3, [pc, #304]	; (8016b40 <etharp_query+0x25c>)
 8016a10:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016a14:	494f      	ldr	r1, [pc, #316]	; (8016b54 <etharp_query+0x270>)
 8016a16:	484c      	ldr	r0, [pc, #304]	; (8016b48 <etharp_query+0x264>)
 8016a18:	f001 ffca 	bl	80189b0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016a1c:	7c7a      	ldrb	r2, [r7, #17]
 8016a1e:	494b      	ldr	r1, [pc, #300]	; (8016b4c <etharp_query+0x268>)
 8016a20:	4613      	mov	r3, r2
 8016a22:	005b      	lsls	r3, r3, #1
 8016a24:	4413      	add	r3, r2
 8016a26:	00db      	lsls	r3, r3, #3
 8016a28:	440b      	add	r3, r1
 8016a2a:	3314      	adds	r3, #20
 8016a2c:	781b      	ldrb	r3, [r3, #0]
 8016a2e:	2b01      	cmp	r3, #1
 8016a30:	d917      	bls.n	8016a62 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016a32:	4a49      	ldr	r2, [pc, #292]	; (8016b58 <etharp_query+0x274>)
 8016a34:	7c7b      	ldrb	r3, [r7, #17]
 8016a36:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016a38:	7c7a      	ldrb	r2, [r7, #17]
 8016a3a:	4613      	mov	r3, r2
 8016a3c:	005b      	lsls	r3, r3, #1
 8016a3e:	4413      	add	r3, r2
 8016a40:	00db      	lsls	r3, r3, #3
 8016a42:	3308      	adds	r3, #8
 8016a44:	4a41      	ldr	r2, [pc, #260]	; (8016b4c <etharp_query+0x268>)
 8016a46:	4413      	add	r3, r2
 8016a48:	3304      	adds	r3, #4
 8016a4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016a4e:	9200      	str	r2, [sp, #0]
 8016a50:	697a      	ldr	r2, [r7, #20]
 8016a52:	6879      	ldr	r1, [r7, #4]
 8016a54:	68f8      	ldr	r0, [r7, #12]
 8016a56:	f001 fc93 	bl	8018380 <ethernet_output>
 8016a5a:	4603      	mov	r3, r0
 8016a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016a60:	e067      	b.n	8016b32 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016a62:	7c7a      	ldrb	r2, [r7, #17]
 8016a64:	4939      	ldr	r1, [pc, #228]	; (8016b4c <etharp_query+0x268>)
 8016a66:	4613      	mov	r3, r2
 8016a68:	005b      	lsls	r3, r3, #1
 8016a6a:	4413      	add	r3, r2
 8016a6c:	00db      	lsls	r3, r3, #3
 8016a6e:	440b      	add	r3, r1
 8016a70:	3314      	adds	r3, #20
 8016a72:	781b      	ldrb	r3, [r3, #0]
 8016a74:	2b01      	cmp	r3, #1
 8016a76:	d15c      	bne.n	8016b32 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016a78:	2300      	movs	r3, #0
 8016a7a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016a80:	e01c      	b.n	8016abc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016a82:	69fb      	ldr	r3, [r7, #28]
 8016a84:	895a      	ldrh	r2, [r3, #10]
 8016a86:	69fb      	ldr	r3, [r7, #28]
 8016a88:	891b      	ldrh	r3, [r3, #8]
 8016a8a:	429a      	cmp	r2, r3
 8016a8c:	d10a      	bne.n	8016aa4 <etharp_query+0x1c0>
 8016a8e:	69fb      	ldr	r3, [r7, #28]
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d006      	beq.n	8016aa4 <etharp_query+0x1c0>
 8016a96:	4b2a      	ldr	r3, [pc, #168]	; (8016b40 <etharp_query+0x25c>)
 8016a98:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016a9c:	492f      	ldr	r1, [pc, #188]	; (8016b5c <etharp_query+0x278>)
 8016a9e:	482a      	ldr	r0, [pc, #168]	; (8016b48 <etharp_query+0x264>)
 8016aa0:	f001 ff86 	bl	80189b0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016aa4:	69fb      	ldr	r3, [r7, #28]
 8016aa6:	7b1b      	ldrb	r3, [r3, #12]
 8016aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d002      	beq.n	8016ab6 <etharp_query+0x1d2>
        copy_needed = 1;
 8016ab0:	2301      	movs	r3, #1
 8016ab2:	61bb      	str	r3, [r7, #24]
        break;
 8016ab4:	e005      	b.n	8016ac2 <etharp_query+0x1de>
      }
      p = p->next;
 8016ab6:	69fb      	ldr	r3, [r7, #28]
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016abc:	69fb      	ldr	r3, [r7, #28]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d1df      	bne.n	8016a82 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016ac2:	69bb      	ldr	r3, [r7, #24]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d007      	beq.n	8016ad8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016ac8:	687a      	ldr	r2, [r7, #4]
 8016aca:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016ace:	200e      	movs	r0, #14
 8016ad0:	f7f6 fbfa 	bl	800d2c8 <pbuf_clone>
 8016ad4:	61f8      	str	r0, [r7, #28]
 8016ad6:	e004      	b.n	8016ae2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016adc:	69f8      	ldr	r0, [r7, #28]
 8016ade:	f7f6 fa21 	bl	800cf24 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016ae2:	69fb      	ldr	r3, [r7, #28]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d021      	beq.n	8016b2c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016ae8:	7c7a      	ldrb	r2, [r7, #17]
 8016aea:	4918      	ldr	r1, [pc, #96]	; (8016b4c <etharp_query+0x268>)
 8016aec:	4613      	mov	r3, r2
 8016aee:	005b      	lsls	r3, r3, #1
 8016af0:	4413      	add	r3, r2
 8016af2:	00db      	lsls	r3, r3, #3
 8016af4:	440b      	add	r3, r1
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d00a      	beq.n	8016b12 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016afc:	7c7a      	ldrb	r2, [r7, #17]
 8016afe:	4913      	ldr	r1, [pc, #76]	; (8016b4c <etharp_query+0x268>)
 8016b00:	4613      	mov	r3, r2
 8016b02:	005b      	lsls	r3, r3, #1
 8016b04:	4413      	add	r3, r2
 8016b06:	00db      	lsls	r3, r3, #3
 8016b08:	440b      	add	r3, r1
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	f7f6 f963 	bl	800cdd8 <pbuf_free>
      }
      arp_table[i].q = p;
 8016b12:	7c7a      	ldrb	r2, [r7, #17]
 8016b14:	490d      	ldr	r1, [pc, #52]	; (8016b4c <etharp_query+0x268>)
 8016b16:	4613      	mov	r3, r2
 8016b18:	005b      	lsls	r3, r3, #1
 8016b1a:	4413      	add	r3, r2
 8016b1c:	00db      	lsls	r3, r3, #3
 8016b1e:	440b      	add	r3, r1
 8016b20:	69fa      	ldr	r2, [r7, #28]
 8016b22:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016b24:	2300      	movs	r3, #0
 8016b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016b2a:	e002      	b.n	8016b32 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016b2c:	23ff      	movs	r3, #255	; 0xff
 8016b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016b32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016b36:	4618      	mov	r0, r3
 8016b38:	3728      	adds	r7, #40	; 0x28
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	bd80      	pop	{r7, pc}
 8016b3e:	bf00      	nop
 8016b40:	0801cd88 	.word	0x0801cd88
 8016b44:	0801cf34 	.word	0x0801cf34
 8016b48:	0801ce00 	.word	0x0801ce00
 8016b4c:	20010e94 	.word	0x20010e94
 8016b50:	0801cf44 	.word	0x0801cf44
 8016b54:	0801cf28 	.word	0x0801cf28
 8016b58:	20010f84 	.word	0x20010f84
 8016b5c:	0801cf6c 	.word	0x0801cf6c

08016b60 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b08a      	sub	sp, #40	; 0x28
 8016b64:	af02      	add	r7, sp, #8
 8016b66:	60f8      	str	r0, [r7, #12]
 8016b68:	60b9      	str	r1, [r7, #8]
 8016b6a:	607a      	str	r2, [r7, #4]
 8016b6c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016b6e:	2300      	movs	r3, #0
 8016b70:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d106      	bne.n	8016b86 <etharp_raw+0x26>
 8016b78:	4b3a      	ldr	r3, [pc, #232]	; (8016c64 <etharp_raw+0x104>)
 8016b7a:	f240 4257 	movw	r2, #1111	; 0x457
 8016b7e:	493a      	ldr	r1, [pc, #232]	; (8016c68 <etharp_raw+0x108>)
 8016b80:	483a      	ldr	r0, [pc, #232]	; (8016c6c <etharp_raw+0x10c>)
 8016b82:	f001 ff15 	bl	80189b0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016b86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016b8a:	211c      	movs	r1, #28
 8016b8c:	200e      	movs	r0, #14
 8016b8e:	f7f5 fe3f 	bl	800c810 <pbuf_alloc>
 8016b92:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016b94:	69bb      	ldr	r3, [r7, #24]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d102      	bne.n	8016ba0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8016b9e:	e05d      	b.n	8016c5c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016ba0:	69bb      	ldr	r3, [r7, #24]
 8016ba2:	895b      	ldrh	r3, [r3, #10]
 8016ba4:	2b1b      	cmp	r3, #27
 8016ba6:	d806      	bhi.n	8016bb6 <etharp_raw+0x56>
 8016ba8:	4b2e      	ldr	r3, [pc, #184]	; (8016c64 <etharp_raw+0x104>)
 8016baa:	f240 4262 	movw	r2, #1122	; 0x462
 8016bae:	4930      	ldr	r1, [pc, #192]	; (8016c70 <etharp_raw+0x110>)
 8016bb0:	482e      	ldr	r0, [pc, #184]	; (8016c6c <etharp_raw+0x10c>)
 8016bb2:	f001 fefd 	bl	80189b0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016bb6:	69bb      	ldr	r3, [r7, #24]
 8016bb8:	685b      	ldr	r3, [r3, #4]
 8016bba:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016bbc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	f7f4 fcd6 	bl	800b570 <lwip_htons>
 8016bc4:	4603      	mov	r3, r0
 8016bc6:	461a      	mov	r2, r3
 8016bc8:	697b      	ldr	r3, [r7, #20]
 8016bca:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016bd2:	2b06      	cmp	r3, #6
 8016bd4:	d006      	beq.n	8016be4 <etharp_raw+0x84>
 8016bd6:	4b23      	ldr	r3, [pc, #140]	; (8016c64 <etharp_raw+0x104>)
 8016bd8:	f240 4269 	movw	r2, #1129	; 0x469
 8016bdc:	4925      	ldr	r1, [pc, #148]	; (8016c74 <etharp_raw+0x114>)
 8016bde:	4823      	ldr	r0, [pc, #140]	; (8016c6c <etharp_raw+0x10c>)
 8016be0:	f001 fee6 	bl	80189b0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016be4:	697b      	ldr	r3, [r7, #20]
 8016be6:	3308      	adds	r3, #8
 8016be8:	2206      	movs	r2, #6
 8016bea:	6839      	ldr	r1, [r7, #0]
 8016bec:	4618      	mov	r0, r3
 8016bee:	f002 f82d 	bl	8018c4c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016bf2:	697b      	ldr	r3, [r7, #20]
 8016bf4:	3312      	adds	r3, #18
 8016bf6:	2206      	movs	r2, #6
 8016bf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	f002 f826 	bl	8018c4c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016c00:	697b      	ldr	r3, [r7, #20]
 8016c02:	330e      	adds	r3, #14
 8016c04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016c06:	6812      	ldr	r2, [r2, #0]
 8016c08:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016c0a:	697b      	ldr	r3, [r7, #20]
 8016c0c:	3318      	adds	r3, #24
 8016c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c10:	6812      	ldr	r2, [r2, #0]
 8016c12:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016c14:	697b      	ldr	r3, [r7, #20]
 8016c16:	2200      	movs	r2, #0
 8016c18:	701a      	strb	r2, [r3, #0]
 8016c1a:	2200      	movs	r2, #0
 8016c1c:	f042 0201 	orr.w	r2, r2, #1
 8016c20:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016c22:	697b      	ldr	r3, [r7, #20]
 8016c24:	2200      	movs	r2, #0
 8016c26:	f042 0208 	orr.w	r2, r2, #8
 8016c2a:	709a      	strb	r2, [r3, #2]
 8016c2c:	2200      	movs	r2, #0
 8016c2e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016c30:	697b      	ldr	r3, [r7, #20]
 8016c32:	2206      	movs	r2, #6
 8016c34:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016c36:	697b      	ldr	r3, [r7, #20]
 8016c38:	2204      	movs	r2, #4
 8016c3a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016c3c:	f640 0306 	movw	r3, #2054	; 0x806
 8016c40:	9300      	str	r3, [sp, #0]
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	68ba      	ldr	r2, [r7, #8]
 8016c46:	69b9      	ldr	r1, [r7, #24]
 8016c48:	68f8      	ldr	r0, [r7, #12]
 8016c4a:	f001 fb99 	bl	8018380 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016c4e:	69b8      	ldr	r0, [r7, #24]
 8016c50:	f7f6 f8c2 	bl	800cdd8 <pbuf_free>
  p = NULL;
 8016c54:	2300      	movs	r3, #0
 8016c56:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016c58:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	3720      	adds	r7, #32
 8016c60:	46bd      	mov	sp, r7
 8016c62:	bd80      	pop	{r7, pc}
 8016c64:	0801cd88 	.word	0x0801cd88
 8016c68:	0801ced8 	.word	0x0801ced8
 8016c6c:	0801ce00 	.word	0x0801ce00
 8016c70:	0801cf88 	.word	0x0801cf88
 8016c74:	0801cfbc 	.word	0x0801cfbc

08016c78 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b088      	sub	sp, #32
 8016c7c:	af04      	add	r7, sp, #16
 8016c7e:	60f8      	str	r0, [r7, #12]
 8016c80:	60b9      	str	r1, [r7, #8]
 8016c82:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016c90:	68fb      	ldr	r3, [r7, #12]
 8016c92:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016c94:	2201      	movs	r2, #1
 8016c96:	9203      	str	r2, [sp, #12]
 8016c98:	68ba      	ldr	r2, [r7, #8]
 8016c9a:	9202      	str	r2, [sp, #8]
 8016c9c:	4a06      	ldr	r2, [pc, #24]	; (8016cb8 <etharp_request_dst+0x40>)
 8016c9e:	9201      	str	r2, [sp, #4]
 8016ca0:	9300      	str	r3, [sp, #0]
 8016ca2:	4603      	mov	r3, r0
 8016ca4:	687a      	ldr	r2, [r7, #4]
 8016ca6:	68f8      	ldr	r0, [r7, #12]
 8016ca8:	f7ff ff5a 	bl	8016b60 <etharp_raw>
 8016cac:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016cae:	4618      	mov	r0, r3
 8016cb0:	3710      	adds	r7, #16
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	bd80      	pop	{r7, pc}
 8016cb6:	bf00      	nop
 8016cb8:	080276e4 	.word	0x080276e4

08016cbc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	b082      	sub	sp, #8
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]
 8016cc4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016cc6:	4a05      	ldr	r2, [pc, #20]	; (8016cdc <etharp_request+0x20>)
 8016cc8:	6839      	ldr	r1, [r7, #0]
 8016cca:	6878      	ldr	r0, [r7, #4]
 8016ccc:	f7ff ffd4 	bl	8016c78 <etharp_request_dst>
 8016cd0:	4603      	mov	r3, r0
}
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	3708      	adds	r7, #8
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	bd80      	pop	{r7, pc}
 8016cda:	bf00      	nop
 8016cdc:	080276dc 	.word	0x080276dc

08016ce0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b08e      	sub	sp, #56	; 0x38
 8016ce4:	af04      	add	r7, sp, #16
 8016ce6:	6078      	str	r0, [r7, #4]
 8016ce8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016cea:	4b79      	ldr	r3, [pc, #484]	; (8016ed0 <icmp_input+0x1f0>)
 8016cec:	689b      	ldr	r3, [r3, #8]
 8016cee:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cf2:	781b      	ldrb	r3, [r3, #0]
 8016cf4:	f003 030f 	and.w	r3, r3, #15
 8016cf8:	b2db      	uxtb	r3, r3
 8016cfa:	009b      	lsls	r3, r3, #2
 8016cfc:	b2db      	uxtb	r3, r3
 8016cfe:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016d00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d02:	2b13      	cmp	r3, #19
 8016d04:	f240 80cd 	bls.w	8016ea2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	895b      	ldrh	r3, [r3, #10]
 8016d0c:	2b03      	cmp	r3, #3
 8016d0e:	f240 80ca 	bls.w	8016ea6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	685b      	ldr	r3, [r3, #4]
 8016d16:	781b      	ldrb	r3, [r3, #0]
 8016d18:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016d1c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	f000 80b7 	beq.w	8016e94 <icmp_input+0x1b4>
 8016d26:	2b08      	cmp	r3, #8
 8016d28:	f040 80b7 	bne.w	8016e9a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016d2c:	4b69      	ldr	r3, [pc, #420]	; (8016ed4 <icmp_input+0x1f4>)
 8016d2e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016d30:	4b67      	ldr	r3, [pc, #412]	; (8016ed0 <icmp_input+0x1f0>)
 8016d32:	695b      	ldr	r3, [r3, #20]
 8016d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016d38:	2be0      	cmp	r3, #224	; 0xe0
 8016d3a:	f000 80bb 	beq.w	8016eb4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016d3e:	4b64      	ldr	r3, [pc, #400]	; (8016ed0 <icmp_input+0x1f0>)
 8016d40:	695b      	ldr	r3, [r3, #20]
 8016d42:	4a63      	ldr	r2, [pc, #396]	; (8016ed0 <icmp_input+0x1f0>)
 8016d44:	6812      	ldr	r2, [r2, #0]
 8016d46:	4611      	mov	r1, r2
 8016d48:	4618      	mov	r0, r3
 8016d4a:	f000 fc0b 	bl	8017564 <ip4_addr_isbroadcast_u32>
 8016d4e:	4603      	mov	r3, r0
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	f040 80b1 	bne.w	8016eb8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	891b      	ldrh	r3, [r3, #8]
 8016d5a:	2b07      	cmp	r3, #7
 8016d5c:	f240 80a5 	bls.w	8016eaa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016d60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d62:	330e      	adds	r3, #14
 8016d64:	4619      	mov	r1, r3
 8016d66:	6878      	ldr	r0, [r7, #4]
 8016d68:	f7f5 ffa0 	bl	800ccac <pbuf_add_header>
 8016d6c:	4603      	mov	r3, r0
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d04b      	beq.n	8016e0a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	891a      	ldrh	r2, [r3, #8]
 8016d76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d78:	4413      	add	r3, r2
 8016d7a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	891b      	ldrh	r3, [r3, #8]
 8016d80:	8b7a      	ldrh	r2, [r7, #26]
 8016d82:	429a      	cmp	r2, r3
 8016d84:	f0c0 809a 	bcc.w	8016ebc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016d88:	8b7b      	ldrh	r3, [r7, #26]
 8016d8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016d8e:	4619      	mov	r1, r3
 8016d90:	200e      	movs	r0, #14
 8016d92:	f7f5 fd3d 	bl	800c810 <pbuf_alloc>
 8016d96:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016d98:	697b      	ldr	r3, [r7, #20]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	f000 8090 	beq.w	8016ec0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016da0:	697b      	ldr	r3, [r7, #20]
 8016da2:	895b      	ldrh	r3, [r3, #10]
 8016da4:	461a      	mov	r2, r3
 8016da6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016da8:	3308      	adds	r3, #8
 8016daa:	429a      	cmp	r2, r3
 8016dac:	d203      	bcs.n	8016db6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016dae:	6978      	ldr	r0, [r7, #20]
 8016db0:	f7f6 f812 	bl	800cdd8 <pbuf_free>
          goto icmperr;
 8016db4:	e085      	b.n	8016ec2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016db6:	697b      	ldr	r3, [r7, #20]
 8016db8:	685b      	ldr	r3, [r3, #4]
 8016dba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	f001 ff44 	bl	8018c4c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016dc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016dc6:	4619      	mov	r1, r3
 8016dc8:	6978      	ldr	r0, [r7, #20]
 8016dca:	f7f5 ff7f 	bl	800cccc <pbuf_remove_header>
 8016dce:	4603      	mov	r3, r0
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d009      	beq.n	8016de8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016dd4:	4b40      	ldr	r3, [pc, #256]	; (8016ed8 <icmp_input+0x1f8>)
 8016dd6:	22b6      	movs	r2, #182	; 0xb6
 8016dd8:	4940      	ldr	r1, [pc, #256]	; (8016edc <icmp_input+0x1fc>)
 8016dda:	4841      	ldr	r0, [pc, #260]	; (8016ee0 <icmp_input+0x200>)
 8016ddc:	f001 fde8 	bl	80189b0 <iprintf>
          pbuf_free(r);
 8016de0:	6978      	ldr	r0, [r7, #20]
 8016de2:	f7f5 fff9 	bl	800cdd8 <pbuf_free>
          goto icmperr;
 8016de6:	e06c      	b.n	8016ec2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016de8:	6879      	ldr	r1, [r7, #4]
 8016dea:	6978      	ldr	r0, [r7, #20]
 8016dec:	f7f6 f928 	bl	800d040 <pbuf_copy>
 8016df0:	4603      	mov	r3, r0
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d003      	beq.n	8016dfe <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016df6:	6978      	ldr	r0, [r7, #20]
 8016df8:	f7f5 ffee 	bl	800cdd8 <pbuf_free>
          goto icmperr;
 8016dfc:	e061      	b.n	8016ec2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8016dfe:	6878      	ldr	r0, [r7, #4]
 8016e00:	f7f5 ffea 	bl	800cdd8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016e04:	697b      	ldr	r3, [r7, #20]
 8016e06:	607b      	str	r3, [r7, #4]
 8016e08:	e00f      	b.n	8016e2a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016e0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e0c:	330e      	adds	r3, #14
 8016e0e:	4619      	mov	r1, r3
 8016e10:	6878      	ldr	r0, [r7, #4]
 8016e12:	f7f5 ff5b 	bl	800cccc <pbuf_remove_header>
 8016e16:	4603      	mov	r3, r0
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d006      	beq.n	8016e2a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016e1c:	4b2e      	ldr	r3, [pc, #184]	; (8016ed8 <icmp_input+0x1f8>)
 8016e1e:	22c7      	movs	r2, #199	; 0xc7
 8016e20:	4930      	ldr	r1, [pc, #192]	; (8016ee4 <icmp_input+0x204>)
 8016e22:	482f      	ldr	r0, [pc, #188]	; (8016ee0 <icmp_input+0x200>)
 8016e24:	f001 fdc4 	bl	80189b0 <iprintf>
          goto icmperr;
 8016e28:	e04b      	b.n	8016ec2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	685b      	ldr	r3, [r3, #4]
 8016e2e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016e30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e32:	4619      	mov	r1, r3
 8016e34:	6878      	ldr	r0, [r7, #4]
 8016e36:	f7f5 ff39 	bl	800ccac <pbuf_add_header>
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d12b      	bne.n	8016e98 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	685b      	ldr	r3, [r3, #4]
 8016e44:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016e46:	69fb      	ldr	r3, [r7, #28]
 8016e48:	681a      	ldr	r2, [r3, #0]
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016e4e:	4b20      	ldr	r3, [pc, #128]	; (8016ed0 <icmp_input+0x1f0>)
 8016e50:	691a      	ldr	r2, [r3, #16]
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016e56:	693b      	ldr	r3, [r7, #16]
 8016e58:	2200      	movs	r2, #0
 8016e5a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016e5c:	693b      	ldr	r3, [r7, #16]
 8016e5e:	2200      	movs	r2, #0
 8016e60:	709a      	strb	r2, [r3, #2]
 8016e62:	2200      	movs	r2, #0
 8016e64:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	22ff      	movs	r2, #255	; 0xff
 8016e6a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	2200      	movs	r2, #0
 8016e70:	729a      	strb	r2, [r3, #10]
 8016e72:	2200      	movs	r2, #0
 8016e74:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016e76:	683b      	ldr	r3, [r7, #0]
 8016e78:	9302      	str	r3, [sp, #8]
 8016e7a:	2301      	movs	r3, #1
 8016e7c:	9301      	str	r3, [sp, #4]
 8016e7e:	2300      	movs	r3, #0
 8016e80:	9300      	str	r3, [sp, #0]
 8016e82:	23ff      	movs	r3, #255	; 0xff
 8016e84:	2200      	movs	r2, #0
 8016e86:	69f9      	ldr	r1, [r7, #28]
 8016e88:	6878      	ldr	r0, [r7, #4]
 8016e8a:	f000 fa93 	bl	80173b4 <ip4_output_if>
 8016e8e:	4603      	mov	r3, r0
 8016e90:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016e92:	e001      	b.n	8016e98 <icmp_input+0x1b8>
      break;
 8016e94:	bf00      	nop
 8016e96:	e000      	b.n	8016e9a <icmp_input+0x1ba>
      break;
 8016e98:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016e9a:	6878      	ldr	r0, [r7, #4]
 8016e9c:	f7f5 ff9c 	bl	800cdd8 <pbuf_free>
  return;
 8016ea0:	e013      	b.n	8016eca <icmp_input+0x1ea>
    goto lenerr;
 8016ea2:	bf00      	nop
 8016ea4:	e002      	b.n	8016eac <icmp_input+0x1cc>
    goto lenerr;
 8016ea6:	bf00      	nop
 8016ea8:	e000      	b.n	8016eac <icmp_input+0x1cc>
        goto lenerr;
 8016eaa:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016eac:	6878      	ldr	r0, [r7, #4]
 8016eae:	f7f5 ff93 	bl	800cdd8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016eb2:	e00a      	b.n	8016eca <icmp_input+0x1ea>
        goto icmperr;
 8016eb4:	bf00      	nop
 8016eb6:	e004      	b.n	8016ec2 <icmp_input+0x1e2>
        goto icmperr;
 8016eb8:	bf00      	nop
 8016eba:	e002      	b.n	8016ec2 <icmp_input+0x1e2>
          goto icmperr;
 8016ebc:	bf00      	nop
 8016ebe:	e000      	b.n	8016ec2 <icmp_input+0x1e2>
          goto icmperr;
 8016ec0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016ec2:	6878      	ldr	r0, [r7, #4]
 8016ec4:	f7f5 ff88 	bl	800cdd8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016ec8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016eca:	3728      	adds	r7, #40	; 0x28
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	bd80      	pop	{r7, pc}
 8016ed0:	2000d68c 	.word	0x2000d68c
 8016ed4:	2000d6a0 	.word	0x2000d6a0
 8016ed8:	0801d000 	.word	0x0801d000
 8016edc:	0801d038 	.word	0x0801d038
 8016ee0:	0801d070 	.word	0x0801d070
 8016ee4:	0801d098 	.word	0x0801d098

08016ee8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016ee8:	b580      	push	{r7, lr}
 8016eea:	b082      	sub	sp, #8
 8016eec:	af00      	add	r7, sp, #0
 8016eee:	6078      	str	r0, [r7, #4]
 8016ef0:	460b      	mov	r3, r1
 8016ef2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016ef4:	78fb      	ldrb	r3, [r7, #3]
 8016ef6:	461a      	mov	r2, r3
 8016ef8:	2103      	movs	r1, #3
 8016efa:	6878      	ldr	r0, [r7, #4]
 8016efc:	f000 f814 	bl	8016f28 <icmp_send_response>
}
 8016f00:	bf00      	nop
 8016f02:	3708      	adds	r7, #8
 8016f04:	46bd      	mov	sp, r7
 8016f06:	bd80      	pop	{r7, pc}

08016f08 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016f08:	b580      	push	{r7, lr}
 8016f0a:	b082      	sub	sp, #8
 8016f0c:	af00      	add	r7, sp, #0
 8016f0e:	6078      	str	r0, [r7, #4]
 8016f10:	460b      	mov	r3, r1
 8016f12:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016f14:	78fb      	ldrb	r3, [r7, #3]
 8016f16:	461a      	mov	r2, r3
 8016f18:	210b      	movs	r1, #11
 8016f1a:	6878      	ldr	r0, [r7, #4]
 8016f1c:	f000 f804 	bl	8016f28 <icmp_send_response>
}
 8016f20:	bf00      	nop
 8016f22:	3708      	adds	r7, #8
 8016f24:	46bd      	mov	sp, r7
 8016f26:	bd80      	pop	{r7, pc}

08016f28 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b08c      	sub	sp, #48	; 0x30
 8016f2c:	af04      	add	r7, sp, #16
 8016f2e:	6078      	str	r0, [r7, #4]
 8016f30:	460b      	mov	r3, r1
 8016f32:	70fb      	strb	r3, [r7, #3]
 8016f34:	4613      	mov	r3, r2
 8016f36:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016f38:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016f3c:	2124      	movs	r1, #36	; 0x24
 8016f3e:	2022      	movs	r0, #34	; 0x22
 8016f40:	f7f5 fc66 	bl	800c810 <pbuf_alloc>
 8016f44:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016f46:	69fb      	ldr	r3, [r7, #28]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d04c      	beq.n	8016fe6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016f4c:	69fb      	ldr	r3, [r7, #28]
 8016f4e:	895b      	ldrh	r3, [r3, #10]
 8016f50:	2b23      	cmp	r3, #35	; 0x23
 8016f52:	d806      	bhi.n	8016f62 <icmp_send_response+0x3a>
 8016f54:	4b26      	ldr	r3, [pc, #152]	; (8016ff0 <icmp_send_response+0xc8>)
 8016f56:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016f5a:	4926      	ldr	r1, [pc, #152]	; (8016ff4 <icmp_send_response+0xcc>)
 8016f5c:	4826      	ldr	r0, [pc, #152]	; (8016ff8 <icmp_send_response+0xd0>)
 8016f5e:	f001 fd27 	bl	80189b0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	685b      	ldr	r3, [r3, #4]
 8016f66:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016f68:	69fb      	ldr	r3, [r7, #28]
 8016f6a:	685b      	ldr	r3, [r3, #4]
 8016f6c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016f6e:	697b      	ldr	r3, [r7, #20]
 8016f70:	78fa      	ldrb	r2, [r7, #3]
 8016f72:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016f74:	697b      	ldr	r3, [r7, #20]
 8016f76:	78ba      	ldrb	r2, [r7, #2]
 8016f78:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016f7a:	697b      	ldr	r3, [r7, #20]
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	711a      	strb	r2, [r3, #4]
 8016f80:	2200      	movs	r2, #0
 8016f82:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016f84:	697b      	ldr	r3, [r7, #20]
 8016f86:	2200      	movs	r2, #0
 8016f88:	719a      	strb	r2, [r3, #6]
 8016f8a:	2200      	movs	r2, #0
 8016f8c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016f8e:	69fb      	ldr	r3, [r7, #28]
 8016f90:	685b      	ldr	r3, [r3, #4]
 8016f92:	f103 0008 	add.w	r0, r3, #8
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	685b      	ldr	r3, [r3, #4]
 8016f9a:	221c      	movs	r2, #28
 8016f9c:	4619      	mov	r1, r3
 8016f9e:	f001 fe55 	bl	8018c4c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016fa2:	69bb      	ldr	r3, [r7, #24]
 8016fa4:	68db      	ldr	r3, [r3, #12]
 8016fa6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016fa8:	f107 030c 	add.w	r3, r7, #12
 8016fac:	4618      	mov	r0, r3
 8016fae:	f000 f825 	bl	8016ffc <ip4_route>
 8016fb2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016fb4:	693b      	ldr	r3, [r7, #16]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d011      	beq.n	8016fde <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016fba:	697b      	ldr	r3, [r7, #20]
 8016fbc:	2200      	movs	r2, #0
 8016fbe:	709a      	strb	r2, [r3, #2]
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016fc4:	f107 020c 	add.w	r2, r7, #12
 8016fc8:	693b      	ldr	r3, [r7, #16]
 8016fca:	9302      	str	r3, [sp, #8]
 8016fcc:	2301      	movs	r3, #1
 8016fce:	9301      	str	r3, [sp, #4]
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	9300      	str	r3, [sp, #0]
 8016fd4:	23ff      	movs	r3, #255	; 0xff
 8016fd6:	2100      	movs	r1, #0
 8016fd8:	69f8      	ldr	r0, [r7, #28]
 8016fda:	f000 f9eb 	bl	80173b4 <ip4_output_if>
  }
  pbuf_free(q);
 8016fde:	69f8      	ldr	r0, [r7, #28]
 8016fe0:	f7f5 fefa 	bl	800cdd8 <pbuf_free>
 8016fe4:	e000      	b.n	8016fe8 <icmp_send_response+0xc0>
    return;
 8016fe6:	bf00      	nop
}
 8016fe8:	3720      	adds	r7, #32
 8016fea:	46bd      	mov	sp, r7
 8016fec:	bd80      	pop	{r7, pc}
 8016fee:	bf00      	nop
 8016ff0:	0801d000 	.word	0x0801d000
 8016ff4:	0801d0cc 	.word	0x0801d0cc
 8016ff8:	0801d070 	.word	0x0801d070

08016ffc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016ffc:	b480      	push	{r7}
 8016ffe:	b085      	sub	sp, #20
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017004:	4b33      	ldr	r3, [pc, #204]	; (80170d4 <ip4_route+0xd8>)
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	60fb      	str	r3, [r7, #12]
 801700a:	e036      	b.n	801707a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017012:	f003 0301 	and.w	r3, r3, #1
 8017016:	b2db      	uxtb	r3, r3
 8017018:	2b00      	cmp	r3, #0
 801701a:	d02b      	beq.n	8017074 <ip4_route+0x78>
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017022:	089b      	lsrs	r3, r3, #2
 8017024:	f003 0301 	and.w	r3, r3, #1
 8017028:	b2db      	uxtb	r3, r3
 801702a:	2b00      	cmp	r3, #0
 801702c:	d022      	beq.n	8017074 <ip4_route+0x78>
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	3304      	adds	r3, #4
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d01d      	beq.n	8017074 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	681a      	ldr	r2, [r3, #0]
 801703c:	68fb      	ldr	r3, [r7, #12]
 801703e:	3304      	adds	r3, #4
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	405a      	eors	r2, r3
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	3308      	adds	r3, #8
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	4013      	ands	r3, r2
 801704c:	2b00      	cmp	r3, #0
 801704e:	d101      	bne.n	8017054 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	e038      	b.n	80170c6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801705a:	f003 0302 	and.w	r3, r3, #2
 801705e:	2b00      	cmp	r3, #0
 8017060:	d108      	bne.n	8017074 <ip4_route+0x78>
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	681a      	ldr	r2, [r3, #0]
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	330c      	adds	r3, #12
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	429a      	cmp	r2, r3
 801706e:	d101      	bne.n	8017074 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	e028      	b.n	80170c6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	60fb      	str	r3, [r7, #12]
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	2b00      	cmp	r3, #0
 801707e:	d1c5      	bne.n	801700c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017080:	4b15      	ldr	r3, [pc, #84]	; (80170d8 <ip4_route+0xdc>)
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d01a      	beq.n	80170be <ip4_route+0xc2>
 8017088:	4b13      	ldr	r3, [pc, #76]	; (80170d8 <ip4_route+0xdc>)
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017090:	f003 0301 	and.w	r3, r3, #1
 8017094:	2b00      	cmp	r3, #0
 8017096:	d012      	beq.n	80170be <ip4_route+0xc2>
 8017098:	4b0f      	ldr	r3, [pc, #60]	; (80170d8 <ip4_route+0xdc>)
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80170a0:	f003 0304 	and.w	r3, r3, #4
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d00a      	beq.n	80170be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80170a8:	4b0b      	ldr	r3, [pc, #44]	; (80170d8 <ip4_route+0xdc>)
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	3304      	adds	r3, #4
 80170ae:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d004      	beq.n	80170be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	b2db      	uxtb	r3, r3
 80170ba:	2b7f      	cmp	r3, #127	; 0x7f
 80170bc:	d101      	bne.n	80170c2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80170be:	2300      	movs	r3, #0
 80170c0:	e001      	b.n	80170c6 <ip4_route+0xca>
  }

  return netif_default;
 80170c2:	4b05      	ldr	r3, [pc, #20]	; (80170d8 <ip4_route+0xdc>)
 80170c4:	681b      	ldr	r3, [r3, #0]
}
 80170c6:	4618      	mov	r0, r3
 80170c8:	3714      	adds	r7, #20
 80170ca:	46bd      	mov	sp, r7
 80170cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d0:	4770      	bx	lr
 80170d2:	bf00      	nop
 80170d4:	20010df4 	.word	0x20010df4
 80170d8:	20010df8 	.word	0x20010df8

080170dc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b082      	sub	sp, #8
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80170ea:	f003 0301 	and.w	r3, r3, #1
 80170ee:	b2db      	uxtb	r3, r3
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d016      	beq.n	8017122 <ip4_input_accept+0x46>
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	3304      	adds	r3, #4
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d011      	beq.n	8017122 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80170fe:	4b0b      	ldr	r3, [pc, #44]	; (801712c <ip4_input_accept+0x50>)
 8017100:	695a      	ldr	r2, [r3, #20]
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	3304      	adds	r3, #4
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	429a      	cmp	r2, r3
 801710a:	d008      	beq.n	801711e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801710c:	4b07      	ldr	r3, [pc, #28]	; (801712c <ip4_input_accept+0x50>)
 801710e:	695b      	ldr	r3, [r3, #20]
 8017110:	6879      	ldr	r1, [r7, #4]
 8017112:	4618      	mov	r0, r3
 8017114:	f000 fa26 	bl	8017564 <ip4_addr_isbroadcast_u32>
 8017118:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801711a:	2b00      	cmp	r3, #0
 801711c:	d001      	beq.n	8017122 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801711e:	2301      	movs	r3, #1
 8017120:	e000      	b.n	8017124 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017122:	2300      	movs	r3, #0
}
 8017124:	4618      	mov	r0, r3
 8017126:	3708      	adds	r7, #8
 8017128:	46bd      	mov	sp, r7
 801712a:	bd80      	pop	{r7, pc}
 801712c:	2000d68c 	.word	0x2000d68c

08017130 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b088      	sub	sp, #32
 8017134:	af00      	add	r7, sp, #0
 8017136:	6078      	str	r0, [r7, #4]
 8017138:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801713a:	2301      	movs	r3, #1
 801713c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	685b      	ldr	r3, [r3, #4]
 8017142:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8017144:	69fb      	ldr	r3, [r7, #28]
 8017146:	781b      	ldrb	r3, [r3, #0]
 8017148:	091b      	lsrs	r3, r3, #4
 801714a:	b2db      	uxtb	r3, r3
 801714c:	2b04      	cmp	r3, #4
 801714e:	d004      	beq.n	801715a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017150:	6878      	ldr	r0, [r7, #4]
 8017152:	f7f5 fe41 	bl	800cdd8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017156:	2300      	movs	r3, #0
 8017158:	e123      	b.n	80173a2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801715a:	69fb      	ldr	r3, [r7, #28]
 801715c:	781b      	ldrb	r3, [r3, #0]
 801715e:	f003 030f 	and.w	r3, r3, #15
 8017162:	b2db      	uxtb	r3, r3
 8017164:	009b      	lsls	r3, r3, #2
 8017166:	b2db      	uxtb	r3, r3
 8017168:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801716a:	69fb      	ldr	r3, [r7, #28]
 801716c:	885b      	ldrh	r3, [r3, #2]
 801716e:	b29b      	uxth	r3, r3
 8017170:	4618      	mov	r0, r3
 8017172:	f7f4 f9fd 	bl	800b570 <lwip_htons>
 8017176:	4603      	mov	r3, r0
 8017178:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	891b      	ldrh	r3, [r3, #8]
 801717e:	8a3a      	ldrh	r2, [r7, #16]
 8017180:	429a      	cmp	r2, r3
 8017182:	d204      	bcs.n	801718e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017184:	8a3b      	ldrh	r3, [r7, #16]
 8017186:	4619      	mov	r1, r3
 8017188:	6878      	ldr	r0, [r7, #4]
 801718a:	f7f5 fc9f 	bl	800cacc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	895b      	ldrh	r3, [r3, #10]
 8017192:	8a7a      	ldrh	r2, [r7, #18]
 8017194:	429a      	cmp	r2, r3
 8017196:	d807      	bhi.n	80171a8 <ip4_input+0x78>
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	891b      	ldrh	r3, [r3, #8]
 801719c:	8a3a      	ldrh	r2, [r7, #16]
 801719e:	429a      	cmp	r2, r3
 80171a0:	d802      	bhi.n	80171a8 <ip4_input+0x78>
 80171a2:	8a7b      	ldrh	r3, [r7, #18]
 80171a4:	2b13      	cmp	r3, #19
 80171a6:	d804      	bhi.n	80171b2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80171a8:	6878      	ldr	r0, [r7, #4]
 80171aa:	f7f5 fe15 	bl	800cdd8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80171ae:	2300      	movs	r3, #0
 80171b0:	e0f7      	b.n	80173a2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80171b2:	69fb      	ldr	r3, [r7, #28]
 80171b4:	691b      	ldr	r3, [r3, #16]
 80171b6:	4a7d      	ldr	r2, [pc, #500]	; (80173ac <ip4_input+0x27c>)
 80171b8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80171ba:	69fb      	ldr	r3, [r7, #28]
 80171bc:	68db      	ldr	r3, [r3, #12]
 80171be:	4a7b      	ldr	r2, [pc, #492]	; (80173ac <ip4_input+0x27c>)
 80171c0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80171c2:	4b7a      	ldr	r3, [pc, #488]	; (80173ac <ip4_input+0x27c>)
 80171c4:	695b      	ldr	r3, [r3, #20]
 80171c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80171ca:	2be0      	cmp	r3, #224	; 0xe0
 80171cc:	d112      	bne.n	80171f4 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80171ce:	683b      	ldr	r3, [r7, #0]
 80171d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80171d4:	f003 0301 	and.w	r3, r3, #1
 80171d8:	b2db      	uxtb	r3, r3
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d007      	beq.n	80171ee <ip4_input+0xbe>
 80171de:	683b      	ldr	r3, [r7, #0]
 80171e0:	3304      	adds	r3, #4
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d002      	beq.n	80171ee <ip4_input+0xbe>
      netif = inp;
 80171e8:	683b      	ldr	r3, [r7, #0]
 80171ea:	61bb      	str	r3, [r7, #24]
 80171ec:	e02a      	b.n	8017244 <ip4_input+0x114>
    } else {
      netif = NULL;
 80171ee:	2300      	movs	r3, #0
 80171f0:	61bb      	str	r3, [r7, #24]
 80171f2:	e027      	b.n	8017244 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80171f4:	6838      	ldr	r0, [r7, #0]
 80171f6:	f7ff ff71 	bl	80170dc <ip4_input_accept>
 80171fa:	4603      	mov	r3, r0
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d002      	beq.n	8017206 <ip4_input+0xd6>
      netif = inp;
 8017200:	683b      	ldr	r3, [r7, #0]
 8017202:	61bb      	str	r3, [r7, #24]
 8017204:	e01e      	b.n	8017244 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017206:	2300      	movs	r3, #0
 8017208:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801720a:	4b68      	ldr	r3, [pc, #416]	; (80173ac <ip4_input+0x27c>)
 801720c:	695b      	ldr	r3, [r3, #20]
 801720e:	b2db      	uxtb	r3, r3
 8017210:	2b7f      	cmp	r3, #127	; 0x7f
 8017212:	d017      	beq.n	8017244 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017214:	4b66      	ldr	r3, [pc, #408]	; (80173b0 <ip4_input+0x280>)
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	61bb      	str	r3, [r7, #24]
 801721a:	e00e      	b.n	801723a <ip4_input+0x10a>
          if (netif == inp) {
 801721c:	69ba      	ldr	r2, [r7, #24]
 801721e:	683b      	ldr	r3, [r7, #0]
 8017220:	429a      	cmp	r2, r3
 8017222:	d006      	beq.n	8017232 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017224:	69b8      	ldr	r0, [r7, #24]
 8017226:	f7ff ff59 	bl	80170dc <ip4_input_accept>
 801722a:	4603      	mov	r3, r0
 801722c:	2b00      	cmp	r3, #0
 801722e:	d108      	bne.n	8017242 <ip4_input+0x112>
 8017230:	e000      	b.n	8017234 <ip4_input+0x104>
            continue;
 8017232:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017234:	69bb      	ldr	r3, [r7, #24]
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	61bb      	str	r3, [r7, #24]
 801723a:	69bb      	ldr	r3, [r7, #24]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d1ed      	bne.n	801721c <ip4_input+0xec>
 8017240:	e000      	b.n	8017244 <ip4_input+0x114>
            break;
 8017242:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017244:	69bb      	ldr	r3, [r7, #24]
 8017246:	2b00      	cmp	r3, #0
 8017248:	d111      	bne.n	801726e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801724a:	69fb      	ldr	r3, [r7, #28]
 801724c:	7a5b      	ldrb	r3, [r3, #9]
 801724e:	2b11      	cmp	r3, #17
 8017250:	d10d      	bne.n	801726e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8017252:	8a7b      	ldrh	r3, [r7, #18]
 8017254:	69fa      	ldr	r2, [r7, #28]
 8017256:	4413      	add	r3, r2
 8017258:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	885b      	ldrh	r3, [r3, #2]
 801725e:	b29b      	uxth	r3, r3
 8017260:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8017264:	d103      	bne.n	801726e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017266:	683b      	ldr	r3, [r7, #0]
 8017268:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801726a:	2300      	movs	r3, #0
 801726c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801726e:	697b      	ldr	r3, [r7, #20]
 8017270:	2b00      	cmp	r3, #0
 8017272:	d017      	beq.n	80172a4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017274:	4b4d      	ldr	r3, [pc, #308]	; (80173ac <ip4_input+0x27c>)
 8017276:	691b      	ldr	r3, [r3, #16]
 8017278:	2b00      	cmp	r3, #0
 801727a:	d013      	beq.n	80172a4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801727c:	4b4b      	ldr	r3, [pc, #300]	; (80173ac <ip4_input+0x27c>)
 801727e:	691b      	ldr	r3, [r3, #16]
 8017280:	6839      	ldr	r1, [r7, #0]
 8017282:	4618      	mov	r0, r3
 8017284:	f000 f96e 	bl	8017564 <ip4_addr_isbroadcast_u32>
 8017288:	4603      	mov	r3, r0
 801728a:	2b00      	cmp	r3, #0
 801728c:	d105      	bne.n	801729a <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801728e:	4b47      	ldr	r3, [pc, #284]	; (80173ac <ip4_input+0x27c>)
 8017290:	691b      	ldr	r3, [r3, #16]
 8017292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017296:	2be0      	cmp	r3, #224	; 0xe0
 8017298:	d104      	bne.n	80172a4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801729a:	6878      	ldr	r0, [r7, #4]
 801729c:	f7f5 fd9c 	bl	800cdd8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80172a0:	2300      	movs	r3, #0
 80172a2:	e07e      	b.n	80173a2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80172a4:	69bb      	ldr	r3, [r7, #24]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d104      	bne.n	80172b4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80172aa:	6878      	ldr	r0, [r7, #4]
 80172ac:	f7f5 fd94 	bl	800cdd8 <pbuf_free>
    return ERR_OK;
 80172b0:	2300      	movs	r3, #0
 80172b2:	e076      	b.n	80173a2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80172b4:	69fb      	ldr	r3, [r7, #28]
 80172b6:	88db      	ldrh	r3, [r3, #6]
 80172b8:	b29b      	uxth	r3, r3
 80172ba:	461a      	mov	r2, r3
 80172bc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80172c0:	4013      	ands	r3, r2
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d00b      	beq.n	80172de <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80172c6:	6878      	ldr	r0, [r7, #4]
 80172c8:	f000 fc92 	bl	8017bf0 <ip4_reass>
 80172cc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d101      	bne.n	80172d8 <ip4_input+0x1a8>
      return ERR_OK;
 80172d4:	2300      	movs	r3, #0
 80172d6:	e064      	b.n	80173a2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	685b      	ldr	r3, [r3, #4]
 80172dc:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80172de:	4a33      	ldr	r2, [pc, #204]	; (80173ac <ip4_input+0x27c>)
 80172e0:	69bb      	ldr	r3, [r7, #24]
 80172e2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80172e4:	4a31      	ldr	r2, [pc, #196]	; (80173ac <ip4_input+0x27c>)
 80172e6:	683b      	ldr	r3, [r7, #0]
 80172e8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80172ea:	4a30      	ldr	r2, [pc, #192]	; (80173ac <ip4_input+0x27c>)
 80172ec:	69fb      	ldr	r3, [r7, #28]
 80172ee:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80172f0:	69fb      	ldr	r3, [r7, #28]
 80172f2:	781b      	ldrb	r3, [r3, #0]
 80172f4:	f003 030f 	and.w	r3, r3, #15
 80172f8:	b2db      	uxtb	r3, r3
 80172fa:	009b      	lsls	r3, r3, #2
 80172fc:	b2db      	uxtb	r3, r3
 80172fe:	b29a      	uxth	r2, r3
 8017300:	4b2a      	ldr	r3, [pc, #168]	; (80173ac <ip4_input+0x27c>)
 8017302:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017304:	8a7b      	ldrh	r3, [r7, #18]
 8017306:	4619      	mov	r1, r3
 8017308:	6878      	ldr	r0, [r7, #4]
 801730a:	f7f5 fcdf 	bl	800cccc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801730e:	69fb      	ldr	r3, [r7, #28]
 8017310:	7a5b      	ldrb	r3, [r3, #9]
 8017312:	2b11      	cmp	r3, #17
 8017314:	d006      	beq.n	8017324 <ip4_input+0x1f4>
 8017316:	2b11      	cmp	r3, #17
 8017318:	dc13      	bgt.n	8017342 <ip4_input+0x212>
 801731a:	2b01      	cmp	r3, #1
 801731c:	d00c      	beq.n	8017338 <ip4_input+0x208>
 801731e:	2b06      	cmp	r3, #6
 8017320:	d005      	beq.n	801732e <ip4_input+0x1fe>
 8017322:	e00e      	b.n	8017342 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017324:	6839      	ldr	r1, [r7, #0]
 8017326:	6878      	ldr	r0, [r7, #4]
 8017328:	f7fc fade 	bl	80138e8 <udp_input>
        break;
 801732c:	e026      	b.n	801737c <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801732e:	6839      	ldr	r1, [r7, #0]
 8017330:	6878      	ldr	r0, [r7, #4]
 8017332:	f7f7 fe97 	bl	800f064 <tcp_input>
        break;
 8017336:	e021      	b.n	801737c <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017338:	6839      	ldr	r1, [r7, #0]
 801733a:	6878      	ldr	r0, [r7, #4]
 801733c:	f7ff fcd0 	bl	8016ce0 <icmp_input>
        break;
 8017340:	e01c      	b.n	801737c <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017342:	4b1a      	ldr	r3, [pc, #104]	; (80173ac <ip4_input+0x27c>)
 8017344:	695b      	ldr	r3, [r3, #20]
 8017346:	69b9      	ldr	r1, [r7, #24]
 8017348:	4618      	mov	r0, r3
 801734a:	f000 f90b 	bl	8017564 <ip4_addr_isbroadcast_u32>
 801734e:	4603      	mov	r3, r0
 8017350:	2b00      	cmp	r3, #0
 8017352:	d10f      	bne.n	8017374 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017354:	4b15      	ldr	r3, [pc, #84]	; (80173ac <ip4_input+0x27c>)
 8017356:	695b      	ldr	r3, [r3, #20]
 8017358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801735c:	2be0      	cmp	r3, #224	; 0xe0
 801735e:	d009      	beq.n	8017374 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017360:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017364:	4619      	mov	r1, r3
 8017366:	6878      	ldr	r0, [r7, #4]
 8017368:	f7f5 fd23 	bl	800cdb2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801736c:	2102      	movs	r1, #2
 801736e:	6878      	ldr	r0, [r7, #4]
 8017370:	f7ff fdba 	bl	8016ee8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017374:	6878      	ldr	r0, [r7, #4]
 8017376:	f7f5 fd2f 	bl	800cdd8 <pbuf_free>
        break;
 801737a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801737c:	4b0b      	ldr	r3, [pc, #44]	; (80173ac <ip4_input+0x27c>)
 801737e:	2200      	movs	r2, #0
 8017380:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017382:	4b0a      	ldr	r3, [pc, #40]	; (80173ac <ip4_input+0x27c>)
 8017384:	2200      	movs	r2, #0
 8017386:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017388:	4b08      	ldr	r3, [pc, #32]	; (80173ac <ip4_input+0x27c>)
 801738a:	2200      	movs	r2, #0
 801738c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801738e:	4b07      	ldr	r3, [pc, #28]	; (80173ac <ip4_input+0x27c>)
 8017390:	2200      	movs	r2, #0
 8017392:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017394:	4b05      	ldr	r3, [pc, #20]	; (80173ac <ip4_input+0x27c>)
 8017396:	2200      	movs	r2, #0
 8017398:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801739a:	4b04      	ldr	r3, [pc, #16]	; (80173ac <ip4_input+0x27c>)
 801739c:	2200      	movs	r2, #0
 801739e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80173a0:	2300      	movs	r3, #0
}
 80173a2:	4618      	mov	r0, r3
 80173a4:	3720      	adds	r7, #32
 80173a6:	46bd      	mov	sp, r7
 80173a8:	bd80      	pop	{r7, pc}
 80173aa:	bf00      	nop
 80173ac:	2000d68c 	.word	0x2000d68c
 80173b0:	20010df4 	.word	0x20010df4

080173b4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b08a      	sub	sp, #40	; 0x28
 80173b8:	af04      	add	r7, sp, #16
 80173ba:	60f8      	str	r0, [r7, #12]
 80173bc:	60b9      	str	r1, [r7, #8]
 80173be:	607a      	str	r2, [r7, #4]
 80173c0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80173c2:	68bb      	ldr	r3, [r7, #8]
 80173c4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d009      	beq.n	80173e0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80173cc:	68bb      	ldr	r3, [r7, #8]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d003      	beq.n	80173da <ip4_output_if+0x26>
 80173d2:	68bb      	ldr	r3, [r7, #8]
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d102      	bne.n	80173e0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80173da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173dc:	3304      	adds	r3, #4
 80173de:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80173e0:	78fa      	ldrb	r2, [r7, #3]
 80173e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e4:	9302      	str	r3, [sp, #8]
 80173e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80173ea:	9301      	str	r3, [sp, #4]
 80173ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80173f0:	9300      	str	r3, [sp, #0]
 80173f2:	4613      	mov	r3, r2
 80173f4:	687a      	ldr	r2, [r7, #4]
 80173f6:	6979      	ldr	r1, [r7, #20]
 80173f8:	68f8      	ldr	r0, [r7, #12]
 80173fa:	f000 f805 	bl	8017408 <ip4_output_if_src>
 80173fe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017400:	4618      	mov	r0, r3
 8017402:	3718      	adds	r7, #24
 8017404:	46bd      	mov	sp, r7
 8017406:	bd80      	pop	{r7, pc}

08017408 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017408:	b580      	push	{r7, lr}
 801740a:	b088      	sub	sp, #32
 801740c:	af00      	add	r7, sp, #0
 801740e:	60f8      	str	r0, [r7, #12]
 8017410:	60b9      	str	r1, [r7, #8]
 8017412:	607a      	str	r2, [r7, #4]
 8017414:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	7b9b      	ldrb	r3, [r3, #14]
 801741a:	2b01      	cmp	r3, #1
 801741c:	d006      	beq.n	801742c <ip4_output_if_src+0x24>
 801741e:	4b4b      	ldr	r3, [pc, #300]	; (801754c <ip4_output_if_src+0x144>)
 8017420:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017424:	494a      	ldr	r1, [pc, #296]	; (8017550 <ip4_output_if_src+0x148>)
 8017426:	484b      	ldr	r0, [pc, #300]	; (8017554 <ip4_output_if_src+0x14c>)
 8017428:	f001 fac2 	bl	80189b0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d060      	beq.n	80174f4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017432:	2314      	movs	r3, #20
 8017434:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017436:	2114      	movs	r1, #20
 8017438:	68f8      	ldr	r0, [r7, #12]
 801743a:	f7f5 fc37 	bl	800ccac <pbuf_add_header>
 801743e:	4603      	mov	r3, r0
 8017440:	2b00      	cmp	r3, #0
 8017442:	d002      	beq.n	801744a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017444:	f06f 0301 	mvn.w	r3, #1
 8017448:	e07c      	b.n	8017544 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	685b      	ldr	r3, [r3, #4]
 801744e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	895b      	ldrh	r3, [r3, #10]
 8017454:	2b13      	cmp	r3, #19
 8017456:	d806      	bhi.n	8017466 <ip4_output_if_src+0x5e>
 8017458:	4b3c      	ldr	r3, [pc, #240]	; (801754c <ip4_output_if_src+0x144>)
 801745a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801745e:	493e      	ldr	r1, [pc, #248]	; (8017558 <ip4_output_if_src+0x150>)
 8017460:	483c      	ldr	r0, [pc, #240]	; (8017554 <ip4_output_if_src+0x14c>)
 8017462:	f001 faa5 	bl	80189b0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017466:	69fb      	ldr	r3, [r7, #28]
 8017468:	78fa      	ldrb	r2, [r7, #3]
 801746a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801746c:	69fb      	ldr	r3, [r7, #28]
 801746e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017472:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	681a      	ldr	r2, [r3, #0]
 8017478:	69fb      	ldr	r3, [r7, #28]
 801747a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801747c:	8b7b      	ldrh	r3, [r7, #26]
 801747e:	089b      	lsrs	r3, r3, #2
 8017480:	b29b      	uxth	r3, r3
 8017482:	b2db      	uxtb	r3, r3
 8017484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017488:	b2da      	uxtb	r2, r3
 801748a:	69fb      	ldr	r3, [r7, #28]
 801748c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801748e:	69fb      	ldr	r3, [r7, #28]
 8017490:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017494:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	891b      	ldrh	r3, [r3, #8]
 801749a:	4618      	mov	r0, r3
 801749c:	f7f4 f868 	bl	800b570 <lwip_htons>
 80174a0:	4603      	mov	r3, r0
 80174a2:	461a      	mov	r2, r3
 80174a4:	69fb      	ldr	r3, [r7, #28]
 80174a6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80174a8:	69fb      	ldr	r3, [r7, #28]
 80174aa:	2200      	movs	r2, #0
 80174ac:	719a      	strb	r2, [r3, #6]
 80174ae:	2200      	movs	r2, #0
 80174b0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80174b2:	4b2a      	ldr	r3, [pc, #168]	; (801755c <ip4_output_if_src+0x154>)
 80174b4:	881b      	ldrh	r3, [r3, #0]
 80174b6:	4618      	mov	r0, r3
 80174b8:	f7f4 f85a 	bl	800b570 <lwip_htons>
 80174bc:	4603      	mov	r3, r0
 80174be:	461a      	mov	r2, r3
 80174c0:	69fb      	ldr	r3, [r7, #28]
 80174c2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80174c4:	4b25      	ldr	r3, [pc, #148]	; (801755c <ip4_output_if_src+0x154>)
 80174c6:	881b      	ldrh	r3, [r3, #0]
 80174c8:	3301      	adds	r3, #1
 80174ca:	b29a      	uxth	r2, r3
 80174cc:	4b23      	ldr	r3, [pc, #140]	; (801755c <ip4_output_if_src+0x154>)
 80174ce:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80174d0:	68bb      	ldr	r3, [r7, #8]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d104      	bne.n	80174e0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80174d6:	4b22      	ldr	r3, [pc, #136]	; (8017560 <ip4_output_if_src+0x158>)
 80174d8:	681a      	ldr	r2, [r3, #0]
 80174da:	69fb      	ldr	r3, [r7, #28]
 80174dc:	60da      	str	r2, [r3, #12]
 80174de:	e003      	b.n	80174e8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80174e0:	68bb      	ldr	r3, [r7, #8]
 80174e2:	681a      	ldr	r2, [r3, #0]
 80174e4:	69fb      	ldr	r3, [r7, #28]
 80174e6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80174e8:	69fb      	ldr	r3, [r7, #28]
 80174ea:	2200      	movs	r2, #0
 80174ec:	729a      	strb	r2, [r3, #10]
 80174ee:	2200      	movs	r2, #0
 80174f0:	72da      	strb	r2, [r3, #11]
 80174f2:	e00f      	b.n	8017514 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	895b      	ldrh	r3, [r3, #10]
 80174f8:	2b13      	cmp	r3, #19
 80174fa:	d802      	bhi.n	8017502 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80174fc:	f06f 0301 	mvn.w	r3, #1
 8017500:	e020      	b.n	8017544 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	685b      	ldr	r3, [r3, #4]
 8017506:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017508:	69fb      	ldr	r3, [r7, #28]
 801750a:	691b      	ldr	r3, [r3, #16]
 801750c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801750e:	f107 0314 	add.w	r3, r7, #20
 8017512:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017518:	2b00      	cmp	r3, #0
 801751a:	d00c      	beq.n	8017536 <ip4_output_if_src+0x12e>
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	891a      	ldrh	r2, [r3, #8]
 8017520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017524:	429a      	cmp	r2, r3
 8017526:	d906      	bls.n	8017536 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017528:	687a      	ldr	r2, [r7, #4]
 801752a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801752c:	68f8      	ldr	r0, [r7, #12]
 801752e:	f000 fd53 	bl	8017fd8 <ip4_frag>
 8017532:	4603      	mov	r3, r0
 8017534:	e006      	b.n	8017544 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017538:	695b      	ldr	r3, [r3, #20]
 801753a:	687a      	ldr	r2, [r7, #4]
 801753c:	68f9      	ldr	r1, [r7, #12]
 801753e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017540:	4798      	blx	r3
 8017542:	4603      	mov	r3, r0
}
 8017544:	4618      	mov	r0, r3
 8017546:	3720      	adds	r7, #32
 8017548:	46bd      	mov	sp, r7
 801754a:	bd80      	pop	{r7, pc}
 801754c:	0801d0f8 	.word	0x0801d0f8
 8017550:	0801d12c 	.word	0x0801d12c
 8017554:	0801d138 	.word	0x0801d138
 8017558:	0801d160 	.word	0x0801d160
 801755c:	20010f86 	.word	0x20010f86
 8017560:	080276d4 	.word	0x080276d4

08017564 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017564:	b480      	push	{r7}
 8017566:	b085      	sub	sp, #20
 8017568:	af00      	add	r7, sp, #0
 801756a:	6078      	str	r0, [r7, #4]
 801756c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017578:	d002      	beq.n	8017580 <ip4_addr_isbroadcast_u32+0x1c>
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d101      	bne.n	8017584 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017580:	2301      	movs	r3, #1
 8017582:	e02a      	b.n	80175da <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017584:	683b      	ldr	r3, [r7, #0]
 8017586:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801758a:	f003 0302 	and.w	r3, r3, #2
 801758e:	2b00      	cmp	r3, #0
 8017590:	d101      	bne.n	8017596 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017592:	2300      	movs	r3, #0
 8017594:	e021      	b.n	80175da <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017596:	683b      	ldr	r3, [r7, #0]
 8017598:	3304      	adds	r3, #4
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	687a      	ldr	r2, [r7, #4]
 801759e:	429a      	cmp	r2, r3
 80175a0:	d101      	bne.n	80175a6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80175a2:	2300      	movs	r3, #0
 80175a4:	e019      	b.n	80175da <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80175a6:	68fa      	ldr	r2, [r7, #12]
 80175a8:	683b      	ldr	r3, [r7, #0]
 80175aa:	3304      	adds	r3, #4
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	405a      	eors	r2, r3
 80175b0:	683b      	ldr	r3, [r7, #0]
 80175b2:	3308      	adds	r3, #8
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	4013      	ands	r3, r2
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d10d      	bne.n	80175d8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80175bc:	683b      	ldr	r3, [r7, #0]
 80175be:	3308      	adds	r3, #8
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	43da      	mvns	r2, r3
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80175c8:	683b      	ldr	r3, [r7, #0]
 80175ca:	3308      	adds	r3, #8
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80175d0:	429a      	cmp	r2, r3
 80175d2:	d101      	bne.n	80175d8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80175d4:	2301      	movs	r3, #1
 80175d6:	e000      	b.n	80175da <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80175d8:	2300      	movs	r3, #0
  }
}
 80175da:	4618      	mov	r0, r3
 80175dc:	3714      	adds	r7, #20
 80175de:	46bd      	mov	sp, r7
 80175e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e4:	4770      	bx	lr
	...

080175e8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b084      	sub	sp, #16
 80175ec:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80175ee:	2300      	movs	r3, #0
 80175f0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80175f2:	4b12      	ldr	r3, [pc, #72]	; (801763c <ip_reass_tmr+0x54>)
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80175f8:	e018      	b.n	801762c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	7fdb      	ldrb	r3, [r3, #31]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d00b      	beq.n	801761a <ip_reass_tmr+0x32>
      r->timer--;
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	7fdb      	ldrb	r3, [r3, #31]
 8017606:	3b01      	subs	r3, #1
 8017608:	b2da      	uxtb	r2, r3
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	60fb      	str	r3, [r7, #12]
 8017618:	e008      	b.n	801762c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017624:	68b9      	ldr	r1, [r7, #8]
 8017626:	6878      	ldr	r0, [r7, #4]
 8017628:	f000 f80a 	bl	8017640 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d1e3      	bne.n	80175fa <ip_reass_tmr+0x12>
    }
  }
}
 8017632:	bf00      	nop
 8017634:	bf00      	nop
 8017636:	3710      	adds	r7, #16
 8017638:	46bd      	mov	sp, r7
 801763a:	bd80      	pop	{r7, pc}
 801763c:	20010f88 	.word	0x20010f88

08017640 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017640:	b580      	push	{r7, lr}
 8017642:	b088      	sub	sp, #32
 8017644:	af00      	add	r7, sp, #0
 8017646:	6078      	str	r0, [r7, #4]
 8017648:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801764a:	2300      	movs	r3, #0
 801764c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801764e:	683a      	ldr	r2, [r7, #0]
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	429a      	cmp	r2, r3
 8017654:	d105      	bne.n	8017662 <ip_reass_free_complete_datagram+0x22>
 8017656:	4b45      	ldr	r3, [pc, #276]	; (801776c <ip_reass_free_complete_datagram+0x12c>)
 8017658:	22ab      	movs	r2, #171	; 0xab
 801765a:	4945      	ldr	r1, [pc, #276]	; (8017770 <ip_reass_free_complete_datagram+0x130>)
 801765c:	4845      	ldr	r0, [pc, #276]	; (8017774 <ip_reass_free_complete_datagram+0x134>)
 801765e:	f001 f9a7 	bl	80189b0 <iprintf>
  if (prev != NULL) {
 8017662:	683b      	ldr	r3, [r7, #0]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d00a      	beq.n	801767e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017668:	683b      	ldr	r3, [r7, #0]
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	687a      	ldr	r2, [r7, #4]
 801766e:	429a      	cmp	r2, r3
 8017670:	d005      	beq.n	801767e <ip_reass_free_complete_datagram+0x3e>
 8017672:	4b3e      	ldr	r3, [pc, #248]	; (801776c <ip_reass_free_complete_datagram+0x12c>)
 8017674:	22ad      	movs	r2, #173	; 0xad
 8017676:	4940      	ldr	r1, [pc, #256]	; (8017778 <ip_reass_free_complete_datagram+0x138>)
 8017678:	483e      	ldr	r0, [pc, #248]	; (8017774 <ip_reass_free_complete_datagram+0x134>)
 801767a:	f001 f999 	bl	80189b0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	685b      	ldr	r3, [r3, #4]
 8017682:	685b      	ldr	r3, [r3, #4]
 8017684:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017686:	697b      	ldr	r3, [r7, #20]
 8017688:	889b      	ldrh	r3, [r3, #4]
 801768a:	b29b      	uxth	r3, r3
 801768c:	2b00      	cmp	r3, #0
 801768e:	d12a      	bne.n	80176e6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	685b      	ldr	r3, [r3, #4]
 8017694:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017696:	697b      	ldr	r3, [r7, #20]
 8017698:	681a      	ldr	r2, [r3, #0]
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801769e:	69bb      	ldr	r3, [r7, #24]
 80176a0:	6858      	ldr	r0, [r3, #4]
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	3308      	adds	r3, #8
 80176a6:	2214      	movs	r2, #20
 80176a8:	4619      	mov	r1, r3
 80176aa:	f001 facf 	bl	8018c4c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80176ae:	2101      	movs	r1, #1
 80176b0:	69b8      	ldr	r0, [r7, #24]
 80176b2:	f7ff fc29 	bl	8016f08 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80176b6:	69b8      	ldr	r0, [r7, #24]
 80176b8:	f7f5 fc1c 	bl	800cef4 <pbuf_clen>
 80176bc:	4603      	mov	r3, r0
 80176be:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80176c0:	8bfa      	ldrh	r2, [r7, #30]
 80176c2:	8a7b      	ldrh	r3, [r7, #18]
 80176c4:	4413      	add	r3, r2
 80176c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80176ca:	db05      	blt.n	80176d8 <ip_reass_free_complete_datagram+0x98>
 80176cc:	4b27      	ldr	r3, [pc, #156]	; (801776c <ip_reass_free_complete_datagram+0x12c>)
 80176ce:	22bc      	movs	r2, #188	; 0xbc
 80176d0:	492a      	ldr	r1, [pc, #168]	; (801777c <ip_reass_free_complete_datagram+0x13c>)
 80176d2:	4828      	ldr	r0, [pc, #160]	; (8017774 <ip_reass_free_complete_datagram+0x134>)
 80176d4:	f001 f96c 	bl	80189b0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80176d8:	8bfa      	ldrh	r2, [r7, #30]
 80176da:	8a7b      	ldrh	r3, [r7, #18]
 80176dc:	4413      	add	r3, r2
 80176de:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80176e0:	69b8      	ldr	r0, [r7, #24]
 80176e2:	f7f5 fb79 	bl	800cdd8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	685b      	ldr	r3, [r3, #4]
 80176ea:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80176ec:	e01f      	b.n	801772e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80176ee:	69bb      	ldr	r3, [r7, #24]
 80176f0:	685b      	ldr	r3, [r3, #4]
 80176f2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80176f4:	69bb      	ldr	r3, [r7, #24]
 80176f6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80176f8:	697b      	ldr	r3, [r7, #20]
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80176fe:	68f8      	ldr	r0, [r7, #12]
 8017700:	f7f5 fbf8 	bl	800cef4 <pbuf_clen>
 8017704:	4603      	mov	r3, r0
 8017706:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017708:	8bfa      	ldrh	r2, [r7, #30]
 801770a:	8a7b      	ldrh	r3, [r7, #18]
 801770c:	4413      	add	r3, r2
 801770e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017712:	db05      	blt.n	8017720 <ip_reass_free_complete_datagram+0xe0>
 8017714:	4b15      	ldr	r3, [pc, #84]	; (801776c <ip_reass_free_complete_datagram+0x12c>)
 8017716:	22cc      	movs	r2, #204	; 0xcc
 8017718:	4918      	ldr	r1, [pc, #96]	; (801777c <ip_reass_free_complete_datagram+0x13c>)
 801771a:	4816      	ldr	r0, [pc, #88]	; (8017774 <ip_reass_free_complete_datagram+0x134>)
 801771c:	f001 f948 	bl	80189b0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017720:	8bfa      	ldrh	r2, [r7, #30]
 8017722:	8a7b      	ldrh	r3, [r7, #18]
 8017724:	4413      	add	r3, r2
 8017726:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017728:	68f8      	ldr	r0, [r7, #12]
 801772a:	f7f5 fb55 	bl	800cdd8 <pbuf_free>
  while (p != NULL) {
 801772e:	69bb      	ldr	r3, [r7, #24]
 8017730:	2b00      	cmp	r3, #0
 8017732:	d1dc      	bne.n	80176ee <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017734:	6839      	ldr	r1, [r7, #0]
 8017736:	6878      	ldr	r0, [r7, #4]
 8017738:	f000 f8c2 	bl	80178c0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801773c:	4b10      	ldr	r3, [pc, #64]	; (8017780 <ip_reass_free_complete_datagram+0x140>)
 801773e:	881b      	ldrh	r3, [r3, #0]
 8017740:	8bfa      	ldrh	r2, [r7, #30]
 8017742:	429a      	cmp	r2, r3
 8017744:	d905      	bls.n	8017752 <ip_reass_free_complete_datagram+0x112>
 8017746:	4b09      	ldr	r3, [pc, #36]	; (801776c <ip_reass_free_complete_datagram+0x12c>)
 8017748:	22d2      	movs	r2, #210	; 0xd2
 801774a:	490e      	ldr	r1, [pc, #56]	; (8017784 <ip_reass_free_complete_datagram+0x144>)
 801774c:	4809      	ldr	r0, [pc, #36]	; (8017774 <ip_reass_free_complete_datagram+0x134>)
 801774e:	f001 f92f 	bl	80189b0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017752:	4b0b      	ldr	r3, [pc, #44]	; (8017780 <ip_reass_free_complete_datagram+0x140>)
 8017754:	881a      	ldrh	r2, [r3, #0]
 8017756:	8bfb      	ldrh	r3, [r7, #30]
 8017758:	1ad3      	subs	r3, r2, r3
 801775a:	b29a      	uxth	r2, r3
 801775c:	4b08      	ldr	r3, [pc, #32]	; (8017780 <ip_reass_free_complete_datagram+0x140>)
 801775e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017760:	8bfb      	ldrh	r3, [r7, #30]
}
 8017762:	4618      	mov	r0, r3
 8017764:	3720      	adds	r7, #32
 8017766:	46bd      	mov	sp, r7
 8017768:	bd80      	pop	{r7, pc}
 801776a:	bf00      	nop
 801776c:	0801d190 	.word	0x0801d190
 8017770:	0801d1cc 	.word	0x0801d1cc
 8017774:	0801d1d8 	.word	0x0801d1d8
 8017778:	0801d200 	.word	0x0801d200
 801777c:	0801d214 	.word	0x0801d214
 8017780:	20010f8c 	.word	0x20010f8c
 8017784:	0801d234 	.word	0x0801d234

08017788 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017788:	b580      	push	{r7, lr}
 801778a:	b08a      	sub	sp, #40	; 0x28
 801778c:	af00      	add	r7, sp, #0
 801778e:	6078      	str	r0, [r7, #4]
 8017790:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017792:	2300      	movs	r3, #0
 8017794:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017796:	2300      	movs	r3, #0
 8017798:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801779a:	2300      	movs	r3, #0
 801779c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801779e:	2300      	movs	r3, #0
 80177a0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80177a2:	2300      	movs	r3, #0
 80177a4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80177a6:	4b28      	ldr	r3, [pc, #160]	; (8017848 <ip_reass_remove_oldest_datagram+0xc0>)
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80177ac:	e030      	b.n	8017810 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80177ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177b0:	695a      	ldr	r2, [r3, #20]
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	68db      	ldr	r3, [r3, #12]
 80177b6:	429a      	cmp	r2, r3
 80177b8:	d10c      	bne.n	80177d4 <ip_reass_remove_oldest_datagram+0x4c>
 80177ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177bc:	699a      	ldr	r2, [r3, #24]
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	691b      	ldr	r3, [r3, #16]
 80177c2:	429a      	cmp	r2, r3
 80177c4:	d106      	bne.n	80177d4 <ip_reass_remove_oldest_datagram+0x4c>
 80177c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177c8:	899a      	ldrh	r2, [r3, #12]
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	889b      	ldrh	r3, [r3, #4]
 80177ce:	b29b      	uxth	r3, r3
 80177d0:	429a      	cmp	r2, r3
 80177d2:	d014      	beq.n	80177fe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80177d4:	693b      	ldr	r3, [r7, #16]
 80177d6:	3301      	adds	r3, #1
 80177d8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80177da:	6a3b      	ldr	r3, [r7, #32]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d104      	bne.n	80177ea <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80177e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177e2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80177e4:	69fb      	ldr	r3, [r7, #28]
 80177e6:	61bb      	str	r3, [r7, #24]
 80177e8:	e009      	b.n	80177fe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80177ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177ec:	7fda      	ldrb	r2, [r3, #31]
 80177ee:	6a3b      	ldr	r3, [r7, #32]
 80177f0:	7fdb      	ldrb	r3, [r3, #31]
 80177f2:	429a      	cmp	r2, r3
 80177f4:	d803      	bhi.n	80177fe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80177f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177f8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80177fa:	69fb      	ldr	r3, [r7, #28]
 80177fc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80177fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	2b00      	cmp	r3, #0
 8017804:	d001      	beq.n	801780a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017808:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017812:	2b00      	cmp	r3, #0
 8017814:	d1cb      	bne.n	80177ae <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017816:	6a3b      	ldr	r3, [r7, #32]
 8017818:	2b00      	cmp	r3, #0
 801781a:	d008      	beq.n	801782e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801781c:	69b9      	ldr	r1, [r7, #24]
 801781e:	6a38      	ldr	r0, [r7, #32]
 8017820:	f7ff ff0e 	bl	8017640 <ip_reass_free_complete_datagram>
 8017824:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017826:	697a      	ldr	r2, [r7, #20]
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	4413      	add	r3, r2
 801782c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801782e:	697a      	ldr	r2, [r7, #20]
 8017830:	683b      	ldr	r3, [r7, #0]
 8017832:	429a      	cmp	r2, r3
 8017834:	da02      	bge.n	801783c <ip_reass_remove_oldest_datagram+0xb4>
 8017836:	693b      	ldr	r3, [r7, #16]
 8017838:	2b01      	cmp	r3, #1
 801783a:	dcac      	bgt.n	8017796 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801783c:	697b      	ldr	r3, [r7, #20]
}
 801783e:	4618      	mov	r0, r3
 8017840:	3728      	adds	r7, #40	; 0x28
 8017842:	46bd      	mov	sp, r7
 8017844:	bd80      	pop	{r7, pc}
 8017846:	bf00      	nop
 8017848:	20010f88 	.word	0x20010f88

0801784c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801784c:	b580      	push	{r7, lr}
 801784e:	b084      	sub	sp, #16
 8017850:	af00      	add	r7, sp, #0
 8017852:	6078      	str	r0, [r7, #4]
 8017854:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017856:	2004      	movs	r0, #4
 8017858:	f7f4 fb98 	bl	800bf8c <memp_malloc>
 801785c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d110      	bne.n	8017886 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017864:	6839      	ldr	r1, [r7, #0]
 8017866:	6878      	ldr	r0, [r7, #4]
 8017868:	f7ff ff8e 	bl	8017788 <ip_reass_remove_oldest_datagram>
 801786c:	4602      	mov	r2, r0
 801786e:	683b      	ldr	r3, [r7, #0]
 8017870:	4293      	cmp	r3, r2
 8017872:	dc03      	bgt.n	801787c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017874:	2004      	movs	r0, #4
 8017876:	f7f4 fb89 	bl	800bf8c <memp_malloc>
 801787a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	2b00      	cmp	r3, #0
 8017880:	d101      	bne.n	8017886 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017882:	2300      	movs	r3, #0
 8017884:	e016      	b.n	80178b4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017886:	2220      	movs	r2, #32
 8017888:	2100      	movs	r1, #0
 801788a:	68f8      	ldr	r0, [r7, #12]
 801788c:	f001 f8f5 	bl	8018a7a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	220f      	movs	r2, #15
 8017894:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017896:	4b09      	ldr	r3, [pc, #36]	; (80178bc <ip_reass_enqueue_new_datagram+0x70>)
 8017898:	681a      	ldr	r2, [r3, #0]
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801789e:	4a07      	ldr	r2, [pc, #28]	; (80178bc <ip_reass_enqueue_new_datagram+0x70>)
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	3308      	adds	r3, #8
 80178a8:	2214      	movs	r2, #20
 80178aa:	6879      	ldr	r1, [r7, #4]
 80178ac:	4618      	mov	r0, r3
 80178ae:	f001 f9cd 	bl	8018c4c <memcpy>
  return ipr;
 80178b2:	68fb      	ldr	r3, [r7, #12]
}
 80178b4:	4618      	mov	r0, r3
 80178b6:	3710      	adds	r7, #16
 80178b8:	46bd      	mov	sp, r7
 80178ba:	bd80      	pop	{r7, pc}
 80178bc:	20010f88 	.word	0x20010f88

080178c0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b082      	sub	sp, #8
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	6078      	str	r0, [r7, #4]
 80178c8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80178ca:	4b10      	ldr	r3, [pc, #64]	; (801790c <ip_reass_dequeue_datagram+0x4c>)
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	687a      	ldr	r2, [r7, #4]
 80178d0:	429a      	cmp	r2, r3
 80178d2:	d104      	bne.n	80178de <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	4a0c      	ldr	r2, [pc, #48]	; (801790c <ip_reass_dequeue_datagram+0x4c>)
 80178da:	6013      	str	r3, [r2, #0]
 80178dc:	e00d      	b.n	80178fa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80178de:	683b      	ldr	r3, [r7, #0]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d106      	bne.n	80178f2 <ip_reass_dequeue_datagram+0x32>
 80178e4:	4b0a      	ldr	r3, [pc, #40]	; (8017910 <ip_reass_dequeue_datagram+0x50>)
 80178e6:	f240 1245 	movw	r2, #325	; 0x145
 80178ea:	490a      	ldr	r1, [pc, #40]	; (8017914 <ip_reass_dequeue_datagram+0x54>)
 80178ec:	480a      	ldr	r0, [pc, #40]	; (8017918 <ip_reass_dequeue_datagram+0x58>)
 80178ee:	f001 f85f 	bl	80189b0 <iprintf>
    prev->next = ipr->next;
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	681a      	ldr	r2, [r3, #0]
 80178f6:	683b      	ldr	r3, [r7, #0]
 80178f8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80178fa:	6879      	ldr	r1, [r7, #4]
 80178fc:	2004      	movs	r0, #4
 80178fe:	f7f4 fbbb 	bl	800c078 <memp_free>
}
 8017902:	bf00      	nop
 8017904:	3708      	adds	r7, #8
 8017906:	46bd      	mov	sp, r7
 8017908:	bd80      	pop	{r7, pc}
 801790a:	bf00      	nop
 801790c:	20010f88 	.word	0x20010f88
 8017910:	0801d190 	.word	0x0801d190
 8017914:	0801d258 	.word	0x0801d258
 8017918:	0801d1d8 	.word	0x0801d1d8

0801791c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801791c:	b580      	push	{r7, lr}
 801791e:	b08c      	sub	sp, #48	; 0x30
 8017920:	af00      	add	r7, sp, #0
 8017922:	60f8      	str	r0, [r7, #12]
 8017924:	60b9      	str	r1, [r7, #8]
 8017926:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017928:	2300      	movs	r3, #0
 801792a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801792c:	2301      	movs	r3, #1
 801792e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017930:	68bb      	ldr	r3, [r7, #8]
 8017932:	685b      	ldr	r3, [r3, #4]
 8017934:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017936:	69fb      	ldr	r3, [r7, #28]
 8017938:	885b      	ldrh	r3, [r3, #2]
 801793a:	b29b      	uxth	r3, r3
 801793c:	4618      	mov	r0, r3
 801793e:	f7f3 fe17 	bl	800b570 <lwip_htons>
 8017942:	4603      	mov	r3, r0
 8017944:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017946:	69fb      	ldr	r3, [r7, #28]
 8017948:	781b      	ldrb	r3, [r3, #0]
 801794a:	f003 030f 	and.w	r3, r3, #15
 801794e:	b2db      	uxtb	r3, r3
 8017950:	009b      	lsls	r3, r3, #2
 8017952:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017954:	7e7b      	ldrb	r3, [r7, #25]
 8017956:	b29b      	uxth	r3, r3
 8017958:	8b7a      	ldrh	r2, [r7, #26]
 801795a:	429a      	cmp	r2, r3
 801795c:	d202      	bcs.n	8017964 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801795e:	f04f 33ff 	mov.w	r3, #4294967295
 8017962:	e135      	b.n	8017bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017964:	7e7b      	ldrb	r3, [r7, #25]
 8017966:	b29b      	uxth	r3, r3
 8017968:	8b7a      	ldrh	r2, [r7, #26]
 801796a:	1ad3      	subs	r3, r2, r3
 801796c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801796e:	69fb      	ldr	r3, [r7, #28]
 8017970:	88db      	ldrh	r3, [r3, #6]
 8017972:	b29b      	uxth	r3, r3
 8017974:	4618      	mov	r0, r3
 8017976:	f7f3 fdfb 	bl	800b570 <lwip_htons>
 801797a:	4603      	mov	r3, r0
 801797c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017980:	b29b      	uxth	r3, r3
 8017982:	00db      	lsls	r3, r3, #3
 8017984:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017986:	68bb      	ldr	r3, [r7, #8]
 8017988:	685b      	ldr	r3, [r3, #4]
 801798a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801798c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801798e:	2200      	movs	r2, #0
 8017990:	701a      	strb	r2, [r3, #0]
 8017992:	2200      	movs	r2, #0
 8017994:	705a      	strb	r2, [r3, #1]
 8017996:	2200      	movs	r2, #0
 8017998:	709a      	strb	r2, [r3, #2]
 801799a:	2200      	movs	r2, #0
 801799c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801799e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179a0:	8afa      	ldrh	r2, [r7, #22]
 80179a2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80179a4:	8afa      	ldrh	r2, [r7, #22]
 80179a6:	8b7b      	ldrh	r3, [r7, #26]
 80179a8:	4413      	add	r3, r2
 80179aa:	b29a      	uxth	r2, r3
 80179ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179ae:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80179b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179b2:	88db      	ldrh	r3, [r3, #6]
 80179b4:	b29b      	uxth	r3, r3
 80179b6:	8afa      	ldrh	r2, [r7, #22]
 80179b8:	429a      	cmp	r2, r3
 80179ba:	d902      	bls.n	80179c2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80179bc:	f04f 33ff 	mov.w	r3, #4294967295
 80179c0:	e106      	b.n	8017bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	685b      	ldr	r3, [r3, #4]
 80179c6:	627b      	str	r3, [r7, #36]	; 0x24
 80179c8:	e068      	b.n	8017a9c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80179ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179cc:	685b      	ldr	r3, [r3, #4]
 80179ce:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80179d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179d2:	889b      	ldrh	r3, [r3, #4]
 80179d4:	b29a      	uxth	r2, r3
 80179d6:	693b      	ldr	r3, [r7, #16]
 80179d8:	889b      	ldrh	r3, [r3, #4]
 80179da:	b29b      	uxth	r3, r3
 80179dc:	429a      	cmp	r2, r3
 80179de:	d235      	bcs.n	8017a4c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80179e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80179e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80179e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d020      	beq.n	8017a2e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80179ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179ee:	889b      	ldrh	r3, [r3, #4]
 80179f0:	b29a      	uxth	r2, r3
 80179f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179f4:	88db      	ldrh	r3, [r3, #6]
 80179f6:	b29b      	uxth	r3, r3
 80179f8:	429a      	cmp	r2, r3
 80179fa:	d307      	bcc.n	8017a0c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80179fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179fe:	88db      	ldrh	r3, [r3, #6]
 8017a00:	b29a      	uxth	r2, r3
 8017a02:	693b      	ldr	r3, [r7, #16]
 8017a04:	889b      	ldrh	r3, [r3, #4]
 8017a06:	b29b      	uxth	r3, r3
 8017a08:	429a      	cmp	r2, r3
 8017a0a:	d902      	bls.n	8017a12 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8017a10:	e0de      	b.n	8017bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a14:	68ba      	ldr	r2, [r7, #8]
 8017a16:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a1a:	88db      	ldrh	r3, [r3, #6]
 8017a1c:	b29a      	uxth	r2, r3
 8017a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a20:	889b      	ldrh	r3, [r3, #4]
 8017a22:	b29b      	uxth	r3, r3
 8017a24:	429a      	cmp	r2, r3
 8017a26:	d03d      	beq.n	8017aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017a28:	2300      	movs	r3, #0
 8017a2a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017a2c:	e03a      	b.n	8017aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a30:	88db      	ldrh	r3, [r3, #6]
 8017a32:	b29a      	uxth	r2, r3
 8017a34:	693b      	ldr	r3, [r7, #16]
 8017a36:	889b      	ldrh	r3, [r3, #4]
 8017a38:	b29b      	uxth	r3, r3
 8017a3a:	429a      	cmp	r2, r3
 8017a3c:	d902      	bls.n	8017a44 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8017a42:	e0c5      	b.n	8017bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	68ba      	ldr	r2, [r7, #8]
 8017a48:	605a      	str	r2, [r3, #4]
      break;
 8017a4a:	e02b      	b.n	8017aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a4e:	889b      	ldrh	r3, [r3, #4]
 8017a50:	b29a      	uxth	r2, r3
 8017a52:	693b      	ldr	r3, [r7, #16]
 8017a54:	889b      	ldrh	r3, [r3, #4]
 8017a56:	b29b      	uxth	r3, r3
 8017a58:	429a      	cmp	r2, r3
 8017a5a:	d102      	bne.n	8017a62 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8017a60:	e0b6      	b.n	8017bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a64:	889b      	ldrh	r3, [r3, #4]
 8017a66:	b29a      	uxth	r2, r3
 8017a68:	693b      	ldr	r3, [r7, #16]
 8017a6a:	88db      	ldrh	r3, [r3, #6]
 8017a6c:	b29b      	uxth	r3, r3
 8017a6e:	429a      	cmp	r2, r3
 8017a70:	d202      	bcs.n	8017a78 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017a72:	f04f 33ff 	mov.w	r3, #4294967295
 8017a76:	e0ab      	b.n	8017bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d009      	beq.n	8017a92 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a80:	88db      	ldrh	r3, [r3, #6]
 8017a82:	b29a      	uxth	r2, r3
 8017a84:	693b      	ldr	r3, [r7, #16]
 8017a86:	889b      	ldrh	r3, [r3, #4]
 8017a88:	b29b      	uxth	r3, r3
 8017a8a:	429a      	cmp	r2, r3
 8017a8c:	d001      	beq.n	8017a92 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017a8e:	2300      	movs	r3, #0
 8017a90:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017a92:	693b      	ldr	r3, [r7, #16]
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017a98:	693b      	ldr	r3, [r7, #16]
 8017a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d193      	bne.n	80179ca <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017aa2:	e000      	b.n	8017aa6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017aa4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d12d      	bne.n	8017b08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d01c      	beq.n	8017aec <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ab4:	88db      	ldrh	r3, [r3, #6]
 8017ab6:	b29a      	uxth	r2, r3
 8017ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017aba:	889b      	ldrh	r3, [r3, #4]
 8017abc:	b29b      	uxth	r3, r3
 8017abe:	429a      	cmp	r2, r3
 8017ac0:	d906      	bls.n	8017ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017ac2:	4b45      	ldr	r3, [pc, #276]	; (8017bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017ac4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017ac8:	4944      	ldr	r1, [pc, #272]	; (8017bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017aca:	4845      	ldr	r0, [pc, #276]	; (8017be0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017acc:	f000 ff70 	bl	80189b0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ad2:	68ba      	ldr	r2, [r7, #8]
 8017ad4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ad8:	88db      	ldrh	r3, [r3, #6]
 8017ada:	b29a      	uxth	r2, r3
 8017adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ade:	889b      	ldrh	r3, [r3, #4]
 8017ae0:	b29b      	uxth	r3, r3
 8017ae2:	429a      	cmp	r2, r3
 8017ae4:	d010      	beq.n	8017b08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	623b      	str	r3, [r7, #32]
 8017aea:	e00d      	b.n	8017b08 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	685b      	ldr	r3, [r3, #4]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d006      	beq.n	8017b02 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017af4:	4b38      	ldr	r3, [pc, #224]	; (8017bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017af6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017afa:	493a      	ldr	r1, [pc, #232]	; (8017be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017afc:	4838      	ldr	r0, [pc, #224]	; (8017be0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017afe:	f000 ff57 	bl	80189b0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	68ba      	ldr	r2, [r7, #8]
 8017b06:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d105      	bne.n	8017b1a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	7f9b      	ldrb	r3, [r3, #30]
 8017b12:	f003 0301 	and.w	r3, r3, #1
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d059      	beq.n	8017bce <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017b1a:	6a3b      	ldr	r3, [r7, #32]
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d04f      	beq.n	8017bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	685b      	ldr	r3, [r3, #4]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d006      	beq.n	8017b36 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	685b      	ldr	r3, [r3, #4]
 8017b2c:	685b      	ldr	r3, [r3, #4]
 8017b2e:	889b      	ldrh	r3, [r3, #4]
 8017b30:	b29b      	uxth	r3, r3
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d002      	beq.n	8017b3c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017b36:	2300      	movs	r3, #0
 8017b38:	623b      	str	r3, [r7, #32]
 8017b3a:	e041      	b.n	8017bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b3e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017b46:	e012      	b.n	8017b6e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b4a:	685b      	ldr	r3, [r3, #4]
 8017b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b50:	88db      	ldrh	r3, [r3, #6]
 8017b52:	b29a      	uxth	r2, r3
 8017b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b56:	889b      	ldrh	r3, [r3, #4]
 8017b58:	b29b      	uxth	r3, r3
 8017b5a:	429a      	cmp	r2, r3
 8017b5c:	d002      	beq.n	8017b64 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017b5e:	2300      	movs	r3, #0
 8017b60:	623b      	str	r3, [r7, #32]
            break;
 8017b62:	e007      	b.n	8017b74 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b66:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d1e9      	bne.n	8017b48 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017b74:	6a3b      	ldr	r3, [r7, #32]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d022      	beq.n	8017bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	685b      	ldr	r3, [r3, #4]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d106      	bne.n	8017b90 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017b82:	4b15      	ldr	r3, [pc, #84]	; (8017bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017b84:	f240 12df 	movw	r2, #479	; 0x1df
 8017b88:	4917      	ldr	r1, [pc, #92]	; (8017be8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017b8a:	4815      	ldr	r0, [pc, #84]	; (8017be0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017b8c:	f000 ff10 	bl	80189b0 <iprintf>
          LWIP_ASSERT("sanity check",
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	685b      	ldr	r3, [r3, #4]
 8017b94:	685b      	ldr	r3, [r3, #4]
 8017b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017b98:	429a      	cmp	r2, r3
 8017b9a:	d106      	bne.n	8017baa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017b9c:	4b0e      	ldr	r3, [pc, #56]	; (8017bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017b9e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017ba2:	4911      	ldr	r1, [pc, #68]	; (8017be8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017ba4:	480e      	ldr	r0, [pc, #56]	; (8017be0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017ba6:	f000 ff03 	bl	80189b0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d006      	beq.n	8017bc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017bb2:	4b09      	ldr	r3, [pc, #36]	; (8017bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017bb4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017bb8:	490c      	ldr	r1, [pc, #48]	; (8017bec <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017bba:	4809      	ldr	r0, [pc, #36]	; (8017be0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017bbc:	f000 fef8 	bl	80189b0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017bc0:	6a3b      	ldr	r3, [r7, #32]
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	bf14      	ite	ne
 8017bc6:	2301      	movne	r3, #1
 8017bc8:	2300      	moveq	r3, #0
 8017bca:	b2db      	uxtb	r3, r3
 8017bcc:	e000      	b.n	8017bd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017bce:	2300      	movs	r3, #0
}
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	3730      	adds	r7, #48	; 0x30
 8017bd4:	46bd      	mov	sp, r7
 8017bd6:	bd80      	pop	{r7, pc}
 8017bd8:	0801d190 	.word	0x0801d190
 8017bdc:	0801d274 	.word	0x0801d274
 8017be0:	0801d1d8 	.word	0x0801d1d8
 8017be4:	0801d294 	.word	0x0801d294
 8017be8:	0801d2cc 	.word	0x0801d2cc
 8017bec:	0801d2dc 	.word	0x0801d2dc

08017bf0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017bf0:	b580      	push	{r7, lr}
 8017bf2:	b08e      	sub	sp, #56	; 0x38
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	685b      	ldr	r3, [r3, #4]
 8017bfc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c00:	781b      	ldrb	r3, [r3, #0]
 8017c02:	f003 030f 	and.w	r3, r3, #15
 8017c06:	b2db      	uxtb	r3, r3
 8017c08:	009b      	lsls	r3, r3, #2
 8017c0a:	b2db      	uxtb	r3, r3
 8017c0c:	2b14      	cmp	r3, #20
 8017c0e:	f040 8171 	bne.w	8017ef4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c14:	88db      	ldrh	r3, [r3, #6]
 8017c16:	b29b      	uxth	r3, r3
 8017c18:	4618      	mov	r0, r3
 8017c1a:	f7f3 fca9 	bl	800b570 <lwip_htons>
 8017c1e:	4603      	mov	r3, r0
 8017c20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017c24:	b29b      	uxth	r3, r3
 8017c26:	00db      	lsls	r3, r3, #3
 8017c28:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c2c:	885b      	ldrh	r3, [r3, #2]
 8017c2e:	b29b      	uxth	r3, r3
 8017c30:	4618      	mov	r0, r3
 8017c32:	f7f3 fc9d 	bl	800b570 <lwip_htons>
 8017c36:	4603      	mov	r3, r0
 8017c38:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c3c:	781b      	ldrb	r3, [r3, #0]
 8017c3e:	f003 030f 	and.w	r3, r3, #15
 8017c42:	b2db      	uxtb	r3, r3
 8017c44:	009b      	lsls	r3, r3, #2
 8017c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017c4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017c4e:	b29b      	uxth	r3, r3
 8017c50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017c52:	429a      	cmp	r2, r3
 8017c54:	f0c0 8150 	bcc.w	8017ef8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017c58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017c5c:	b29b      	uxth	r3, r3
 8017c5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017c60:	1ad3      	subs	r3, r2, r3
 8017c62:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017c64:	6878      	ldr	r0, [r7, #4]
 8017c66:	f7f5 f945 	bl	800cef4 <pbuf_clen>
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017c6e:	4b8c      	ldr	r3, [pc, #560]	; (8017ea0 <ip4_reass+0x2b0>)
 8017c70:	881b      	ldrh	r3, [r3, #0]
 8017c72:	461a      	mov	r2, r3
 8017c74:	8c3b      	ldrh	r3, [r7, #32]
 8017c76:	4413      	add	r3, r2
 8017c78:	2b0a      	cmp	r3, #10
 8017c7a:	dd10      	ble.n	8017c9e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017c7c:	8c3b      	ldrh	r3, [r7, #32]
 8017c7e:	4619      	mov	r1, r3
 8017c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c82:	f7ff fd81 	bl	8017788 <ip_reass_remove_oldest_datagram>
 8017c86:	4603      	mov	r3, r0
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	f000 8137 	beq.w	8017efc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017c8e:	4b84      	ldr	r3, [pc, #528]	; (8017ea0 <ip4_reass+0x2b0>)
 8017c90:	881b      	ldrh	r3, [r3, #0]
 8017c92:	461a      	mov	r2, r3
 8017c94:	8c3b      	ldrh	r3, [r7, #32]
 8017c96:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017c98:	2b0a      	cmp	r3, #10
 8017c9a:	f300 812f 	bgt.w	8017efc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017c9e:	4b81      	ldr	r3, [pc, #516]	; (8017ea4 <ip4_reass+0x2b4>)
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	633b      	str	r3, [r7, #48]	; 0x30
 8017ca4:	e015      	b.n	8017cd2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ca8:	695a      	ldr	r2, [r3, #20]
 8017caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cac:	68db      	ldr	r3, [r3, #12]
 8017cae:	429a      	cmp	r2, r3
 8017cb0:	d10c      	bne.n	8017ccc <ip4_reass+0xdc>
 8017cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cb4:	699a      	ldr	r2, [r3, #24]
 8017cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cb8:	691b      	ldr	r3, [r3, #16]
 8017cba:	429a      	cmp	r2, r3
 8017cbc:	d106      	bne.n	8017ccc <ip4_reass+0xdc>
 8017cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cc0:	899a      	ldrh	r2, [r3, #12]
 8017cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cc4:	889b      	ldrh	r3, [r3, #4]
 8017cc6:	b29b      	uxth	r3, r3
 8017cc8:	429a      	cmp	r2, r3
 8017cca:	d006      	beq.n	8017cda <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8017cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d1e6      	bne.n	8017ca6 <ip4_reass+0xb6>
 8017cd8:	e000      	b.n	8017cdc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017cda:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d109      	bne.n	8017cf6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017ce2:	8c3b      	ldrh	r3, [r7, #32]
 8017ce4:	4619      	mov	r1, r3
 8017ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ce8:	f7ff fdb0 	bl	801784c <ip_reass_enqueue_new_datagram>
 8017cec:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d11c      	bne.n	8017d2e <ip4_reass+0x13e>
      goto nullreturn;
 8017cf4:	e105      	b.n	8017f02 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cf8:	88db      	ldrh	r3, [r3, #6]
 8017cfa:	b29b      	uxth	r3, r3
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	f7f3 fc37 	bl	800b570 <lwip_htons>
 8017d02:	4603      	mov	r3, r0
 8017d04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d110      	bne.n	8017d2e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d0e:	89db      	ldrh	r3, [r3, #14]
 8017d10:	4618      	mov	r0, r3
 8017d12:	f7f3 fc2d 	bl	800b570 <lwip_htons>
 8017d16:	4603      	mov	r3, r0
 8017d18:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d006      	beq.n	8017d2e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d22:	3308      	adds	r3, #8
 8017d24:	2214      	movs	r2, #20
 8017d26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017d28:	4618      	mov	r0, r3
 8017d2a:	f000 ff8f 	bl	8018c4c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d30:	88db      	ldrh	r3, [r3, #6]
 8017d32:	b29b      	uxth	r3, r3
 8017d34:	f003 0320 	and.w	r3, r3, #32
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	bf0c      	ite	eq
 8017d3c:	2301      	moveq	r3, #1
 8017d3e:	2300      	movne	r3, #0
 8017d40:	b2db      	uxtb	r3, r3
 8017d42:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017d44:	69fb      	ldr	r3, [r7, #28]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d00e      	beq.n	8017d68 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017d4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017d4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d4e:	4413      	add	r3, r2
 8017d50:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017d52:	8b7a      	ldrh	r2, [r7, #26]
 8017d54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017d56:	429a      	cmp	r2, r3
 8017d58:	f0c0 80a0 	bcc.w	8017e9c <ip4_reass+0x2ac>
 8017d5c:	8b7b      	ldrh	r3, [r7, #26]
 8017d5e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017d62:	4293      	cmp	r3, r2
 8017d64:	f200 809a 	bhi.w	8017e9c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017d68:	69fa      	ldr	r2, [r7, #28]
 8017d6a:	6879      	ldr	r1, [r7, #4]
 8017d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017d6e:	f7ff fdd5 	bl	801791c <ip_reass_chain_frag_into_datagram_and_validate>
 8017d72:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017d74:	697b      	ldr	r3, [r7, #20]
 8017d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d7a:	f000 809b 	beq.w	8017eb4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017d7e:	4b48      	ldr	r3, [pc, #288]	; (8017ea0 <ip4_reass+0x2b0>)
 8017d80:	881a      	ldrh	r2, [r3, #0]
 8017d82:	8c3b      	ldrh	r3, [r7, #32]
 8017d84:	4413      	add	r3, r2
 8017d86:	b29a      	uxth	r2, r3
 8017d88:	4b45      	ldr	r3, [pc, #276]	; (8017ea0 <ip4_reass+0x2b0>)
 8017d8a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017d8c:	69fb      	ldr	r3, [r7, #28]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d00d      	beq.n	8017dae <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017d92:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017d94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d96:	4413      	add	r3, r2
 8017d98:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d9c:	8a7a      	ldrh	r2, [r7, #18]
 8017d9e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017da2:	7f9b      	ldrb	r3, [r3, #30]
 8017da4:	f043 0301 	orr.w	r3, r3, #1
 8017da8:	b2da      	uxtb	r2, r3
 8017daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dac:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017dae:	697b      	ldr	r3, [r7, #20]
 8017db0:	2b01      	cmp	r3, #1
 8017db2:	d171      	bne.n	8017e98 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017db6:	8b9b      	ldrh	r3, [r3, #28]
 8017db8:	3314      	adds	r3, #20
 8017dba:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dbe:	685b      	ldr	r3, [r3, #4]
 8017dc0:	685b      	ldr	r3, [r3, #4]
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dc8:	685b      	ldr	r3, [r3, #4]
 8017dca:	685b      	ldr	r3, [r3, #4]
 8017dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dd0:	3308      	adds	r3, #8
 8017dd2:	2214      	movs	r2, #20
 8017dd4:	4619      	mov	r1, r3
 8017dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017dd8:	f000 ff38 	bl	8018c4c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017ddc:	8a3b      	ldrh	r3, [r7, #16]
 8017dde:	4618      	mov	r0, r3
 8017de0:	f7f3 fbc6 	bl	800b570 <lwip_htons>
 8017de4:	4603      	mov	r3, r0
 8017de6:	461a      	mov	r2, r3
 8017de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dea:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dee:	2200      	movs	r2, #0
 8017df0:	719a      	strb	r2, [r3, #6]
 8017df2:	2200      	movs	r2, #0
 8017df4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017df8:	2200      	movs	r2, #0
 8017dfa:	729a      	strb	r2, [r3, #10]
 8017dfc:	2200      	movs	r2, #0
 8017dfe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e02:	685b      	ldr	r3, [r3, #4]
 8017e04:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017e06:	e00d      	b.n	8017e24 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e0a:	685b      	ldr	r3, [r3, #4]
 8017e0c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017e0e:	2114      	movs	r1, #20
 8017e10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017e12:	f7f4 ff5b 	bl	800cccc <pbuf_remove_header>
      pbuf_cat(p, r);
 8017e16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017e18:	6878      	ldr	r0, [r7, #4]
 8017e1a:	f7f5 f8ab 	bl	800cf74 <pbuf_cat>
      r = iprh->next_pbuf;
 8017e1e:	68fb      	ldr	r3, [r7, #12]
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d1ee      	bne.n	8017e08 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017e2a:	4b1e      	ldr	r3, [pc, #120]	; (8017ea4 <ip4_reass+0x2b4>)
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e30:	429a      	cmp	r2, r3
 8017e32:	d102      	bne.n	8017e3a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017e34:	2300      	movs	r3, #0
 8017e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017e38:	e010      	b.n	8017e5c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017e3a:	4b1a      	ldr	r3, [pc, #104]	; (8017ea4 <ip4_reass+0x2b4>)
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017e40:	e007      	b.n	8017e52 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e48:	429a      	cmp	r2, r3
 8017e4a:	d006      	beq.n	8017e5a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d1f4      	bne.n	8017e42 <ip4_reass+0x252>
 8017e58:	e000      	b.n	8017e5c <ip4_reass+0x26c>
          break;
 8017e5a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017e5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017e5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017e60:	f7ff fd2e 	bl	80178c0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017e64:	6878      	ldr	r0, [r7, #4]
 8017e66:	f7f5 f845 	bl	800cef4 <pbuf_clen>
 8017e6a:	4603      	mov	r3, r0
 8017e6c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017e6e:	4b0c      	ldr	r3, [pc, #48]	; (8017ea0 <ip4_reass+0x2b0>)
 8017e70:	881b      	ldrh	r3, [r3, #0]
 8017e72:	8c3a      	ldrh	r2, [r7, #32]
 8017e74:	429a      	cmp	r2, r3
 8017e76:	d906      	bls.n	8017e86 <ip4_reass+0x296>
 8017e78:	4b0b      	ldr	r3, [pc, #44]	; (8017ea8 <ip4_reass+0x2b8>)
 8017e7a:	f240 229b 	movw	r2, #667	; 0x29b
 8017e7e:	490b      	ldr	r1, [pc, #44]	; (8017eac <ip4_reass+0x2bc>)
 8017e80:	480b      	ldr	r0, [pc, #44]	; (8017eb0 <ip4_reass+0x2c0>)
 8017e82:	f000 fd95 	bl	80189b0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017e86:	4b06      	ldr	r3, [pc, #24]	; (8017ea0 <ip4_reass+0x2b0>)
 8017e88:	881a      	ldrh	r2, [r3, #0]
 8017e8a:	8c3b      	ldrh	r3, [r7, #32]
 8017e8c:	1ad3      	subs	r3, r2, r3
 8017e8e:	b29a      	uxth	r2, r3
 8017e90:	4b03      	ldr	r3, [pc, #12]	; (8017ea0 <ip4_reass+0x2b0>)
 8017e92:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	e038      	b.n	8017f0a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017e98:	2300      	movs	r3, #0
 8017e9a:	e036      	b.n	8017f0a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8017e9c:	bf00      	nop
 8017e9e:	e00a      	b.n	8017eb6 <ip4_reass+0x2c6>
 8017ea0:	20010f8c 	.word	0x20010f8c
 8017ea4:	20010f88 	.word	0x20010f88
 8017ea8:	0801d190 	.word	0x0801d190
 8017eac:	0801d300 	.word	0x0801d300
 8017eb0:	0801d1d8 	.word	0x0801d1d8
    goto nullreturn_ipr;
 8017eb4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d106      	bne.n	8017eca <ip4_reass+0x2da>
 8017ebc:	4b15      	ldr	r3, [pc, #84]	; (8017f14 <ip4_reass+0x324>)
 8017ebe:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017ec2:	4915      	ldr	r1, [pc, #84]	; (8017f18 <ip4_reass+0x328>)
 8017ec4:	4815      	ldr	r0, [pc, #84]	; (8017f1c <ip4_reass+0x32c>)
 8017ec6:	f000 fd73 	bl	80189b0 <iprintf>
  if (ipr->p == NULL) {
 8017eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ecc:	685b      	ldr	r3, [r3, #4]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d116      	bne.n	8017f00 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017ed2:	4b13      	ldr	r3, [pc, #76]	; (8017f20 <ip4_reass+0x330>)
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ed8:	429a      	cmp	r2, r3
 8017eda:	d006      	beq.n	8017eea <ip4_reass+0x2fa>
 8017edc:	4b0d      	ldr	r3, [pc, #52]	; (8017f14 <ip4_reass+0x324>)
 8017ede:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017ee2:	4910      	ldr	r1, [pc, #64]	; (8017f24 <ip4_reass+0x334>)
 8017ee4:	480d      	ldr	r0, [pc, #52]	; (8017f1c <ip4_reass+0x32c>)
 8017ee6:	f000 fd63 	bl	80189b0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017eea:	2100      	movs	r1, #0
 8017eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017eee:	f7ff fce7 	bl	80178c0 <ip_reass_dequeue_datagram>
 8017ef2:	e006      	b.n	8017f02 <ip4_reass+0x312>
    goto nullreturn;
 8017ef4:	bf00      	nop
 8017ef6:	e004      	b.n	8017f02 <ip4_reass+0x312>
    goto nullreturn;
 8017ef8:	bf00      	nop
 8017efa:	e002      	b.n	8017f02 <ip4_reass+0x312>
      goto nullreturn;
 8017efc:	bf00      	nop
 8017efe:	e000      	b.n	8017f02 <ip4_reass+0x312>
  }

nullreturn:
 8017f00:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017f02:	6878      	ldr	r0, [r7, #4]
 8017f04:	f7f4 ff68 	bl	800cdd8 <pbuf_free>
  return NULL;
 8017f08:	2300      	movs	r3, #0
}
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	3738      	adds	r7, #56	; 0x38
 8017f0e:	46bd      	mov	sp, r7
 8017f10:	bd80      	pop	{r7, pc}
 8017f12:	bf00      	nop
 8017f14:	0801d190 	.word	0x0801d190
 8017f18:	0801d31c 	.word	0x0801d31c
 8017f1c:	0801d1d8 	.word	0x0801d1d8
 8017f20:	20010f88 	.word	0x20010f88
 8017f24:	0801d328 	.word	0x0801d328

08017f28 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017f28:	b580      	push	{r7, lr}
 8017f2a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017f2c:	2005      	movs	r0, #5
 8017f2e:	f7f4 f82d 	bl	800bf8c <memp_malloc>
 8017f32:	4603      	mov	r3, r0
}
 8017f34:	4618      	mov	r0, r3
 8017f36:	bd80      	pop	{r7, pc}

08017f38 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b082      	sub	sp, #8
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	d106      	bne.n	8017f54 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017f46:	4b07      	ldr	r3, [pc, #28]	; (8017f64 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017f48:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017f4c:	4906      	ldr	r1, [pc, #24]	; (8017f68 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017f4e:	4807      	ldr	r0, [pc, #28]	; (8017f6c <ip_frag_free_pbuf_custom_ref+0x34>)
 8017f50:	f000 fd2e 	bl	80189b0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017f54:	6879      	ldr	r1, [r7, #4]
 8017f56:	2005      	movs	r0, #5
 8017f58:	f7f4 f88e 	bl	800c078 <memp_free>
}
 8017f5c:	bf00      	nop
 8017f5e:	3708      	adds	r7, #8
 8017f60:	46bd      	mov	sp, r7
 8017f62:	bd80      	pop	{r7, pc}
 8017f64:	0801d190 	.word	0x0801d190
 8017f68:	0801d348 	.word	0x0801d348
 8017f6c:	0801d1d8 	.word	0x0801d1d8

08017f70 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017f70:	b580      	push	{r7, lr}
 8017f72:	b084      	sub	sp, #16
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d106      	bne.n	8017f90 <ipfrag_free_pbuf_custom+0x20>
 8017f82:	4b11      	ldr	r3, [pc, #68]	; (8017fc8 <ipfrag_free_pbuf_custom+0x58>)
 8017f84:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017f88:	4910      	ldr	r1, [pc, #64]	; (8017fcc <ipfrag_free_pbuf_custom+0x5c>)
 8017f8a:	4811      	ldr	r0, [pc, #68]	; (8017fd0 <ipfrag_free_pbuf_custom+0x60>)
 8017f8c:	f000 fd10 	bl	80189b0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017f90:	68fa      	ldr	r2, [r7, #12]
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	429a      	cmp	r2, r3
 8017f96:	d006      	beq.n	8017fa6 <ipfrag_free_pbuf_custom+0x36>
 8017f98:	4b0b      	ldr	r3, [pc, #44]	; (8017fc8 <ipfrag_free_pbuf_custom+0x58>)
 8017f9a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017f9e:	490d      	ldr	r1, [pc, #52]	; (8017fd4 <ipfrag_free_pbuf_custom+0x64>)
 8017fa0:	480b      	ldr	r0, [pc, #44]	; (8017fd0 <ipfrag_free_pbuf_custom+0x60>)
 8017fa2:	f000 fd05 	bl	80189b0 <iprintf>
  if (pcr->original != NULL) {
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	695b      	ldr	r3, [r3, #20]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d004      	beq.n	8017fb8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	695b      	ldr	r3, [r3, #20]
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	f7f4 ff10 	bl	800cdd8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017fb8:	68f8      	ldr	r0, [r7, #12]
 8017fba:	f7ff ffbd 	bl	8017f38 <ip_frag_free_pbuf_custom_ref>
}
 8017fbe:	bf00      	nop
 8017fc0:	3710      	adds	r7, #16
 8017fc2:	46bd      	mov	sp, r7
 8017fc4:	bd80      	pop	{r7, pc}
 8017fc6:	bf00      	nop
 8017fc8:	0801d190 	.word	0x0801d190
 8017fcc:	0801d354 	.word	0x0801d354
 8017fd0:	0801d1d8 	.word	0x0801d1d8
 8017fd4:	0801d360 	.word	0x0801d360

08017fd8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b094      	sub	sp, #80	; 0x50
 8017fdc:	af02      	add	r7, sp, #8
 8017fde:	60f8      	str	r0, [r7, #12]
 8017fe0:	60b9      	str	r1, [r7, #8]
 8017fe2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017fe4:	2300      	movs	r3, #0
 8017fe6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017fea:	68bb      	ldr	r3, [r7, #8]
 8017fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017fee:	3b14      	subs	r3, #20
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	da00      	bge.n	8017ff6 <ip4_frag+0x1e>
 8017ff4:	3307      	adds	r3, #7
 8017ff6:	10db      	asrs	r3, r3, #3
 8017ff8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017ffa:	2314      	movs	r3, #20
 8017ffc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	685b      	ldr	r3, [r3, #4]
 8018002:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018006:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801800a:	781b      	ldrb	r3, [r3, #0]
 801800c:	f003 030f 	and.w	r3, r3, #15
 8018010:	b2db      	uxtb	r3, r3
 8018012:	009b      	lsls	r3, r3, #2
 8018014:	b2db      	uxtb	r3, r3
 8018016:	2b14      	cmp	r3, #20
 8018018:	d002      	beq.n	8018020 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801801a:	f06f 0305 	mvn.w	r3, #5
 801801e:	e110      	b.n	8018242 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	895b      	ldrh	r3, [r3, #10]
 8018024:	2b13      	cmp	r3, #19
 8018026:	d809      	bhi.n	801803c <ip4_frag+0x64>
 8018028:	4b88      	ldr	r3, [pc, #544]	; (801824c <ip4_frag+0x274>)
 801802a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801802e:	4988      	ldr	r1, [pc, #544]	; (8018250 <ip4_frag+0x278>)
 8018030:	4888      	ldr	r0, [pc, #544]	; (8018254 <ip4_frag+0x27c>)
 8018032:	f000 fcbd 	bl	80189b0 <iprintf>
 8018036:	f06f 0305 	mvn.w	r3, #5
 801803a:	e102      	b.n	8018242 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801803e:	88db      	ldrh	r3, [r3, #6]
 8018040:	b29b      	uxth	r3, r3
 8018042:	4618      	mov	r0, r3
 8018044:	f7f3 fa94 	bl	800b570 <lwip_htons>
 8018048:	4603      	mov	r3, r0
 801804a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801804c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801804e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018052:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018056:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801805c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	891b      	ldrh	r3, [r3, #8]
 8018062:	3b14      	subs	r3, #20
 8018064:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018068:	e0e1      	b.n	801822e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801806a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801806c:	00db      	lsls	r3, r3, #3
 801806e:	b29b      	uxth	r3, r3
 8018070:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018074:	4293      	cmp	r3, r2
 8018076:	bf28      	it	cs
 8018078:	4613      	movcs	r3, r2
 801807a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801807c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018080:	2114      	movs	r1, #20
 8018082:	200e      	movs	r0, #14
 8018084:	f7f4 fbc4 	bl	800c810 <pbuf_alloc>
 8018088:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801808c:	2b00      	cmp	r3, #0
 801808e:	f000 80d5 	beq.w	801823c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018094:	895b      	ldrh	r3, [r3, #10]
 8018096:	2b13      	cmp	r3, #19
 8018098:	d806      	bhi.n	80180a8 <ip4_frag+0xd0>
 801809a:	4b6c      	ldr	r3, [pc, #432]	; (801824c <ip4_frag+0x274>)
 801809c:	f44f 7249 	mov.w	r2, #804	; 0x324
 80180a0:	496d      	ldr	r1, [pc, #436]	; (8018258 <ip4_frag+0x280>)
 80180a2:	486c      	ldr	r0, [pc, #432]	; (8018254 <ip4_frag+0x27c>)
 80180a4:	f000 fc84 	bl	80189b0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80180a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180aa:	685b      	ldr	r3, [r3, #4]
 80180ac:	2214      	movs	r2, #20
 80180ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80180b0:	4618      	mov	r0, r3
 80180b2:	f000 fdcb 	bl	8018c4c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80180b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180b8:	685b      	ldr	r3, [r3, #4]
 80180ba:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80180bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80180be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80180c2:	e064      	b.n	801818e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	895a      	ldrh	r2, [r3, #10]
 80180c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80180ca:	1ad3      	subs	r3, r2, r3
 80180cc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	895b      	ldrh	r3, [r3, #10]
 80180d2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80180d4:	429a      	cmp	r2, r3
 80180d6:	d906      	bls.n	80180e6 <ip4_frag+0x10e>
 80180d8:	4b5c      	ldr	r3, [pc, #368]	; (801824c <ip4_frag+0x274>)
 80180da:	f240 322d 	movw	r2, #813	; 0x32d
 80180de:	495f      	ldr	r1, [pc, #380]	; (801825c <ip4_frag+0x284>)
 80180e0:	485c      	ldr	r0, [pc, #368]	; (8018254 <ip4_frag+0x27c>)
 80180e2:	f000 fc65 	bl	80189b0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80180e6:	8bfa      	ldrh	r2, [r7, #30]
 80180e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80180ec:	4293      	cmp	r3, r2
 80180ee:	bf28      	it	cs
 80180f0:	4613      	movcs	r3, r2
 80180f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80180f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d105      	bne.n	801810a <ip4_frag+0x132>
        poff = 0;
 80180fe:	2300      	movs	r3, #0
 8018100:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018102:	68fb      	ldr	r3, [r7, #12]
 8018104:	681b      	ldr	r3, [r3, #0]
 8018106:	60fb      	str	r3, [r7, #12]
        continue;
 8018108:	e041      	b.n	801818e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801810a:	f7ff ff0d 	bl	8017f28 <ip_frag_alloc_pbuf_custom_ref>
 801810e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018110:	69bb      	ldr	r3, [r7, #24]
 8018112:	2b00      	cmp	r3, #0
 8018114:	d103      	bne.n	801811e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018116:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018118:	f7f4 fe5e 	bl	800cdd8 <pbuf_free>
        goto memerr;
 801811c:	e08f      	b.n	801823e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801811e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018124:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018126:	4413      	add	r3, r2
 8018128:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801812c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018130:	9201      	str	r2, [sp, #4]
 8018132:	9300      	str	r3, [sp, #0]
 8018134:	4603      	mov	r3, r0
 8018136:	2241      	movs	r2, #65	; 0x41
 8018138:	2000      	movs	r0, #0
 801813a:	f7f4 fc93 	bl	800ca64 <pbuf_alloced_custom>
 801813e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018140:	697b      	ldr	r3, [r7, #20]
 8018142:	2b00      	cmp	r3, #0
 8018144:	d106      	bne.n	8018154 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018146:	69b8      	ldr	r0, [r7, #24]
 8018148:	f7ff fef6 	bl	8017f38 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801814c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801814e:	f7f4 fe43 	bl	800cdd8 <pbuf_free>
        goto memerr;
 8018152:	e074      	b.n	801823e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018154:	68f8      	ldr	r0, [r7, #12]
 8018156:	f7f4 fee5 	bl	800cf24 <pbuf_ref>
      pcr->original = p;
 801815a:	69bb      	ldr	r3, [r7, #24]
 801815c:	68fa      	ldr	r2, [r7, #12]
 801815e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018160:	69bb      	ldr	r3, [r7, #24]
 8018162:	4a3f      	ldr	r2, [pc, #252]	; (8018260 <ip4_frag+0x288>)
 8018164:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018166:	6979      	ldr	r1, [r7, #20]
 8018168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801816a:	f7f4 ff03 	bl	800cf74 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801816e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018172:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018176:	1ad3      	subs	r3, r2, r3
 8018178:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801817c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018180:	2b00      	cmp	r3, #0
 8018182:	d004      	beq.n	801818e <ip4_frag+0x1b6>
        poff = 0;
 8018184:	2300      	movs	r3, #0
 8018186:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801818e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018192:	2b00      	cmp	r3, #0
 8018194:	d196      	bne.n	80180c4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018196:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018198:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801819c:	4413      	add	r3, r2
 801819e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80181a0:	68bb      	ldr	r3, [r7, #8]
 80181a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80181a4:	f1a3 0213 	sub.w	r2, r3, #19
 80181a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80181ac:	429a      	cmp	r2, r3
 80181ae:	bfcc      	ite	gt
 80181b0:	2301      	movgt	r3, #1
 80181b2:	2300      	movle	r3, #0
 80181b4:	b2db      	uxtb	r3, r3
 80181b6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80181b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80181bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80181c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80181c2:	6a3b      	ldr	r3, [r7, #32]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d002      	beq.n	80181ce <ip4_frag+0x1f6>
 80181c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d003      	beq.n	80181d6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80181ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80181d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80181d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80181d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80181d8:	4618      	mov	r0, r3
 80181da:	f7f3 f9c9 	bl	800b570 <lwip_htons>
 80181de:	4603      	mov	r3, r0
 80181e0:	461a      	mov	r2, r3
 80181e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181e4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80181e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80181e8:	3314      	adds	r3, #20
 80181ea:	b29b      	uxth	r3, r3
 80181ec:	4618      	mov	r0, r3
 80181ee:	f7f3 f9bf 	bl	800b570 <lwip_htons>
 80181f2:	4603      	mov	r3, r0
 80181f4:	461a      	mov	r2, r3
 80181f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181f8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80181fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181fc:	2200      	movs	r2, #0
 80181fe:	729a      	strb	r2, [r3, #10]
 8018200:	2200      	movs	r2, #0
 8018202:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018204:	68bb      	ldr	r3, [r7, #8]
 8018206:	695b      	ldr	r3, [r3, #20]
 8018208:	687a      	ldr	r2, [r7, #4]
 801820a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801820c:	68b8      	ldr	r0, [r7, #8]
 801820e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018212:	f7f4 fde1 	bl	800cdd8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018216:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801821a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801821c:	1ad3      	subs	r3, r2, r3
 801821e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018222:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018226:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018228:	4413      	add	r3, r2
 801822a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801822e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018232:	2b00      	cmp	r3, #0
 8018234:	f47f af19 	bne.w	801806a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018238:	2300      	movs	r3, #0
 801823a:	e002      	b.n	8018242 <ip4_frag+0x26a>
      goto memerr;
 801823c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801823e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018242:	4618      	mov	r0, r3
 8018244:	3748      	adds	r7, #72	; 0x48
 8018246:	46bd      	mov	sp, r7
 8018248:	bd80      	pop	{r7, pc}
 801824a:	bf00      	nop
 801824c:	0801d190 	.word	0x0801d190
 8018250:	0801d36c 	.word	0x0801d36c
 8018254:	0801d1d8 	.word	0x0801d1d8
 8018258:	0801d388 	.word	0x0801d388
 801825c:	0801d3a8 	.word	0x0801d3a8
 8018260:	08017f71 	.word	0x08017f71

08018264 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018264:	b580      	push	{r7, lr}
 8018266:	b086      	sub	sp, #24
 8018268:	af00      	add	r7, sp, #0
 801826a:	6078      	str	r0, [r7, #4]
 801826c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801826e:	230e      	movs	r3, #14
 8018270:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	895b      	ldrh	r3, [r3, #10]
 8018276:	2b0e      	cmp	r3, #14
 8018278:	d96e      	bls.n	8018358 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	7bdb      	ldrb	r3, [r3, #15]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d106      	bne.n	8018290 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018282:	683b      	ldr	r3, [r7, #0]
 8018284:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018288:	3301      	adds	r3, #1
 801828a:	b2da      	uxtb	r2, r3
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	685b      	ldr	r3, [r3, #4]
 8018294:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018296:	693b      	ldr	r3, [r7, #16]
 8018298:	7b1a      	ldrb	r2, [r3, #12]
 801829a:	7b5b      	ldrb	r3, [r3, #13]
 801829c:	021b      	lsls	r3, r3, #8
 801829e:	4313      	orrs	r3, r2
 80182a0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80182a2:	693b      	ldr	r3, [r7, #16]
 80182a4:	781b      	ldrb	r3, [r3, #0]
 80182a6:	f003 0301 	and.w	r3, r3, #1
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d023      	beq.n	80182f6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80182ae:	693b      	ldr	r3, [r7, #16]
 80182b0:	781b      	ldrb	r3, [r3, #0]
 80182b2:	2b01      	cmp	r3, #1
 80182b4:	d10f      	bne.n	80182d6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80182b6:	693b      	ldr	r3, [r7, #16]
 80182b8:	785b      	ldrb	r3, [r3, #1]
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d11b      	bne.n	80182f6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80182be:	693b      	ldr	r3, [r7, #16]
 80182c0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80182c2:	2b5e      	cmp	r3, #94	; 0x5e
 80182c4:	d117      	bne.n	80182f6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	7b5b      	ldrb	r3, [r3, #13]
 80182ca:	f043 0310 	orr.w	r3, r3, #16
 80182ce:	b2da      	uxtb	r2, r3
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	735a      	strb	r2, [r3, #13]
 80182d4:	e00f      	b.n	80182f6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80182d6:	693b      	ldr	r3, [r7, #16]
 80182d8:	2206      	movs	r2, #6
 80182da:	4928      	ldr	r1, [pc, #160]	; (801837c <ethernet_input+0x118>)
 80182dc:	4618      	mov	r0, r3
 80182de:	f000 fbbc 	bl	8018a5a <memcmp>
 80182e2:	4603      	mov	r3, r0
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d106      	bne.n	80182f6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	7b5b      	ldrb	r3, [r3, #13]
 80182ec:	f043 0308 	orr.w	r3, r3, #8
 80182f0:	b2da      	uxtb	r2, r3
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80182f6:	89fb      	ldrh	r3, [r7, #14]
 80182f8:	2b08      	cmp	r3, #8
 80182fa:	d003      	beq.n	8018304 <ethernet_input+0xa0>
 80182fc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018300:	d014      	beq.n	801832c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018302:	e032      	b.n	801836a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018304:	683b      	ldr	r3, [r7, #0]
 8018306:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801830a:	f003 0308 	and.w	r3, r3, #8
 801830e:	2b00      	cmp	r3, #0
 8018310:	d024      	beq.n	801835c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018312:	8afb      	ldrh	r3, [r7, #22]
 8018314:	4619      	mov	r1, r3
 8018316:	6878      	ldr	r0, [r7, #4]
 8018318:	f7f4 fcd8 	bl	800cccc <pbuf_remove_header>
 801831c:	4603      	mov	r3, r0
 801831e:	2b00      	cmp	r3, #0
 8018320:	d11e      	bne.n	8018360 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018322:	6839      	ldr	r1, [r7, #0]
 8018324:	6878      	ldr	r0, [r7, #4]
 8018326:	f7fe ff03 	bl	8017130 <ip4_input>
      break;
 801832a:	e013      	b.n	8018354 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801832c:	683b      	ldr	r3, [r7, #0]
 801832e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018332:	f003 0308 	and.w	r3, r3, #8
 8018336:	2b00      	cmp	r3, #0
 8018338:	d014      	beq.n	8018364 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801833a:	8afb      	ldrh	r3, [r7, #22]
 801833c:	4619      	mov	r1, r3
 801833e:	6878      	ldr	r0, [r7, #4]
 8018340:	f7f4 fcc4 	bl	800cccc <pbuf_remove_header>
 8018344:	4603      	mov	r3, r0
 8018346:	2b00      	cmp	r3, #0
 8018348:	d10e      	bne.n	8018368 <ethernet_input+0x104>
        etharp_input(p, netif);
 801834a:	6839      	ldr	r1, [r7, #0]
 801834c:	6878      	ldr	r0, [r7, #4]
 801834e:	f7fe f89f 	bl	8016490 <etharp_input>
      break;
 8018352:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018354:	2300      	movs	r3, #0
 8018356:	e00c      	b.n	8018372 <ethernet_input+0x10e>
    goto free_and_return;
 8018358:	bf00      	nop
 801835a:	e006      	b.n	801836a <ethernet_input+0x106>
        goto free_and_return;
 801835c:	bf00      	nop
 801835e:	e004      	b.n	801836a <ethernet_input+0x106>
        goto free_and_return;
 8018360:	bf00      	nop
 8018362:	e002      	b.n	801836a <ethernet_input+0x106>
        goto free_and_return;
 8018364:	bf00      	nop
 8018366:	e000      	b.n	801836a <ethernet_input+0x106>
        goto free_and_return;
 8018368:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801836a:	6878      	ldr	r0, [r7, #4]
 801836c:	f7f4 fd34 	bl	800cdd8 <pbuf_free>
  return ERR_OK;
 8018370:	2300      	movs	r3, #0
}
 8018372:	4618      	mov	r0, r3
 8018374:	3718      	adds	r7, #24
 8018376:	46bd      	mov	sp, r7
 8018378:	bd80      	pop	{r7, pc}
 801837a:	bf00      	nop
 801837c:	080276dc 	.word	0x080276dc

08018380 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018380:	b580      	push	{r7, lr}
 8018382:	b086      	sub	sp, #24
 8018384:	af00      	add	r7, sp, #0
 8018386:	60f8      	str	r0, [r7, #12]
 8018388:	60b9      	str	r1, [r7, #8]
 801838a:	607a      	str	r2, [r7, #4]
 801838c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801838e:	8c3b      	ldrh	r3, [r7, #32]
 8018390:	4618      	mov	r0, r3
 8018392:	f7f3 f8ed 	bl	800b570 <lwip_htons>
 8018396:	4603      	mov	r3, r0
 8018398:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801839a:	210e      	movs	r1, #14
 801839c:	68b8      	ldr	r0, [r7, #8]
 801839e:	f7f4 fc85 	bl	800ccac <pbuf_add_header>
 80183a2:	4603      	mov	r3, r0
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d125      	bne.n	80183f4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80183a8:	68bb      	ldr	r3, [r7, #8]
 80183aa:	685b      	ldr	r3, [r3, #4]
 80183ac:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80183ae:	693b      	ldr	r3, [r7, #16]
 80183b0:	8afa      	ldrh	r2, [r7, #22]
 80183b2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80183b4:	693b      	ldr	r3, [r7, #16]
 80183b6:	2206      	movs	r2, #6
 80183b8:	6839      	ldr	r1, [r7, #0]
 80183ba:	4618      	mov	r0, r3
 80183bc:	f000 fc46 	bl	8018c4c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80183c0:	693b      	ldr	r3, [r7, #16]
 80183c2:	3306      	adds	r3, #6
 80183c4:	2206      	movs	r2, #6
 80183c6:	6879      	ldr	r1, [r7, #4]
 80183c8:	4618      	mov	r0, r3
 80183ca:	f000 fc3f 	bl	8018c4c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80183d4:	2b06      	cmp	r3, #6
 80183d6:	d006      	beq.n	80183e6 <ethernet_output+0x66>
 80183d8:	4b0a      	ldr	r3, [pc, #40]	; (8018404 <ethernet_output+0x84>)
 80183da:	f44f 7299 	mov.w	r2, #306	; 0x132
 80183de:	490a      	ldr	r1, [pc, #40]	; (8018408 <ethernet_output+0x88>)
 80183e0:	480a      	ldr	r0, [pc, #40]	; (801840c <ethernet_output+0x8c>)
 80183e2:	f000 fae5 	bl	80189b0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80183e6:	68fb      	ldr	r3, [r7, #12]
 80183e8:	699b      	ldr	r3, [r3, #24]
 80183ea:	68b9      	ldr	r1, [r7, #8]
 80183ec:	68f8      	ldr	r0, [r7, #12]
 80183ee:	4798      	blx	r3
 80183f0:	4603      	mov	r3, r0
 80183f2:	e002      	b.n	80183fa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80183f4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80183f6:	f06f 0301 	mvn.w	r3, #1
}
 80183fa:	4618      	mov	r0, r3
 80183fc:	3718      	adds	r7, #24
 80183fe:	46bd      	mov	sp, r7
 8018400:	bd80      	pop	{r7, pc}
 8018402:	bf00      	nop
 8018404:	0801d3b8 	.word	0x0801d3b8
 8018408:	0801d3f0 	.word	0x0801d3f0
 801840c:	0801d424 	.word	0x0801d424

08018410 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018410:	b580      	push	{r7, lr}
 8018412:	b086      	sub	sp, #24
 8018414:	af00      	add	r7, sp, #0
 8018416:	6078      	str	r0, [r7, #4]
 8018418:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801841a:	683b      	ldr	r3, [r7, #0]
 801841c:	60bb      	str	r3, [r7, #8]
 801841e:	2304      	movs	r3, #4
 8018420:	60fb      	str	r3, [r7, #12]
 8018422:	2300      	movs	r3, #0
 8018424:	613b      	str	r3, [r7, #16]
 8018426:	2300      	movs	r3, #0
 8018428:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801842a:	f107 0308 	add.w	r3, r7, #8
 801842e:	2100      	movs	r1, #0
 8018430:	4618      	mov	r0, r3
 8018432:	f7ed f97e 	bl	8005732 <osMessageCreate>
 8018436:	4602      	mov	r2, r0
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	2b00      	cmp	r3, #0
 8018442:	d102      	bne.n	801844a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018444:	f04f 33ff 	mov.w	r3, #4294967295
 8018448:	e000      	b.n	801844c <sys_mbox_new+0x3c>

  return ERR_OK;
 801844a:	2300      	movs	r3, #0
}
 801844c:	4618      	mov	r0, r3
 801844e:	3718      	adds	r7, #24
 8018450:	46bd      	mov	sp, r7
 8018452:	bd80      	pop	{r7, pc}

08018454 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018454:	b580      	push	{r7, lr}
 8018456:	b082      	sub	sp, #8
 8018458:	af00      	add	r7, sp, #0
 801845a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	4618      	mov	r0, r3
 8018462:	f7ed fa43 	bl	80058ec <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	4618      	mov	r0, r3
 801846c:	f7ed fa54 	bl	8005918 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018470:	bf00      	nop
 8018472:	3708      	adds	r7, #8
 8018474:	46bd      	mov	sp, r7
 8018476:	bd80      	pop	{r7, pc}

08018478 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018478:	b580      	push	{r7, lr}
 801847a:	b084      	sub	sp, #16
 801847c:	af00      	add	r7, sp, #0
 801847e:	6078      	str	r0, [r7, #4]
 8018480:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	6839      	ldr	r1, [r7, #0]
 8018488:	2200      	movs	r2, #0
 801848a:	4618      	mov	r0, r3
 801848c:	f7ed f97a 	bl	8005784 <osMessagePut>
 8018490:	4603      	mov	r3, r0
 8018492:	2b00      	cmp	r3, #0
 8018494:	d102      	bne.n	801849c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018496:	2300      	movs	r3, #0
 8018498:	73fb      	strb	r3, [r7, #15]
 801849a:	e001      	b.n	80184a0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801849c:	23ff      	movs	r3, #255	; 0xff
 801849e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80184a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80184a4:	4618      	mov	r0, r3
 80184a6:	3710      	adds	r7, #16
 80184a8:	46bd      	mov	sp, r7
 80184aa:	bd80      	pop	{r7, pc}

080184ac <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80184ac:	b580      	push	{r7, lr}
 80184ae:	b08c      	sub	sp, #48	; 0x30
 80184b0:	af00      	add	r7, sp, #0
 80184b2:	61f8      	str	r0, [r7, #28]
 80184b4:	61b9      	str	r1, [r7, #24]
 80184b6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80184b8:	f7ec ff66 	bl	8005388 <osKernelSysTick>
 80184bc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80184be:	697b      	ldr	r3, [r7, #20]
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d017      	beq.n	80184f4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80184c4:	69fb      	ldr	r3, [r7, #28]
 80184c6:	6819      	ldr	r1, [r3, #0]
 80184c8:	f107 0320 	add.w	r3, r7, #32
 80184cc:	697a      	ldr	r2, [r7, #20]
 80184ce:	4618      	mov	r0, r3
 80184d0:	f7ed f998 	bl	8005804 <osMessageGet>

    if(event.status == osEventMessage)
 80184d4:	6a3b      	ldr	r3, [r7, #32]
 80184d6:	2b10      	cmp	r3, #16
 80184d8:	d109      	bne.n	80184ee <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80184da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184dc:	461a      	mov	r2, r3
 80184de:	69bb      	ldr	r3, [r7, #24]
 80184e0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80184e2:	f7ec ff51 	bl	8005388 <osKernelSysTick>
 80184e6:	4602      	mov	r2, r0
 80184e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184ea:	1ad3      	subs	r3, r2, r3
 80184ec:	e019      	b.n	8018522 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80184ee:	f04f 33ff 	mov.w	r3, #4294967295
 80184f2:	e016      	b.n	8018522 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80184f4:	69fb      	ldr	r3, [r7, #28]
 80184f6:	6819      	ldr	r1, [r3, #0]
 80184f8:	463b      	mov	r3, r7
 80184fa:	f04f 32ff 	mov.w	r2, #4294967295
 80184fe:	4618      	mov	r0, r3
 8018500:	f7ed f980 	bl	8005804 <osMessageGet>
 8018504:	f107 0320 	add.w	r3, r7, #32
 8018508:	463a      	mov	r2, r7
 801850a:	ca07      	ldmia	r2, {r0, r1, r2}
 801850c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018512:	461a      	mov	r2, r3
 8018514:	69bb      	ldr	r3, [r7, #24]
 8018516:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018518:	f7ec ff36 	bl	8005388 <osKernelSysTick>
 801851c:	4602      	mov	r2, r0
 801851e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018520:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018522:	4618      	mov	r0, r3
 8018524:	3730      	adds	r7, #48	; 0x30
 8018526:	46bd      	mov	sp, r7
 8018528:	bd80      	pop	{r7, pc}

0801852a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801852a:	b580      	push	{r7, lr}
 801852c:	b086      	sub	sp, #24
 801852e:	af00      	add	r7, sp, #0
 8018530:	6078      	str	r0, [r7, #4]
 8018532:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	6819      	ldr	r1, [r3, #0]
 8018538:	f107 030c 	add.w	r3, r7, #12
 801853c:	2200      	movs	r2, #0
 801853e:	4618      	mov	r0, r3
 8018540:	f7ed f960 	bl	8005804 <osMessageGet>

  if(event.status == osEventMessage)
 8018544:	68fb      	ldr	r3, [r7, #12]
 8018546:	2b10      	cmp	r3, #16
 8018548:	d105      	bne.n	8018556 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801854a:	693b      	ldr	r3, [r7, #16]
 801854c:	461a      	mov	r2, r3
 801854e:	683b      	ldr	r3, [r7, #0]
 8018550:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8018552:	2300      	movs	r3, #0
 8018554:	e001      	b.n	801855a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018556:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801855a:	4618      	mov	r0, r3
 801855c:	3718      	adds	r7, #24
 801855e:	46bd      	mov	sp, r7
 8018560:	bd80      	pop	{r7, pc}

08018562 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018562:	b480      	push	{r7}
 8018564:	b083      	sub	sp, #12
 8018566:	af00      	add	r7, sp, #0
 8018568:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	2b00      	cmp	r3, #0
 8018570:	d101      	bne.n	8018576 <sys_mbox_valid+0x14>
    return 0;
 8018572:	2300      	movs	r3, #0
 8018574:	e000      	b.n	8018578 <sys_mbox_valid+0x16>
  else
    return 1;
 8018576:	2301      	movs	r3, #1
}
 8018578:	4618      	mov	r0, r3
 801857a:	370c      	adds	r7, #12
 801857c:	46bd      	mov	sp, r7
 801857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018582:	4770      	bx	lr

08018584 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018584:	b480      	push	{r7}
 8018586:	b083      	sub	sp, #12
 8018588:	af00      	add	r7, sp, #0
 801858a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	2200      	movs	r2, #0
 8018590:	601a      	str	r2, [r3, #0]
}
 8018592:	bf00      	nop
 8018594:	370c      	adds	r7, #12
 8018596:	46bd      	mov	sp, r7
 8018598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801859c:	4770      	bx	lr

0801859e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801859e:	b580      	push	{r7, lr}
 80185a0:	b084      	sub	sp, #16
 80185a2:	af00      	add	r7, sp, #0
 80185a4:	6078      	str	r0, [r7, #4]
 80185a6:	460b      	mov	r3, r1
 80185a8:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 80185aa:	2300      	movs	r3, #0
 80185ac:	60bb      	str	r3, [r7, #8]
 80185ae:	2300      	movs	r3, #0
 80185b0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 80185b2:	f107 0308 	add.w	r3, r7, #8
 80185b6:	2101      	movs	r1, #1
 80185b8:	4618      	mov	r0, r3
 80185ba:	f7ec fff1 	bl	80055a0 <osSemaphoreCreate>
 80185be:	4602      	mov	r2, r0
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d102      	bne.n	80185d2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80185cc:	f04f 33ff 	mov.w	r3, #4294967295
 80185d0:	e009      	b.n	80185e6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80185d2:	78fb      	ldrb	r3, [r7, #3]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d105      	bne.n	80185e4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	2100      	movs	r1, #0
 80185de:	4618      	mov	r0, r3
 80185e0:	f7ed f810 	bl	8005604 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80185e4:	2300      	movs	r3, #0
}
 80185e6:	4618      	mov	r0, r3
 80185e8:	3710      	adds	r7, #16
 80185ea:	46bd      	mov	sp, r7
 80185ec:	bd80      	pop	{r7, pc}

080185ee <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80185ee:	b580      	push	{r7, lr}
 80185f0:	b084      	sub	sp, #16
 80185f2:	af00      	add	r7, sp, #0
 80185f4:	6078      	str	r0, [r7, #4]
 80185f6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80185f8:	f7ec fec6 	bl	8005388 <osKernelSysTick>
 80185fc:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80185fe:	683b      	ldr	r3, [r7, #0]
 8018600:	2b00      	cmp	r3, #0
 8018602:	d011      	beq.n	8018628 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	6839      	ldr	r1, [r7, #0]
 801860a:	4618      	mov	r0, r3
 801860c:	f7ec fffa 	bl	8005604 <osSemaphoreWait>
 8018610:	4603      	mov	r3, r0
 8018612:	2b00      	cmp	r3, #0
 8018614:	d105      	bne.n	8018622 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8018616:	f7ec feb7 	bl	8005388 <osKernelSysTick>
 801861a:	4602      	mov	r2, r0
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	1ad3      	subs	r3, r2, r3
 8018620:	e012      	b.n	8018648 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018622:	f04f 33ff 	mov.w	r3, #4294967295
 8018626:	e00f      	b.n	8018648 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8018628:	bf00      	nop
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	f04f 31ff 	mov.w	r1, #4294967295
 8018632:	4618      	mov	r0, r3
 8018634:	f7ec ffe6 	bl	8005604 <osSemaphoreWait>
 8018638:	4603      	mov	r3, r0
 801863a:	2b00      	cmp	r3, #0
 801863c:	d1f5      	bne.n	801862a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801863e:	f7ec fea3 	bl	8005388 <osKernelSysTick>
 8018642:	4602      	mov	r2, r0
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018648:	4618      	mov	r0, r3
 801864a:	3710      	adds	r7, #16
 801864c:	46bd      	mov	sp, r7
 801864e:	bd80      	pop	{r7, pc}

08018650 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018650:	b580      	push	{r7, lr}
 8018652:	b082      	sub	sp, #8
 8018654:	af00      	add	r7, sp, #0
 8018656:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	4618      	mov	r0, r3
 801865e:	f7ed f81f 	bl	80056a0 <osSemaphoreRelease>
}
 8018662:	bf00      	nop
 8018664:	3708      	adds	r7, #8
 8018666:	46bd      	mov	sp, r7
 8018668:	bd80      	pop	{r7, pc}

0801866a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801866a:	b580      	push	{r7, lr}
 801866c:	b082      	sub	sp, #8
 801866e:	af00      	add	r7, sp, #0
 8018670:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	4618      	mov	r0, r3
 8018678:	f7ed f848 	bl	800570c <osSemaphoreDelete>
}
 801867c:	bf00      	nop
 801867e:	3708      	adds	r7, #8
 8018680:	46bd      	mov	sp, r7
 8018682:	bd80      	pop	{r7, pc}

08018684 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018684:	b480      	push	{r7}
 8018686:	b083      	sub	sp, #12
 8018688:	af00      	add	r7, sp, #0
 801868a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	2b00      	cmp	r3, #0
 8018692:	d101      	bne.n	8018698 <sys_sem_valid+0x14>
    return 0;
 8018694:	2300      	movs	r3, #0
 8018696:	e000      	b.n	801869a <sys_sem_valid+0x16>
  else
    return 1;
 8018698:	2301      	movs	r3, #1
}
 801869a:	4618      	mov	r0, r3
 801869c:	370c      	adds	r7, #12
 801869e:	46bd      	mov	sp, r7
 80186a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186a4:	4770      	bx	lr

080186a6 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80186a6:	b480      	push	{r7}
 80186a8:	b083      	sub	sp, #12
 80186aa:	af00      	add	r7, sp, #0
 80186ac:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	2200      	movs	r2, #0
 80186b2:	601a      	str	r2, [r3, #0]
}
 80186b4:	bf00      	nop
 80186b6:	370c      	adds	r7, #12
 80186b8:	46bd      	mov	sp, r7
 80186ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186be:	4770      	bx	lr

080186c0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80186c4:	4803      	ldr	r0, [pc, #12]	; (80186d4 <sys_init+0x14>)
 80186c6:	f7ec fecf 	bl	8005468 <osMutexCreate>
 80186ca:	4603      	mov	r3, r0
 80186cc:	4a02      	ldr	r2, [pc, #8]	; (80186d8 <sys_init+0x18>)
 80186ce:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80186d0:	bf00      	nop
 80186d2:	bd80      	pop	{r7, pc}
 80186d4:	080276ec 	.word	0x080276ec
 80186d8:	20010f90 	.word	0x20010f90

080186dc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80186dc:	b580      	push	{r7, lr}
 80186de:	b084      	sub	sp, #16
 80186e0:	af00      	add	r7, sp, #0
 80186e2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80186e4:	2300      	movs	r3, #0
 80186e6:	60bb      	str	r3, [r7, #8]
 80186e8:	2300      	movs	r3, #0
 80186ea:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80186ec:	f107 0308 	add.w	r3, r7, #8
 80186f0:	4618      	mov	r0, r3
 80186f2:	f7ec feb9 	bl	8005468 <osMutexCreate>
 80186f6:	4602      	mov	r2, r0
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	2b00      	cmp	r3, #0
 8018702:	d102      	bne.n	801870a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018704:	f04f 33ff 	mov.w	r3, #4294967295
 8018708:	e000      	b.n	801870c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801870a:	2300      	movs	r3, #0
}
 801870c:	4618      	mov	r0, r3
 801870e:	3710      	adds	r7, #16
 8018710:	46bd      	mov	sp, r7
 8018712:	bd80      	pop	{r7, pc}

08018714 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018714:	b580      	push	{r7, lr}
 8018716:	b082      	sub	sp, #8
 8018718:	af00      	add	r7, sp, #0
 801871a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	f04f 31ff 	mov.w	r1, #4294967295
 8018724:	4618      	mov	r0, r3
 8018726:	f7ec feb7 	bl	8005498 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801872a:	bf00      	nop
 801872c:	3708      	adds	r7, #8
 801872e:	46bd      	mov	sp, r7
 8018730:	bd80      	pop	{r7, pc}

08018732 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018732:	b580      	push	{r7, lr}
 8018734:	b082      	sub	sp, #8
 8018736:	af00      	add	r7, sp, #0
 8018738:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	4618      	mov	r0, r3
 8018740:	f7ec fef8 	bl	8005534 <osMutexRelease>
}
 8018744:	bf00      	nop
 8018746:	3708      	adds	r7, #8
 8018748:	46bd      	mov	sp, r7
 801874a:	bd80      	pop	{r7, pc}

0801874c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801874c:	b580      	push	{r7, lr}
 801874e:	b08c      	sub	sp, #48	; 0x30
 8018750:	af00      	add	r7, sp, #0
 8018752:	60f8      	str	r0, [r7, #12]
 8018754:	60b9      	str	r1, [r7, #8]
 8018756:	607a      	str	r2, [r7, #4]
 8018758:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801875a:	f107 0314 	add.w	r3, r7, #20
 801875e:	2200      	movs	r2, #0
 8018760:	601a      	str	r2, [r3, #0]
 8018762:	605a      	str	r2, [r3, #4]
 8018764:	609a      	str	r2, [r3, #8]
 8018766:	60da      	str	r2, [r3, #12]
 8018768:	611a      	str	r2, [r3, #16]
 801876a:	615a      	str	r2, [r3, #20]
 801876c:	619a      	str	r2, [r3, #24]
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	617b      	str	r3, [r7, #20]
 8018772:	68bb      	ldr	r3, [r7, #8]
 8018774:	61bb      	str	r3, [r7, #24]
 8018776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018778:	b21b      	sxth	r3, r3
 801877a:	83bb      	strh	r3, [r7, #28]
 801877c:	683b      	ldr	r3, [r7, #0]
 801877e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018780:	f107 0314 	add.w	r3, r7, #20
 8018784:	6879      	ldr	r1, [r7, #4]
 8018786:	4618      	mov	r0, r3
 8018788:	f7ec fe0e 	bl	80053a8 <osThreadCreate>
 801878c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801878e:	4618      	mov	r0, r3
 8018790:	3730      	adds	r7, #48	; 0x30
 8018792:	46bd      	mov	sp, r7
 8018794:	bd80      	pop	{r7, pc}
	...

08018798 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018798:	b580      	push	{r7, lr}
 801879a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801879c:	4b04      	ldr	r3, [pc, #16]	; (80187b0 <sys_arch_protect+0x18>)
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	f04f 31ff 	mov.w	r1, #4294967295
 80187a4:	4618      	mov	r0, r3
 80187a6:	f7ec fe77 	bl	8005498 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80187aa:	2301      	movs	r3, #1
}
 80187ac:	4618      	mov	r0, r3
 80187ae:	bd80      	pop	{r7, pc}
 80187b0:	20010f90 	.word	0x20010f90

080187b4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80187b4:	b580      	push	{r7, lr}
 80187b6:	b082      	sub	sp, #8
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80187bc:	4b04      	ldr	r3, [pc, #16]	; (80187d0 <sys_arch_unprotect+0x1c>)
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	4618      	mov	r0, r3
 80187c2:	f7ec feb7 	bl	8005534 <osMutexRelease>
}
 80187c6:	bf00      	nop
 80187c8:	3708      	adds	r7, #8
 80187ca:	46bd      	mov	sp, r7
 80187cc:	bd80      	pop	{r7, pc}
 80187ce:	bf00      	nop
 80187d0:	20010f90 	.word	0x20010f90

080187d4 <rand>:
 80187d4:	4b16      	ldr	r3, [pc, #88]	; (8018830 <rand+0x5c>)
 80187d6:	b510      	push	{r4, lr}
 80187d8:	681c      	ldr	r4, [r3, #0]
 80187da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80187dc:	b9b3      	cbnz	r3, 801880c <rand+0x38>
 80187de:	2018      	movs	r0, #24
 80187e0:	f000 faac 	bl	8018d3c <malloc>
 80187e4:	4602      	mov	r2, r0
 80187e6:	6320      	str	r0, [r4, #48]	; 0x30
 80187e8:	b920      	cbnz	r0, 80187f4 <rand+0x20>
 80187ea:	4b12      	ldr	r3, [pc, #72]	; (8018834 <rand+0x60>)
 80187ec:	4812      	ldr	r0, [pc, #72]	; (8018838 <rand+0x64>)
 80187ee:	2152      	movs	r1, #82	; 0x52
 80187f0:	f000 fa3a 	bl	8018c68 <__assert_func>
 80187f4:	4911      	ldr	r1, [pc, #68]	; (801883c <rand+0x68>)
 80187f6:	4b12      	ldr	r3, [pc, #72]	; (8018840 <rand+0x6c>)
 80187f8:	e9c0 1300 	strd	r1, r3, [r0]
 80187fc:	4b11      	ldr	r3, [pc, #68]	; (8018844 <rand+0x70>)
 80187fe:	6083      	str	r3, [r0, #8]
 8018800:	230b      	movs	r3, #11
 8018802:	8183      	strh	r3, [r0, #12]
 8018804:	2100      	movs	r1, #0
 8018806:	2001      	movs	r0, #1
 8018808:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801880c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801880e:	480e      	ldr	r0, [pc, #56]	; (8018848 <rand+0x74>)
 8018810:	690b      	ldr	r3, [r1, #16]
 8018812:	694c      	ldr	r4, [r1, #20]
 8018814:	4a0d      	ldr	r2, [pc, #52]	; (801884c <rand+0x78>)
 8018816:	4358      	muls	r0, r3
 8018818:	fb02 0004 	mla	r0, r2, r4, r0
 801881c:	fba3 3202 	umull	r3, r2, r3, r2
 8018820:	3301      	adds	r3, #1
 8018822:	eb40 0002 	adc.w	r0, r0, r2
 8018826:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801882a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801882e:	bd10      	pop	{r4, pc}
 8018830:	2000008c 	.word	0x2000008c
 8018834:	080276f4 	.word	0x080276f4
 8018838:	0802770b 	.word	0x0802770b
 801883c:	abcd330e 	.word	0xabcd330e
 8018840:	e66d1234 	.word	0xe66d1234
 8018844:	0005deec 	.word	0x0005deec
 8018848:	5851f42d 	.word	0x5851f42d
 801884c:	4c957f2d 	.word	0x4c957f2d

08018850 <std>:
 8018850:	2300      	movs	r3, #0
 8018852:	b510      	push	{r4, lr}
 8018854:	4604      	mov	r4, r0
 8018856:	e9c0 3300 	strd	r3, r3, [r0]
 801885a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801885e:	6083      	str	r3, [r0, #8]
 8018860:	8181      	strh	r1, [r0, #12]
 8018862:	6643      	str	r3, [r0, #100]	; 0x64
 8018864:	81c2      	strh	r2, [r0, #14]
 8018866:	6183      	str	r3, [r0, #24]
 8018868:	4619      	mov	r1, r3
 801886a:	2208      	movs	r2, #8
 801886c:	305c      	adds	r0, #92	; 0x5c
 801886e:	f000 f904 	bl	8018a7a <memset>
 8018872:	4b05      	ldr	r3, [pc, #20]	; (8018888 <std+0x38>)
 8018874:	6263      	str	r3, [r4, #36]	; 0x24
 8018876:	4b05      	ldr	r3, [pc, #20]	; (801888c <std+0x3c>)
 8018878:	62a3      	str	r3, [r4, #40]	; 0x28
 801887a:	4b05      	ldr	r3, [pc, #20]	; (8018890 <std+0x40>)
 801887c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801887e:	4b05      	ldr	r3, [pc, #20]	; (8018894 <std+0x44>)
 8018880:	6224      	str	r4, [r4, #32]
 8018882:	6323      	str	r3, [r4, #48]	; 0x30
 8018884:	bd10      	pop	{r4, pc}
 8018886:	bf00      	nop
 8018888:	080189d5 	.word	0x080189d5
 801888c:	080189f7 	.word	0x080189f7
 8018890:	08018a2f 	.word	0x08018a2f
 8018894:	08018a53 	.word	0x08018a53

08018898 <stdio_exit_handler>:
 8018898:	4a02      	ldr	r2, [pc, #8]	; (80188a4 <stdio_exit_handler+0xc>)
 801889a:	4903      	ldr	r1, [pc, #12]	; (80188a8 <stdio_exit_handler+0x10>)
 801889c:	4803      	ldr	r0, [pc, #12]	; (80188ac <stdio_exit_handler+0x14>)
 801889e:	f000 b869 	b.w	8018974 <_fwalk_sglue>
 80188a2:	bf00      	nop
 80188a4:	20000034 	.word	0x20000034
 80188a8:	08019559 	.word	0x08019559
 80188ac:	20000040 	.word	0x20000040

080188b0 <cleanup_stdio>:
 80188b0:	6841      	ldr	r1, [r0, #4]
 80188b2:	4b0c      	ldr	r3, [pc, #48]	; (80188e4 <cleanup_stdio+0x34>)
 80188b4:	4299      	cmp	r1, r3
 80188b6:	b510      	push	{r4, lr}
 80188b8:	4604      	mov	r4, r0
 80188ba:	d001      	beq.n	80188c0 <cleanup_stdio+0x10>
 80188bc:	f000 fe4c 	bl	8019558 <_fflush_r>
 80188c0:	68a1      	ldr	r1, [r4, #8]
 80188c2:	4b09      	ldr	r3, [pc, #36]	; (80188e8 <cleanup_stdio+0x38>)
 80188c4:	4299      	cmp	r1, r3
 80188c6:	d002      	beq.n	80188ce <cleanup_stdio+0x1e>
 80188c8:	4620      	mov	r0, r4
 80188ca:	f000 fe45 	bl	8019558 <_fflush_r>
 80188ce:	68e1      	ldr	r1, [r4, #12]
 80188d0:	4b06      	ldr	r3, [pc, #24]	; (80188ec <cleanup_stdio+0x3c>)
 80188d2:	4299      	cmp	r1, r3
 80188d4:	d004      	beq.n	80188e0 <cleanup_stdio+0x30>
 80188d6:	4620      	mov	r0, r4
 80188d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80188dc:	f000 be3c 	b.w	8019558 <_fflush_r>
 80188e0:	bd10      	pop	{r4, pc}
 80188e2:	bf00      	nop
 80188e4:	20010f94 	.word	0x20010f94
 80188e8:	20010ffc 	.word	0x20010ffc
 80188ec:	20011064 	.word	0x20011064

080188f0 <global_stdio_init.part.0>:
 80188f0:	b510      	push	{r4, lr}
 80188f2:	4b0b      	ldr	r3, [pc, #44]	; (8018920 <global_stdio_init.part.0+0x30>)
 80188f4:	4c0b      	ldr	r4, [pc, #44]	; (8018924 <global_stdio_init.part.0+0x34>)
 80188f6:	4a0c      	ldr	r2, [pc, #48]	; (8018928 <global_stdio_init.part.0+0x38>)
 80188f8:	601a      	str	r2, [r3, #0]
 80188fa:	4620      	mov	r0, r4
 80188fc:	2200      	movs	r2, #0
 80188fe:	2104      	movs	r1, #4
 8018900:	f7ff ffa6 	bl	8018850 <std>
 8018904:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018908:	2201      	movs	r2, #1
 801890a:	2109      	movs	r1, #9
 801890c:	f7ff ffa0 	bl	8018850 <std>
 8018910:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018914:	2202      	movs	r2, #2
 8018916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801891a:	2112      	movs	r1, #18
 801891c:	f7ff bf98 	b.w	8018850 <std>
 8018920:	200110cc 	.word	0x200110cc
 8018924:	20010f94 	.word	0x20010f94
 8018928:	08018899 	.word	0x08018899

0801892c <__sfp_lock_acquire>:
 801892c:	4801      	ldr	r0, [pc, #4]	; (8018934 <__sfp_lock_acquire+0x8>)
 801892e:	f000 b98b 	b.w	8018c48 <__retarget_lock_acquire_recursive>
 8018932:	bf00      	nop
 8018934:	200110d5 	.word	0x200110d5

08018938 <__sfp_lock_release>:
 8018938:	4801      	ldr	r0, [pc, #4]	; (8018940 <__sfp_lock_release+0x8>)
 801893a:	f000 b986 	b.w	8018c4a <__retarget_lock_release_recursive>
 801893e:	bf00      	nop
 8018940:	200110d5 	.word	0x200110d5

08018944 <__sinit>:
 8018944:	b510      	push	{r4, lr}
 8018946:	4604      	mov	r4, r0
 8018948:	f7ff fff0 	bl	801892c <__sfp_lock_acquire>
 801894c:	6a23      	ldr	r3, [r4, #32]
 801894e:	b11b      	cbz	r3, 8018958 <__sinit+0x14>
 8018950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018954:	f7ff bff0 	b.w	8018938 <__sfp_lock_release>
 8018958:	4b04      	ldr	r3, [pc, #16]	; (801896c <__sinit+0x28>)
 801895a:	6223      	str	r3, [r4, #32]
 801895c:	4b04      	ldr	r3, [pc, #16]	; (8018970 <__sinit+0x2c>)
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	2b00      	cmp	r3, #0
 8018962:	d1f5      	bne.n	8018950 <__sinit+0xc>
 8018964:	f7ff ffc4 	bl	80188f0 <global_stdio_init.part.0>
 8018968:	e7f2      	b.n	8018950 <__sinit+0xc>
 801896a:	bf00      	nop
 801896c:	080188b1 	.word	0x080188b1
 8018970:	200110cc 	.word	0x200110cc

08018974 <_fwalk_sglue>:
 8018974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018978:	4607      	mov	r7, r0
 801897a:	4688      	mov	r8, r1
 801897c:	4614      	mov	r4, r2
 801897e:	2600      	movs	r6, #0
 8018980:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018984:	f1b9 0901 	subs.w	r9, r9, #1
 8018988:	d505      	bpl.n	8018996 <_fwalk_sglue+0x22>
 801898a:	6824      	ldr	r4, [r4, #0]
 801898c:	2c00      	cmp	r4, #0
 801898e:	d1f7      	bne.n	8018980 <_fwalk_sglue+0xc>
 8018990:	4630      	mov	r0, r6
 8018992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018996:	89ab      	ldrh	r3, [r5, #12]
 8018998:	2b01      	cmp	r3, #1
 801899a:	d907      	bls.n	80189ac <_fwalk_sglue+0x38>
 801899c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80189a0:	3301      	adds	r3, #1
 80189a2:	d003      	beq.n	80189ac <_fwalk_sglue+0x38>
 80189a4:	4629      	mov	r1, r5
 80189a6:	4638      	mov	r0, r7
 80189a8:	47c0      	blx	r8
 80189aa:	4306      	orrs	r6, r0
 80189ac:	3568      	adds	r5, #104	; 0x68
 80189ae:	e7e9      	b.n	8018984 <_fwalk_sglue+0x10>

080189b0 <iprintf>:
 80189b0:	b40f      	push	{r0, r1, r2, r3}
 80189b2:	b507      	push	{r0, r1, r2, lr}
 80189b4:	4906      	ldr	r1, [pc, #24]	; (80189d0 <iprintf+0x20>)
 80189b6:	ab04      	add	r3, sp, #16
 80189b8:	6808      	ldr	r0, [r1, #0]
 80189ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80189be:	6881      	ldr	r1, [r0, #8]
 80189c0:	9301      	str	r3, [sp, #4]
 80189c2:	f000 fa99 	bl	8018ef8 <_vfiprintf_r>
 80189c6:	b003      	add	sp, #12
 80189c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80189cc:	b004      	add	sp, #16
 80189ce:	4770      	bx	lr
 80189d0:	2000008c 	.word	0x2000008c

080189d4 <__sread>:
 80189d4:	b510      	push	{r4, lr}
 80189d6:	460c      	mov	r4, r1
 80189d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189dc:	f000 f8ec 	bl	8018bb8 <_read_r>
 80189e0:	2800      	cmp	r0, #0
 80189e2:	bfab      	itete	ge
 80189e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80189e6:	89a3      	ldrhlt	r3, [r4, #12]
 80189e8:	181b      	addge	r3, r3, r0
 80189ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80189ee:	bfac      	ite	ge
 80189f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80189f2:	81a3      	strhlt	r3, [r4, #12]
 80189f4:	bd10      	pop	{r4, pc}

080189f6 <__swrite>:
 80189f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189fa:	461f      	mov	r7, r3
 80189fc:	898b      	ldrh	r3, [r1, #12]
 80189fe:	05db      	lsls	r3, r3, #23
 8018a00:	4605      	mov	r5, r0
 8018a02:	460c      	mov	r4, r1
 8018a04:	4616      	mov	r6, r2
 8018a06:	d505      	bpl.n	8018a14 <__swrite+0x1e>
 8018a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a0c:	2302      	movs	r3, #2
 8018a0e:	2200      	movs	r2, #0
 8018a10:	f000 f8c0 	bl	8018b94 <_lseek_r>
 8018a14:	89a3      	ldrh	r3, [r4, #12]
 8018a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018a1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018a1e:	81a3      	strh	r3, [r4, #12]
 8018a20:	4632      	mov	r2, r6
 8018a22:	463b      	mov	r3, r7
 8018a24:	4628      	mov	r0, r5
 8018a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018a2a:	f000 b8d7 	b.w	8018bdc <_write_r>

08018a2e <__sseek>:
 8018a2e:	b510      	push	{r4, lr}
 8018a30:	460c      	mov	r4, r1
 8018a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a36:	f000 f8ad 	bl	8018b94 <_lseek_r>
 8018a3a:	1c43      	adds	r3, r0, #1
 8018a3c:	89a3      	ldrh	r3, [r4, #12]
 8018a3e:	bf15      	itete	ne
 8018a40:	6560      	strne	r0, [r4, #84]	; 0x54
 8018a42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018a46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018a4a:	81a3      	strheq	r3, [r4, #12]
 8018a4c:	bf18      	it	ne
 8018a4e:	81a3      	strhne	r3, [r4, #12]
 8018a50:	bd10      	pop	{r4, pc}

08018a52 <__sclose>:
 8018a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a56:	f000 b837 	b.w	8018ac8 <_close_r>

08018a5a <memcmp>:
 8018a5a:	b510      	push	{r4, lr}
 8018a5c:	3901      	subs	r1, #1
 8018a5e:	4402      	add	r2, r0
 8018a60:	4290      	cmp	r0, r2
 8018a62:	d101      	bne.n	8018a68 <memcmp+0xe>
 8018a64:	2000      	movs	r0, #0
 8018a66:	e005      	b.n	8018a74 <memcmp+0x1a>
 8018a68:	7803      	ldrb	r3, [r0, #0]
 8018a6a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018a6e:	42a3      	cmp	r3, r4
 8018a70:	d001      	beq.n	8018a76 <memcmp+0x1c>
 8018a72:	1b18      	subs	r0, r3, r4
 8018a74:	bd10      	pop	{r4, pc}
 8018a76:	3001      	adds	r0, #1
 8018a78:	e7f2      	b.n	8018a60 <memcmp+0x6>

08018a7a <memset>:
 8018a7a:	4402      	add	r2, r0
 8018a7c:	4603      	mov	r3, r0
 8018a7e:	4293      	cmp	r3, r2
 8018a80:	d100      	bne.n	8018a84 <memset+0xa>
 8018a82:	4770      	bx	lr
 8018a84:	f803 1b01 	strb.w	r1, [r3], #1
 8018a88:	e7f9      	b.n	8018a7e <memset+0x4>

08018a8a <strchr>:
 8018a8a:	b2c9      	uxtb	r1, r1
 8018a8c:	4603      	mov	r3, r0
 8018a8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018a92:	b11a      	cbz	r2, 8018a9c <strchr+0x12>
 8018a94:	428a      	cmp	r2, r1
 8018a96:	d1f9      	bne.n	8018a8c <strchr+0x2>
 8018a98:	4618      	mov	r0, r3
 8018a9a:	4770      	bx	lr
 8018a9c:	2900      	cmp	r1, #0
 8018a9e:	bf18      	it	ne
 8018aa0:	2300      	movne	r3, #0
 8018aa2:	e7f9      	b.n	8018a98 <strchr+0xe>

08018aa4 <strncmp>:
 8018aa4:	b510      	push	{r4, lr}
 8018aa6:	b16a      	cbz	r2, 8018ac4 <strncmp+0x20>
 8018aa8:	3901      	subs	r1, #1
 8018aaa:	1884      	adds	r4, r0, r2
 8018aac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ab0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8018ab4:	429a      	cmp	r2, r3
 8018ab6:	d103      	bne.n	8018ac0 <strncmp+0x1c>
 8018ab8:	42a0      	cmp	r0, r4
 8018aba:	d001      	beq.n	8018ac0 <strncmp+0x1c>
 8018abc:	2a00      	cmp	r2, #0
 8018abe:	d1f5      	bne.n	8018aac <strncmp+0x8>
 8018ac0:	1ad0      	subs	r0, r2, r3
 8018ac2:	bd10      	pop	{r4, pc}
 8018ac4:	4610      	mov	r0, r2
 8018ac6:	e7fc      	b.n	8018ac2 <strncmp+0x1e>

08018ac8 <_close_r>:
 8018ac8:	b538      	push	{r3, r4, r5, lr}
 8018aca:	4d06      	ldr	r5, [pc, #24]	; (8018ae4 <_close_r+0x1c>)
 8018acc:	2300      	movs	r3, #0
 8018ace:	4604      	mov	r4, r0
 8018ad0:	4608      	mov	r0, r1
 8018ad2:	602b      	str	r3, [r5, #0]
 8018ad4:	f7e8 f991 	bl	8000dfa <_close>
 8018ad8:	1c43      	adds	r3, r0, #1
 8018ada:	d102      	bne.n	8018ae2 <_close_r+0x1a>
 8018adc:	682b      	ldr	r3, [r5, #0]
 8018ade:	b103      	cbz	r3, 8018ae2 <_close_r+0x1a>
 8018ae0:	6023      	str	r3, [r4, #0]
 8018ae2:	bd38      	pop	{r3, r4, r5, pc}
 8018ae4:	200110d0 	.word	0x200110d0

08018ae8 <_reclaim_reent>:
 8018ae8:	4b29      	ldr	r3, [pc, #164]	; (8018b90 <_reclaim_reent+0xa8>)
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	4283      	cmp	r3, r0
 8018aee:	b570      	push	{r4, r5, r6, lr}
 8018af0:	4604      	mov	r4, r0
 8018af2:	d04b      	beq.n	8018b8c <_reclaim_reent+0xa4>
 8018af4:	69c3      	ldr	r3, [r0, #28]
 8018af6:	b143      	cbz	r3, 8018b0a <_reclaim_reent+0x22>
 8018af8:	68db      	ldr	r3, [r3, #12]
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d144      	bne.n	8018b88 <_reclaim_reent+0xa0>
 8018afe:	69e3      	ldr	r3, [r4, #28]
 8018b00:	6819      	ldr	r1, [r3, #0]
 8018b02:	b111      	cbz	r1, 8018b0a <_reclaim_reent+0x22>
 8018b04:	4620      	mov	r0, r4
 8018b06:	f000 f8cd 	bl	8018ca4 <_free_r>
 8018b0a:	6961      	ldr	r1, [r4, #20]
 8018b0c:	b111      	cbz	r1, 8018b14 <_reclaim_reent+0x2c>
 8018b0e:	4620      	mov	r0, r4
 8018b10:	f000 f8c8 	bl	8018ca4 <_free_r>
 8018b14:	69e1      	ldr	r1, [r4, #28]
 8018b16:	b111      	cbz	r1, 8018b1e <_reclaim_reent+0x36>
 8018b18:	4620      	mov	r0, r4
 8018b1a:	f000 f8c3 	bl	8018ca4 <_free_r>
 8018b1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018b20:	b111      	cbz	r1, 8018b28 <_reclaim_reent+0x40>
 8018b22:	4620      	mov	r0, r4
 8018b24:	f000 f8be 	bl	8018ca4 <_free_r>
 8018b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018b2a:	b111      	cbz	r1, 8018b32 <_reclaim_reent+0x4a>
 8018b2c:	4620      	mov	r0, r4
 8018b2e:	f000 f8b9 	bl	8018ca4 <_free_r>
 8018b32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018b34:	b111      	cbz	r1, 8018b3c <_reclaim_reent+0x54>
 8018b36:	4620      	mov	r0, r4
 8018b38:	f000 f8b4 	bl	8018ca4 <_free_r>
 8018b3c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018b3e:	b111      	cbz	r1, 8018b46 <_reclaim_reent+0x5e>
 8018b40:	4620      	mov	r0, r4
 8018b42:	f000 f8af 	bl	8018ca4 <_free_r>
 8018b46:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018b48:	b111      	cbz	r1, 8018b50 <_reclaim_reent+0x68>
 8018b4a:	4620      	mov	r0, r4
 8018b4c:	f000 f8aa 	bl	8018ca4 <_free_r>
 8018b50:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8018b52:	b111      	cbz	r1, 8018b5a <_reclaim_reent+0x72>
 8018b54:	4620      	mov	r0, r4
 8018b56:	f000 f8a5 	bl	8018ca4 <_free_r>
 8018b5a:	6a23      	ldr	r3, [r4, #32]
 8018b5c:	b1b3      	cbz	r3, 8018b8c <_reclaim_reent+0xa4>
 8018b5e:	4620      	mov	r0, r4
 8018b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b64:	4718      	bx	r3
 8018b66:	5949      	ldr	r1, [r1, r5]
 8018b68:	b941      	cbnz	r1, 8018b7c <_reclaim_reent+0x94>
 8018b6a:	3504      	adds	r5, #4
 8018b6c:	69e3      	ldr	r3, [r4, #28]
 8018b6e:	2d80      	cmp	r5, #128	; 0x80
 8018b70:	68d9      	ldr	r1, [r3, #12]
 8018b72:	d1f8      	bne.n	8018b66 <_reclaim_reent+0x7e>
 8018b74:	4620      	mov	r0, r4
 8018b76:	f000 f895 	bl	8018ca4 <_free_r>
 8018b7a:	e7c0      	b.n	8018afe <_reclaim_reent+0x16>
 8018b7c:	680e      	ldr	r6, [r1, #0]
 8018b7e:	4620      	mov	r0, r4
 8018b80:	f000 f890 	bl	8018ca4 <_free_r>
 8018b84:	4631      	mov	r1, r6
 8018b86:	e7ef      	b.n	8018b68 <_reclaim_reent+0x80>
 8018b88:	2500      	movs	r5, #0
 8018b8a:	e7ef      	b.n	8018b6c <_reclaim_reent+0x84>
 8018b8c:	bd70      	pop	{r4, r5, r6, pc}
 8018b8e:	bf00      	nop
 8018b90:	2000008c 	.word	0x2000008c

08018b94 <_lseek_r>:
 8018b94:	b538      	push	{r3, r4, r5, lr}
 8018b96:	4d07      	ldr	r5, [pc, #28]	; (8018bb4 <_lseek_r+0x20>)
 8018b98:	4604      	mov	r4, r0
 8018b9a:	4608      	mov	r0, r1
 8018b9c:	4611      	mov	r1, r2
 8018b9e:	2200      	movs	r2, #0
 8018ba0:	602a      	str	r2, [r5, #0]
 8018ba2:	461a      	mov	r2, r3
 8018ba4:	f7e8 f950 	bl	8000e48 <_lseek>
 8018ba8:	1c43      	adds	r3, r0, #1
 8018baa:	d102      	bne.n	8018bb2 <_lseek_r+0x1e>
 8018bac:	682b      	ldr	r3, [r5, #0]
 8018bae:	b103      	cbz	r3, 8018bb2 <_lseek_r+0x1e>
 8018bb0:	6023      	str	r3, [r4, #0]
 8018bb2:	bd38      	pop	{r3, r4, r5, pc}
 8018bb4:	200110d0 	.word	0x200110d0

08018bb8 <_read_r>:
 8018bb8:	b538      	push	{r3, r4, r5, lr}
 8018bba:	4d07      	ldr	r5, [pc, #28]	; (8018bd8 <_read_r+0x20>)
 8018bbc:	4604      	mov	r4, r0
 8018bbe:	4608      	mov	r0, r1
 8018bc0:	4611      	mov	r1, r2
 8018bc2:	2200      	movs	r2, #0
 8018bc4:	602a      	str	r2, [r5, #0]
 8018bc6:	461a      	mov	r2, r3
 8018bc8:	f7e8 f8de 	bl	8000d88 <_read>
 8018bcc:	1c43      	adds	r3, r0, #1
 8018bce:	d102      	bne.n	8018bd6 <_read_r+0x1e>
 8018bd0:	682b      	ldr	r3, [r5, #0]
 8018bd2:	b103      	cbz	r3, 8018bd6 <_read_r+0x1e>
 8018bd4:	6023      	str	r3, [r4, #0]
 8018bd6:	bd38      	pop	{r3, r4, r5, pc}
 8018bd8:	200110d0 	.word	0x200110d0

08018bdc <_write_r>:
 8018bdc:	b538      	push	{r3, r4, r5, lr}
 8018bde:	4d07      	ldr	r5, [pc, #28]	; (8018bfc <_write_r+0x20>)
 8018be0:	4604      	mov	r4, r0
 8018be2:	4608      	mov	r0, r1
 8018be4:	4611      	mov	r1, r2
 8018be6:	2200      	movs	r2, #0
 8018be8:	602a      	str	r2, [r5, #0]
 8018bea:	461a      	mov	r2, r3
 8018bec:	f7e8 f8e9 	bl	8000dc2 <_write>
 8018bf0:	1c43      	adds	r3, r0, #1
 8018bf2:	d102      	bne.n	8018bfa <_write_r+0x1e>
 8018bf4:	682b      	ldr	r3, [r5, #0]
 8018bf6:	b103      	cbz	r3, 8018bfa <_write_r+0x1e>
 8018bf8:	6023      	str	r3, [r4, #0]
 8018bfa:	bd38      	pop	{r3, r4, r5, pc}
 8018bfc:	200110d0 	.word	0x200110d0

08018c00 <__libc_init_array>:
 8018c00:	b570      	push	{r4, r5, r6, lr}
 8018c02:	4d0d      	ldr	r5, [pc, #52]	; (8018c38 <__libc_init_array+0x38>)
 8018c04:	4c0d      	ldr	r4, [pc, #52]	; (8018c3c <__libc_init_array+0x3c>)
 8018c06:	1b64      	subs	r4, r4, r5
 8018c08:	10a4      	asrs	r4, r4, #2
 8018c0a:	2600      	movs	r6, #0
 8018c0c:	42a6      	cmp	r6, r4
 8018c0e:	d109      	bne.n	8018c24 <__libc_init_array+0x24>
 8018c10:	4d0b      	ldr	r5, [pc, #44]	; (8018c40 <__libc_init_array+0x40>)
 8018c12:	4c0c      	ldr	r4, [pc, #48]	; (8018c44 <__libc_init_array+0x44>)
 8018c14:	f000 fe50 	bl	80198b8 <_init>
 8018c18:	1b64      	subs	r4, r4, r5
 8018c1a:	10a4      	asrs	r4, r4, #2
 8018c1c:	2600      	movs	r6, #0
 8018c1e:	42a6      	cmp	r6, r4
 8018c20:	d105      	bne.n	8018c2e <__libc_init_array+0x2e>
 8018c22:	bd70      	pop	{r4, r5, r6, pc}
 8018c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8018c28:	4798      	blx	r3
 8018c2a:	3601      	adds	r6, #1
 8018c2c:	e7ee      	b.n	8018c0c <__libc_init_array+0xc>
 8018c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018c32:	4798      	blx	r3
 8018c34:	3601      	adds	r6, #1
 8018c36:	e7f2      	b.n	8018c1e <__libc_init_array+0x1e>
 8018c38:	080277dc 	.word	0x080277dc
 8018c3c:	080277dc 	.word	0x080277dc
 8018c40:	080277dc 	.word	0x080277dc
 8018c44:	080277e0 	.word	0x080277e0

08018c48 <__retarget_lock_acquire_recursive>:
 8018c48:	4770      	bx	lr

08018c4a <__retarget_lock_release_recursive>:
 8018c4a:	4770      	bx	lr

08018c4c <memcpy>:
 8018c4c:	440a      	add	r2, r1
 8018c4e:	4291      	cmp	r1, r2
 8018c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8018c54:	d100      	bne.n	8018c58 <memcpy+0xc>
 8018c56:	4770      	bx	lr
 8018c58:	b510      	push	{r4, lr}
 8018c5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018c5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018c62:	4291      	cmp	r1, r2
 8018c64:	d1f9      	bne.n	8018c5a <memcpy+0xe>
 8018c66:	bd10      	pop	{r4, pc}

08018c68 <__assert_func>:
 8018c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018c6a:	4614      	mov	r4, r2
 8018c6c:	461a      	mov	r2, r3
 8018c6e:	4b09      	ldr	r3, [pc, #36]	; (8018c94 <__assert_func+0x2c>)
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	4605      	mov	r5, r0
 8018c74:	68d8      	ldr	r0, [r3, #12]
 8018c76:	b14c      	cbz	r4, 8018c8c <__assert_func+0x24>
 8018c78:	4b07      	ldr	r3, [pc, #28]	; (8018c98 <__assert_func+0x30>)
 8018c7a:	9100      	str	r1, [sp, #0]
 8018c7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018c80:	4906      	ldr	r1, [pc, #24]	; (8018c9c <__assert_func+0x34>)
 8018c82:	462b      	mov	r3, r5
 8018c84:	f000 fc90 	bl	80195a8 <fiprintf>
 8018c88:	f000 fd46 	bl	8019718 <abort>
 8018c8c:	4b04      	ldr	r3, [pc, #16]	; (8018ca0 <__assert_func+0x38>)
 8018c8e:	461c      	mov	r4, r3
 8018c90:	e7f3      	b.n	8018c7a <__assert_func+0x12>
 8018c92:	bf00      	nop
 8018c94:	2000008c 	.word	0x2000008c
 8018c98:	08027763 	.word	0x08027763
 8018c9c:	08027770 	.word	0x08027770
 8018ca0:	0802779e 	.word	0x0802779e

08018ca4 <_free_r>:
 8018ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018ca6:	2900      	cmp	r1, #0
 8018ca8:	d044      	beq.n	8018d34 <_free_r+0x90>
 8018caa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018cae:	9001      	str	r0, [sp, #4]
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	f1a1 0404 	sub.w	r4, r1, #4
 8018cb6:	bfb8      	it	lt
 8018cb8:	18e4      	addlt	r4, r4, r3
 8018cba:	f000 f8e7 	bl	8018e8c <__malloc_lock>
 8018cbe:	4a1e      	ldr	r2, [pc, #120]	; (8018d38 <_free_r+0x94>)
 8018cc0:	9801      	ldr	r0, [sp, #4]
 8018cc2:	6813      	ldr	r3, [r2, #0]
 8018cc4:	b933      	cbnz	r3, 8018cd4 <_free_r+0x30>
 8018cc6:	6063      	str	r3, [r4, #4]
 8018cc8:	6014      	str	r4, [r2, #0]
 8018cca:	b003      	add	sp, #12
 8018ccc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018cd0:	f000 b8e2 	b.w	8018e98 <__malloc_unlock>
 8018cd4:	42a3      	cmp	r3, r4
 8018cd6:	d908      	bls.n	8018cea <_free_r+0x46>
 8018cd8:	6825      	ldr	r5, [r4, #0]
 8018cda:	1961      	adds	r1, r4, r5
 8018cdc:	428b      	cmp	r3, r1
 8018cde:	bf01      	itttt	eq
 8018ce0:	6819      	ldreq	r1, [r3, #0]
 8018ce2:	685b      	ldreq	r3, [r3, #4]
 8018ce4:	1949      	addeq	r1, r1, r5
 8018ce6:	6021      	streq	r1, [r4, #0]
 8018ce8:	e7ed      	b.n	8018cc6 <_free_r+0x22>
 8018cea:	461a      	mov	r2, r3
 8018cec:	685b      	ldr	r3, [r3, #4]
 8018cee:	b10b      	cbz	r3, 8018cf4 <_free_r+0x50>
 8018cf0:	42a3      	cmp	r3, r4
 8018cf2:	d9fa      	bls.n	8018cea <_free_r+0x46>
 8018cf4:	6811      	ldr	r1, [r2, #0]
 8018cf6:	1855      	adds	r5, r2, r1
 8018cf8:	42a5      	cmp	r5, r4
 8018cfa:	d10b      	bne.n	8018d14 <_free_r+0x70>
 8018cfc:	6824      	ldr	r4, [r4, #0]
 8018cfe:	4421      	add	r1, r4
 8018d00:	1854      	adds	r4, r2, r1
 8018d02:	42a3      	cmp	r3, r4
 8018d04:	6011      	str	r1, [r2, #0]
 8018d06:	d1e0      	bne.n	8018cca <_free_r+0x26>
 8018d08:	681c      	ldr	r4, [r3, #0]
 8018d0a:	685b      	ldr	r3, [r3, #4]
 8018d0c:	6053      	str	r3, [r2, #4]
 8018d0e:	440c      	add	r4, r1
 8018d10:	6014      	str	r4, [r2, #0]
 8018d12:	e7da      	b.n	8018cca <_free_r+0x26>
 8018d14:	d902      	bls.n	8018d1c <_free_r+0x78>
 8018d16:	230c      	movs	r3, #12
 8018d18:	6003      	str	r3, [r0, #0]
 8018d1a:	e7d6      	b.n	8018cca <_free_r+0x26>
 8018d1c:	6825      	ldr	r5, [r4, #0]
 8018d1e:	1961      	adds	r1, r4, r5
 8018d20:	428b      	cmp	r3, r1
 8018d22:	bf04      	itt	eq
 8018d24:	6819      	ldreq	r1, [r3, #0]
 8018d26:	685b      	ldreq	r3, [r3, #4]
 8018d28:	6063      	str	r3, [r4, #4]
 8018d2a:	bf04      	itt	eq
 8018d2c:	1949      	addeq	r1, r1, r5
 8018d2e:	6021      	streq	r1, [r4, #0]
 8018d30:	6054      	str	r4, [r2, #4]
 8018d32:	e7ca      	b.n	8018cca <_free_r+0x26>
 8018d34:	b003      	add	sp, #12
 8018d36:	bd30      	pop	{r4, r5, pc}
 8018d38:	200110d8 	.word	0x200110d8

08018d3c <malloc>:
 8018d3c:	4b02      	ldr	r3, [pc, #8]	; (8018d48 <malloc+0xc>)
 8018d3e:	4601      	mov	r1, r0
 8018d40:	6818      	ldr	r0, [r3, #0]
 8018d42:	f000 b823 	b.w	8018d8c <_malloc_r>
 8018d46:	bf00      	nop
 8018d48:	2000008c 	.word	0x2000008c

08018d4c <sbrk_aligned>:
 8018d4c:	b570      	push	{r4, r5, r6, lr}
 8018d4e:	4e0e      	ldr	r6, [pc, #56]	; (8018d88 <sbrk_aligned+0x3c>)
 8018d50:	460c      	mov	r4, r1
 8018d52:	6831      	ldr	r1, [r6, #0]
 8018d54:	4605      	mov	r5, r0
 8018d56:	b911      	cbnz	r1, 8018d5e <sbrk_aligned+0x12>
 8018d58:	f000 fcce 	bl	80196f8 <_sbrk_r>
 8018d5c:	6030      	str	r0, [r6, #0]
 8018d5e:	4621      	mov	r1, r4
 8018d60:	4628      	mov	r0, r5
 8018d62:	f000 fcc9 	bl	80196f8 <_sbrk_r>
 8018d66:	1c43      	adds	r3, r0, #1
 8018d68:	d00a      	beq.n	8018d80 <sbrk_aligned+0x34>
 8018d6a:	1cc4      	adds	r4, r0, #3
 8018d6c:	f024 0403 	bic.w	r4, r4, #3
 8018d70:	42a0      	cmp	r0, r4
 8018d72:	d007      	beq.n	8018d84 <sbrk_aligned+0x38>
 8018d74:	1a21      	subs	r1, r4, r0
 8018d76:	4628      	mov	r0, r5
 8018d78:	f000 fcbe 	bl	80196f8 <_sbrk_r>
 8018d7c:	3001      	adds	r0, #1
 8018d7e:	d101      	bne.n	8018d84 <sbrk_aligned+0x38>
 8018d80:	f04f 34ff 	mov.w	r4, #4294967295
 8018d84:	4620      	mov	r0, r4
 8018d86:	bd70      	pop	{r4, r5, r6, pc}
 8018d88:	200110dc 	.word	0x200110dc

08018d8c <_malloc_r>:
 8018d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d90:	1ccd      	adds	r5, r1, #3
 8018d92:	f025 0503 	bic.w	r5, r5, #3
 8018d96:	3508      	adds	r5, #8
 8018d98:	2d0c      	cmp	r5, #12
 8018d9a:	bf38      	it	cc
 8018d9c:	250c      	movcc	r5, #12
 8018d9e:	2d00      	cmp	r5, #0
 8018da0:	4607      	mov	r7, r0
 8018da2:	db01      	blt.n	8018da8 <_malloc_r+0x1c>
 8018da4:	42a9      	cmp	r1, r5
 8018da6:	d905      	bls.n	8018db4 <_malloc_r+0x28>
 8018da8:	230c      	movs	r3, #12
 8018daa:	603b      	str	r3, [r7, #0]
 8018dac:	2600      	movs	r6, #0
 8018dae:	4630      	mov	r0, r6
 8018db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018db4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8018e88 <_malloc_r+0xfc>
 8018db8:	f000 f868 	bl	8018e8c <__malloc_lock>
 8018dbc:	f8d8 3000 	ldr.w	r3, [r8]
 8018dc0:	461c      	mov	r4, r3
 8018dc2:	bb5c      	cbnz	r4, 8018e1c <_malloc_r+0x90>
 8018dc4:	4629      	mov	r1, r5
 8018dc6:	4638      	mov	r0, r7
 8018dc8:	f7ff ffc0 	bl	8018d4c <sbrk_aligned>
 8018dcc:	1c43      	adds	r3, r0, #1
 8018dce:	4604      	mov	r4, r0
 8018dd0:	d155      	bne.n	8018e7e <_malloc_r+0xf2>
 8018dd2:	f8d8 4000 	ldr.w	r4, [r8]
 8018dd6:	4626      	mov	r6, r4
 8018dd8:	2e00      	cmp	r6, #0
 8018dda:	d145      	bne.n	8018e68 <_malloc_r+0xdc>
 8018ddc:	2c00      	cmp	r4, #0
 8018dde:	d048      	beq.n	8018e72 <_malloc_r+0xe6>
 8018de0:	6823      	ldr	r3, [r4, #0]
 8018de2:	4631      	mov	r1, r6
 8018de4:	4638      	mov	r0, r7
 8018de6:	eb04 0903 	add.w	r9, r4, r3
 8018dea:	f000 fc85 	bl	80196f8 <_sbrk_r>
 8018dee:	4581      	cmp	r9, r0
 8018df0:	d13f      	bne.n	8018e72 <_malloc_r+0xe6>
 8018df2:	6821      	ldr	r1, [r4, #0]
 8018df4:	1a6d      	subs	r5, r5, r1
 8018df6:	4629      	mov	r1, r5
 8018df8:	4638      	mov	r0, r7
 8018dfa:	f7ff ffa7 	bl	8018d4c <sbrk_aligned>
 8018dfe:	3001      	adds	r0, #1
 8018e00:	d037      	beq.n	8018e72 <_malloc_r+0xe6>
 8018e02:	6823      	ldr	r3, [r4, #0]
 8018e04:	442b      	add	r3, r5
 8018e06:	6023      	str	r3, [r4, #0]
 8018e08:	f8d8 3000 	ldr.w	r3, [r8]
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d038      	beq.n	8018e82 <_malloc_r+0xf6>
 8018e10:	685a      	ldr	r2, [r3, #4]
 8018e12:	42a2      	cmp	r2, r4
 8018e14:	d12b      	bne.n	8018e6e <_malloc_r+0xe2>
 8018e16:	2200      	movs	r2, #0
 8018e18:	605a      	str	r2, [r3, #4]
 8018e1a:	e00f      	b.n	8018e3c <_malloc_r+0xb0>
 8018e1c:	6822      	ldr	r2, [r4, #0]
 8018e1e:	1b52      	subs	r2, r2, r5
 8018e20:	d41f      	bmi.n	8018e62 <_malloc_r+0xd6>
 8018e22:	2a0b      	cmp	r2, #11
 8018e24:	d917      	bls.n	8018e56 <_malloc_r+0xca>
 8018e26:	1961      	adds	r1, r4, r5
 8018e28:	42a3      	cmp	r3, r4
 8018e2a:	6025      	str	r5, [r4, #0]
 8018e2c:	bf18      	it	ne
 8018e2e:	6059      	strne	r1, [r3, #4]
 8018e30:	6863      	ldr	r3, [r4, #4]
 8018e32:	bf08      	it	eq
 8018e34:	f8c8 1000 	streq.w	r1, [r8]
 8018e38:	5162      	str	r2, [r4, r5]
 8018e3a:	604b      	str	r3, [r1, #4]
 8018e3c:	4638      	mov	r0, r7
 8018e3e:	f104 060b 	add.w	r6, r4, #11
 8018e42:	f000 f829 	bl	8018e98 <__malloc_unlock>
 8018e46:	f026 0607 	bic.w	r6, r6, #7
 8018e4a:	1d23      	adds	r3, r4, #4
 8018e4c:	1af2      	subs	r2, r6, r3
 8018e4e:	d0ae      	beq.n	8018dae <_malloc_r+0x22>
 8018e50:	1b9b      	subs	r3, r3, r6
 8018e52:	50a3      	str	r3, [r4, r2]
 8018e54:	e7ab      	b.n	8018dae <_malloc_r+0x22>
 8018e56:	42a3      	cmp	r3, r4
 8018e58:	6862      	ldr	r2, [r4, #4]
 8018e5a:	d1dd      	bne.n	8018e18 <_malloc_r+0x8c>
 8018e5c:	f8c8 2000 	str.w	r2, [r8]
 8018e60:	e7ec      	b.n	8018e3c <_malloc_r+0xb0>
 8018e62:	4623      	mov	r3, r4
 8018e64:	6864      	ldr	r4, [r4, #4]
 8018e66:	e7ac      	b.n	8018dc2 <_malloc_r+0x36>
 8018e68:	4634      	mov	r4, r6
 8018e6a:	6876      	ldr	r6, [r6, #4]
 8018e6c:	e7b4      	b.n	8018dd8 <_malloc_r+0x4c>
 8018e6e:	4613      	mov	r3, r2
 8018e70:	e7cc      	b.n	8018e0c <_malloc_r+0x80>
 8018e72:	230c      	movs	r3, #12
 8018e74:	603b      	str	r3, [r7, #0]
 8018e76:	4638      	mov	r0, r7
 8018e78:	f000 f80e 	bl	8018e98 <__malloc_unlock>
 8018e7c:	e797      	b.n	8018dae <_malloc_r+0x22>
 8018e7e:	6025      	str	r5, [r4, #0]
 8018e80:	e7dc      	b.n	8018e3c <_malloc_r+0xb0>
 8018e82:	605b      	str	r3, [r3, #4]
 8018e84:	deff      	udf	#255	; 0xff
 8018e86:	bf00      	nop
 8018e88:	200110d8 	.word	0x200110d8

08018e8c <__malloc_lock>:
 8018e8c:	4801      	ldr	r0, [pc, #4]	; (8018e94 <__malloc_lock+0x8>)
 8018e8e:	f7ff bedb 	b.w	8018c48 <__retarget_lock_acquire_recursive>
 8018e92:	bf00      	nop
 8018e94:	200110d4 	.word	0x200110d4

08018e98 <__malloc_unlock>:
 8018e98:	4801      	ldr	r0, [pc, #4]	; (8018ea0 <__malloc_unlock+0x8>)
 8018e9a:	f7ff bed6 	b.w	8018c4a <__retarget_lock_release_recursive>
 8018e9e:	bf00      	nop
 8018ea0:	200110d4 	.word	0x200110d4

08018ea4 <__sfputc_r>:
 8018ea4:	6893      	ldr	r3, [r2, #8]
 8018ea6:	3b01      	subs	r3, #1
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	b410      	push	{r4}
 8018eac:	6093      	str	r3, [r2, #8]
 8018eae:	da08      	bge.n	8018ec2 <__sfputc_r+0x1e>
 8018eb0:	6994      	ldr	r4, [r2, #24]
 8018eb2:	42a3      	cmp	r3, r4
 8018eb4:	db01      	blt.n	8018eba <__sfputc_r+0x16>
 8018eb6:	290a      	cmp	r1, #10
 8018eb8:	d103      	bne.n	8018ec2 <__sfputc_r+0x1e>
 8018eba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ebe:	f000 bb85 	b.w	80195cc <__swbuf_r>
 8018ec2:	6813      	ldr	r3, [r2, #0]
 8018ec4:	1c58      	adds	r0, r3, #1
 8018ec6:	6010      	str	r0, [r2, #0]
 8018ec8:	7019      	strb	r1, [r3, #0]
 8018eca:	4608      	mov	r0, r1
 8018ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ed0:	4770      	bx	lr

08018ed2 <__sfputs_r>:
 8018ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ed4:	4606      	mov	r6, r0
 8018ed6:	460f      	mov	r7, r1
 8018ed8:	4614      	mov	r4, r2
 8018eda:	18d5      	adds	r5, r2, r3
 8018edc:	42ac      	cmp	r4, r5
 8018ede:	d101      	bne.n	8018ee4 <__sfputs_r+0x12>
 8018ee0:	2000      	movs	r0, #0
 8018ee2:	e007      	b.n	8018ef4 <__sfputs_r+0x22>
 8018ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ee8:	463a      	mov	r2, r7
 8018eea:	4630      	mov	r0, r6
 8018eec:	f7ff ffda 	bl	8018ea4 <__sfputc_r>
 8018ef0:	1c43      	adds	r3, r0, #1
 8018ef2:	d1f3      	bne.n	8018edc <__sfputs_r+0xa>
 8018ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018ef8 <_vfiprintf_r>:
 8018ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018efc:	460d      	mov	r5, r1
 8018efe:	b09d      	sub	sp, #116	; 0x74
 8018f00:	4614      	mov	r4, r2
 8018f02:	4698      	mov	r8, r3
 8018f04:	4606      	mov	r6, r0
 8018f06:	b118      	cbz	r0, 8018f10 <_vfiprintf_r+0x18>
 8018f08:	6a03      	ldr	r3, [r0, #32]
 8018f0a:	b90b      	cbnz	r3, 8018f10 <_vfiprintf_r+0x18>
 8018f0c:	f7ff fd1a 	bl	8018944 <__sinit>
 8018f10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018f12:	07d9      	lsls	r1, r3, #31
 8018f14:	d405      	bmi.n	8018f22 <_vfiprintf_r+0x2a>
 8018f16:	89ab      	ldrh	r3, [r5, #12]
 8018f18:	059a      	lsls	r2, r3, #22
 8018f1a:	d402      	bmi.n	8018f22 <_vfiprintf_r+0x2a>
 8018f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018f1e:	f7ff fe93 	bl	8018c48 <__retarget_lock_acquire_recursive>
 8018f22:	89ab      	ldrh	r3, [r5, #12]
 8018f24:	071b      	lsls	r3, r3, #28
 8018f26:	d501      	bpl.n	8018f2c <_vfiprintf_r+0x34>
 8018f28:	692b      	ldr	r3, [r5, #16]
 8018f2a:	b99b      	cbnz	r3, 8018f54 <_vfiprintf_r+0x5c>
 8018f2c:	4629      	mov	r1, r5
 8018f2e:	4630      	mov	r0, r6
 8018f30:	f000 fb8a 	bl	8019648 <__swsetup_r>
 8018f34:	b170      	cbz	r0, 8018f54 <_vfiprintf_r+0x5c>
 8018f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018f38:	07dc      	lsls	r4, r3, #31
 8018f3a:	d504      	bpl.n	8018f46 <_vfiprintf_r+0x4e>
 8018f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8018f40:	b01d      	add	sp, #116	; 0x74
 8018f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f46:	89ab      	ldrh	r3, [r5, #12]
 8018f48:	0598      	lsls	r0, r3, #22
 8018f4a:	d4f7      	bmi.n	8018f3c <_vfiprintf_r+0x44>
 8018f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018f4e:	f7ff fe7c 	bl	8018c4a <__retarget_lock_release_recursive>
 8018f52:	e7f3      	b.n	8018f3c <_vfiprintf_r+0x44>
 8018f54:	2300      	movs	r3, #0
 8018f56:	9309      	str	r3, [sp, #36]	; 0x24
 8018f58:	2320      	movs	r3, #32
 8018f5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018f5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018f62:	2330      	movs	r3, #48	; 0x30
 8018f64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019118 <_vfiprintf_r+0x220>
 8018f68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018f6c:	f04f 0901 	mov.w	r9, #1
 8018f70:	4623      	mov	r3, r4
 8018f72:	469a      	mov	sl, r3
 8018f74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018f78:	b10a      	cbz	r2, 8018f7e <_vfiprintf_r+0x86>
 8018f7a:	2a25      	cmp	r2, #37	; 0x25
 8018f7c:	d1f9      	bne.n	8018f72 <_vfiprintf_r+0x7a>
 8018f7e:	ebba 0b04 	subs.w	fp, sl, r4
 8018f82:	d00b      	beq.n	8018f9c <_vfiprintf_r+0xa4>
 8018f84:	465b      	mov	r3, fp
 8018f86:	4622      	mov	r2, r4
 8018f88:	4629      	mov	r1, r5
 8018f8a:	4630      	mov	r0, r6
 8018f8c:	f7ff ffa1 	bl	8018ed2 <__sfputs_r>
 8018f90:	3001      	adds	r0, #1
 8018f92:	f000 80a9 	beq.w	80190e8 <_vfiprintf_r+0x1f0>
 8018f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018f98:	445a      	add	r2, fp
 8018f9a:	9209      	str	r2, [sp, #36]	; 0x24
 8018f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	f000 80a1 	beq.w	80190e8 <_vfiprintf_r+0x1f0>
 8018fa6:	2300      	movs	r3, #0
 8018fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8018fac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018fb0:	f10a 0a01 	add.w	sl, sl, #1
 8018fb4:	9304      	str	r3, [sp, #16]
 8018fb6:	9307      	str	r3, [sp, #28]
 8018fb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018fbc:	931a      	str	r3, [sp, #104]	; 0x68
 8018fbe:	4654      	mov	r4, sl
 8018fc0:	2205      	movs	r2, #5
 8018fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018fc6:	4854      	ldr	r0, [pc, #336]	; (8019118 <_vfiprintf_r+0x220>)
 8018fc8:	f7e7 f92a 	bl	8000220 <memchr>
 8018fcc:	9a04      	ldr	r2, [sp, #16]
 8018fce:	b9d8      	cbnz	r0, 8019008 <_vfiprintf_r+0x110>
 8018fd0:	06d1      	lsls	r1, r2, #27
 8018fd2:	bf44      	itt	mi
 8018fd4:	2320      	movmi	r3, #32
 8018fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018fda:	0713      	lsls	r3, r2, #28
 8018fdc:	bf44      	itt	mi
 8018fde:	232b      	movmi	r3, #43	; 0x2b
 8018fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8018fe8:	2b2a      	cmp	r3, #42	; 0x2a
 8018fea:	d015      	beq.n	8019018 <_vfiprintf_r+0x120>
 8018fec:	9a07      	ldr	r2, [sp, #28]
 8018fee:	4654      	mov	r4, sl
 8018ff0:	2000      	movs	r0, #0
 8018ff2:	f04f 0c0a 	mov.w	ip, #10
 8018ff6:	4621      	mov	r1, r4
 8018ff8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018ffc:	3b30      	subs	r3, #48	; 0x30
 8018ffe:	2b09      	cmp	r3, #9
 8019000:	d94d      	bls.n	801909e <_vfiprintf_r+0x1a6>
 8019002:	b1b0      	cbz	r0, 8019032 <_vfiprintf_r+0x13a>
 8019004:	9207      	str	r2, [sp, #28]
 8019006:	e014      	b.n	8019032 <_vfiprintf_r+0x13a>
 8019008:	eba0 0308 	sub.w	r3, r0, r8
 801900c:	fa09 f303 	lsl.w	r3, r9, r3
 8019010:	4313      	orrs	r3, r2
 8019012:	9304      	str	r3, [sp, #16]
 8019014:	46a2      	mov	sl, r4
 8019016:	e7d2      	b.n	8018fbe <_vfiprintf_r+0xc6>
 8019018:	9b03      	ldr	r3, [sp, #12]
 801901a:	1d19      	adds	r1, r3, #4
 801901c:	681b      	ldr	r3, [r3, #0]
 801901e:	9103      	str	r1, [sp, #12]
 8019020:	2b00      	cmp	r3, #0
 8019022:	bfbb      	ittet	lt
 8019024:	425b      	neglt	r3, r3
 8019026:	f042 0202 	orrlt.w	r2, r2, #2
 801902a:	9307      	strge	r3, [sp, #28]
 801902c:	9307      	strlt	r3, [sp, #28]
 801902e:	bfb8      	it	lt
 8019030:	9204      	strlt	r2, [sp, #16]
 8019032:	7823      	ldrb	r3, [r4, #0]
 8019034:	2b2e      	cmp	r3, #46	; 0x2e
 8019036:	d10c      	bne.n	8019052 <_vfiprintf_r+0x15a>
 8019038:	7863      	ldrb	r3, [r4, #1]
 801903a:	2b2a      	cmp	r3, #42	; 0x2a
 801903c:	d134      	bne.n	80190a8 <_vfiprintf_r+0x1b0>
 801903e:	9b03      	ldr	r3, [sp, #12]
 8019040:	1d1a      	adds	r2, r3, #4
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	9203      	str	r2, [sp, #12]
 8019046:	2b00      	cmp	r3, #0
 8019048:	bfb8      	it	lt
 801904a:	f04f 33ff 	movlt.w	r3, #4294967295
 801904e:	3402      	adds	r4, #2
 8019050:	9305      	str	r3, [sp, #20]
 8019052:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019128 <_vfiprintf_r+0x230>
 8019056:	7821      	ldrb	r1, [r4, #0]
 8019058:	2203      	movs	r2, #3
 801905a:	4650      	mov	r0, sl
 801905c:	f7e7 f8e0 	bl	8000220 <memchr>
 8019060:	b138      	cbz	r0, 8019072 <_vfiprintf_r+0x17a>
 8019062:	9b04      	ldr	r3, [sp, #16]
 8019064:	eba0 000a 	sub.w	r0, r0, sl
 8019068:	2240      	movs	r2, #64	; 0x40
 801906a:	4082      	lsls	r2, r0
 801906c:	4313      	orrs	r3, r2
 801906e:	3401      	adds	r4, #1
 8019070:	9304      	str	r3, [sp, #16]
 8019072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019076:	4829      	ldr	r0, [pc, #164]	; (801911c <_vfiprintf_r+0x224>)
 8019078:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801907c:	2206      	movs	r2, #6
 801907e:	f7e7 f8cf 	bl	8000220 <memchr>
 8019082:	2800      	cmp	r0, #0
 8019084:	d03f      	beq.n	8019106 <_vfiprintf_r+0x20e>
 8019086:	4b26      	ldr	r3, [pc, #152]	; (8019120 <_vfiprintf_r+0x228>)
 8019088:	bb1b      	cbnz	r3, 80190d2 <_vfiprintf_r+0x1da>
 801908a:	9b03      	ldr	r3, [sp, #12]
 801908c:	3307      	adds	r3, #7
 801908e:	f023 0307 	bic.w	r3, r3, #7
 8019092:	3308      	adds	r3, #8
 8019094:	9303      	str	r3, [sp, #12]
 8019096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019098:	443b      	add	r3, r7
 801909a:	9309      	str	r3, [sp, #36]	; 0x24
 801909c:	e768      	b.n	8018f70 <_vfiprintf_r+0x78>
 801909e:	fb0c 3202 	mla	r2, ip, r2, r3
 80190a2:	460c      	mov	r4, r1
 80190a4:	2001      	movs	r0, #1
 80190a6:	e7a6      	b.n	8018ff6 <_vfiprintf_r+0xfe>
 80190a8:	2300      	movs	r3, #0
 80190aa:	3401      	adds	r4, #1
 80190ac:	9305      	str	r3, [sp, #20]
 80190ae:	4619      	mov	r1, r3
 80190b0:	f04f 0c0a 	mov.w	ip, #10
 80190b4:	4620      	mov	r0, r4
 80190b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80190ba:	3a30      	subs	r2, #48	; 0x30
 80190bc:	2a09      	cmp	r2, #9
 80190be:	d903      	bls.n	80190c8 <_vfiprintf_r+0x1d0>
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d0c6      	beq.n	8019052 <_vfiprintf_r+0x15a>
 80190c4:	9105      	str	r1, [sp, #20]
 80190c6:	e7c4      	b.n	8019052 <_vfiprintf_r+0x15a>
 80190c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80190cc:	4604      	mov	r4, r0
 80190ce:	2301      	movs	r3, #1
 80190d0:	e7f0      	b.n	80190b4 <_vfiprintf_r+0x1bc>
 80190d2:	ab03      	add	r3, sp, #12
 80190d4:	9300      	str	r3, [sp, #0]
 80190d6:	462a      	mov	r2, r5
 80190d8:	4b12      	ldr	r3, [pc, #72]	; (8019124 <_vfiprintf_r+0x22c>)
 80190da:	a904      	add	r1, sp, #16
 80190dc:	4630      	mov	r0, r6
 80190de:	f3af 8000 	nop.w
 80190e2:	4607      	mov	r7, r0
 80190e4:	1c78      	adds	r0, r7, #1
 80190e6:	d1d6      	bne.n	8019096 <_vfiprintf_r+0x19e>
 80190e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80190ea:	07d9      	lsls	r1, r3, #31
 80190ec:	d405      	bmi.n	80190fa <_vfiprintf_r+0x202>
 80190ee:	89ab      	ldrh	r3, [r5, #12]
 80190f0:	059a      	lsls	r2, r3, #22
 80190f2:	d402      	bmi.n	80190fa <_vfiprintf_r+0x202>
 80190f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80190f6:	f7ff fda8 	bl	8018c4a <__retarget_lock_release_recursive>
 80190fa:	89ab      	ldrh	r3, [r5, #12]
 80190fc:	065b      	lsls	r3, r3, #25
 80190fe:	f53f af1d 	bmi.w	8018f3c <_vfiprintf_r+0x44>
 8019102:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019104:	e71c      	b.n	8018f40 <_vfiprintf_r+0x48>
 8019106:	ab03      	add	r3, sp, #12
 8019108:	9300      	str	r3, [sp, #0]
 801910a:	462a      	mov	r2, r5
 801910c:	4b05      	ldr	r3, [pc, #20]	; (8019124 <_vfiprintf_r+0x22c>)
 801910e:	a904      	add	r1, sp, #16
 8019110:	4630      	mov	r0, r6
 8019112:	f000 f879 	bl	8019208 <_printf_i>
 8019116:	e7e4      	b.n	80190e2 <_vfiprintf_r+0x1ea>
 8019118:	0802779f 	.word	0x0802779f
 801911c:	080277a9 	.word	0x080277a9
 8019120:	00000000 	.word	0x00000000
 8019124:	08018ed3 	.word	0x08018ed3
 8019128:	080277a5 	.word	0x080277a5

0801912c <_printf_common>:
 801912c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019130:	4616      	mov	r6, r2
 8019132:	4699      	mov	r9, r3
 8019134:	688a      	ldr	r2, [r1, #8]
 8019136:	690b      	ldr	r3, [r1, #16]
 8019138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801913c:	4293      	cmp	r3, r2
 801913e:	bfb8      	it	lt
 8019140:	4613      	movlt	r3, r2
 8019142:	6033      	str	r3, [r6, #0]
 8019144:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019148:	4607      	mov	r7, r0
 801914a:	460c      	mov	r4, r1
 801914c:	b10a      	cbz	r2, 8019152 <_printf_common+0x26>
 801914e:	3301      	adds	r3, #1
 8019150:	6033      	str	r3, [r6, #0]
 8019152:	6823      	ldr	r3, [r4, #0]
 8019154:	0699      	lsls	r1, r3, #26
 8019156:	bf42      	ittt	mi
 8019158:	6833      	ldrmi	r3, [r6, #0]
 801915a:	3302      	addmi	r3, #2
 801915c:	6033      	strmi	r3, [r6, #0]
 801915e:	6825      	ldr	r5, [r4, #0]
 8019160:	f015 0506 	ands.w	r5, r5, #6
 8019164:	d106      	bne.n	8019174 <_printf_common+0x48>
 8019166:	f104 0a19 	add.w	sl, r4, #25
 801916a:	68e3      	ldr	r3, [r4, #12]
 801916c:	6832      	ldr	r2, [r6, #0]
 801916e:	1a9b      	subs	r3, r3, r2
 8019170:	42ab      	cmp	r3, r5
 8019172:	dc26      	bgt.n	80191c2 <_printf_common+0x96>
 8019174:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019178:	1e13      	subs	r3, r2, #0
 801917a:	6822      	ldr	r2, [r4, #0]
 801917c:	bf18      	it	ne
 801917e:	2301      	movne	r3, #1
 8019180:	0692      	lsls	r2, r2, #26
 8019182:	d42b      	bmi.n	80191dc <_printf_common+0xb0>
 8019184:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019188:	4649      	mov	r1, r9
 801918a:	4638      	mov	r0, r7
 801918c:	47c0      	blx	r8
 801918e:	3001      	adds	r0, #1
 8019190:	d01e      	beq.n	80191d0 <_printf_common+0xa4>
 8019192:	6823      	ldr	r3, [r4, #0]
 8019194:	6922      	ldr	r2, [r4, #16]
 8019196:	f003 0306 	and.w	r3, r3, #6
 801919a:	2b04      	cmp	r3, #4
 801919c:	bf02      	ittt	eq
 801919e:	68e5      	ldreq	r5, [r4, #12]
 80191a0:	6833      	ldreq	r3, [r6, #0]
 80191a2:	1aed      	subeq	r5, r5, r3
 80191a4:	68a3      	ldr	r3, [r4, #8]
 80191a6:	bf0c      	ite	eq
 80191a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80191ac:	2500      	movne	r5, #0
 80191ae:	4293      	cmp	r3, r2
 80191b0:	bfc4      	itt	gt
 80191b2:	1a9b      	subgt	r3, r3, r2
 80191b4:	18ed      	addgt	r5, r5, r3
 80191b6:	2600      	movs	r6, #0
 80191b8:	341a      	adds	r4, #26
 80191ba:	42b5      	cmp	r5, r6
 80191bc:	d11a      	bne.n	80191f4 <_printf_common+0xc8>
 80191be:	2000      	movs	r0, #0
 80191c0:	e008      	b.n	80191d4 <_printf_common+0xa8>
 80191c2:	2301      	movs	r3, #1
 80191c4:	4652      	mov	r2, sl
 80191c6:	4649      	mov	r1, r9
 80191c8:	4638      	mov	r0, r7
 80191ca:	47c0      	blx	r8
 80191cc:	3001      	adds	r0, #1
 80191ce:	d103      	bne.n	80191d8 <_printf_common+0xac>
 80191d0:	f04f 30ff 	mov.w	r0, #4294967295
 80191d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191d8:	3501      	adds	r5, #1
 80191da:	e7c6      	b.n	801916a <_printf_common+0x3e>
 80191dc:	18e1      	adds	r1, r4, r3
 80191de:	1c5a      	adds	r2, r3, #1
 80191e0:	2030      	movs	r0, #48	; 0x30
 80191e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80191e6:	4422      	add	r2, r4
 80191e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80191ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80191f0:	3302      	adds	r3, #2
 80191f2:	e7c7      	b.n	8019184 <_printf_common+0x58>
 80191f4:	2301      	movs	r3, #1
 80191f6:	4622      	mov	r2, r4
 80191f8:	4649      	mov	r1, r9
 80191fa:	4638      	mov	r0, r7
 80191fc:	47c0      	blx	r8
 80191fe:	3001      	adds	r0, #1
 8019200:	d0e6      	beq.n	80191d0 <_printf_common+0xa4>
 8019202:	3601      	adds	r6, #1
 8019204:	e7d9      	b.n	80191ba <_printf_common+0x8e>
	...

08019208 <_printf_i>:
 8019208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801920c:	7e0f      	ldrb	r7, [r1, #24]
 801920e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019210:	2f78      	cmp	r7, #120	; 0x78
 8019212:	4691      	mov	r9, r2
 8019214:	4680      	mov	r8, r0
 8019216:	460c      	mov	r4, r1
 8019218:	469a      	mov	sl, r3
 801921a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801921e:	d807      	bhi.n	8019230 <_printf_i+0x28>
 8019220:	2f62      	cmp	r7, #98	; 0x62
 8019222:	d80a      	bhi.n	801923a <_printf_i+0x32>
 8019224:	2f00      	cmp	r7, #0
 8019226:	f000 80d4 	beq.w	80193d2 <_printf_i+0x1ca>
 801922a:	2f58      	cmp	r7, #88	; 0x58
 801922c:	f000 80c0 	beq.w	80193b0 <_printf_i+0x1a8>
 8019230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019234:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019238:	e03a      	b.n	80192b0 <_printf_i+0xa8>
 801923a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801923e:	2b15      	cmp	r3, #21
 8019240:	d8f6      	bhi.n	8019230 <_printf_i+0x28>
 8019242:	a101      	add	r1, pc, #4	; (adr r1, 8019248 <_printf_i+0x40>)
 8019244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019248:	080192a1 	.word	0x080192a1
 801924c:	080192b5 	.word	0x080192b5
 8019250:	08019231 	.word	0x08019231
 8019254:	08019231 	.word	0x08019231
 8019258:	08019231 	.word	0x08019231
 801925c:	08019231 	.word	0x08019231
 8019260:	080192b5 	.word	0x080192b5
 8019264:	08019231 	.word	0x08019231
 8019268:	08019231 	.word	0x08019231
 801926c:	08019231 	.word	0x08019231
 8019270:	08019231 	.word	0x08019231
 8019274:	080193b9 	.word	0x080193b9
 8019278:	080192e1 	.word	0x080192e1
 801927c:	08019373 	.word	0x08019373
 8019280:	08019231 	.word	0x08019231
 8019284:	08019231 	.word	0x08019231
 8019288:	080193db 	.word	0x080193db
 801928c:	08019231 	.word	0x08019231
 8019290:	080192e1 	.word	0x080192e1
 8019294:	08019231 	.word	0x08019231
 8019298:	08019231 	.word	0x08019231
 801929c:	0801937b 	.word	0x0801937b
 80192a0:	682b      	ldr	r3, [r5, #0]
 80192a2:	1d1a      	adds	r2, r3, #4
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	602a      	str	r2, [r5, #0]
 80192a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80192ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80192b0:	2301      	movs	r3, #1
 80192b2:	e09f      	b.n	80193f4 <_printf_i+0x1ec>
 80192b4:	6820      	ldr	r0, [r4, #0]
 80192b6:	682b      	ldr	r3, [r5, #0]
 80192b8:	0607      	lsls	r7, r0, #24
 80192ba:	f103 0104 	add.w	r1, r3, #4
 80192be:	6029      	str	r1, [r5, #0]
 80192c0:	d501      	bpl.n	80192c6 <_printf_i+0xbe>
 80192c2:	681e      	ldr	r6, [r3, #0]
 80192c4:	e003      	b.n	80192ce <_printf_i+0xc6>
 80192c6:	0646      	lsls	r6, r0, #25
 80192c8:	d5fb      	bpl.n	80192c2 <_printf_i+0xba>
 80192ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80192ce:	2e00      	cmp	r6, #0
 80192d0:	da03      	bge.n	80192da <_printf_i+0xd2>
 80192d2:	232d      	movs	r3, #45	; 0x2d
 80192d4:	4276      	negs	r6, r6
 80192d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80192da:	485a      	ldr	r0, [pc, #360]	; (8019444 <_printf_i+0x23c>)
 80192dc:	230a      	movs	r3, #10
 80192de:	e012      	b.n	8019306 <_printf_i+0xfe>
 80192e0:	682b      	ldr	r3, [r5, #0]
 80192e2:	6820      	ldr	r0, [r4, #0]
 80192e4:	1d19      	adds	r1, r3, #4
 80192e6:	6029      	str	r1, [r5, #0]
 80192e8:	0605      	lsls	r5, r0, #24
 80192ea:	d501      	bpl.n	80192f0 <_printf_i+0xe8>
 80192ec:	681e      	ldr	r6, [r3, #0]
 80192ee:	e002      	b.n	80192f6 <_printf_i+0xee>
 80192f0:	0641      	lsls	r1, r0, #25
 80192f2:	d5fb      	bpl.n	80192ec <_printf_i+0xe4>
 80192f4:	881e      	ldrh	r6, [r3, #0]
 80192f6:	4853      	ldr	r0, [pc, #332]	; (8019444 <_printf_i+0x23c>)
 80192f8:	2f6f      	cmp	r7, #111	; 0x6f
 80192fa:	bf0c      	ite	eq
 80192fc:	2308      	moveq	r3, #8
 80192fe:	230a      	movne	r3, #10
 8019300:	2100      	movs	r1, #0
 8019302:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019306:	6865      	ldr	r5, [r4, #4]
 8019308:	60a5      	str	r5, [r4, #8]
 801930a:	2d00      	cmp	r5, #0
 801930c:	bfa2      	ittt	ge
 801930e:	6821      	ldrge	r1, [r4, #0]
 8019310:	f021 0104 	bicge.w	r1, r1, #4
 8019314:	6021      	strge	r1, [r4, #0]
 8019316:	b90e      	cbnz	r6, 801931c <_printf_i+0x114>
 8019318:	2d00      	cmp	r5, #0
 801931a:	d04b      	beq.n	80193b4 <_printf_i+0x1ac>
 801931c:	4615      	mov	r5, r2
 801931e:	fbb6 f1f3 	udiv	r1, r6, r3
 8019322:	fb03 6711 	mls	r7, r3, r1, r6
 8019326:	5dc7      	ldrb	r7, [r0, r7]
 8019328:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801932c:	4637      	mov	r7, r6
 801932e:	42bb      	cmp	r3, r7
 8019330:	460e      	mov	r6, r1
 8019332:	d9f4      	bls.n	801931e <_printf_i+0x116>
 8019334:	2b08      	cmp	r3, #8
 8019336:	d10b      	bne.n	8019350 <_printf_i+0x148>
 8019338:	6823      	ldr	r3, [r4, #0]
 801933a:	07de      	lsls	r6, r3, #31
 801933c:	d508      	bpl.n	8019350 <_printf_i+0x148>
 801933e:	6923      	ldr	r3, [r4, #16]
 8019340:	6861      	ldr	r1, [r4, #4]
 8019342:	4299      	cmp	r1, r3
 8019344:	bfde      	ittt	le
 8019346:	2330      	movle	r3, #48	; 0x30
 8019348:	f805 3c01 	strble.w	r3, [r5, #-1]
 801934c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019350:	1b52      	subs	r2, r2, r5
 8019352:	6122      	str	r2, [r4, #16]
 8019354:	f8cd a000 	str.w	sl, [sp]
 8019358:	464b      	mov	r3, r9
 801935a:	aa03      	add	r2, sp, #12
 801935c:	4621      	mov	r1, r4
 801935e:	4640      	mov	r0, r8
 8019360:	f7ff fee4 	bl	801912c <_printf_common>
 8019364:	3001      	adds	r0, #1
 8019366:	d14a      	bne.n	80193fe <_printf_i+0x1f6>
 8019368:	f04f 30ff 	mov.w	r0, #4294967295
 801936c:	b004      	add	sp, #16
 801936e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019372:	6823      	ldr	r3, [r4, #0]
 8019374:	f043 0320 	orr.w	r3, r3, #32
 8019378:	6023      	str	r3, [r4, #0]
 801937a:	4833      	ldr	r0, [pc, #204]	; (8019448 <_printf_i+0x240>)
 801937c:	2778      	movs	r7, #120	; 0x78
 801937e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019382:	6823      	ldr	r3, [r4, #0]
 8019384:	6829      	ldr	r1, [r5, #0]
 8019386:	061f      	lsls	r7, r3, #24
 8019388:	f851 6b04 	ldr.w	r6, [r1], #4
 801938c:	d402      	bmi.n	8019394 <_printf_i+0x18c>
 801938e:	065f      	lsls	r7, r3, #25
 8019390:	bf48      	it	mi
 8019392:	b2b6      	uxthmi	r6, r6
 8019394:	07df      	lsls	r7, r3, #31
 8019396:	bf48      	it	mi
 8019398:	f043 0320 	orrmi.w	r3, r3, #32
 801939c:	6029      	str	r1, [r5, #0]
 801939e:	bf48      	it	mi
 80193a0:	6023      	strmi	r3, [r4, #0]
 80193a2:	b91e      	cbnz	r6, 80193ac <_printf_i+0x1a4>
 80193a4:	6823      	ldr	r3, [r4, #0]
 80193a6:	f023 0320 	bic.w	r3, r3, #32
 80193aa:	6023      	str	r3, [r4, #0]
 80193ac:	2310      	movs	r3, #16
 80193ae:	e7a7      	b.n	8019300 <_printf_i+0xf8>
 80193b0:	4824      	ldr	r0, [pc, #144]	; (8019444 <_printf_i+0x23c>)
 80193b2:	e7e4      	b.n	801937e <_printf_i+0x176>
 80193b4:	4615      	mov	r5, r2
 80193b6:	e7bd      	b.n	8019334 <_printf_i+0x12c>
 80193b8:	682b      	ldr	r3, [r5, #0]
 80193ba:	6826      	ldr	r6, [r4, #0]
 80193bc:	6961      	ldr	r1, [r4, #20]
 80193be:	1d18      	adds	r0, r3, #4
 80193c0:	6028      	str	r0, [r5, #0]
 80193c2:	0635      	lsls	r5, r6, #24
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	d501      	bpl.n	80193cc <_printf_i+0x1c4>
 80193c8:	6019      	str	r1, [r3, #0]
 80193ca:	e002      	b.n	80193d2 <_printf_i+0x1ca>
 80193cc:	0670      	lsls	r0, r6, #25
 80193ce:	d5fb      	bpl.n	80193c8 <_printf_i+0x1c0>
 80193d0:	8019      	strh	r1, [r3, #0]
 80193d2:	2300      	movs	r3, #0
 80193d4:	6123      	str	r3, [r4, #16]
 80193d6:	4615      	mov	r5, r2
 80193d8:	e7bc      	b.n	8019354 <_printf_i+0x14c>
 80193da:	682b      	ldr	r3, [r5, #0]
 80193dc:	1d1a      	adds	r2, r3, #4
 80193de:	602a      	str	r2, [r5, #0]
 80193e0:	681d      	ldr	r5, [r3, #0]
 80193e2:	6862      	ldr	r2, [r4, #4]
 80193e4:	2100      	movs	r1, #0
 80193e6:	4628      	mov	r0, r5
 80193e8:	f7e6 ff1a 	bl	8000220 <memchr>
 80193ec:	b108      	cbz	r0, 80193f2 <_printf_i+0x1ea>
 80193ee:	1b40      	subs	r0, r0, r5
 80193f0:	6060      	str	r0, [r4, #4]
 80193f2:	6863      	ldr	r3, [r4, #4]
 80193f4:	6123      	str	r3, [r4, #16]
 80193f6:	2300      	movs	r3, #0
 80193f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80193fc:	e7aa      	b.n	8019354 <_printf_i+0x14c>
 80193fe:	6923      	ldr	r3, [r4, #16]
 8019400:	462a      	mov	r2, r5
 8019402:	4649      	mov	r1, r9
 8019404:	4640      	mov	r0, r8
 8019406:	47d0      	blx	sl
 8019408:	3001      	adds	r0, #1
 801940a:	d0ad      	beq.n	8019368 <_printf_i+0x160>
 801940c:	6823      	ldr	r3, [r4, #0]
 801940e:	079b      	lsls	r3, r3, #30
 8019410:	d413      	bmi.n	801943a <_printf_i+0x232>
 8019412:	68e0      	ldr	r0, [r4, #12]
 8019414:	9b03      	ldr	r3, [sp, #12]
 8019416:	4298      	cmp	r0, r3
 8019418:	bfb8      	it	lt
 801941a:	4618      	movlt	r0, r3
 801941c:	e7a6      	b.n	801936c <_printf_i+0x164>
 801941e:	2301      	movs	r3, #1
 8019420:	4632      	mov	r2, r6
 8019422:	4649      	mov	r1, r9
 8019424:	4640      	mov	r0, r8
 8019426:	47d0      	blx	sl
 8019428:	3001      	adds	r0, #1
 801942a:	d09d      	beq.n	8019368 <_printf_i+0x160>
 801942c:	3501      	adds	r5, #1
 801942e:	68e3      	ldr	r3, [r4, #12]
 8019430:	9903      	ldr	r1, [sp, #12]
 8019432:	1a5b      	subs	r3, r3, r1
 8019434:	42ab      	cmp	r3, r5
 8019436:	dcf2      	bgt.n	801941e <_printf_i+0x216>
 8019438:	e7eb      	b.n	8019412 <_printf_i+0x20a>
 801943a:	2500      	movs	r5, #0
 801943c:	f104 0619 	add.w	r6, r4, #25
 8019440:	e7f5      	b.n	801942e <_printf_i+0x226>
 8019442:	bf00      	nop
 8019444:	080277b0 	.word	0x080277b0
 8019448:	080277c1 	.word	0x080277c1

0801944c <__sflush_r>:
 801944c:	898a      	ldrh	r2, [r1, #12]
 801944e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019452:	4605      	mov	r5, r0
 8019454:	0710      	lsls	r0, r2, #28
 8019456:	460c      	mov	r4, r1
 8019458:	d458      	bmi.n	801950c <__sflush_r+0xc0>
 801945a:	684b      	ldr	r3, [r1, #4]
 801945c:	2b00      	cmp	r3, #0
 801945e:	dc05      	bgt.n	801946c <__sflush_r+0x20>
 8019460:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019462:	2b00      	cmp	r3, #0
 8019464:	dc02      	bgt.n	801946c <__sflush_r+0x20>
 8019466:	2000      	movs	r0, #0
 8019468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801946c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801946e:	2e00      	cmp	r6, #0
 8019470:	d0f9      	beq.n	8019466 <__sflush_r+0x1a>
 8019472:	2300      	movs	r3, #0
 8019474:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019478:	682f      	ldr	r7, [r5, #0]
 801947a:	6a21      	ldr	r1, [r4, #32]
 801947c:	602b      	str	r3, [r5, #0]
 801947e:	d032      	beq.n	80194e6 <__sflush_r+0x9a>
 8019480:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019482:	89a3      	ldrh	r3, [r4, #12]
 8019484:	075a      	lsls	r2, r3, #29
 8019486:	d505      	bpl.n	8019494 <__sflush_r+0x48>
 8019488:	6863      	ldr	r3, [r4, #4]
 801948a:	1ac0      	subs	r0, r0, r3
 801948c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801948e:	b10b      	cbz	r3, 8019494 <__sflush_r+0x48>
 8019490:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019492:	1ac0      	subs	r0, r0, r3
 8019494:	2300      	movs	r3, #0
 8019496:	4602      	mov	r2, r0
 8019498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801949a:	6a21      	ldr	r1, [r4, #32]
 801949c:	4628      	mov	r0, r5
 801949e:	47b0      	blx	r6
 80194a0:	1c43      	adds	r3, r0, #1
 80194a2:	89a3      	ldrh	r3, [r4, #12]
 80194a4:	d106      	bne.n	80194b4 <__sflush_r+0x68>
 80194a6:	6829      	ldr	r1, [r5, #0]
 80194a8:	291d      	cmp	r1, #29
 80194aa:	d82b      	bhi.n	8019504 <__sflush_r+0xb8>
 80194ac:	4a29      	ldr	r2, [pc, #164]	; (8019554 <__sflush_r+0x108>)
 80194ae:	410a      	asrs	r2, r1
 80194b0:	07d6      	lsls	r6, r2, #31
 80194b2:	d427      	bmi.n	8019504 <__sflush_r+0xb8>
 80194b4:	2200      	movs	r2, #0
 80194b6:	6062      	str	r2, [r4, #4]
 80194b8:	04d9      	lsls	r1, r3, #19
 80194ba:	6922      	ldr	r2, [r4, #16]
 80194bc:	6022      	str	r2, [r4, #0]
 80194be:	d504      	bpl.n	80194ca <__sflush_r+0x7e>
 80194c0:	1c42      	adds	r2, r0, #1
 80194c2:	d101      	bne.n	80194c8 <__sflush_r+0x7c>
 80194c4:	682b      	ldr	r3, [r5, #0]
 80194c6:	b903      	cbnz	r3, 80194ca <__sflush_r+0x7e>
 80194c8:	6560      	str	r0, [r4, #84]	; 0x54
 80194ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80194cc:	602f      	str	r7, [r5, #0]
 80194ce:	2900      	cmp	r1, #0
 80194d0:	d0c9      	beq.n	8019466 <__sflush_r+0x1a>
 80194d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80194d6:	4299      	cmp	r1, r3
 80194d8:	d002      	beq.n	80194e0 <__sflush_r+0x94>
 80194da:	4628      	mov	r0, r5
 80194dc:	f7ff fbe2 	bl	8018ca4 <_free_r>
 80194e0:	2000      	movs	r0, #0
 80194e2:	6360      	str	r0, [r4, #52]	; 0x34
 80194e4:	e7c0      	b.n	8019468 <__sflush_r+0x1c>
 80194e6:	2301      	movs	r3, #1
 80194e8:	4628      	mov	r0, r5
 80194ea:	47b0      	blx	r6
 80194ec:	1c41      	adds	r1, r0, #1
 80194ee:	d1c8      	bne.n	8019482 <__sflush_r+0x36>
 80194f0:	682b      	ldr	r3, [r5, #0]
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d0c5      	beq.n	8019482 <__sflush_r+0x36>
 80194f6:	2b1d      	cmp	r3, #29
 80194f8:	d001      	beq.n	80194fe <__sflush_r+0xb2>
 80194fa:	2b16      	cmp	r3, #22
 80194fc:	d101      	bne.n	8019502 <__sflush_r+0xb6>
 80194fe:	602f      	str	r7, [r5, #0]
 8019500:	e7b1      	b.n	8019466 <__sflush_r+0x1a>
 8019502:	89a3      	ldrh	r3, [r4, #12]
 8019504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019508:	81a3      	strh	r3, [r4, #12]
 801950a:	e7ad      	b.n	8019468 <__sflush_r+0x1c>
 801950c:	690f      	ldr	r7, [r1, #16]
 801950e:	2f00      	cmp	r7, #0
 8019510:	d0a9      	beq.n	8019466 <__sflush_r+0x1a>
 8019512:	0793      	lsls	r3, r2, #30
 8019514:	680e      	ldr	r6, [r1, #0]
 8019516:	bf08      	it	eq
 8019518:	694b      	ldreq	r3, [r1, #20]
 801951a:	600f      	str	r7, [r1, #0]
 801951c:	bf18      	it	ne
 801951e:	2300      	movne	r3, #0
 8019520:	eba6 0807 	sub.w	r8, r6, r7
 8019524:	608b      	str	r3, [r1, #8]
 8019526:	f1b8 0f00 	cmp.w	r8, #0
 801952a:	dd9c      	ble.n	8019466 <__sflush_r+0x1a>
 801952c:	6a21      	ldr	r1, [r4, #32]
 801952e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019530:	4643      	mov	r3, r8
 8019532:	463a      	mov	r2, r7
 8019534:	4628      	mov	r0, r5
 8019536:	47b0      	blx	r6
 8019538:	2800      	cmp	r0, #0
 801953a:	dc06      	bgt.n	801954a <__sflush_r+0xfe>
 801953c:	89a3      	ldrh	r3, [r4, #12]
 801953e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019542:	81a3      	strh	r3, [r4, #12]
 8019544:	f04f 30ff 	mov.w	r0, #4294967295
 8019548:	e78e      	b.n	8019468 <__sflush_r+0x1c>
 801954a:	4407      	add	r7, r0
 801954c:	eba8 0800 	sub.w	r8, r8, r0
 8019550:	e7e9      	b.n	8019526 <__sflush_r+0xda>
 8019552:	bf00      	nop
 8019554:	dfbffffe 	.word	0xdfbffffe

08019558 <_fflush_r>:
 8019558:	b538      	push	{r3, r4, r5, lr}
 801955a:	690b      	ldr	r3, [r1, #16]
 801955c:	4605      	mov	r5, r0
 801955e:	460c      	mov	r4, r1
 8019560:	b913      	cbnz	r3, 8019568 <_fflush_r+0x10>
 8019562:	2500      	movs	r5, #0
 8019564:	4628      	mov	r0, r5
 8019566:	bd38      	pop	{r3, r4, r5, pc}
 8019568:	b118      	cbz	r0, 8019572 <_fflush_r+0x1a>
 801956a:	6a03      	ldr	r3, [r0, #32]
 801956c:	b90b      	cbnz	r3, 8019572 <_fflush_r+0x1a>
 801956e:	f7ff f9e9 	bl	8018944 <__sinit>
 8019572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019576:	2b00      	cmp	r3, #0
 8019578:	d0f3      	beq.n	8019562 <_fflush_r+0xa>
 801957a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801957c:	07d0      	lsls	r0, r2, #31
 801957e:	d404      	bmi.n	801958a <_fflush_r+0x32>
 8019580:	0599      	lsls	r1, r3, #22
 8019582:	d402      	bmi.n	801958a <_fflush_r+0x32>
 8019584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019586:	f7ff fb5f 	bl	8018c48 <__retarget_lock_acquire_recursive>
 801958a:	4628      	mov	r0, r5
 801958c:	4621      	mov	r1, r4
 801958e:	f7ff ff5d 	bl	801944c <__sflush_r>
 8019592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019594:	07da      	lsls	r2, r3, #31
 8019596:	4605      	mov	r5, r0
 8019598:	d4e4      	bmi.n	8019564 <_fflush_r+0xc>
 801959a:	89a3      	ldrh	r3, [r4, #12]
 801959c:	059b      	lsls	r3, r3, #22
 801959e:	d4e1      	bmi.n	8019564 <_fflush_r+0xc>
 80195a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80195a2:	f7ff fb52 	bl	8018c4a <__retarget_lock_release_recursive>
 80195a6:	e7dd      	b.n	8019564 <_fflush_r+0xc>

080195a8 <fiprintf>:
 80195a8:	b40e      	push	{r1, r2, r3}
 80195aa:	b503      	push	{r0, r1, lr}
 80195ac:	4601      	mov	r1, r0
 80195ae:	ab03      	add	r3, sp, #12
 80195b0:	4805      	ldr	r0, [pc, #20]	; (80195c8 <fiprintf+0x20>)
 80195b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80195b6:	6800      	ldr	r0, [r0, #0]
 80195b8:	9301      	str	r3, [sp, #4]
 80195ba:	f7ff fc9d 	bl	8018ef8 <_vfiprintf_r>
 80195be:	b002      	add	sp, #8
 80195c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80195c4:	b003      	add	sp, #12
 80195c6:	4770      	bx	lr
 80195c8:	2000008c 	.word	0x2000008c

080195cc <__swbuf_r>:
 80195cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195ce:	460e      	mov	r6, r1
 80195d0:	4614      	mov	r4, r2
 80195d2:	4605      	mov	r5, r0
 80195d4:	b118      	cbz	r0, 80195de <__swbuf_r+0x12>
 80195d6:	6a03      	ldr	r3, [r0, #32]
 80195d8:	b90b      	cbnz	r3, 80195de <__swbuf_r+0x12>
 80195da:	f7ff f9b3 	bl	8018944 <__sinit>
 80195de:	69a3      	ldr	r3, [r4, #24]
 80195e0:	60a3      	str	r3, [r4, #8]
 80195e2:	89a3      	ldrh	r3, [r4, #12]
 80195e4:	071a      	lsls	r2, r3, #28
 80195e6:	d525      	bpl.n	8019634 <__swbuf_r+0x68>
 80195e8:	6923      	ldr	r3, [r4, #16]
 80195ea:	b31b      	cbz	r3, 8019634 <__swbuf_r+0x68>
 80195ec:	6823      	ldr	r3, [r4, #0]
 80195ee:	6922      	ldr	r2, [r4, #16]
 80195f0:	1a98      	subs	r0, r3, r2
 80195f2:	6963      	ldr	r3, [r4, #20]
 80195f4:	b2f6      	uxtb	r6, r6
 80195f6:	4283      	cmp	r3, r0
 80195f8:	4637      	mov	r7, r6
 80195fa:	dc04      	bgt.n	8019606 <__swbuf_r+0x3a>
 80195fc:	4621      	mov	r1, r4
 80195fe:	4628      	mov	r0, r5
 8019600:	f7ff ffaa 	bl	8019558 <_fflush_r>
 8019604:	b9e0      	cbnz	r0, 8019640 <__swbuf_r+0x74>
 8019606:	68a3      	ldr	r3, [r4, #8]
 8019608:	3b01      	subs	r3, #1
 801960a:	60a3      	str	r3, [r4, #8]
 801960c:	6823      	ldr	r3, [r4, #0]
 801960e:	1c5a      	adds	r2, r3, #1
 8019610:	6022      	str	r2, [r4, #0]
 8019612:	701e      	strb	r6, [r3, #0]
 8019614:	6962      	ldr	r2, [r4, #20]
 8019616:	1c43      	adds	r3, r0, #1
 8019618:	429a      	cmp	r2, r3
 801961a:	d004      	beq.n	8019626 <__swbuf_r+0x5a>
 801961c:	89a3      	ldrh	r3, [r4, #12]
 801961e:	07db      	lsls	r3, r3, #31
 8019620:	d506      	bpl.n	8019630 <__swbuf_r+0x64>
 8019622:	2e0a      	cmp	r6, #10
 8019624:	d104      	bne.n	8019630 <__swbuf_r+0x64>
 8019626:	4621      	mov	r1, r4
 8019628:	4628      	mov	r0, r5
 801962a:	f7ff ff95 	bl	8019558 <_fflush_r>
 801962e:	b938      	cbnz	r0, 8019640 <__swbuf_r+0x74>
 8019630:	4638      	mov	r0, r7
 8019632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019634:	4621      	mov	r1, r4
 8019636:	4628      	mov	r0, r5
 8019638:	f000 f806 	bl	8019648 <__swsetup_r>
 801963c:	2800      	cmp	r0, #0
 801963e:	d0d5      	beq.n	80195ec <__swbuf_r+0x20>
 8019640:	f04f 37ff 	mov.w	r7, #4294967295
 8019644:	e7f4      	b.n	8019630 <__swbuf_r+0x64>
	...

08019648 <__swsetup_r>:
 8019648:	b538      	push	{r3, r4, r5, lr}
 801964a:	4b2a      	ldr	r3, [pc, #168]	; (80196f4 <__swsetup_r+0xac>)
 801964c:	4605      	mov	r5, r0
 801964e:	6818      	ldr	r0, [r3, #0]
 8019650:	460c      	mov	r4, r1
 8019652:	b118      	cbz	r0, 801965c <__swsetup_r+0x14>
 8019654:	6a03      	ldr	r3, [r0, #32]
 8019656:	b90b      	cbnz	r3, 801965c <__swsetup_r+0x14>
 8019658:	f7ff f974 	bl	8018944 <__sinit>
 801965c:	89a3      	ldrh	r3, [r4, #12]
 801965e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019662:	0718      	lsls	r0, r3, #28
 8019664:	d422      	bmi.n	80196ac <__swsetup_r+0x64>
 8019666:	06d9      	lsls	r1, r3, #27
 8019668:	d407      	bmi.n	801967a <__swsetup_r+0x32>
 801966a:	2309      	movs	r3, #9
 801966c:	602b      	str	r3, [r5, #0]
 801966e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019672:	81a3      	strh	r3, [r4, #12]
 8019674:	f04f 30ff 	mov.w	r0, #4294967295
 8019678:	e034      	b.n	80196e4 <__swsetup_r+0x9c>
 801967a:	0758      	lsls	r0, r3, #29
 801967c:	d512      	bpl.n	80196a4 <__swsetup_r+0x5c>
 801967e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019680:	b141      	cbz	r1, 8019694 <__swsetup_r+0x4c>
 8019682:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019686:	4299      	cmp	r1, r3
 8019688:	d002      	beq.n	8019690 <__swsetup_r+0x48>
 801968a:	4628      	mov	r0, r5
 801968c:	f7ff fb0a 	bl	8018ca4 <_free_r>
 8019690:	2300      	movs	r3, #0
 8019692:	6363      	str	r3, [r4, #52]	; 0x34
 8019694:	89a3      	ldrh	r3, [r4, #12]
 8019696:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801969a:	81a3      	strh	r3, [r4, #12]
 801969c:	2300      	movs	r3, #0
 801969e:	6063      	str	r3, [r4, #4]
 80196a0:	6923      	ldr	r3, [r4, #16]
 80196a2:	6023      	str	r3, [r4, #0]
 80196a4:	89a3      	ldrh	r3, [r4, #12]
 80196a6:	f043 0308 	orr.w	r3, r3, #8
 80196aa:	81a3      	strh	r3, [r4, #12]
 80196ac:	6923      	ldr	r3, [r4, #16]
 80196ae:	b94b      	cbnz	r3, 80196c4 <__swsetup_r+0x7c>
 80196b0:	89a3      	ldrh	r3, [r4, #12]
 80196b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80196b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80196ba:	d003      	beq.n	80196c4 <__swsetup_r+0x7c>
 80196bc:	4621      	mov	r1, r4
 80196be:	4628      	mov	r0, r5
 80196c0:	f000 f857 	bl	8019772 <__smakebuf_r>
 80196c4:	89a0      	ldrh	r0, [r4, #12]
 80196c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80196ca:	f010 0301 	ands.w	r3, r0, #1
 80196ce:	d00a      	beq.n	80196e6 <__swsetup_r+0x9e>
 80196d0:	2300      	movs	r3, #0
 80196d2:	60a3      	str	r3, [r4, #8]
 80196d4:	6963      	ldr	r3, [r4, #20]
 80196d6:	425b      	negs	r3, r3
 80196d8:	61a3      	str	r3, [r4, #24]
 80196da:	6923      	ldr	r3, [r4, #16]
 80196dc:	b943      	cbnz	r3, 80196f0 <__swsetup_r+0xa8>
 80196de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80196e2:	d1c4      	bne.n	801966e <__swsetup_r+0x26>
 80196e4:	bd38      	pop	{r3, r4, r5, pc}
 80196e6:	0781      	lsls	r1, r0, #30
 80196e8:	bf58      	it	pl
 80196ea:	6963      	ldrpl	r3, [r4, #20]
 80196ec:	60a3      	str	r3, [r4, #8]
 80196ee:	e7f4      	b.n	80196da <__swsetup_r+0x92>
 80196f0:	2000      	movs	r0, #0
 80196f2:	e7f7      	b.n	80196e4 <__swsetup_r+0x9c>
 80196f4:	2000008c 	.word	0x2000008c

080196f8 <_sbrk_r>:
 80196f8:	b538      	push	{r3, r4, r5, lr}
 80196fa:	4d06      	ldr	r5, [pc, #24]	; (8019714 <_sbrk_r+0x1c>)
 80196fc:	2300      	movs	r3, #0
 80196fe:	4604      	mov	r4, r0
 8019700:	4608      	mov	r0, r1
 8019702:	602b      	str	r3, [r5, #0]
 8019704:	f7e7 fbae 	bl	8000e64 <_sbrk>
 8019708:	1c43      	adds	r3, r0, #1
 801970a:	d102      	bne.n	8019712 <_sbrk_r+0x1a>
 801970c:	682b      	ldr	r3, [r5, #0]
 801970e:	b103      	cbz	r3, 8019712 <_sbrk_r+0x1a>
 8019710:	6023      	str	r3, [r4, #0]
 8019712:	bd38      	pop	{r3, r4, r5, pc}
 8019714:	200110d0 	.word	0x200110d0

08019718 <abort>:
 8019718:	b508      	push	{r3, lr}
 801971a:	2006      	movs	r0, #6
 801971c:	f000 f88e 	bl	801983c <raise>
 8019720:	2001      	movs	r0, #1
 8019722:	f7e7 fb27 	bl	8000d74 <_exit>

08019726 <__swhatbuf_r>:
 8019726:	b570      	push	{r4, r5, r6, lr}
 8019728:	460c      	mov	r4, r1
 801972a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801972e:	2900      	cmp	r1, #0
 8019730:	b096      	sub	sp, #88	; 0x58
 8019732:	4615      	mov	r5, r2
 8019734:	461e      	mov	r6, r3
 8019736:	da0d      	bge.n	8019754 <__swhatbuf_r+0x2e>
 8019738:	89a3      	ldrh	r3, [r4, #12]
 801973a:	f013 0f80 	tst.w	r3, #128	; 0x80
 801973e:	f04f 0100 	mov.w	r1, #0
 8019742:	bf0c      	ite	eq
 8019744:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8019748:	2340      	movne	r3, #64	; 0x40
 801974a:	2000      	movs	r0, #0
 801974c:	6031      	str	r1, [r6, #0]
 801974e:	602b      	str	r3, [r5, #0]
 8019750:	b016      	add	sp, #88	; 0x58
 8019752:	bd70      	pop	{r4, r5, r6, pc}
 8019754:	466a      	mov	r2, sp
 8019756:	f000 f879 	bl	801984c <_fstat_r>
 801975a:	2800      	cmp	r0, #0
 801975c:	dbec      	blt.n	8019738 <__swhatbuf_r+0x12>
 801975e:	9901      	ldr	r1, [sp, #4]
 8019760:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019764:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8019768:	4259      	negs	r1, r3
 801976a:	4159      	adcs	r1, r3
 801976c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019770:	e7eb      	b.n	801974a <__swhatbuf_r+0x24>

08019772 <__smakebuf_r>:
 8019772:	898b      	ldrh	r3, [r1, #12]
 8019774:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019776:	079d      	lsls	r5, r3, #30
 8019778:	4606      	mov	r6, r0
 801977a:	460c      	mov	r4, r1
 801977c:	d507      	bpl.n	801978e <__smakebuf_r+0x1c>
 801977e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019782:	6023      	str	r3, [r4, #0]
 8019784:	6123      	str	r3, [r4, #16]
 8019786:	2301      	movs	r3, #1
 8019788:	6163      	str	r3, [r4, #20]
 801978a:	b002      	add	sp, #8
 801978c:	bd70      	pop	{r4, r5, r6, pc}
 801978e:	ab01      	add	r3, sp, #4
 8019790:	466a      	mov	r2, sp
 8019792:	f7ff ffc8 	bl	8019726 <__swhatbuf_r>
 8019796:	9900      	ldr	r1, [sp, #0]
 8019798:	4605      	mov	r5, r0
 801979a:	4630      	mov	r0, r6
 801979c:	f7ff faf6 	bl	8018d8c <_malloc_r>
 80197a0:	b948      	cbnz	r0, 80197b6 <__smakebuf_r+0x44>
 80197a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80197a6:	059a      	lsls	r2, r3, #22
 80197a8:	d4ef      	bmi.n	801978a <__smakebuf_r+0x18>
 80197aa:	f023 0303 	bic.w	r3, r3, #3
 80197ae:	f043 0302 	orr.w	r3, r3, #2
 80197b2:	81a3      	strh	r3, [r4, #12]
 80197b4:	e7e3      	b.n	801977e <__smakebuf_r+0xc>
 80197b6:	89a3      	ldrh	r3, [r4, #12]
 80197b8:	6020      	str	r0, [r4, #0]
 80197ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80197be:	81a3      	strh	r3, [r4, #12]
 80197c0:	9b00      	ldr	r3, [sp, #0]
 80197c2:	6163      	str	r3, [r4, #20]
 80197c4:	9b01      	ldr	r3, [sp, #4]
 80197c6:	6120      	str	r0, [r4, #16]
 80197c8:	b15b      	cbz	r3, 80197e2 <__smakebuf_r+0x70>
 80197ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80197ce:	4630      	mov	r0, r6
 80197d0:	f000 f84e 	bl	8019870 <_isatty_r>
 80197d4:	b128      	cbz	r0, 80197e2 <__smakebuf_r+0x70>
 80197d6:	89a3      	ldrh	r3, [r4, #12]
 80197d8:	f023 0303 	bic.w	r3, r3, #3
 80197dc:	f043 0301 	orr.w	r3, r3, #1
 80197e0:	81a3      	strh	r3, [r4, #12]
 80197e2:	89a3      	ldrh	r3, [r4, #12]
 80197e4:	431d      	orrs	r5, r3
 80197e6:	81a5      	strh	r5, [r4, #12]
 80197e8:	e7cf      	b.n	801978a <__smakebuf_r+0x18>

080197ea <_raise_r>:
 80197ea:	291f      	cmp	r1, #31
 80197ec:	b538      	push	{r3, r4, r5, lr}
 80197ee:	4604      	mov	r4, r0
 80197f0:	460d      	mov	r5, r1
 80197f2:	d904      	bls.n	80197fe <_raise_r+0x14>
 80197f4:	2316      	movs	r3, #22
 80197f6:	6003      	str	r3, [r0, #0]
 80197f8:	f04f 30ff 	mov.w	r0, #4294967295
 80197fc:	bd38      	pop	{r3, r4, r5, pc}
 80197fe:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019800:	b112      	cbz	r2, 8019808 <_raise_r+0x1e>
 8019802:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019806:	b94b      	cbnz	r3, 801981c <_raise_r+0x32>
 8019808:	4620      	mov	r0, r4
 801980a:	f000 f853 	bl	80198b4 <_getpid_r>
 801980e:	462a      	mov	r2, r5
 8019810:	4601      	mov	r1, r0
 8019812:	4620      	mov	r0, r4
 8019814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019818:	f000 b83a 	b.w	8019890 <_kill_r>
 801981c:	2b01      	cmp	r3, #1
 801981e:	d00a      	beq.n	8019836 <_raise_r+0x4c>
 8019820:	1c59      	adds	r1, r3, #1
 8019822:	d103      	bne.n	801982c <_raise_r+0x42>
 8019824:	2316      	movs	r3, #22
 8019826:	6003      	str	r3, [r0, #0]
 8019828:	2001      	movs	r0, #1
 801982a:	e7e7      	b.n	80197fc <_raise_r+0x12>
 801982c:	2400      	movs	r4, #0
 801982e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019832:	4628      	mov	r0, r5
 8019834:	4798      	blx	r3
 8019836:	2000      	movs	r0, #0
 8019838:	e7e0      	b.n	80197fc <_raise_r+0x12>
	...

0801983c <raise>:
 801983c:	4b02      	ldr	r3, [pc, #8]	; (8019848 <raise+0xc>)
 801983e:	4601      	mov	r1, r0
 8019840:	6818      	ldr	r0, [r3, #0]
 8019842:	f7ff bfd2 	b.w	80197ea <_raise_r>
 8019846:	bf00      	nop
 8019848:	2000008c 	.word	0x2000008c

0801984c <_fstat_r>:
 801984c:	b538      	push	{r3, r4, r5, lr}
 801984e:	4d07      	ldr	r5, [pc, #28]	; (801986c <_fstat_r+0x20>)
 8019850:	2300      	movs	r3, #0
 8019852:	4604      	mov	r4, r0
 8019854:	4608      	mov	r0, r1
 8019856:	4611      	mov	r1, r2
 8019858:	602b      	str	r3, [r5, #0]
 801985a:	f7e7 fada 	bl	8000e12 <_fstat>
 801985e:	1c43      	adds	r3, r0, #1
 8019860:	d102      	bne.n	8019868 <_fstat_r+0x1c>
 8019862:	682b      	ldr	r3, [r5, #0]
 8019864:	b103      	cbz	r3, 8019868 <_fstat_r+0x1c>
 8019866:	6023      	str	r3, [r4, #0]
 8019868:	bd38      	pop	{r3, r4, r5, pc}
 801986a:	bf00      	nop
 801986c:	200110d0 	.word	0x200110d0

08019870 <_isatty_r>:
 8019870:	b538      	push	{r3, r4, r5, lr}
 8019872:	4d06      	ldr	r5, [pc, #24]	; (801988c <_isatty_r+0x1c>)
 8019874:	2300      	movs	r3, #0
 8019876:	4604      	mov	r4, r0
 8019878:	4608      	mov	r0, r1
 801987a:	602b      	str	r3, [r5, #0]
 801987c:	f7e7 fad9 	bl	8000e32 <_isatty>
 8019880:	1c43      	adds	r3, r0, #1
 8019882:	d102      	bne.n	801988a <_isatty_r+0x1a>
 8019884:	682b      	ldr	r3, [r5, #0]
 8019886:	b103      	cbz	r3, 801988a <_isatty_r+0x1a>
 8019888:	6023      	str	r3, [r4, #0]
 801988a:	bd38      	pop	{r3, r4, r5, pc}
 801988c:	200110d0 	.word	0x200110d0

08019890 <_kill_r>:
 8019890:	b538      	push	{r3, r4, r5, lr}
 8019892:	4d07      	ldr	r5, [pc, #28]	; (80198b0 <_kill_r+0x20>)
 8019894:	2300      	movs	r3, #0
 8019896:	4604      	mov	r4, r0
 8019898:	4608      	mov	r0, r1
 801989a:	4611      	mov	r1, r2
 801989c:	602b      	str	r3, [r5, #0]
 801989e:	f7e7 fa57 	bl	8000d50 <_kill>
 80198a2:	1c43      	adds	r3, r0, #1
 80198a4:	d102      	bne.n	80198ac <_kill_r+0x1c>
 80198a6:	682b      	ldr	r3, [r5, #0]
 80198a8:	b103      	cbz	r3, 80198ac <_kill_r+0x1c>
 80198aa:	6023      	str	r3, [r4, #0]
 80198ac:	bd38      	pop	{r3, r4, r5, pc}
 80198ae:	bf00      	nop
 80198b0:	200110d0 	.word	0x200110d0

080198b4 <_getpid_r>:
 80198b4:	f7e7 ba44 	b.w	8000d40 <_getpid>

080198b8 <_init>:
 80198b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198ba:	bf00      	nop
 80198bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80198be:	bc08      	pop	{r3}
 80198c0:	469e      	mov	lr, r3
 80198c2:	4770      	bx	lr

080198c4 <_fini>:
 80198c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198c6:	bf00      	nop
 80198c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80198ca:	bc08      	pop	{r3}
 80198cc:	469e      	mov	lr, r3
 80198ce:	4770      	bx	lr
